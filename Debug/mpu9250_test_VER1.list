
mpu9250_test_VER1.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   0000010c  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         0000b7c4  08000110  08000110  00010110  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       000003c4  0800b8d8  0800b8d8  0001b8d8  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  0800bc9c  0800bc9c  00020200  2**0
                  CONTENTS
  4 .ARM          00000000  0800bc9c  0800bc9c  00020200  2**0
                  CONTENTS
  5 .preinit_array 00000000  0800bc9c  0800bc9c  00020200  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  0800bc9c  0800bc9c  0001bc9c  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  0800bca0  0800bca0  0001bca0  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         00000200  20000000  0800bca4  00020000  2**3
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          00000294  20000200  0800bea4  00020200  2**3
                  ALLOC
 10 ._user_heap_stack 00000604  20000494  0800bea4  00020494  2**0
                  ALLOC
 11 .ARM.attributes 00000029  00000000  00000000  00020200  2**0
                  CONTENTS, READONLY
 12 .debug_info   000107f8  00000000  00000000  00020229  2**0
                  CONTENTS, READONLY, DEBUGGING
 13 .debug_abbrev 000021b1  00000000  00000000  00030a21  2**0
                  CONTENTS, READONLY, DEBUGGING
 14 .debug_aranges 00001108  00000000  00000000  00032bd8  2**3
                  CONTENTS, READONLY, DEBUGGING
 15 .debug_ranges 00001028  00000000  00000000  00033ce0  2**3
                  CONTENTS, READONLY, DEBUGGING
 16 .debug_macro  00018bf3  00000000  00000000  00034d08  2**0
                  CONTENTS, READONLY, DEBUGGING
 17 .debug_line   0000d800  00000000  00000000  0004d8fb  2**0
                  CONTENTS, READONLY, DEBUGGING
 18 .debug_str    0008f4f8  00000000  00000000  0005b0fb  2**0
                  CONTENTS, READONLY, DEBUGGING
 19 .comment      0000007b  00000000  00000000  000ea5f3  2**0
                  CONTENTS, READONLY
 20 .debug_frame  000059e4  00000000  00000000  000ea670  2**2
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

08000110 <__do_global_dtors_aux>:
 8000110:	b510      	push	{r4, lr}
 8000112:	4c05      	ldr	r4, [pc, #20]	; (8000128 <__do_global_dtors_aux+0x18>)
 8000114:	7823      	ldrb	r3, [r4, #0]
 8000116:	b933      	cbnz	r3, 8000126 <__do_global_dtors_aux+0x16>
 8000118:	4b04      	ldr	r3, [pc, #16]	; (800012c <__do_global_dtors_aux+0x1c>)
 800011a:	b113      	cbz	r3, 8000122 <__do_global_dtors_aux+0x12>
 800011c:	4804      	ldr	r0, [pc, #16]	; (8000130 <__do_global_dtors_aux+0x20>)
 800011e:	f3af 8000 	nop.w
 8000122:	2301      	movs	r3, #1
 8000124:	7023      	strb	r3, [r4, #0]
 8000126:	bd10      	pop	{r4, pc}
 8000128:	20000200 	.word	0x20000200
 800012c:	00000000 	.word	0x00000000
 8000130:	0800b8bc 	.word	0x0800b8bc

08000134 <frame_dummy>:
 8000134:	b508      	push	{r3, lr}
 8000136:	4b03      	ldr	r3, [pc, #12]	; (8000144 <frame_dummy+0x10>)
 8000138:	b11b      	cbz	r3, 8000142 <frame_dummy+0xe>
 800013a:	4903      	ldr	r1, [pc, #12]	; (8000148 <frame_dummy+0x14>)
 800013c:	4803      	ldr	r0, [pc, #12]	; (800014c <frame_dummy+0x18>)
 800013e:	f3af 8000 	nop.w
 8000142:	bd08      	pop	{r3, pc}
 8000144:	00000000 	.word	0x00000000
 8000148:	20000204 	.word	0x20000204
 800014c:	0800b8bc 	.word	0x0800b8bc

08000150 <strlen>:
 8000150:	4603      	mov	r3, r0
 8000152:	f813 2b01 	ldrb.w	r2, [r3], #1
 8000156:	2a00      	cmp	r2, #0
 8000158:	d1fb      	bne.n	8000152 <strlen+0x2>
 800015a:	1a18      	subs	r0, r3, r0
 800015c:	3801      	subs	r0, #1
 800015e:	4770      	bx	lr

08000160 <__aeabi_drsub>:
 8000160:	f081 4100 	eor.w	r1, r1, #2147483648	; 0x80000000
 8000164:	e002      	b.n	800016c <__adddf3>
 8000166:	bf00      	nop

08000168 <__aeabi_dsub>:
 8000168:	f083 4300 	eor.w	r3, r3, #2147483648	; 0x80000000

0800016c <__adddf3>:
 800016c:	b530      	push	{r4, r5, lr}
 800016e:	ea4f 0441 	mov.w	r4, r1, lsl #1
 8000172:	ea4f 0543 	mov.w	r5, r3, lsl #1
 8000176:	ea94 0f05 	teq	r4, r5
 800017a:	bf08      	it	eq
 800017c:	ea90 0f02 	teqeq	r0, r2
 8000180:	bf1f      	itttt	ne
 8000182:	ea54 0c00 	orrsne.w	ip, r4, r0
 8000186:	ea55 0c02 	orrsne.w	ip, r5, r2
 800018a:	ea7f 5c64 	mvnsne.w	ip, r4, asr #21
 800018e:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 8000192:	f000 80e2 	beq.w	800035a <__adddf3+0x1ee>
 8000196:	ea4f 5454 	mov.w	r4, r4, lsr #21
 800019a:	ebd4 5555 	rsbs	r5, r4, r5, lsr #21
 800019e:	bfb8      	it	lt
 80001a0:	426d      	neglt	r5, r5
 80001a2:	dd0c      	ble.n	80001be <__adddf3+0x52>
 80001a4:	442c      	add	r4, r5
 80001a6:	ea80 0202 	eor.w	r2, r0, r2
 80001aa:	ea81 0303 	eor.w	r3, r1, r3
 80001ae:	ea82 0000 	eor.w	r0, r2, r0
 80001b2:	ea83 0101 	eor.w	r1, r3, r1
 80001b6:	ea80 0202 	eor.w	r2, r0, r2
 80001ba:	ea81 0303 	eor.w	r3, r1, r3
 80001be:	2d36      	cmp	r5, #54	; 0x36
 80001c0:	bf88      	it	hi
 80001c2:	bd30      	pophi	{r4, r5, pc}
 80001c4:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 80001c8:	ea4f 3101 	mov.w	r1, r1, lsl #12
 80001cc:	f44f 1c80 	mov.w	ip, #1048576	; 0x100000
 80001d0:	ea4c 3111 	orr.w	r1, ip, r1, lsr #12
 80001d4:	d002      	beq.n	80001dc <__adddf3+0x70>
 80001d6:	4240      	negs	r0, r0
 80001d8:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 80001dc:	f013 4f00 	tst.w	r3, #2147483648	; 0x80000000
 80001e0:	ea4f 3303 	mov.w	r3, r3, lsl #12
 80001e4:	ea4c 3313 	orr.w	r3, ip, r3, lsr #12
 80001e8:	d002      	beq.n	80001f0 <__adddf3+0x84>
 80001ea:	4252      	negs	r2, r2
 80001ec:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 80001f0:	ea94 0f05 	teq	r4, r5
 80001f4:	f000 80a7 	beq.w	8000346 <__adddf3+0x1da>
 80001f8:	f1a4 0401 	sub.w	r4, r4, #1
 80001fc:	f1d5 0e20 	rsbs	lr, r5, #32
 8000200:	db0d      	blt.n	800021e <__adddf3+0xb2>
 8000202:	fa02 fc0e 	lsl.w	ip, r2, lr
 8000206:	fa22 f205 	lsr.w	r2, r2, r5
 800020a:	1880      	adds	r0, r0, r2
 800020c:	f141 0100 	adc.w	r1, r1, #0
 8000210:	fa03 f20e 	lsl.w	r2, r3, lr
 8000214:	1880      	adds	r0, r0, r2
 8000216:	fa43 f305 	asr.w	r3, r3, r5
 800021a:	4159      	adcs	r1, r3
 800021c:	e00e      	b.n	800023c <__adddf3+0xd0>
 800021e:	f1a5 0520 	sub.w	r5, r5, #32
 8000222:	f10e 0e20 	add.w	lr, lr, #32
 8000226:	2a01      	cmp	r2, #1
 8000228:	fa03 fc0e 	lsl.w	ip, r3, lr
 800022c:	bf28      	it	cs
 800022e:	f04c 0c02 	orrcs.w	ip, ip, #2
 8000232:	fa43 f305 	asr.w	r3, r3, r5
 8000236:	18c0      	adds	r0, r0, r3
 8000238:	eb51 71e3 	adcs.w	r1, r1, r3, asr #31
 800023c:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 8000240:	d507      	bpl.n	8000252 <__adddf3+0xe6>
 8000242:	f04f 0e00 	mov.w	lr, #0
 8000246:	f1dc 0c00 	rsbs	ip, ip, #0
 800024a:	eb7e 0000 	sbcs.w	r0, lr, r0
 800024e:	eb6e 0101 	sbc.w	r1, lr, r1
 8000252:	f5b1 1f80 	cmp.w	r1, #1048576	; 0x100000
 8000256:	d31b      	bcc.n	8000290 <__adddf3+0x124>
 8000258:	f5b1 1f00 	cmp.w	r1, #2097152	; 0x200000
 800025c:	d30c      	bcc.n	8000278 <__adddf3+0x10c>
 800025e:	0849      	lsrs	r1, r1, #1
 8000260:	ea5f 0030 	movs.w	r0, r0, rrx
 8000264:	ea4f 0c3c 	mov.w	ip, ip, rrx
 8000268:	f104 0401 	add.w	r4, r4, #1
 800026c:	ea4f 5244 	mov.w	r2, r4, lsl #21
 8000270:	f512 0f80 	cmn.w	r2, #4194304	; 0x400000
 8000274:	f080 809a 	bcs.w	80003ac <__adddf3+0x240>
 8000278:	f1bc 4f00 	cmp.w	ip, #2147483648	; 0x80000000
 800027c:	bf08      	it	eq
 800027e:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 8000282:	f150 0000 	adcs.w	r0, r0, #0
 8000286:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 800028a:	ea41 0105 	orr.w	r1, r1, r5
 800028e:	bd30      	pop	{r4, r5, pc}
 8000290:	ea5f 0c4c 	movs.w	ip, ip, lsl #1
 8000294:	4140      	adcs	r0, r0
 8000296:	eb41 0101 	adc.w	r1, r1, r1
 800029a:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 800029e:	f1a4 0401 	sub.w	r4, r4, #1
 80002a2:	d1e9      	bne.n	8000278 <__adddf3+0x10c>
 80002a4:	f091 0f00 	teq	r1, #0
 80002a8:	bf04      	itt	eq
 80002aa:	4601      	moveq	r1, r0
 80002ac:	2000      	moveq	r0, #0
 80002ae:	fab1 f381 	clz	r3, r1
 80002b2:	bf08      	it	eq
 80002b4:	3320      	addeq	r3, #32
 80002b6:	f1a3 030b 	sub.w	r3, r3, #11
 80002ba:	f1b3 0220 	subs.w	r2, r3, #32
 80002be:	da0c      	bge.n	80002da <__adddf3+0x16e>
 80002c0:	320c      	adds	r2, #12
 80002c2:	dd08      	ble.n	80002d6 <__adddf3+0x16a>
 80002c4:	f102 0c14 	add.w	ip, r2, #20
 80002c8:	f1c2 020c 	rsb	r2, r2, #12
 80002cc:	fa01 f00c 	lsl.w	r0, r1, ip
 80002d0:	fa21 f102 	lsr.w	r1, r1, r2
 80002d4:	e00c      	b.n	80002f0 <__adddf3+0x184>
 80002d6:	f102 0214 	add.w	r2, r2, #20
 80002da:	bfd8      	it	le
 80002dc:	f1c2 0c20 	rsble	ip, r2, #32
 80002e0:	fa01 f102 	lsl.w	r1, r1, r2
 80002e4:	fa20 fc0c 	lsr.w	ip, r0, ip
 80002e8:	bfdc      	itt	le
 80002ea:	ea41 010c 	orrle.w	r1, r1, ip
 80002ee:	4090      	lslle	r0, r2
 80002f0:	1ae4      	subs	r4, r4, r3
 80002f2:	bfa2      	ittt	ge
 80002f4:	eb01 5104 	addge.w	r1, r1, r4, lsl #20
 80002f8:	4329      	orrge	r1, r5
 80002fa:	bd30      	popge	{r4, r5, pc}
 80002fc:	ea6f 0404 	mvn.w	r4, r4
 8000300:	3c1f      	subs	r4, #31
 8000302:	da1c      	bge.n	800033e <__adddf3+0x1d2>
 8000304:	340c      	adds	r4, #12
 8000306:	dc0e      	bgt.n	8000326 <__adddf3+0x1ba>
 8000308:	f104 0414 	add.w	r4, r4, #20
 800030c:	f1c4 0220 	rsb	r2, r4, #32
 8000310:	fa20 f004 	lsr.w	r0, r0, r4
 8000314:	fa01 f302 	lsl.w	r3, r1, r2
 8000318:	ea40 0003 	orr.w	r0, r0, r3
 800031c:	fa21 f304 	lsr.w	r3, r1, r4
 8000320:	ea45 0103 	orr.w	r1, r5, r3
 8000324:	bd30      	pop	{r4, r5, pc}
 8000326:	f1c4 040c 	rsb	r4, r4, #12
 800032a:	f1c4 0220 	rsb	r2, r4, #32
 800032e:	fa20 f002 	lsr.w	r0, r0, r2
 8000332:	fa01 f304 	lsl.w	r3, r1, r4
 8000336:	ea40 0003 	orr.w	r0, r0, r3
 800033a:	4629      	mov	r1, r5
 800033c:	bd30      	pop	{r4, r5, pc}
 800033e:	fa21 f004 	lsr.w	r0, r1, r4
 8000342:	4629      	mov	r1, r5
 8000344:	bd30      	pop	{r4, r5, pc}
 8000346:	f094 0f00 	teq	r4, #0
 800034a:	f483 1380 	eor.w	r3, r3, #1048576	; 0x100000
 800034e:	bf06      	itte	eq
 8000350:	f481 1180 	eoreq.w	r1, r1, #1048576	; 0x100000
 8000354:	3401      	addeq	r4, #1
 8000356:	3d01      	subne	r5, #1
 8000358:	e74e      	b.n	80001f8 <__adddf3+0x8c>
 800035a:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 800035e:	bf18      	it	ne
 8000360:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 8000364:	d029      	beq.n	80003ba <__adddf3+0x24e>
 8000366:	ea94 0f05 	teq	r4, r5
 800036a:	bf08      	it	eq
 800036c:	ea90 0f02 	teqeq	r0, r2
 8000370:	d005      	beq.n	800037e <__adddf3+0x212>
 8000372:	ea54 0c00 	orrs.w	ip, r4, r0
 8000376:	bf04      	itt	eq
 8000378:	4619      	moveq	r1, r3
 800037a:	4610      	moveq	r0, r2
 800037c:	bd30      	pop	{r4, r5, pc}
 800037e:	ea91 0f03 	teq	r1, r3
 8000382:	bf1e      	ittt	ne
 8000384:	2100      	movne	r1, #0
 8000386:	2000      	movne	r0, #0
 8000388:	bd30      	popne	{r4, r5, pc}
 800038a:	ea5f 5c54 	movs.w	ip, r4, lsr #21
 800038e:	d105      	bne.n	800039c <__adddf3+0x230>
 8000390:	0040      	lsls	r0, r0, #1
 8000392:	4149      	adcs	r1, r1
 8000394:	bf28      	it	cs
 8000396:	f041 4100 	orrcs.w	r1, r1, #2147483648	; 0x80000000
 800039a:	bd30      	pop	{r4, r5, pc}
 800039c:	f514 0480 	adds.w	r4, r4, #4194304	; 0x400000
 80003a0:	bf3c      	itt	cc
 80003a2:	f501 1180 	addcc.w	r1, r1, #1048576	; 0x100000
 80003a6:	bd30      	popcc	{r4, r5, pc}
 80003a8:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 80003ac:	f045 41fe 	orr.w	r1, r5, #2130706432	; 0x7f000000
 80003b0:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 80003b4:	f04f 0000 	mov.w	r0, #0
 80003b8:	bd30      	pop	{r4, r5, pc}
 80003ba:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 80003be:	bf1a      	itte	ne
 80003c0:	4619      	movne	r1, r3
 80003c2:	4610      	movne	r0, r2
 80003c4:	ea7f 5c65 	mvnseq.w	ip, r5, asr #21
 80003c8:	bf1c      	itt	ne
 80003ca:	460b      	movne	r3, r1
 80003cc:	4602      	movne	r2, r0
 80003ce:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 80003d2:	bf06      	itte	eq
 80003d4:	ea52 3503 	orrseq.w	r5, r2, r3, lsl #12
 80003d8:	ea91 0f03 	teqeq	r1, r3
 80003dc:	f441 2100 	orrne.w	r1, r1, #524288	; 0x80000
 80003e0:	bd30      	pop	{r4, r5, pc}
 80003e2:	bf00      	nop

080003e4 <__aeabi_ui2d>:
 80003e4:	f090 0f00 	teq	r0, #0
 80003e8:	bf04      	itt	eq
 80003ea:	2100      	moveq	r1, #0
 80003ec:	4770      	bxeq	lr
 80003ee:	b530      	push	{r4, r5, lr}
 80003f0:	f44f 6480 	mov.w	r4, #1024	; 0x400
 80003f4:	f104 0432 	add.w	r4, r4, #50	; 0x32
 80003f8:	f04f 0500 	mov.w	r5, #0
 80003fc:	f04f 0100 	mov.w	r1, #0
 8000400:	e750      	b.n	80002a4 <__adddf3+0x138>
 8000402:	bf00      	nop

08000404 <__aeabi_i2d>:
 8000404:	f090 0f00 	teq	r0, #0
 8000408:	bf04      	itt	eq
 800040a:	2100      	moveq	r1, #0
 800040c:	4770      	bxeq	lr
 800040e:	b530      	push	{r4, r5, lr}
 8000410:	f44f 6480 	mov.w	r4, #1024	; 0x400
 8000414:	f104 0432 	add.w	r4, r4, #50	; 0x32
 8000418:	f010 4500 	ands.w	r5, r0, #2147483648	; 0x80000000
 800041c:	bf48      	it	mi
 800041e:	4240      	negmi	r0, r0
 8000420:	f04f 0100 	mov.w	r1, #0
 8000424:	e73e      	b.n	80002a4 <__adddf3+0x138>
 8000426:	bf00      	nop

08000428 <__aeabi_f2d>:
 8000428:	0042      	lsls	r2, r0, #1
 800042a:	ea4f 01e2 	mov.w	r1, r2, asr #3
 800042e:	ea4f 0131 	mov.w	r1, r1, rrx
 8000432:	ea4f 7002 	mov.w	r0, r2, lsl #28
 8000436:	bf1f      	itttt	ne
 8000438:	f012 437f 	andsne.w	r3, r2, #4278190080	; 0xff000000
 800043c:	f093 4f7f 	teqne	r3, #4278190080	; 0xff000000
 8000440:	f081 5160 	eorne.w	r1, r1, #939524096	; 0x38000000
 8000444:	4770      	bxne	lr
 8000446:	f032 427f 	bics.w	r2, r2, #4278190080	; 0xff000000
 800044a:	bf08      	it	eq
 800044c:	4770      	bxeq	lr
 800044e:	f093 4f7f 	teq	r3, #4278190080	; 0xff000000
 8000452:	bf04      	itt	eq
 8000454:	f441 2100 	orreq.w	r1, r1, #524288	; 0x80000
 8000458:	4770      	bxeq	lr
 800045a:	b530      	push	{r4, r5, lr}
 800045c:	f44f 7460 	mov.w	r4, #896	; 0x380
 8000460:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 8000464:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 8000468:	e71c      	b.n	80002a4 <__adddf3+0x138>
 800046a:	bf00      	nop

0800046c <__aeabi_ul2d>:
 800046c:	ea50 0201 	orrs.w	r2, r0, r1
 8000470:	bf08      	it	eq
 8000472:	4770      	bxeq	lr
 8000474:	b530      	push	{r4, r5, lr}
 8000476:	f04f 0500 	mov.w	r5, #0
 800047a:	e00a      	b.n	8000492 <__aeabi_l2d+0x16>

0800047c <__aeabi_l2d>:
 800047c:	ea50 0201 	orrs.w	r2, r0, r1
 8000480:	bf08      	it	eq
 8000482:	4770      	bxeq	lr
 8000484:	b530      	push	{r4, r5, lr}
 8000486:	f011 4500 	ands.w	r5, r1, #2147483648	; 0x80000000
 800048a:	d502      	bpl.n	8000492 <__aeabi_l2d+0x16>
 800048c:	4240      	negs	r0, r0
 800048e:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 8000492:	f44f 6480 	mov.w	r4, #1024	; 0x400
 8000496:	f104 0432 	add.w	r4, r4, #50	; 0x32
 800049a:	ea5f 5c91 	movs.w	ip, r1, lsr #22
 800049e:	f43f aed8 	beq.w	8000252 <__adddf3+0xe6>
 80004a2:	f04f 0203 	mov.w	r2, #3
 80004a6:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 80004aa:	bf18      	it	ne
 80004ac:	3203      	addne	r2, #3
 80004ae:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 80004b2:	bf18      	it	ne
 80004b4:	3203      	addne	r2, #3
 80004b6:	eb02 02dc 	add.w	r2, r2, ip, lsr #3
 80004ba:	f1c2 0320 	rsb	r3, r2, #32
 80004be:	fa00 fc03 	lsl.w	ip, r0, r3
 80004c2:	fa20 f002 	lsr.w	r0, r0, r2
 80004c6:	fa01 fe03 	lsl.w	lr, r1, r3
 80004ca:	ea40 000e 	orr.w	r0, r0, lr
 80004ce:	fa21 f102 	lsr.w	r1, r1, r2
 80004d2:	4414      	add	r4, r2
 80004d4:	e6bd      	b.n	8000252 <__adddf3+0xe6>
 80004d6:	bf00      	nop

080004d8 <__aeabi_dmul>:
 80004d8:	b570      	push	{r4, r5, r6, lr}
 80004da:	f04f 0cff 	mov.w	ip, #255	; 0xff
 80004de:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 80004e2:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 80004e6:	bf1d      	ittte	ne
 80004e8:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 80004ec:	ea94 0f0c 	teqne	r4, ip
 80004f0:	ea95 0f0c 	teqne	r5, ip
 80004f4:	f000 f8de 	bleq	80006b4 <__aeabi_dmul+0x1dc>
 80004f8:	442c      	add	r4, r5
 80004fa:	ea81 0603 	eor.w	r6, r1, r3
 80004fe:	ea21 514c 	bic.w	r1, r1, ip, lsl #21
 8000502:	ea23 534c 	bic.w	r3, r3, ip, lsl #21
 8000506:	ea50 3501 	orrs.w	r5, r0, r1, lsl #12
 800050a:	bf18      	it	ne
 800050c:	ea52 3503 	orrsne.w	r5, r2, r3, lsl #12
 8000510:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8000514:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8000518:	d038      	beq.n	800058c <__aeabi_dmul+0xb4>
 800051a:	fba0 ce02 	umull	ip, lr, r0, r2
 800051e:	f04f 0500 	mov.w	r5, #0
 8000522:	fbe1 e502 	umlal	lr, r5, r1, r2
 8000526:	f006 4200 	and.w	r2, r6, #2147483648	; 0x80000000
 800052a:	fbe0 e503 	umlal	lr, r5, r0, r3
 800052e:	f04f 0600 	mov.w	r6, #0
 8000532:	fbe1 5603 	umlal	r5, r6, r1, r3
 8000536:	f09c 0f00 	teq	ip, #0
 800053a:	bf18      	it	ne
 800053c:	f04e 0e01 	orrne.w	lr, lr, #1
 8000540:	f1a4 04ff 	sub.w	r4, r4, #255	; 0xff
 8000544:	f5b6 7f00 	cmp.w	r6, #512	; 0x200
 8000548:	f564 7440 	sbc.w	r4, r4, #768	; 0x300
 800054c:	d204      	bcs.n	8000558 <__aeabi_dmul+0x80>
 800054e:	ea5f 0e4e 	movs.w	lr, lr, lsl #1
 8000552:	416d      	adcs	r5, r5
 8000554:	eb46 0606 	adc.w	r6, r6, r6
 8000558:	ea42 21c6 	orr.w	r1, r2, r6, lsl #11
 800055c:	ea41 5155 	orr.w	r1, r1, r5, lsr #21
 8000560:	ea4f 20c5 	mov.w	r0, r5, lsl #11
 8000564:	ea40 505e 	orr.w	r0, r0, lr, lsr #21
 8000568:	ea4f 2ece 	mov.w	lr, lr, lsl #11
 800056c:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 8000570:	bf88      	it	hi
 8000572:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 8000576:	d81e      	bhi.n	80005b6 <__aeabi_dmul+0xde>
 8000578:	f1be 4f00 	cmp.w	lr, #2147483648	; 0x80000000
 800057c:	bf08      	it	eq
 800057e:	ea5f 0e50 	movseq.w	lr, r0, lsr #1
 8000582:	f150 0000 	adcs.w	r0, r0, #0
 8000586:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 800058a:	bd70      	pop	{r4, r5, r6, pc}
 800058c:	f006 4600 	and.w	r6, r6, #2147483648	; 0x80000000
 8000590:	ea46 0101 	orr.w	r1, r6, r1
 8000594:	ea40 0002 	orr.w	r0, r0, r2
 8000598:	ea81 0103 	eor.w	r1, r1, r3
 800059c:	ebb4 045c 	subs.w	r4, r4, ip, lsr #1
 80005a0:	bfc2      	ittt	gt
 80005a2:	ebd4 050c 	rsbsgt	r5, r4, ip
 80005a6:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 80005aa:	bd70      	popgt	{r4, r5, r6, pc}
 80005ac:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 80005b0:	f04f 0e00 	mov.w	lr, #0
 80005b4:	3c01      	subs	r4, #1
 80005b6:	f300 80ab 	bgt.w	8000710 <__aeabi_dmul+0x238>
 80005ba:	f114 0f36 	cmn.w	r4, #54	; 0x36
 80005be:	bfde      	ittt	le
 80005c0:	2000      	movle	r0, #0
 80005c2:	f001 4100 	andle.w	r1, r1, #2147483648	; 0x80000000
 80005c6:	bd70      	pople	{r4, r5, r6, pc}
 80005c8:	f1c4 0400 	rsb	r4, r4, #0
 80005cc:	3c20      	subs	r4, #32
 80005ce:	da35      	bge.n	800063c <__aeabi_dmul+0x164>
 80005d0:	340c      	adds	r4, #12
 80005d2:	dc1b      	bgt.n	800060c <__aeabi_dmul+0x134>
 80005d4:	f104 0414 	add.w	r4, r4, #20
 80005d8:	f1c4 0520 	rsb	r5, r4, #32
 80005dc:	fa00 f305 	lsl.w	r3, r0, r5
 80005e0:	fa20 f004 	lsr.w	r0, r0, r4
 80005e4:	fa01 f205 	lsl.w	r2, r1, r5
 80005e8:	ea40 0002 	orr.w	r0, r0, r2
 80005ec:	f001 4200 	and.w	r2, r1, #2147483648	; 0x80000000
 80005f0:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 80005f4:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 80005f8:	fa21 f604 	lsr.w	r6, r1, r4
 80005fc:	eb42 0106 	adc.w	r1, r2, r6
 8000600:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000604:	bf08      	it	eq
 8000606:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800060a:	bd70      	pop	{r4, r5, r6, pc}
 800060c:	f1c4 040c 	rsb	r4, r4, #12
 8000610:	f1c4 0520 	rsb	r5, r4, #32
 8000614:	fa00 f304 	lsl.w	r3, r0, r4
 8000618:	fa20 f005 	lsr.w	r0, r0, r5
 800061c:	fa01 f204 	lsl.w	r2, r1, r4
 8000620:	ea40 0002 	orr.w	r0, r0, r2
 8000624:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000628:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 800062c:	f141 0100 	adc.w	r1, r1, #0
 8000630:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000634:	bf08      	it	eq
 8000636:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800063a:	bd70      	pop	{r4, r5, r6, pc}
 800063c:	f1c4 0520 	rsb	r5, r4, #32
 8000640:	fa00 f205 	lsl.w	r2, r0, r5
 8000644:	ea4e 0e02 	orr.w	lr, lr, r2
 8000648:	fa20 f304 	lsr.w	r3, r0, r4
 800064c:	fa01 f205 	lsl.w	r2, r1, r5
 8000650:	ea43 0302 	orr.w	r3, r3, r2
 8000654:	fa21 f004 	lsr.w	r0, r1, r4
 8000658:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 800065c:	fa21 f204 	lsr.w	r2, r1, r4
 8000660:	ea20 0002 	bic.w	r0, r0, r2
 8000664:	eb00 70d3 	add.w	r0, r0, r3, lsr #31
 8000668:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 800066c:	bf08      	it	eq
 800066e:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 8000672:	bd70      	pop	{r4, r5, r6, pc}
 8000674:	f094 0f00 	teq	r4, #0
 8000678:	d10f      	bne.n	800069a <__aeabi_dmul+0x1c2>
 800067a:	f001 4600 	and.w	r6, r1, #2147483648	; 0x80000000
 800067e:	0040      	lsls	r0, r0, #1
 8000680:	eb41 0101 	adc.w	r1, r1, r1
 8000684:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 8000688:	bf08      	it	eq
 800068a:	3c01      	subeq	r4, #1
 800068c:	d0f7      	beq.n	800067e <__aeabi_dmul+0x1a6>
 800068e:	ea41 0106 	orr.w	r1, r1, r6
 8000692:	f095 0f00 	teq	r5, #0
 8000696:	bf18      	it	ne
 8000698:	4770      	bxne	lr
 800069a:	f003 4600 	and.w	r6, r3, #2147483648	; 0x80000000
 800069e:	0052      	lsls	r2, r2, #1
 80006a0:	eb43 0303 	adc.w	r3, r3, r3
 80006a4:	f413 1f80 	tst.w	r3, #1048576	; 0x100000
 80006a8:	bf08      	it	eq
 80006aa:	3d01      	subeq	r5, #1
 80006ac:	d0f7      	beq.n	800069e <__aeabi_dmul+0x1c6>
 80006ae:	ea43 0306 	orr.w	r3, r3, r6
 80006b2:	4770      	bx	lr
 80006b4:	ea94 0f0c 	teq	r4, ip
 80006b8:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 80006bc:	bf18      	it	ne
 80006be:	ea95 0f0c 	teqne	r5, ip
 80006c2:	d00c      	beq.n	80006de <__aeabi_dmul+0x206>
 80006c4:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 80006c8:	bf18      	it	ne
 80006ca:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 80006ce:	d1d1      	bne.n	8000674 <__aeabi_dmul+0x19c>
 80006d0:	ea81 0103 	eor.w	r1, r1, r3
 80006d4:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 80006d8:	f04f 0000 	mov.w	r0, #0
 80006dc:	bd70      	pop	{r4, r5, r6, pc}
 80006de:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 80006e2:	bf06      	itte	eq
 80006e4:	4610      	moveq	r0, r2
 80006e6:	4619      	moveq	r1, r3
 80006e8:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 80006ec:	d019      	beq.n	8000722 <__aeabi_dmul+0x24a>
 80006ee:	ea94 0f0c 	teq	r4, ip
 80006f2:	d102      	bne.n	80006fa <__aeabi_dmul+0x222>
 80006f4:	ea50 3601 	orrs.w	r6, r0, r1, lsl #12
 80006f8:	d113      	bne.n	8000722 <__aeabi_dmul+0x24a>
 80006fa:	ea95 0f0c 	teq	r5, ip
 80006fe:	d105      	bne.n	800070c <__aeabi_dmul+0x234>
 8000700:	ea52 3603 	orrs.w	r6, r2, r3, lsl #12
 8000704:	bf1c      	itt	ne
 8000706:	4610      	movne	r0, r2
 8000708:	4619      	movne	r1, r3
 800070a:	d10a      	bne.n	8000722 <__aeabi_dmul+0x24a>
 800070c:	ea81 0103 	eor.w	r1, r1, r3
 8000710:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000714:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 8000718:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 800071c:	f04f 0000 	mov.w	r0, #0
 8000720:	bd70      	pop	{r4, r5, r6, pc}
 8000722:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 8000726:	f441 0178 	orr.w	r1, r1, #16252928	; 0xf80000
 800072a:	bd70      	pop	{r4, r5, r6, pc}

0800072c <__aeabi_ddiv>:
 800072c:	b570      	push	{r4, r5, r6, lr}
 800072e:	f04f 0cff 	mov.w	ip, #255	; 0xff
 8000732:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 8000736:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 800073a:	bf1d      	ittte	ne
 800073c:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 8000740:	ea94 0f0c 	teqne	r4, ip
 8000744:	ea95 0f0c 	teqne	r5, ip
 8000748:	f000 f8a7 	bleq	800089a <__aeabi_ddiv+0x16e>
 800074c:	eba4 0405 	sub.w	r4, r4, r5
 8000750:	ea81 0e03 	eor.w	lr, r1, r3
 8000754:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 8000758:	ea4f 3101 	mov.w	r1, r1, lsl #12
 800075c:	f000 8088 	beq.w	8000870 <__aeabi_ddiv+0x144>
 8000760:	ea4f 3303 	mov.w	r3, r3, lsl #12
 8000764:	f04f 5580 	mov.w	r5, #268435456	; 0x10000000
 8000768:	ea45 1313 	orr.w	r3, r5, r3, lsr #4
 800076c:	ea43 6312 	orr.w	r3, r3, r2, lsr #24
 8000770:	ea4f 2202 	mov.w	r2, r2, lsl #8
 8000774:	ea45 1511 	orr.w	r5, r5, r1, lsr #4
 8000778:	ea45 6510 	orr.w	r5, r5, r0, lsr #24
 800077c:	ea4f 2600 	mov.w	r6, r0, lsl #8
 8000780:	f00e 4100 	and.w	r1, lr, #2147483648	; 0x80000000
 8000784:	429d      	cmp	r5, r3
 8000786:	bf08      	it	eq
 8000788:	4296      	cmpeq	r6, r2
 800078a:	f144 04fd 	adc.w	r4, r4, #253	; 0xfd
 800078e:	f504 7440 	add.w	r4, r4, #768	; 0x300
 8000792:	d202      	bcs.n	800079a <__aeabi_ddiv+0x6e>
 8000794:	085b      	lsrs	r3, r3, #1
 8000796:	ea4f 0232 	mov.w	r2, r2, rrx
 800079a:	1ab6      	subs	r6, r6, r2
 800079c:	eb65 0503 	sbc.w	r5, r5, r3
 80007a0:	085b      	lsrs	r3, r3, #1
 80007a2:	ea4f 0232 	mov.w	r2, r2, rrx
 80007a6:	f44f 1080 	mov.w	r0, #1048576	; 0x100000
 80007aa:	f44f 2c00 	mov.w	ip, #524288	; 0x80000
 80007ae:	ebb6 0e02 	subs.w	lr, r6, r2
 80007b2:	eb75 0e03 	sbcs.w	lr, r5, r3
 80007b6:	bf22      	ittt	cs
 80007b8:	1ab6      	subcs	r6, r6, r2
 80007ba:	4675      	movcs	r5, lr
 80007bc:	ea40 000c 	orrcs.w	r0, r0, ip
 80007c0:	085b      	lsrs	r3, r3, #1
 80007c2:	ea4f 0232 	mov.w	r2, r2, rrx
 80007c6:	ebb6 0e02 	subs.w	lr, r6, r2
 80007ca:	eb75 0e03 	sbcs.w	lr, r5, r3
 80007ce:	bf22      	ittt	cs
 80007d0:	1ab6      	subcs	r6, r6, r2
 80007d2:	4675      	movcs	r5, lr
 80007d4:	ea40 005c 	orrcs.w	r0, r0, ip, lsr #1
 80007d8:	085b      	lsrs	r3, r3, #1
 80007da:	ea4f 0232 	mov.w	r2, r2, rrx
 80007de:	ebb6 0e02 	subs.w	lr, r6, r2
 80007e2:	eb75 0e03 	sbcs.w	lr, r5, r3
 80007e6:	bf22      	ittt	cs
 80007e8:	1ab6      	subcs	r6, r6, r2
 80007ea:	4675      	movcs	r5, lr
 80007ec:	ea40 009c 	orrcs.w	r0, r0, ip, lsr #2
 80007f0:	085b      	lsrs	r3, r3, #1
 80007f2:	ea4f 0232 	mov.w	r2, r2, rrx
 80007f6:	ebb6 0e02 	subs.w	lr, r6, r2
 80007fa:	eb75 0e03 	sbcs.w	lr, r5, r3
 80007fe:	bf22      	ittt	cs
 8000800:	1ab6      	subcs	r6, r6, r2
 8000802:	4675      	movcs	r5, lr
 8000804:	ea40 00dc 	orrcs.w	r0, r0, ip, lsr #3
 8000808:	ea55 0e06 	orrs.w	lr, r5, r6
 800080c:	d018      	beq.n	8000840 <__aeabi_ddiv+0x114>
 800080e:	ea4f 1505 	mov.w	r5, r5, lsl #4
 8000812:	ea45 7516 	orr.w	r5, r5, r6, lsr #28
 8000816:	ea4f 1606 	mov.w	r6, r6, lsl #4
 800081a:	ea4f 03c3 	mov.w	r3, r3, lsl #3
 800081e:	ea43 7352 	orr.w	r3, r3, r2, lsr #29
 8000822:	ea4f 02c2 	mov.w	r2, r2, lsl #3
 8000826:	ea5f 1c1c 	movs.w	ip, ip, lsr #4
 800082a:	d1c0      	bne.n	80007ae <__aeabi_ddiv+0x82>
 800082c:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 8000830:	d10b      	bne.n	800084a <__aeabi_ddiv+0x11e>
 8000832:	ea41 0100 	orr.w	r1, r1, r0
 8000836:	f04f 0000 	mov.w	r0, #0
 800083a:	f04f 4c00 	mov.w	ip, #2147483648	; 0x80000000
 800083e:	e7b6      	b.n	80007ae <__aeabi_ddiv+0x82>
 8000840:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 8000844:	bf04      	itt	eq
 8000846:	4301      	orreq	r1, r0
 8000848:	2000      	moveq	r0, #0
 800084a:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 800084e:	bf88      	it	hi
 8000850:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 8000854:	f63f aeaf 	bhi.w	80005b6 <__aeabi_dmul+0xde>
 8000858:	ebb5 0c03 	subs.w	ip, r5, r3
 800085c:	bf04      	itt	eq
 800085e:	ebb6 0c02 	subseq.w	ip, r6, r2
 8000862:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 8000866:	f150 0000 	adcs.w	r0, r0, #0
 800086a:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 800086e:	bd70      	pop	{r4, r5, r6, pc}
 8000870:	f00e 4e00 	and.w	lr, lr, #2147483648	; 0x80000000
 8000874:	ea4e 3111 	orr.w	r1, lr, r1, lsr #12
 8000878:	eb14 045c 	adds.w	r4, r4, ip, lsr #1
 800087c:	bfc2      	ittt	gt
 800087e:	ebd4 050c 	rsbsgt	r5, r4, ip
 8000882:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 8000886:	bd70      	popgt	{r4, r5, r6, pc}
 8000888:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 800088c:	f04f 0e00 	mov.w	lr, #0
 8000890:	3c01      	subs	r4, #1
 8000892:	e690      	b.n	80005b6 <__aeabi_dmul+0xde>
 8000894:	ea45 0e06 	orr.w	lr, r5, r6
 8000898:	e68d      	b.n	80005b6 <__aeabi_dmul+0xde>
 800089a:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 800089e:	ea94 0f0c 	teq	r4, ip
 80008a2:	bf08      	it	eq
 80008a4:	ea95 0f0c 	teqeq	r5, ip
 80008a8:	f43f af3b 	beq.w	8000722 <__aeabi_dmul+0x24a>
 80008ac:	ea94 0f0c 	teq	r4, ip
 80008b0:	d10a      	bne.n	80008c8 <__aeabi_ddiv+0x19c>
 80008b2:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 80008b6:	f47f af34 	bne.w	8000722 <__aeabi_dmul+0x24a>
 80008ba:	ea95 0f0c 	teq	r5, ip
 80008be:	f47f af25 	bne.w	800070c <__aeabi_dmul+0x234>
 80008c2:	4610      	mov	r0, r2
 80008c4:	4619      	mov	r1, r3
 80008c6:	e72c      	b.n	8000722 <__aeabi_dmul+0x24a>
 80008c8:	ea95 0f0c 	teq	r5, ip
 80008cc:	d106      	bne.n	80008dc <__aeabi_ddiv+0x1b0>
 80008ce:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 80008d2:	f43f aefd 	beq.w	80006d0 <__aeabi_dmul+0x1f8>
 80008d6:	4610      	mov	r0, r2
 80008d8:	4619      	mov	r1, r3
 80008da:	e722      	b.n	8000722 <__aeabi_dmul+0x24a>
 80008dc:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 80008e0:	bf18      	it	ne
 80008e2:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 80008e6:	f47f aec5 	bne.w	8000674 <__aeabi_dmul+0x19c>
 80008ea:	ea50 0441 	orrs.w	r4, r0, r1, lsl #1
 80008ee:	f47f af0d 	bne.w	800070c <__aeabi_dmul+0x234>
 80008f2:	ea52 0543 	orrs.w	r5, r2, r3, lsl #1
 80008f6:	f47f aeeb 	bne.w	80006d0 <__aeabi_dmul+0x1f8>
 80008fa:	e712      	b.n	8000722 <__aeabi_dmul+0x24a>

080008fc <__gedf2>:
 80008fc:	f04f 3cff 	mov.w	ip, #4294967295	; 0xffffffff
 8000900:	e006      	b.n	8000910 <__cmpdf2+0x4>
 8000902:	bf00      	nop

08000904 <__ledf2>:
 8000904:	f04f 0c01 	mov.w	ip, #1
 8000908:	e002      	b.n	8000910 <__cmpdf2+0x4>
 800090a:	bf00      	nop

0800090c <__cmpdf2>:
 800090c:	f04f 0c01 	mov.w	ip, #1
 8000910:	f84d cd04 	str.w	ip, [sp, #-4]!
 8000914:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000918:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 800091c:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000920:	bf18      	it	ne
 8000922:	ea7f 5c6c 	mvnsne.w	ip, ip, asr #21
 8000926:	d01b      	beq.n	8000960 <__cmpdf2+0x54>
 8000928:	b001      	add	sp, #4
 800092a:	ea50 0c41 	orrs.w	ip, r0, r1, lsl #1
 800092e:	bf0c      	ite	eq
 8000930:	ea52 0c43 	orrseq.w	ip, r2, r3, lsl #1
 8000934:	ea91 0f03 	teqne	r1, r3
 8000938:	bf02      	ittt	eq
 800093a:	ea90 0f02 	teqeq	r0, r2
 800093e:	2000      	moveq	r0, #0
 8000940:	4770      	bxeq	lr
 8000942:	f110 0f00 	cmn.w	r0, #0
 8000946:	ea91 0f03 	teq	r1, r3
 800094a:	bf58      	it	pl
 800094c:	4299      	cmppl	r1, r3
 800094e:	bf08      	it	eq
 8000950:	4290      	cmpeq	r0, r2
 8000952:	bf2c      	ite	cs
 8000954:	17d8      	asrcs	r0, r3, #31
 8000956:	ea6f 70e3 	mvncc.w	r0, r3, asr #31
 800095a:	f040 0001 	orr.w	r0, r0, #1
 800095e:	4770      	bx	lr
 8000960:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000964:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000968:	d102      	bne.n	8000970 <__cmpdf2+0x64>
 800096a:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 800096e:	d107      	bne.n	8000980 <__cmpdf2+0x74>
 8000970:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000974:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000978:	d1d6      	bne.n	8000928 <__cmpdf2+0x1c>
 800097a:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 800097e:	d0d3      	beq.n	8000928 <__cmpdf2+0x1c>
 8000980:	f85d 0b04 	ldr.w	r0, [sp], #4
 8000984:	4770      	bx	lr
 8000986:	bf00      	nop

08000988 <__aeabi_cdrcmple>:
 8000988:	4684      	mov	ip, r0
 800098a:	4610      	mov	r0, r2
 800098c:	4662      	mov	r2, ip
 800098e:	468c      	mov	ip, r1
 8000990:	4619      	mov	r1, r3
 8000992:	4663      	mov	r3, ip
 8000994:	e000      	b.n	8000998 <__aeabi_cdcmpeq>
 8000996:	bf00      	nop

08000998 <__aeabi_cdcmpeq>:
 8000998:	b501      	push	{r0, lr}
 800099a:	f7ff ffb7 	bl	800090c <__cmpdf2>
 800099e:	2800      	cmp	r0, #0
 80009a0:	bf48      	it	mi
 80009a2:	f110 0f00 	cmnmi.w	r0, #0
 80009a6:	bd01      	pop	{r0, pc}

080009a8 <__aeabi_dcmpeq>:
 80009a8:	f84d ed08 	str.w	lr, [sp, #-8]!
 80009ac:	f7ff fff4 	bl	8000998 <__aeabi_cdcmpeq>
 80009b0:	bf0c      	ite	eq
 80009b2:	2001      	moveq	r0, #1
 80009b4:	2000      	movne	r0, #0
 80009b6:	f85d fb08 	ldr.w	pc, [sp], #8
 80009ba:	bf00      	nop

080009bc <__aeabi_dcmplt>:
 80009bc:	f84d ed08 	str.w	lr, [sp, #-8]!
 80009c0:	f7ff ffea 	bl	8000998 <__aeabi_cdcmpeq>
 80009c4:	bf34      	ite	cc
 80009c6:	2001      	movcc	r0, #1
 80009c8:	2000      	movcs	r0, #0
 80009ca:	f85d fb08 	ldr.w	pc, [sp], #8
 80009ce:	bf00      	nop

080009d0 <__aeabi_dcmple>:
 80009d0:	f84d ed08 	str.w	lr, [sp, #-8]!
 80009d4:	f7ff ffe0 	bl	8000998 <__aeabi_cdcmpeq>
 80009d8:	bf94      	ite	ls
 80009da:	2001      	movls	r0, #1
 80009dc:	2000      	movhi	r0, #0
 80009de:	f85d fb08 	ldr.w	pc, [sp], #8
 80009e2:	bf00      	nop

080009e4 <__aeabi_dcmpge>:
 80009e4:	f84d ed08 	str.w	lr, [sp, #-8]!
 80009e8:	f7ff ffce 	bl	8000988 <__aeabi_cdrcmple>
 80009ec:	bf94      	ite	ls
 80009ee:	2001      	movls	r0, #1
 80009f0:	2000      	movhi	r0, #0
 80009f2:	f85d fb08 	ldr.w	pc, [sp], #8
 80009f6:	bf00      	nop

080009f8 <__aeabi_dcmpgt>:
 80009f8:	f84d ed08 	str.w	lr, [sp, #-8]!
 80009fc:	f7ff ffc4 	bl	8000988 <__aeabi_cdrcmple>
 8000a00:	bf34      	ite	cc
 8000a02:	2001      	movcc	r0, #1
 8000a04:	2000      	movcs	r0, #0
 8000a06:	f85d fb08 	ldr.w	pc, [sp], #8
 8000a0a:	bf00      	nop

08000a0c <__aeabi_dcmpun>:
 8000a0c:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000a10:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000a14:	d102      	bne.n	8000a1c <__aeabi_dcmpun+0x10>
 8000a16:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 8000a1a:	d10a      	bne.n	8000a32 <__aeabi_dcmpun+0x26>
 8000a1c:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000a20:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000a24:	d102      	bne.n	8000a2c <__aeabi_dcmpun+0x20>
 8000a26:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 8000a2a:	d102      	bne.n	8000a32 <__aeabi_dcmpun+0x26>
 8000a2c:	f04f 0000 	mov.w	r0, #0
 8000a30:	4770      	bx	lr
 8000a32:	f04f 0001 	mov.w	r0, #1
 8000a36:	4770      	bx	lr

08000a38 <__aeabi_d2iz>:
 8000a38:	ea4f 0241 	mov.w	r2, r1, lsl #1
 8000a3c:	f512 1200 	adds.w	r2, r2, #2097152	; 0x200000
 8000a40:	d215      	bcs.n	8000a6e <__aeabi_d2iz+0x36>
 8000a42:	d511      	bpl.n	8000a68 <__aeabi_d2iz+0x30>
 8000a44:	f46f 7378 	mvn.w	r3, #992	; 0x3e0
 8000a48:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
 8000a4c:	d912      	bls.n	8000a74 <__aeabi_d2iz+0x3c>
 8000a4e:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000a52:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8000a56:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
 8000a5a:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 8000a5e:	fa23 f002 	lsr.w	r0, r3, r2
 8000a62:	bf18      	it	ne
 8000a64:	4240      	negne	r0, r0
 8000a66:	4770      	bx	lr
 8000a68:	f04f 0000 	mov.w	r0, #0
 8000a6c:	4770      	bx	lr
 8000a6e:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
 8000a72:	d105      	bne.n	8000a80 <__aeabi_d2iz+0x48>
 8000a74:	f011 4000 	ands.w	r0, r1, #2147483648	; 0x80000000
 8000a78:	bf08      	it	eq
 8000a7a:	f06f 4000 	mvneq.w	r0, #2147483648	; 0x80000000
 8000a7e:	4770      	bx	lr
 8000a80:	f04f 0000 	mov.w	r0, #0
 8000a84:	4770      	bx	lr
 8000a86:	bf00      	nop

08000a88 <__aeabi_d2uiz>:
 8000a88:	004a      	lsls	r2, r1, #1
 8000a8a:	d211      	bcs.n	8000ab0 <__aeabi_d2uiz+0x28>
 8000a8c:	f512 1200 	adds.w	r2, r2, #2097152	; 0x200000
 8000a90:	d211      	bcs.n	8000ab6 <__aeabi_d2uiz+0x2e>
 8000a92:	d50d      	bpl.n	8000ab0 <__aeabi_d2uiz+0x28>
 8000a94:	f46f 7378 	mvn.w	r3, #992	; 0x3e0
 8000a98:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
 8000a9c:	d40e      	bmi.n	8000abc <__aeabi_d2uiz+0x34>
 8000a9e:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000aa2:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8000aa6:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
 8000aaa:	fa23 f002 	lsr.w	r0, r3, r2
 8000aae:	4770      	bx	lr
 8000ab0:	f04f 0000 	mov.w	r0, #0
 8000ab4:	4770      	bx	lr
 8000ab6:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
 8000aba:	d102      	bne.n	8000ac2 <__aeabi_d2uiz+0x3a>
 8000abc:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8000ac0:	4770      	bx	lr
 8000ac2:	f04f 0000 	mov.w	r0, #0
 8000ac6:	4770      	bx	lr

08000ac8 <__aeabi_d2f>:
 8000ac8:	ea4f 0241 	mov.w	r2, r1, lsl #1
 8000acc:	f1b2 43e0 	subs.w	r3, r2, #1879048192	; 0x70000000
 8000ad0:	bf24      	itt	cs
 8000ad2:	f5b3 1c00 	subscs.w	ip, r3, #2097152	; 0x200000
 8000ad6:	f1dc 5cfe 	rsbscs	ip, ip, #532676608	; 0x1fc00000
 8000ada:	d90d      	bls.n	8000af8 <__aeabi_d2f+0x30>
 8000adc:	f001 4c00 	and.w	ip, r1, #2147483648	; 0x80000000
 8000ae0:	ea4f 02c0 	mov.w	r2, r0, lsl #3
 8000ae4:	ea4c 7050 	orr.w	r0, ip, r0, lsr #29
 8000ae8:	f1b2 4f00 	cmp.w	r2, #2147483648	; 0x80000000
 8000aec:	eb40 0083 	adc.w	r0, r0, r3, lsl #2
 8000af0:	bf08      	it	eq
 8000af2:	f020 0001 	biceq.w	r0, r0, #1
 8000af6:	4770      	bx	lr
 8000af8:	f011 4f80 	tst.w	r1, #1073741824	; 0x40000000
 8000afc:	d121      	bne.n	8000b42 <__aeabi_d2f+0x7a>
 8000afe:	f113 7238 	adds.w	r2, r3, #48234496	; 0x2e00000
 8000b02:	bfbc      	itt	lt
 8000b04:	f001 4000 	andlt.w	r0, r1, #2147483648	; 0x80000000
 8000b08:	4770      	bxlt	lr
 8000b0a:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8000b0e:	ea4f 5252 	mov.w	r2, r2, lsr #21
 8000b12:	f1c2 0218 	rsb	r2, r2, #24
 8000b16:	f1c2 0c20 	rsb	ip, r2, #32
 8000b1a:	fa10 f30c 	lsls.w	r3, r0, ip
 8000b1e:	fa20 f002 	lsr.w	r0, r0, r2
 8000b22:	bf18      	it	ne
 8000b24:	f040 0001 	orrne.w	r0, r0, #1
 8000b28:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000b2c:	ea4f 23d3 	mov.w	r3, r3, lsr #11
 8000b30:	fa03 fc0c 	lsl.w	ip, r3, ip
 8000b34:	ea40 000c 	orr.w	r0, r0, ip
 8000b38:	fa23 f302 	lsr.w	r3, r3, r2
 8000b3c:	ea4f 0343 	mov.w	r3, r3, lsl #1
 8000b40:	e7cc      	b.n	8000adc <__aeabi_d2f+0x14>
 8000b42:	ea7f 5362 	mvns.w	r3, r2, asr #21
 8000b46:	d107      	bne.n	8000b58 <__aeabi_d2f+0x90>
 8000b48:	ea50 3301 	orrs.w	r3, r0, r1, lsl #12
 8000b4c:	bf1e      	ittt	ne
 8000b4e:	f04f 40fe 	movne.w	r0, #2130706432	; 0x7f000000
 8000b52:	f440 0040 	orrne.w	r0, r0, #12582912	; 0xc00000
 8000b56:	4770      	bxne	lr
 8000b58:	f001 4000 	and.w	r0, r1, #2147483648	; 0x80000000
 8000b5c:	f040 40fe 	orr.w	r0, r0, #2130706432	; 0x7f000000
 8000b60:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
 8000b64:	4770      	bx	lr
 8000b66:	bf00      	nop

08000b68 <__aeabi_frsub>:
 8000b68:	f080 4000 	eor.w	r0, r0, #2147483648	; 0x80000000
 8000b6c:	e002      	b.n	8000b74 <__addsf3>
 8000b6e:	bf00      	nop

08000b70 <__aeabi_fsub>:
 8000b70:	f081 4100 	eor.w	r1, r1, #2147483648	; 0x80000000

08000b74 <__addsf3>:
 8000b74:	0042      	lsls	r2, r0, #1
 8000b76:	bf1f      	itttt	ne
 8000b78:	ea5f 0341 	movsne.w	r3, r1, lsl #1
 8000b7c:	ea92 0f03 	teqne	r2, r3
 8000b80:	ea7f 6c22 	mvnsne.w	ip, r2, asr #24
 8000b84:	ea7f 6c23 	mvnsne.w	ip, r3, asr #24
 8000b88:	d06a      	beq.n	8000c60 <__addsf3+0xec>
 8000b8a:	ea4f 6212 	mov.w	r2, r2, lsr #24
 8000b8e:	ebd2 6313 	rsbs	r3, r2, r3, lsr #24
 8000b92:	bfc1      	itttt	gt
 8000b94:	18d2      	addgt	r2, r2, r3
 8000b96:	4041      	eorgt	r1, r0
 8000b98:	4048      	eorgt	r0, r1
 8000b9a:	4041      	eorgt	r1, r0
 8000b9c:	bfb8      	it	lt
 8000b9e:	425b      	neglt	r3, r3
 8000ba0:	2b19      	cmp	r3, #25
 8000ba2:	bf88      	it	hi
 8000ba4:	4770      	bxhi	lr
 8000ba6:	f010 4f00 	tst.w	r0, #2147483648	; 0x80000000
 8000baa:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
 8000bae:	f020 407f 	bic.w	r0, r0, #4278190080	; 0xff000000
 8000bb2:	bf18      	it	ne
 8000bb4:	4240      	negne	r0, r0
 8000bb6:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 8000bba:	f441 0100 	orr.w	r1, r1, #8388608	; 0x800000
 8000bbe:	f021 417f 	bic.w	r1, r1, #4278190080	; 0xff000000
 8000bc2:	bf18      	it	ne
 8000bc4:	4249      	negne	r1, r1
 8000bc6:	ea92 0f03 	teq	r2, r3
 8000bca:	d03f      	beq.n	8000c4c <__addsf3+0xd8>
 8000bcc:	f1a2 0201 	sub.w	r2, r2, #1
 8000bd0:	fa41 fc03 	asr.w	ip, r1, r3
 8000bd4:	eb10 000c 	adds.w	r0, r0, ip
 8000bd8:	f1c3 0320 	rsb	r3, r3, #32
 8000bdc:	fa01 f103 	lsl.w	r1, r1, r3
 8000be0:	f000 4300 	and.w	r3, r0, #2147483648	; 0x80000000
 8000be4:	d502      	bpl.n	8000bec <__addsf3+0x78>
 8000be6:	4249      	negs	r1, r1
 8000be8:	eb60 0040 	sbc.w	r0, r0, r0, lsl #1
 8000bec:	f5b0 0f00 	cmp.w	r0, #8388608	; 0x800000
 8000bf0:	d313      	bcc.n	8000c1a <__addsf3+0xa6>
 8000bf2:	f1b0 7f80 	cmp.w	r0, #16777216	; 0x1000000
 8000bf6:	d306      	bcc.n	8000c06 <__addsf3+0x92>
 8000bf8:	0840      	lsrs	r0, r0, #1
 8000bfa:	ea4f 0131 	mov.w	r1, r1, rrx
 8000bfe:	f102 0201 	add.w	r2, r2, #1
 8000c02:	2afe      	cmp	r2, #254	; 0xfe
 8000c04:	d251      	bcs.n	8000caa <__addsf3+0x136>
 8000c06:	f1b1 4f00 	cmp.w	r1, #2147483648	; 0x80000000
 8000c0a:	eb40 50c2 	adc.w	r0, r0, r2, lsl #23
 8000c0e:	bf08      	it	eq
 8000c10:	f020 0001 	biceq.w	r0, r0, #1
 8000c14:	ea40 0003 	orr.w	r0, r0, r3
 8000c18:	4770      	bx	lr
 8000c1a:	0049      	lsls	r1, r1, #1
 8000c1c:	eb40 0000 	adc.w	r0, r0, r0
 8000c20:	f410 0f00 	tst.w	r0, #8388608	; 0x800000
 8000c24:	f1a2 0201 	sub.w	r2, r2, #1
 8000c28:	d1ed      	bne.n	8000c06 <__addsf3+0x92>
 8000c2a:	fab0 fc80 	clz	ip, r0
 8000c2e:	f1ac 0c08 	sub.w	ip, ip, #8
 8000c32:	ebb2 020c 	subs.w	r2, r2, ip
 8000c36:	fa00 f00c 	lsl.w	r0, r0, ip
 8000c3a:	bfaa      	itet	ge
 8000c3c:	eb00 50c2 	addge.w	r0, r0, r2, lsl #23
 8000c40:	4252      	neglt	r2, r2
 8000c42:	4318      	orrge	r0, r3
 8000c44:	bfbc      	itt	lt
 8000c46:	40d0      	lsrlt	r0, r2
 8000c48:	4318      	orrlt	r0, r3
 8000c4a:	4770      	bx	lr
 8000c4c:	f092 0f00 	teq	r2, #0
 8000c50:	f481 0100 	eor.w	r1, r1, #8388608	; 0x800000
 8000c54:	bf06      	itte	eq
 8000c56:	f480 0000 	eoreq.w	r0, r0, #8388608	; 0x800000
 8000c5a:	3201      	addeq	r2, #1
 8000c5c:	3b01      	subne	r3, #1
 8000c5e:	e7b5      	b.n	8000bcc <__addsf3+0x58>
 8000c60:	ea4f 0341 	mov.w	r3, r1, lsl #1
 8000c64:	ea7f 6c22 	mvns.w	ip, r2, asr #24
 8000c68:	bf18      	it	ne
 8000c6a:	ea7f 6c23 	mvnsne.w	ip, r3, asr #24
 8000c6e:	d021      	beq.n	8000cb4 <__addsf3+0x140>
 8000c70:	ea92 0f03 	teq	r2, r3
 8000c74:	d004      	beq.n	8000c80 <__addsf3+0x10c>
 8000c76:	f092 0f00 	teq	r2, #0
 8000c7a:	bf08      	it	eq
 8000c7c:	4608      	moveq	r0, r1
 8000c7e:	4770      	bx	lr
 8000c80:	ea90 0f01 	teq	r0, r1
 8000c84:	bf1c      	itt	ne
 8000c86:	2000      	movne	r0, #0
 8000c88:	4770      	bxne	lr
 8000c8a:	f012 4f7f 	tst.w	r2, #4278190080	; 0xff000000
 8000c8e:	d104      	bne.n	8000c9a <__addsf3+0x126>
 8000c90:	0040      	lsls	r0, r0, #1
 8000c92:	bf28      	it	cs
 8000c94:	f040 4000 	orrcs.w	r0, r0, #2147483648	; 0x80000000
 8000c98:	4770      	bx	lr
 8000c9a:	f112 7200 	adds.w	r2, r2, #33554432	; 0x2000000
 8000c9e:	bf3c      	itt	cc
 8000ca0:	f500 0000 	addcc.w	r0, r0, #8388608	; 0x800000
 8000ca4:	4770      	bxcc	lr
 8000ca6:	f000 4300 	and.w	r3, r0, #2147483648	; 0x80000000
 8000caa:	f043 40fe 	orr.w	r0, r3, #2130706432	; 0x7f000000
 8000cae:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
 8000cb2:	4770      	bx	lr
 8000cb4:	ea7f 6222 	mvns.w	r2, r2, asr #24
 8000cb8:	bf16      	itet	ne
 8000cba:	4608      	movne	r0, r1
 8000cbc:	ea7f 6323 	mvnseq.w	r3, r3, asr #24
 8000cc0:	4601      	movne	r1, r0
 8000cc2:	0242      	lsls	r2, r0, #9
 8000cc4:	bf06      	itte	eq
 8000cc6:	ea5f 2341 	movseq.w	r3, r1, lsl #9
 8000cca:	ea90 0f01 	teqeq	r0, r1
 8000cce:	f440 0080 	orrne.w	r0, r0, #4194304	; 0x400000
 8000cd2:	4770      	bx	lr

08000cd4 <__aeabi_ui2f>:
 8000cd4:	f04f 0300 	mov.w	r3, #0
 8000cd8:	e004      	b.n	8000ce4 <__aeabi_i2f+0x8>
 8000cda:	bf00      	nop

08000cdc <__aeabi_i2f>:
 8000cdc:	f010 4300 	ands.w	r3, r0, #2147483648	; 0x80000000
 8000ce0:	bf48      	it	mi
 8000ce2:	4240      	negmi	r0, r0
 8000ce4:	ea5f 0c00 	movs.w	ip, r0
 8000ce8:	bf08      	it	eq
 8000cea:	4770      	bxeq	lr
 8000cec:	f043 4396 	orr.w	r3, r3, #1258291200	; 0x4b000000
 8000cf0:	4601      	mov	r1, r0
 8000cf2:	f04f 0000 	mov.w	r0, #0
 8000cf6:	e01c      	b.n	8000d32 <__aeabi_l2f+0x2a>

08000cf8 <__aeabi_ul2f>:
 8000cf8:	ea50 0201 	orrs.w	r2, r0, r1
 8000cfc:	bf08      	it	eq
 8000cfe:	4770      	bxeq	lr
 8000d00:	f04f 0300 	mov.w	r3, #0
 8000d04:	e00a      	b.n	8000d1c <__aeabi_l2f+0x14>
 8000d06:	bf00      	nop

08000d08 <__aeabi_l2f>:
 8000d08:	ea50 0201 	orrs.w	r2, r0, r1
 8000d0c:	bf08      	it	eq
 8000d0e:	4770      	bxeq	lr
 8000d10:	f011 4300 	ands.w	r3, r1, #2147483648	; 0x80000000
 8000d14:	d502      	bpl.n	8000d1c <__aeabi_l2f+0x14>
 8000d16:	4240      	negs	r0, r0
 8000d18:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 8000d1c:	ea5f 0c01 	movs.w	ip, r1
 8000d20:	bf02      	ittt	eq
 8000d22:	4684      	moveq	ip, r0
 8000d24:	4601      	moveq	r1, r0
 8000d26:	2000      	moveq	r0, #0
 8000d28:	f043 43b6 	orr.w	r3, r3, #1526726656	; 0x5b000000
 8000d2c:	bf08      	it	eq
 8000d2e:	f1a3 5380 	subeq.w	r3, r3, #268435456	; 0x10000000
 8000d32:	f5a3 0300 	sub.w	r3, r3, #8388608	; 0x800000
 8000d36:	fabc f28c 	clz	r2, ip
 8000d3a:	3a08      	subs	r2, #8
 8000d3c:	eba3 53c2 	sub.w	r3, r3, r2, lsl #23
 8000d40:	db10      	blt.n	8000d64 <__aeabi_l2f+0x5c>
 8000d42:	fa01 fc02 	lsl.w	ip, r1, r2
 8000d46:	4463      	add	r3, ip
 8000d48:	fa00 fc02 	lsl.w	ip, r0, r2
 8000d4c:	f1c2 0220 	rsb	r2, r2, #32
 8000d50:	f1bc 4f00 	cmp.w	ip, #2147483648	; 0x80000000
 8000d54:	fa20 f202 	lsr.w	r2, r0, r2
 8000d58:	eb43 0002 	adc.w	r0, r3, r2
 8000d5c:	bf08      	it	eq
 8000d5e:	f020 0001 	biceq.w	r0, r0, #1
 8000d62:	4770      	bx	lr
 8000d64:	f102 0220 	add.w	r2, r2, #32
 8000d68:	fa01 fc02 	lsl.w	ip, r1, r2
 8000d6c:	f1c2 0220 	rsb	r2, r2, #32
 8000d70:	ea50 004c 	orrs.w	r0, r0, ip, lsl #1
 8000d74:	fa21 f202 	lsr.w	r2, r1, r2
 8000d78:	eb43 0002 	adc.w	r0, r3, r2
 8000d7c:	bf08      	it	eq
 8000d7e:	ea20 70dc 	biceq.w	r0, r0, ip, lsr #31
 8000d82:	4770      	bx	lr

08000d84 <__aeabi_fmul>:
 8000d84:	f04f 0cff 	mov.w	ip, #255	; 0xff
 8000d88:	ea1c 52d0 	ands.w	r2, ip, r0, lsr #23
 8000d8c:	bf1e      	ittt	ne
 8000d8e:	ea1c 53d1 	andsne.w	r3, ip, r1, lsr #23
 8000d92:	ea92 0f0c 	teqne	r2, ip
 8000d96:	ea93 0f0c 	teqne	r3, ip
 8000d9a:	d06f      	beq.n	8000e7c <__aeabi_fmul+0xf8>
 8000d9c:	441a      	add	r2, r3
 8000d9e:	ea80 0c01 	eor.w	ip, r0, r1
 8000da2:	0240      	lsls	r0, r0, #9
 8000da4:	bf18      	it	ne
 8000da6:	ea5f 2141 	movsne.w	r1, r1, lsl #9
 8000daa:	d01e      	beq.n	8000dea <__aeabi_fmul+0x66>
 8000dac:	f04f 6300 	mov.w	r3, #134217728	; 0x8000000
 8000db0:	ea43 1050 	orr.w	r0, r3, r0, lsr #5
 8000db4:	ea43 1151 	orr.w	r1, r3, r1, lsr #5
 8000db8:	fba0 3101 	umull	r3, r1, r0, r1
 8000dbc:	f00c 4000 	and.w	r0, ip, #2147483648	; 0x80000000
 8000dc0:	f5b1 0f00 	cmp.w	r1, #8388608	; 0x800000
 8000dc4:	bf3e      	ittt	cc
 8000dc6:	0049      	lslcc	r1, r1, #1
 8000dc8:	ea41 71d3 	orrcc.w	r1, r1, r3, lsr #31
 8000dcc:	005b      	lslcc	r3, r3, #1
 8000dce:	ea40 0001 	orr.w	r0, r0, r1
 8000dd2:	f162 027f 	sbc.w	r2, r2, #127	; 0x7f
 8000dd6:	2afd      	cmp	r2, #253	; 0xfd
 8000dd8:	d81d      	bhi.n	8000e16 <__aeabi_fmul+0x92>
 8000dda:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 8000dde:	eb40 50c2 	adc.w	r0, r0, r2, lsl #23
 8000de2:	bf08      	it	eq
 8000de4:	f020 0001 	biceq.w	r0, r0, #1
 8000de8:	4770      	bx	lr
 8000dea:	f090 0f00 	teq	r0, #0
 8000dee:	f00c 4c00 	and.w	ip, ip, #2147483648	; 0x80000000
 8000df2:	bf08      	it	eq
 8000df4:	0249      	lsleq	r1, r1, #9
 8000df6:	ea4c 2050 	orr.w	r0, ip, r0, lsr #9
 8000dfa:	ea40 2051 	orr.w	r0, r0, r1, lsr #9
 8000dfe:	3a7f      	subs	r2, #127	; 0x7f
 8000e00:	bfc2      	ittt	gt
 8000e02:	f1d2 03ff 	rsbsgt	r3, r2, #255	; 0xff
 8000e06:	ea40 50c2 	orrgt.w	r0, r0, r2, lsl #23
 8000e0a:	4770      	bxgt	lr
 8000e0c:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
 8000e10:	f04f 0300 	mov.w	r3, #0
 8000e14:	3a01      	subs	r2, #1
 8000e16:	dc5d      	bgt.n	8000ed4 <__aeabi_fmul+0x150>
 8000e18:	f112 0f19 	cmn.w	r2, #25
 8000e1c:	bfdc      	itt	le
 8000e1e:	f000 4000 	andle.w	r0, r0, #2147483648	; 0x80000000
 8000e22:	4770      	bxle	lr
 8000e24:	f1c2 0200 	rsb	r2, r2, #0
 8000e28:	0041      	lsls	r1, r0, #1
 8000e2a:	fa21 f102 	lsr.w	r1, r1, r2
 8000e2e:	f1c2 0220 	rsb	r2, r2, #32
 8000e32:	fa00 fc02 	lsl.w	ip, r0, r2
 8000e36:	ea5f 0031 	movs.w	r0, r1, rrx
 8000e3a:	f140 0000 	adc.w	r0, r0, #0
 8000e3e:	ea53 034c 	orrs.w	r3, r3, ip, lsl #1
 8000e42:	bf08      	it	eq
 8000e44:	ea20 70dc 	biceq.w	r0, r0, ip, lsr #31
 8000e48:	4770      	bx	lr
 8000e4a:	f092 0f00 	teq	r2, #0
 8000e4e:	f000 4c00 	and.w	ip, r0, #2147483648	; 0x80000000
 8000e52:	bf02      	ittt	eq
 8000e54:	0040      	lsleq	r0, r0, #1
 8000e56:	f410 0f00 	tsteq.w	r0, #8388608	; 0x800000
 8000e5a:	3a01      	subeq	r2, #1
 8000e5c:	d0f9      	beq.n	8000e52 <__aeabi_fmul+0xce>
 8000e5e:	ea40 000c 	orr.w	r0, r0, ip
 8000e62:	f093 0f00 	teq	r3, #0
 8000e66:	f001 4c00 	and.w	ip, r1, #2147483648	; 0x80000000
 8000e6a:	bf02      	ittt	eq
 8000e6c:	0049      	lsleq	r1, r1, #1
 8000e6e:	f411 0f00 	tsteq.w	r1, #8388608	; 0x800000
 8000e72:	3b01      	subeq	r3, #1
 8000e74:	d0f9      	beq.n	8000e6a <__aeabi_fmul+0xe6>
 8000e76:	ea41 010c 	orr.w	r1, r1, ip
 8000e7a:	e78f      	b.n	8000d9c <__aeabi_fmul+0x18>
 8000e7c:	ea0c 53d1 	and.w	r3, ip, r1, lsr #23
 8000e80:	ea92 0f0c 	teq	r2, ip
 8000e84:	bf18      	it	ne
 8000e86:	ea93 0f0c 	teqne	r3, ip
 8000e8a:	d00a      	beq.n	8000ea2 <__aeabi_fmul+0x11e>
 8000e8c:	f030 4c00 	bics.w	ip, r0, #2147483648	; 0x80000000
 8000e90:	bf18      	it	ne
 8000e92:	f031 4c00 	bicsne.w	ip, r1, #2147483648	; 0x80000000
 8000e96:	d1d8      	bne.n	8000e4a <__aeabi_fmul+0xc6>
 8000e98:	ea80 0001 	eor.w	r0, r0, r1
 8000e9c:	f000 4000 	and.w	r0, r0, #2147483648	; 0x80000000
 8000ea0:	4770      	bx	lr
 8000ea2:	f090 0f00 	teq	r0, #0
 8000ea6:	bf17      	itett	ne
 8000ea8:	f090 4f00 	teqne	r0, #2147483648	; 0x80000000
 8000eac:	4608      	moveq	r0, r1
 8000eae:	f091 0f00 	teqne	r1, #0
 8000eb2:	f091 4f00 	teqne	r1, #2147483648	; 0x80000000
 8000eb6:	d014      	beq.n	8000ee2 <__aeabi_fmul+0x15e>
 8000eb8:	ea92 0f0c 	teq	r2, ip
 8000ebc:	d101      	bne.n	8000ec2 <__aeabi_fmul+0x13e>
 8000ebe:	0242      	lsls	r2, r0, #9
 8000ec0:	d10f      	bne.n	8000ee2 <__aeabi_fmul+0x15e>
 8000ec2:	ea93 0f0c 	teq	r3, ip
 8000ec6:	d103      	bne.n	8000ed0 <__aeabi_fmul+0x14c>
 8000ec8:	024b      	lsls	r3, r1, #9
 8000eca:	bf18      	it	ne
 8000ecc:	4608      	movne	r0, r1
 8000ece:	d108      	bne.n	8000ee2 <__aeabi_fmul+0x15e>
 8000ed0:	ea80 0001 	eor.w	r0, r0, r1
 8000ed4:	f000 4000 	and.w	r0, r0, #2147483648	; 0x80000000
 8000ed8:	f040 40fe 	orr.w	r0, r0, #2130706432	; 0x7f000000
 8000edc:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
 8000ee0:	4770      	bx	lr
 8000ee2:	f040 40fe 	orr.w	r0, r0, #2130706432	; 0x7f000000
 8000ee6:	f440 0040 	orr.w	r0, r0, #12582912	; 0xc00000
 8000eea:	4770      	bx	lr

08000eec <__aeabi_fdiv>:
 8000eec:	f04f 0cff 	mov.w	ip, #255	; 0xff
 8000ef0:	ea1c 52d0 	ands.w	r2, ip, r0, lsr #23
 8000ef4:	bf1e      	ittt	ne
 8000ef6:	ea1c 53d1 	andsne.w	r3, ip, r1, lsr #23
 8000efa:	ea92 0f0c 	teqne	r2, ip
 8000efe:	ea93 0f0c 	teqne	r3, ip
 8000f02:	d069      	beq.n	8000fd8 <__aeabi_fdiv+0xec>
 8000f04:	eba2 0203 	sub.w	r2, r2, r3
 8000f08:	ea80 0c01 	eor.w	ip, r0, r1
 8000f0c:	0249      	lsls	r1, r1, #9
 8000f0e:	ea4f 2040 	mov.w	r0, r0, lsl #9
 8000f12:	d037      	beq.n	8000f84 <__aeabi_fdiv+0x98>
 8000f14:	f04f 5380 	mov.w	r3, #268435456	; 0x10000000
 8000f18:	ea43 1111 	orr.w	r1, r3, r1, lsr #4
 8000f1c:	ea43 1310 	orr.w	r3, r3, r0, lsr #4
 8000f20:	f00c 4000 	and.w	r0, ip, #2147483648	; 0x80000000
 8000f24:	428b      	cmp	r3, r1
 8000f26:	bf38      	it	cc
 8000f28:	005b      	lslcc	r3, r3, #1
 8000f2a:	f142 027d 	adc.w	r2, r2, #125	; 0x7d
 8000f2e:	f44f 0c00 	mov.w	ip, #8388608	; 0x800000
 8000f32:	428b      	cmp	r3, r1
 8000f34:	bf24      	itt	cs
 8000f36:	1a5b      	subcs	r3, r3, r1
 8000f38:	ea40 000c 	orrcs.w	r0, r0, ip
 8000f3c:	ebb3 0f51 	cmp.w	r3, r1, lsr #1
 8000f40:	bf24      	itt	cs
 8000f42:	eba3 0351 	subcs.w	r3, r3, r1, lsr #1
 8000f46:	ea40 005c 	orrcs.w	r0, r0, ip, lsr #1
 8000f4a:	ebb3 0f91 	cmp.w	r3, r1, lsr #2
 8000f4e:	bf24      	itt	cs
 8000f50:	eba3 0391 	subcs.w	r3, r3, r1, lsr #2
 8000f54:	ea40 009c 	orrcs.w	r0, r0, ip, lsr #2
 8000f58:	ebb3 0fd1 	cmp.w	r3, r1, lsr #3
 8000f5c:	bf24      	itt	cs
 8000f5e:	eba3 03d1 	subcs.w	r3, r3, r1, lsr #3
 8000f62:	ea40 00dc 	orrcs.w	r0, r0, ip, lsr #3
 8000f66:	011b      	lsls	r3, r3, #4
 8000f68:	bf18      	it	ne
 8000f6a:	ea5f 1c1c 	movsne.w	ip, ip, lsr #4
 8000f6e:	d1e0      	bne.n	8000f32 <__aeabi_fdiv+0x46>
 8000f70:	2afd      	cmp	r2, #253	; 0xfd
 8000f72:	f63f af50 	bhi.w	8000e16 <__aeabi_fmul+0x92>
 8000f76:	428b      	cmp	r3, r1
 8000f78:	eb40 50c2 	adc.w	r0, r0, r2, lsl #23
 8000f7c:	bf08      	it	eq
 8000f7e:	f020 0001 	biceq.w	r0, r0, #1
 8000f82:	4770      	bx	lr
 8000f84:	f00c 4c00 	and.w	ip, ip, #2147483648	; 0x80000000
 8000f88:	ea4c 2050 	orr.w	r0, ip, r0, lsr #9
 8000f8c:	327f      	adds	r2, #127	; 0x7f
 8000f8e:	bfc2      	ittt	gt
 8000f90:	f1d2 03ff 	rsbsgt	r3, r2, #255	; 0xff
 8000f94:	ea40 50c2 	orrgt.w	r0, r0, r2, lsl #23
 8000f98:	4770      	bxgt	lr
 8000f9a:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
 8000f9e:	f04f 0300 	mov.w	r3, #0
 8000fa2:	3a01      	subs	r2, #1
 8000fa4:	e737      	b.n	8000e16 <__aeabi_fmul+0x92>
 8000fa6:	f092 0f00 	teq	r2, #0
 8000faa:	f000 4c00 	and.w	ip, r0, #2147483648	; 0x80000000
 8000fae:	bf02      	ittt	eq
 8000fb0:	0040      	lsleq	r0, r0, #1
 8000fb2:	f410 0f00 	tsteq.w	r0, #8388608	; 0x800000
 8000fb6:	3a01      	subeq	r2, #1
 8000fb8:	d0f9      	beq.n	8000fae <__aeabi_fdiv+0xc2>
 8000fba:	ea40 000c 	orr.w	r0, r0, ip
 8000fbe:	f093 0f00 	teq	r3, #0
 8000fc2:	f001 4c00 	and.w	ip, r1, #2147483648	; 0x80000000
 8000fc6:	bf02      	ittt	eq
 8000fc8:	0049      	lsleq	r1, r1, #1
 8000fca:	f411 0f00 	tsteq.w	r1, #8388608	; 0x800000
 8000fce:	3b01      	subeq	r3, #1
 8000fd0:	d0f9      	beq.n	8000fc6 <__aeabi_fdiv+0xda>
 8000fd2:	ea41 010c 	orr.w	r1, r1, ip
 8000fd6:	e795      	b.n	8000f04 <__aeabi_fdiv+0x18>
 8000fd8:	ea0c 53d1 	and.w	r3, ip, r1, lsr #23
 8000fdc:	ea92 0f0c 	teq	r2, ip
 8000fe0:	d108      	bne.n	8000ff4 <__aeabi_fdiv+0x108>
 8000fe2:	0242      	lsls	r2, r0, #9
 8000fe4:	f47f af7d 	bne.w	8000ee2 <__aeabi_fmul+0x15e>
 8000fe8:	ea93 0f0c 	teq	r3, ip
 8000fec:	f47f af70 	bne.w	8000ed0 <__aeabi_fmul+0x14c>
 8000ff0:	4608      	mov	r0, r1
 8000ff2:	e776      	b.n	8000ee2 <__aeabi_fmul+0x15e>
 8000ff4:	ea93 0f0c 	teq	r3, ip
 8000ff8:	d104      	bne.n	8001004 <__aeabi_fdiv+0x118>
 8000ffa:	024b      	lsls	r3, r1, #9
 8000ffc:	f43f af4c 	beq.w	8000e98 <__aeabi_fmul+0x114>
 8001000:	4608      	mov	r0, r1
 8001002:	e76e      	b.n	8000ee2 <__aeabi_fmul+0x15e>
 8001004:	f030 4c00 	bics.w	ip, r0, #2147483648	; 0x80000000
 8001008:	bf18      	it	ne
 800100a:	f031 4c00 	bicsne.w	ip, r1, #2147483648	; 0x80000000
 800100e:	d1ca      	bne.n	8000fa6 <__aeabi_fdiv+0xba>
 8001010:	f030 4200 	bics.w	r2, r0, #2147483648	; 0x80000000
 8001014:	f47f af5c 	bne.w	8000ed0 <__aeabi_fmul+0x14c>
 8001018:	f031 4300 	bics.w	r3, r1, #2147483648	; 0x80000000
 800101c:	f47f af3c 	bne.w	8000e98 <__aeabi_fmul+0x114>
 8001020:	e75f      	b.n	8000ee2 <__aeabi_fmul+0x15e>
 8001022:	bf00      	nop

08001024 <__gesf2>:
 8001024:	f04f 3cff 	mov.w	ip, #4294967295	; 0xffffffff
 8001028:	e006      	b.n	8001038 <__cmpsf2+0x4>
 800102a:	bf00      	nop

0800102c <__lesf2>:
 800102c:	f04f 0c01 	mov.w	ip, #1
 8001030:	e002      	b.n	8001038 <__cmpsf2+0x4>
 8001032:	bf00      	nop

08001034 <__cmpsf2>:
 8001034:	f04f 0c01 	mov.w	ip, #1
 8001038:	f84d cd04 	str.w	ip, [sp, #-4]!
 800103c:	ea4f 0240 	mov.w	r2, r0, lsl #1
 8001040:	ea4f 0341 	mov.w	r3, r1, lsl #1
 8001044:	ea7f 6c22 	mvns.w	ip, r2, asr #24
 8001048:	bf18      	it	ne
 800104a:	ea7f 6c23 	mvnsne.w	ip, r3, asr #24
 800104e:	d011      	beq.n	8001074 <__cmpsf2+0x40>
 8001050:	b001      	add	sp, #4
 8001052:	ea52 0c53 	orrs.w	ip, r2, r3, lsr #1
 8001056:	bf18      	it	ne
 8001058:	ea90 0f01 	teqne	r0, r1
 800105c:	bf58      	it	pl
 800105e:	ebb2 0003 	subspl.w	r0, r2, r3
 8001062:	bf88      	it	hi
 8001064:	17c8      	asrhi	r0, r1, #31
 8001066:	bf38      	it	cc
 8001068:	ea6f 70e1 	mvncc.w	r0, r1, asr #31
 800106c:	bf18      	it	ne
 800106e:	f040 0001 	orrne.w	r0, r0, #1
 8001072:	4770      	bx	lr
 8001074:	ea7f 6c22 	mvns.w	ip, r2, asr #24
 8001078:	d102      	bne.n	8001080 <__cmpsf2+0x4c>
 800107a:	ea5f 2c40 	movs.w	ip, r0, lsl #9
 800107e:	d105      	bne.n	800108c <__cmpsf2+0x58>
 8001080:	ea7f 6c23 	mvns.w	ip, r3, asr #24
 8001084:	d1e4      	bne.n	8001050 <__cmpsf2+0x1c>
 8001086:	ea5f 2c41 	movs.w	ip, r1, lsl #9
 800108a:	d0e1      	beq.n	8001050 <__cmpsf2+0x1c>
 800108c:	f85d 0b04 	ldr.w	r0, [sp], #4
 8001090:	4770      	bx	lr
 8001092:	bf00      	nop

08001094 <__aeabi_cfrcmple>:
 8001094:	4684      	mov	ip, r0
 8001096:	4608      	mov	r0, r1
 8001098:	4661      	mov	r1, ip
 800109a:	e7ff      	b.n	800109c <__aeabi_cfcmpeq>

0800109c <__aeabi_cfcmpeq>:
 800109c:	b50f      	push	{r0, r1, r2, r3, lr}
 800109e:	f7ff ffc9 	bl	8001034 <__cmpsf2>
 80010a2:	2800      	cmp	r0, #0
 80010a4:	bf48      	it	mi
 80010a6:	f110 0f00 	cmnmi.w	r0, #0
 80010aa:	bd0f      	pop	{r0, r1, r2, r3, pc}

080010ac <__aeabi_fcmpeq>:
 80010ac:	f84d ed08 	str.w	lr, [sp, #-8]!
 80010b0:	f7ff fff4 	bl	800109c <__aeabi_cfcmpeq>
 80010b4:	bf0c      	ite	eq
 80010b6:	2001      	moveq	r0, #1
 80010b8:	2000      	movne	r0, #0
 80010ba:	f85d fb08 	ldr.w	pc, [sp], #8
 80010be:	bf00      	nop

080010c0 <__aeabi_fcmplt>:
 80010c0:	f84d ed08 	str.w	lr, [sp, #-8]!
 80010c4:	f7ff ffea 	bl	800109c <__aeabi_cfcmpeq>
 80010c8:	bf34      	ite	cc
 80010ca:	2001      	movcc	r0, #1
 80010cc:	2000      	movcs	r0, #0
 80010ce:	f85d fb08 	ldr.w	pc, [sp], #8
 80010d2:	bf00      	nop

080010d4 <__aeabi_fcmple>:
 80010d4:	f84d ed08 	str.w	lr, [sp, #-8]!
 80010d8:	f7ff ffe0 	bl	800109c <__aeabi_cfcmpeq>
 80010dc:	bf94      	ite	ls
 80010de:	2001      	movls	r0, #1
 80010e0:	2000      	movhi	r0, #0
 80010e2:	f85d fb08 	ldr.w	pc, [sp], #8
 80010e6:	bf00      	nop

080010e8 <__aeabi_fcmpge>:
 80010e8:	f84d ed08 	str.w	lr, [sp, #-8]!
 80010ec:	f7ff ffd2 	bl	8001094 <__aeabi_cfrcmple>
 80010f0:	bf94      	ite	ls
 80010f2:	2001      	movls	r0, #1
 80010f4:	2000      	movhi	r0, #0
 80010f6:	f85d fb08 	ldr.w	pc, [sp], #8
 80010fa:	bf00      	nop

080010fc <__aeabi_fcmpgt>:
 80010fc:	f84d ed08 	str.w	lr, [sp, #-8]!
 8001100:	f7ff ffc8 	bl	8001094 <__aeabi_cfrcmple>
 8001104:	bf34      	ite	cc
 8001106:	2001      	movcc	r0, #1
 8001108:	2000      	movcs	r0, #0
 800110a:	f85d fb08 	ldr.w	pc, [sp], #8
 800110e:	bf00      	nop

08001110 <__aeabi_fcmpun>:
 8001110:	ea4f 0240 	mov.w	r2, r0, lsl #1
 8001114:	ea4f 0341 	mov.w	r3, r1, lsl #1
 8001118:	ea7f 6c22 	mvns.w	ip, r2, asr #24
 800111c:	d102      	bne.n	8001124 <__aeabi_fcmpun+0x14>
 800111e:	ea5f 2c40 	movs.w	ip, r0, lsl #9
 8001122:	d108      	bne.n	8001136 <__aeabi_fcmpun+0x26>
 8001124:	ea7f 6c23 	mvns.w	ip, r3, asr #24
 8001128:	d102      	bne.n	8001130 <__aeabi_fcmpun+0x20>
 800112a:	ea5f 2c41 	movs.w	ip, r1, lsl #9
 800112e:	d102      	bne.n	8001136 <__aeabi_fcmpun+0x26>
 8001130:	f04f 0000 	mov.w	r0, #0
 8001134:	4770      	bx	lr
 8001136:	f04f 0001 	mov.w	r0, #1
 800113a:	4770      	bx	lr

0800113c <__aeabi_f2uiz>:
 800113c:	0042      	lsls	r2, r0, #1
 800113e:	d20e      	bcs.n	800115e <__aeabi_f2uiz+0x22>
 8001140:	f1b2 4ffe 	cmp.w	r2, #2130706432	; 0x7f000000
 8001144:	d30b      	bcc.n	800115e <__aeabi_f2uiz+0x22>
 8001146:	f04f 039e 	mov.w	r3, #158	; 0x9e
 800114a:	ebb3 6212 	subs.w	r2, r3, r2, lsr #24
 800114e:	d409      	bmi.n	8001164 <__aeabi_f2uiz+0x28>
 8001150:	ea4f 2300 	mov.w	r3, r0, lsl #8
 8001154:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8001158:	fa23 f002 	lsr.w	r0, r3, r2
 800115c:	4770      	bx	lr
 800115e:	f04f 0000 	mov.w	r0, #0
 8001162:	4770      	bx	lr
 8001164:	f112 0f61 	cmn.w	r2, #97	; 0x61
 8001168:	d101      	bne.n	800116e <__aeabi_f2uiz+0x32>
 800116a:	0242      	lsls	r2, r0, #9
 800116c:	d102      	bne.n	8001174 <__aeabi_f2uiz+0x38>
 800116e:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8001172:	4770      	bx	lr
 8001174:	f04f 0000 	mov.w	r0, #0
 8001178:	4770      	bx	lr
 800117a:	bf00      	nop

0800117c <MahonyAHRSupdate>:
// Functions

//---------------------------------------------------------------------------------------------------
// AHRS algorithm update

void MahonyAHRSupdate(float gx, float gy, float gz, float ax, float ay, float az, float mx, float my, float mz) {
 800117c:	b5b0      	push	{r4, r5, r7, lr}
 800117e:	b0a2      	sub	sp, #136	; 0x88
 8001180:	af02      	add	r7, sp, #8
 8001182:	60f8      	str	r0, [r7, #12]
 8001184:	60b9      	str	r1, [r7, #8]
 8001186:	607a      	str	r2, [r7, #4]
 8001188:	603b      	str	r3, [r7, #0]
	float hx, hy, bx, bz;
	float halfvx, halfvy, halfvz, halfwx, halfwy, halfwz;
	float halfex, halfey, halfez;
	float qa, qb, qc;

	gx *= 0.0174533f;
 800118a:	491d      	ldr	r1, [pc, #116]	; (8001200 <MahonyAHRSupdate+0x84>)
 800118c:	68f8      	ldr	r0, [r7, #12]
 800118e:	f7ff fdf9 	bl	8000d84 <__aeabi_fmul>
 8001192:	4603      	mov	r3, r0
 8001194:	60fb      	str	r3, [r7, #12]
		gy *= 0.0174533f;
 8001196:	491a      	ldr	r1, [pc, #104]	; (8001200 <MahonyAHRSupdate+0x84>)
 8001198:	68b8      	ldr	r0, [r7, #8]
 800119a:	f7ff fdf3 	bl	8000d84 <__aeabi_fmul>
 800119e:	4603      	mov	r3, r0
 80011a0:	60bb      	str	r3, [r7, #8]
		gz *= 0.0174533f;
 80011a2:	4917      	ldr	r1, [pc, #92]	; (8001200 <MahonyAHRSupdate+0x84>)
 80011a4:	6878      	ldr	r0, [r7, #4]
 80011a6:	f7ff fded 	bl	8000d84 <__aeabi_fmul>
 80011aa:	4603      	mov	r3, r0
 80011ac:	607b      	str	r3, [r7, #4]
	// Use IMU algorithm if magnetometer measurement invalid (avoids NaN in magnetometer normalisation)
	if((mx == 0.0f) && (my == 0.0f) && (mz == 0.0f)) {
 80011ae:	f04f 0100 	mov.w	r1, #0
 80011b2:	f8d7 0098 	ldr.w	r0, [r7, #152]	; 0x98
 80011b6:	f7ff ff79 	bl	80010ac <__aeabi_fcmpeq>
 80011ba:	4603      	mov	r3, r0
 80011bc:	2b00      	cmp	r3, #0
 80011be:	d021      	beq.n	8001204 <MahonyAHRSupdate+0x88>
 80011c0:	f04f 0100 	mov.w	r1, #0
 80011c4:	f8d7 009c 	ldr.w	r0, [r7, #156]	; 0x9c
 80011c8:	f7ff ff70 	bl	80010ac <__aeabi_fcmpeq>
 80011cc:	4603      	mov	r3, r0
 80011ce:	2b00      	cmp	r3, #0
 80011d0:	d018      	beq.n	8001204 <MahonyAHRSupdate+0x88>
 80011d2:	f04f 0100 	mov.w	r1, #0
 80011d6:	f8d7 00a0 	ldr.w	r0, [r7, #160]	; 0xa0
 80011da:	f7ff ff67 	bl	80010ac <__aeabi_fcmpeq>
 80011de:	4603      	mov	r3, r0
 80011e0:	2b00      	cmp	r3, #0
 80011e2:	d00f      	beq.n	8001204 <MahonyAHRSupdate+0x88>
		MahonyAHRSupdateIMU(gx, gy, gz, ax, ay, az);
 80011e4:	f8d7 3094 	ldr.w	r3, [r7, #148]	; 0x94
 80011e8:	9301      	str	r3, [sp, #4]
 80011ea:	f8d7 3090 	ldr.w	r3, [r7, #144]	; 0x90
 80011ee:	9300      	str	r3, [sp, #0]
 80011f0:	683b      	ldr	r3, [r7, #0]
 80011f2:	687a      	ldr	r2, [r7, #4]
 80011f4:	68b9      	ldr	r1, [r7, #8]
 80011f6:	68f8      	ldr	r0, [r7, #12]
 80011f8:	f000 fd06 	bl	8001c08 <MahonyAHRSupdateIMU>
		return;
 80011fc:	f000 bcf9 	b.w	8001bf2 <MahonyAHRSupdate+0xa76>
 8001200:	3c8efa39 	.word	0x3c8efa39
	}

	// Compute feedback only if accelerometer measurement valid (avoids NaN in accelerometer normalisation)
	if(!((ax == 0.0f) && (ay == 0.0f) && (az == 0.0f))) {
 8001204:	f04f 0100 	mov.w	r1, #0
 8001208:	6838      	ldr	r0, [r7, #0]
 800120a:	f7ff ff4f 	bl	80010ac <__aeabi_fcmpeq>
 800120e:	4603      	mov	r3, r0
 8001210:	2b00      	cmp	r3, #0
 8001212:	d012      	beq.n	800123a <MahonyAHRSupdate+0xbe>
 8001214:	f04f 0100 	mov.w	r1, #0
 8001218:	f8d7 0090 	ldr.w	r0, [r7, #144]	; 0x90
 800121c:	f7ff ff46 	bl	80010ac <__aeabi_fcmpeq>
 8001220:	4603      	mov	r3, r0
 8001222:	2b00      	cmp	r3, #0
 8001224:	d009      	beq.n	800123a <MahonyAHRSupdate+0xbe>
 8001226:	f04f 0100 	mov.w	r1, #0
 800122a:	f8d7 0094 	ldr.w	r0, [r7, #148]	; 0x94
 800122e:	f7ff ff3d 	bl	80010ac <__aeabi_fcmpeq>
 8001232:	4603      	mov	r3, r0
 8001234:	2b00      	cmp	r3, #0
 8001236:	f040 83a1 	bne.w	800197c <MahonyAHRSupdate+0x800>

		// Normalise accelerometer measurement
		recipNorm = invSqrt(ax * ax + ay * ay + az * az);
 800123a:	6839      	ldr	r1, [r7, #0]
 800123c:	6838      	ldr	r0, [r7, #0]
 800123e:	f7ff fda1 	bl	8000d84 <__aeabi_fmul>
 8001242:	4603      	mov	r3, r0
 8001244:	461c      	mov	r4, r3
 8001246:	f8d7 1090 	ldr.w	r1, [r7, #144]	; 0x90
 800124a:	f8d7 0090 	ldr.w	r0, [r7, #144]	; 0x90
 800124e:	f7ff fd99 	bl	8000d84 <__aeabi_fmul>
 8001252:	4603      	mov	r3, r0
 8001254:	4619      	mov	r1, r3
 8001256:	4620      	mov	r0, r4
 8001258:	f7ff fc8c 	bl	8000b74 <__addsf3>
 800125c:	4603      	mov	r3, r0
 800125e:	461c      	mov	r4, r3
 8001260:	f8d7 1094 	ldr.w	r1, [r7, #148]	; 0x94
 8001264:	f8d7 0094 	ldr.w	r0, [r7, #148]	; 0x94
 8001268:	f7ff fd8c 	bl	8000d84 <__aeabi_fmul>
 800126c:	4603      	mov	r3, r0
 800126e:	4619      	mov	r1, r3
 8001270:	4620      	mov	r0, r4
 8001272:	f7ff fc7f 	bl	8000b74 <__addsf3>
 8001276:	4603      	mov	r3, r0
 8001278:	4618      	mov	r0, r3
 800127a:	f000 ff85 	bl	8002188 <invSqrt>
 800127e:	67f8      	str	r0, [r7, #124]	; 0x7c
		ax *= recipNorm;
 8001280:	6ff9      	ldr	r1, [r7, #124]	; 0x7c
 8001282:	6838      	ldr	r0, [r7, #0]
 8001284:	f7ff fd7e 	bl	8000d84 <__aeabi_fmul>
 8001288:	4603      	mov	r3, r0
 800128a:	603b      	str	r3, [r7, #0]
		ay *= recipNorm;
 800128c:	6ff9      	ldr	r1, [r7, #124]	; 0x7c
 800128e:	f8d7 0090 	ldr.w	r0, [r7, #144]	; 0x90
 8001292:	f7ff fd77 	bl	8000d84 <__aeabi_fmul>
 8001296:	4603      	mov	r3, r0
 8001298:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
		az *= recipNorm;     
 800129c:	6ff9      	ldr	r1, [r7, #124]	; 0x7c
 800129e:	f8d7 0094 	ldr.w	r0, [r7, #148]	; 0x94
 80012a2:	f7ff fd6f 	bl	8000d84 <__aeabi_fmul>
 80012a6:	4603      	mov	r3, r0
 80012a8:	f8c7 3094 	str.w	r3, [r7, #148]	; 0x94

		// Normalise magnetometer measurement
		recipNorm = invSqrt(mx * mx + my * my + mz * mz);
 80012ac:	f8d7 1098 	ldr.w	r1, [r7, #152]	; 0x98
 80012b0:	f8d7 0098 	ldr.w	r0, [r7, #152]	; 0x98
 80012b4:	f7ff fd66 	bl	8000d84 <__aeabi_fmul>
 80012b8:	4603      	mov	r3, r0
 80012ba:	461c      	mov	r4, r3
 80012bc:	f8d7 109c 	ldr.w	r1, [r7, #156]	; 0x9c
 80012c0:	f8d7 009c 	ldr.w	r0, [r7, #156]	; 0x9c
 80012c4:	f7ff fd5e 	bl	8000d84 <__aeabi_fmul>
 80012c8:	4603      	mov	r3, r0
 80012ca:	4619      	mov	r1, r3
 80012cc:	4620      	mov	r0, r4
 80012ce:	f7ff fc51 	bl	8000b74 <__addsf3>
 80012d2:	4603      	mov	r3, r0
 80012d4:	461c      	mov	r4, r3
 80012d6:	f8d7 10a0 	ldr.w	r1, [r7, #160]	; 0xa0
 80012da:	f8d7 00a0 	ldr.w	r0, [r7, #160]	; 0xa0
 80012de:	f7ff fd51 	bl	8000d84 <__aeabi_fmul>
 80012e2:	4603      	mov	r3, r0
 80012e4:	4619      	mov	r1, r3
 80012e6:	4620      	mov	r0, r4
 80012e8:	f7ff fc44 	bl	8000b74 <__addsf3>
 80012ec:	4603      	mov	r3, r0
 80012ee:	4618      	mov	r0, r3
 80012f0:	f000 ff4a 	bl	8002188 <invSqrt>
 80012f4:	67f8      	str	r0, [r7, #124]	; 0x7c
		mx *= recipNorm;
 80012f6:	6ff9      	ldr	r1, [r7, #124]	; 0x7c
 80012f8:	f8d7 0098 	ldr.w	r0, [r7, #152]	; 0x98
 80012fc:	f7ff fd42 	bl	8000d84 <__aeabi_fmul>
 8001300:	4603      	mov	r3, r0
 8001302:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
		my *= recipNorm;
 8001306:	6ff9      	ldr	r1, [r7, #124]	; 0x7c
 8001308:	f8d7 009c 	ldr.w	r0, [r7, #156]	; 0x9c
 800130c:	f7ff fd3a 	bl	8000d84 <__aeabi_fmul>
 8001310:	4603      	mov	r3, r0
 8001312:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
		mz *= recipNorm;   
 8001316:	6ff9      	ldr	r1, [r7, #124]	; 0x7c
 8001318:	f8d7 00a0 	ldr.w	r0, [r7, #160]	; 0xa0
 800131c:	f7ff fd32 	bl	8000d84 <__aeabi_fmul>
 8001320:	4603      	mov	r3, r0
 8001322:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0

        // Auxiliary variables to avoid repeated arithmetic
        q0q0 = q0 * q0;
 8001326:	4ba0      	ldr	r3, [pc, #640]	; (80015a8 <MahonyAHRSupdate+0x42c>)
 8001328:	681a      	ldr	r2, [r3, #0]
 800132a:	4b9f      	ldr	r3, [pc, #636]	; (80015a8 <MahonyAHRSupdate+0x42c>)
 800132c:	681b      	ldr	r3, [r3, #0]
 800132e:	4619      	mov	r1, r3
 8001330:	4610      	mov	r0, r2
 8001332:	f7ff fd27 	bl	8000d84 <__aeabi_fmul>
 8001336:	4603      	mov	r3, r0
 8001338:	67bb      	str	r3, [r7, #120]	; 0x78
        q0q1 = q0 * q1;
 800133a:	4b9b      	ldr	r3, [pc, #620]	; (80015a8 <MahonyAHRSupdate+0x42c>)
 800133c:	681a      	ldr	r2, [r3, #0]
 800133e:	4b9b      	ldr	r3, [pc, #620]	; (80015ac <MahonyAHRSupdate+0x430>)
 8001340:	681b      	ldr	r3, [r3, #0]
 8001342:	4619      	mov	r1, r3
 8001344:	4610      	mov	r0, r2
 8001346:	f7ff fd1d 	bl	8000d84 <__aeabi_fmul>
 800134a:	4603      	mov	r3, r0
 800134c:	677b      	str	r3, [r7, #116]	; 0x74
        q0q2 = q0 * q2;
 800134e:	4b96      	ldr	r3, [pc, #600]	; (80015a8 <MahonyAHRSupdate+0x42c>)
 8001350:	681a      	ldr	r2, [r3, #0]
 8001352:	4b97      	ldr	r3, [pc, #604]	; (80015b0 <MahonyAHRSupdate+0x434>)
 8001354:	681b      	ldr	r3, [r3, #0]
 8001356:	4619      	mov	r1, r3
 8001358:	4610      	mov	r0, r2
 800135a:	f7ff fd13 	bl	8000d84 <__aeabi_fmul>
 800135e:	4603      	mov	r3, r0
 8001360:	673b      	str	r3, [r7, #112]	; 0x70
        q0q3 = q0 * q3;
 8001362:	4b91      	ldr	r3, [pc, #580]	; (80015a8 <MahonyAHRSupdate+0x42c>)
 8001364:	681a      	ldr	r2, [r3, #0]
 8001366:	4b93      	ldr	r3, [pc, #588]	; (80015b4 <MahonyAHRSupdate+0x438>)
 8001368:	681b      	ldr	r3, [r3, #0]
 800136a:	4619      	mov	r1, r3
 800136c:	4610      	mov	r0, r2
 800136e:	f7ff fd09 	bl	8000d84 <__aeabi_fmul>
 8001372:	4603      	mov	r3, r0
 8001374:	66fb      	str	r3, [r7, #108]	; 0x6c
        q1q1 = q1 * q1;
 8001376:	4b8d      	ldr	r3, [pc, #564]	; (80015ac <MahonyAHRSupdate+0x430>)
 8001378:	681a      	ldr	r2, [r3, #0]
 800137a:	4b8c      	ldr	r3, [pc, #560]	; (80015ac <MahonyAHRSupdate+0x430>)
 800137c:	681b      	ldr	r3, [r3, #0]
 800137e:	4619      	mov	r1, r3
 8001380:	4610      	mov	r0, r2
 8001382:	f7ff fcff 	bl	8000d84 <__aeabi_fmul>
 8001386:	4603      	mov	r3, r0
 8001388:	66bb      	str	r3, [r7, #104]	; 0x68
        q1q2 = q1 * q2;
 800138a:	4b88      	ldr	r3, [pc, #544]	; (80015ac <MahonyAHRSupdate+0x430>)
 800138c:	681a      	ldr	r2, [r3, #0]
 800138e:	4b88      	ldr	r3, [pc, #544]	; (80015b0 <MahonyAHRSupdate+0x434>)
 8001390:	681b      	ldr	r3, [r3, #0]
 8001392:	4619      	mov	r1, r3
 8001394:	4610      	mov	r0, r2
 8001396:	f7ff fcf5 	bl	8000d84 <__aeabi_fmul>
 800139a:	4603      	mov	r3, r0
 800139c:	667b      	str	r3, [r7, #100]	; 0x64
        q1q3 = q1 * q3;
 800139e:	4b83      	ldr	r3, [pc, #524]	; (80015ac <MahonyAHRSupdate+0x430>)
 80013a0:	681a      	ldr	r2, [r3, #0]
 80013a2:	4b84      	ldr	r3, [pc, #528]	; (80015b4 <MahonyAHRSupdate+0x438>)
 80013a4:	681b      	ldr	r3, [r3, #0]
 80013a6:	4619      	mov	r1, r3
 80013a8:	4610      	mov	r0, r2
 80013aa:	f7ff fceb 	bl	8000d84 <__aeabi_fmul>
 80013ae:	4603      	mov	r3, r0
 80013b0:	663b      	str	r3, [r7, #96]	; 0x60
        q2q2 = q2 * q2;
 80013b2:	4b7f      	ldr	r3, [pc, #508]	; (80015b0 <MahonyAHRSupdate+0x434>)
 80013b4:	681a      	ldr	r2, [r3, #0]
 80013b6:	4b7e      	ldr	r3, [pc, #504]	; (80015b0 <MahonyAHRSupdate+0x434>)
 80013b8:	681b      	ldr	r3, [r3, #0]
 80013ba:	4619      	mov	r1, r3
 80013bc:	4610      	mov	r0, r2
 80013be:	f7ff fce1 	bl	8000d84 <__aeabi_fmul>
 80013c2:	4603      	mov	r3, r0
 80013c4:	65fb      	str	r3, [r7, #92]	; 0x5c
        q2q3 = q2 * q3;
 80013c6:	4b7a      	ldr	r3, [pc, #488]	; (80015b0 <MahonyAHRSupdate+0x434>)
 80013c8:	681a      	ldr	r2, [r3, #0]
 80013ca:	4b7a      	ldr	r3, [pc, #488]	; (80015b4 <MahonyAHRSupdate+0x438>)
 80013cc:	681b      	ldr	r3, [r3, #0]
 80013ce:	4619      	mov	r1, r3
 80013d0:	4610      	mov	r0, r2
 80013d2:	f7ff fcd7 	bl	8000d84 <__aeabi_fmul>
 80013d6:	4603      	mov	r3, r0
 80013d8:	65bb      	str	r3, [r7, #88]	; 0x58
        q3q3 = q3 * q3;   
 80013da:	4b76      	ldr	r3, [pc, #472]	; (80015b4 <MahonyAHRSupdate+0x438>)
 80013dc:	681a      	ldr	r2, [r3, #0]
 80013de:	4b75      	ldr	r3, [pc, #468]	; (80015b4 <MahonyAHRSupdate+0x438>)
 80013e0:	681b      	ldr	r3, [r3, #0]
 80013e2:	4619      	mov	r1, r3
 80013e4:	4610      	mov	r0, r2
 80013e6:	f7ff fccd 	bl	8000d84 <__aeabi_fmul>
 80013ea:	4603      	mov	r3, r0
 80013ec:	657b      	str	r3, [r7, #84]	; 0x54

        // Reference direction of Earth's magnetic field
        hx = 2.0f * (mx * (0.5f - q2q2 - q3q3) + my * (q1q2 - q0q3) + mz * (q1q3 + q0q2));
 80013ee:	6df9      	ldr	r1, [r7, #92]	; 0x5c
 80013f0:	f04f 507c 	mov.w	r0, #1056964608	; 0x3f000000
 80013f4:	f7ff fbbc 	bl	8000b70 <__aeabi_fsub>
 80013f8:	4603      	mov	r3, r0
 80013fa:	6d79      	ldr	r1, [r7, #84]	; 0x54
 80013fc:	4618      	mov	r0, r3
 80013fe:	f7ff fbb7 	bl	8000b70 <__aeabi_fsub>
 8001402:	4603      	mov	r3, r0
 8001404:	f8d7 1098 	ldr.w	r1, [r7, #152]	; 0x98
 8001408:	4618      	mov	r0, r3
 800140a:	f7ff fcbb 	bl	8000d84 <__aeabi_fmul>
 800140e:	4603      	mov	r3, r0
 8001410:	461c      	mov	r4, r3
 8001412:	6ef9      	ldr	r1, [r7, #108]	; 0x6c
 8001414:	6e78      	ldr	r0, [r7, #100]	; 0x64
 8001416:	f7ff fbab 	bl	8000b70 <__aeabi_fsub>
 800141a:	4603      	mov	r3, r0
 800141c:	f8d7 109c 	ldr.w	r1, [r7, #156]	; 0x9c
 8001420:	4618      	mov	r0, r3
 8001422:	f7ff fcaf 	bl	8000d84 <__aeabi_fmul>
 8001426:	4603      	mov	r3, r0
 8001428:	4619      	mov	r1, r3
 800142a:	4620      	mov	r0, r4
 800142c:	f7ff fba2 	bl	8000b74 <__addsf3>
 8001430:	4603      	mov	r3, r0
 8001432:	461c      	mov	r4, r3
 8001434:	6f39      	ldr	r1, [r7, #112]	; 0x70
 8001436:	6e38      	ldr	r0, [r7, #96]	; 0x60
 8001438:	f7ff fb9c 	bl	8000b74 <__addsf3>
 800143c:	4603      	mov	r3, r0
 800143e:	f8d7 10a0 	ldr.w	r1, [r7, #160]	; 0xa0
 8001442:	4618      	mov	r0, r3
 8001444:	f7ff fc9e 	bl	8000d84 <__aeabi_fmul>
 8001448:	4603      	mov	r3, r0
 800144a:	4619      	mov	r1, r3
 800144c:	4620      	mov	r0, r4
 800144e:	f7ff fb91 	bl	8000b74 <__addsf3>
 8001452:	4603      	mov	r3, r0
 8001454:	4619      	mov	r1, r3
 8001456:	4618      	mov	r0, r3
 8001458:	f7ff fb8c 	bl	8000b74 <__addsf3>
 800145c:	4603      	mov	r3, r0
 800145e:	653b      	str	r3, [r7, #80]	; 0x50
        hy = 2.0f * (mx * (q1q2 + q0q3) + my * (0.5f - q1q1 - q3q3) + mz * (q2q3 - q0q1));
 8001460:	6ef9      	ldr	r1, [r7, #108]	; 0x6c
 8001462:	6e78      	ldr	r0, [r7, #100]	; 0x64
 8001464:	f7ff fb86 	bl	8000b74 <__addsf3>
 8001468:	4603      	mov	r3, r0
 800146a:	f8d7 1098 	ldr.w	r1, [r7, #152]	; 0x98
 800146e:	4618      	mov	r0, r3
 8001470:	f7ff fc88 	bl	8000d84 <__aeabi_fmul>
 8001474:	4603      	mov	r3, r0
 8001476:	461c      	mov	r4, r3
 8001478:	6eb9      	ldr	r1, [r7, #104]	; 0x68
 800147a:	f04f 507c 	mov.w	r0, #1056964608	; 0x3f000000
 800147e:	f7ff fb77 	bl	8000b70 <__aeabi_fsub>
 8001482:	4603      	mov	r3, r0
 8001484:	6d79      	ldr	r1, [r7, #84]	; 0x54
 8001486:	4618      	mov	r0, r3
 8001488:	f7ff fb72 	bl	8000b70 <__aeabi_fsub>
 800148c:	4603      	mov	r3, r0
 800148e:	f8d7 109c 	ldr.w	r1, [r7, #156]	; 0x9c
 8001492:	4618      	mov	r0, r3
 8001494:	f7ff fc76 	bl	8000d84 <__aeabi_fmul>
 8001498:	4603      	mov	r3, r0
 800149a:	4619      	mov	r1, r3
 800149c:	4620      	mov	r0, r4
 800149e:	f7ff fb69 	bl	8000b74 <__addsf3>
 80014a2:	4603      	mov	r3, r0
 80014a4:	461c      	mov	r4, r3
 80014a6:	6f79      	ldr	r1, [r7, #116]	; 0x74
 80014a8:	6db8      	ldr	r0, [r7, #88]	; 0x58
 80014aa:	f7ff fb61 	bl	8000b70 <__aeabi_fsub>
 80014ae:	4603      	mov	r3, r0
 80014b0:	f8d7 10a0 	ldr.w	r1, [r7, #160]	; 0xa0
 80014b4:	4618      	mov	r0, r3
 80014b6:	f7ff fc65 	bl	8000d84 <__aeabi_fmul>
 80014ba:	4603      	mov	r3, r0
 80014bc:	4619      	mov	r1, r3
 80014be:	4620      	mov	r0, r4
 80014c0:	f7ff fb58 	bl	8000b74 <__addsf3>
 80014c4:	4603      	mov	r3, r0
 80014c6:	4619      	mov	r1, r3
 80014c8:	4618      	mov	r0, r3
 80014ca:	f7ff fb53 	bl	8000b74 <__addsf3>
 80014ce:	4603      	mov	r3, r0
 80014d0:	64fb      	str	r3, [r7, #76]	; 0x4c
        bx = sqrt(hx * hx + hy * hy);
 80014d2:	6d39      	ldr	r1, [r7, #80]	; 0x50
 80014d4:	6d38      	ldr	r0, [r7, #80]	; 0x50
 80014d6:	f7ff fc55 	bl	8000d84 <__aeabi_fmul>
 80014da:	4603      	mov	r3, r0
 80014dc:	461c      	mov	r4, r3
 80014de:	6cf9      	ldr	r1, [r7, #76]	; 0x4c
 80014e0:	6cf8      	ldr	r0, [r7, #76]	; 0x4c
 80014e2:	f7ff fc4f 	bl	8000d84 <__aeabi_fmul>
 80014e6:	4603      	mov	r3, r0
 80014e8:	4619      	mov	r1, r3
 80014ea:	4620      	mov	r0, r4
 80014ec:	f7ff fb42 	bl	8000b74 <__addsf3>
 80014f0:	4603      	mov	r3, r0
 80014f2:	4618      	mov	r0, r3
 80014f4:	f7fe ff98 	bl	8000428 <__aeabi_f2d>
 80014f8:	4603      	mov	r3, r0
 80014fa:	460c      	mov	r4, r1
 80014fc:	4618      	mov	r0, r3
 80014fe:	4621      	mov	r1, r4
 8001500:	f009 fd4e 	bl	800afa0 <sqrt>
 8001504:	4603      	mov	r3, r0
 8001506:	460c      	mov	r4, r1
 8001508:	4618      	mov	r0, r3
 800150a:	4621      	mov	r1, r4
 800150c:	f7ff fadc 	bl	8000ac8 <__aeabi_d2f>
 8001510:	4603      	mov	r3, r0
 8001512:	64bb      	str	r3, [r7, #72]	; 0x48
        bz = 2.0f * (mx * (q1q3 - q0q2) + my * (q2q3 + q0q1) + mz * (0.5f - q1q1 - q2q2));
 8001514:	6f39      	ldr	r1, [r7, #112]	; 0x70
 8001516:	6e38      	ldr	r0, [r7, #96]	; 0x60
 8001518:	f7ff fb2a 	bl	8000b70 <__aeabi_fsub>
 800151c:	4603      	mov	r3, r0
 800151e:	f8d7 1098 	ldr.w	r1, [r7, #152]	; 0x98
 8001522:	4618      	mov	r0, r3
 8001524:	f7ff fc2e 	bl	8000d84 <__aeabi_fmul>
 8001528:	4603      	mov	r3, r0
 800152a:	461c      	mov	r4, r3
 800152c:	6f79      	ldr	r1, [r7, #116]	; 0x74
 800152e:	6db8      	ldr	r0, [r7, #88]	; 0x58
 8001530:	f7ff fb20 	bl	8000b74 <__addsf3>
 8001534:	4603      	mov	r3, r0
 8001536:	f8d7 109c 	ldr.w	r1, [r7, #156]	; 0x9c
 800153a:	4618      	mov	r0, r3
 800153c:	f7ff fc22 	bl	8000d84 <__aeabi_fmul>
 8001540:	4603      	mov	r3, r0
 8001542:	4619      	mov	r1, r3
 8001544:	4620      	mov	r0, r4
 8001546:	f7ff fb15 	bl	8000b74 <__addsf3>
 800154a:	4603      	mov	r3, r0
 800154c:	461c      	mov	r4, r3
 800154e:	6eb9      	ldr	r1, [r7, #104]	; 0x68
 8001550:	f04f 507c 	mov.w	r0, #1056964608	; 0x3f000000
 8001554:	f7ff fb0c 	bl	8000b70 <__aeabi_fsub>
 8001558:	4603      	mov	r3, r0
 800155a:	6df9      	ldr	r1, [r7, #92]	; 0x5c
 800155c:	4618      	mov	r0, r3
 800155e:	f7ff fb07 	bl	8000b70 <__aeabi_fsub>
 8001562:	4603      	mov	r3, r0
 8001564:	f8d7 10a0 	ldr.w	r1, [r7, #160]	; 0xa0
 8001568:	4618      	mov	r0, r3
 800156a:	f7ff fc0b 	bl	8000d84 <__aeabi_fmul>
 800156e:	4603      	mov	r3, r0
 8001570:	4619      	mov	r1, r3
 8001572:	4620      	mov	r0, r4
 8001574:	f7ff fafe 	bl	8000b74 <__addsf3>
 8001578:	4603      	mov	r3, r0
 800157a:	4619      	mov	r1, r3
 800157c:	4618      	mov	r0, r3
 800157e:	f7ff faf9 	bl	8000b74 <__addsf3>
 8001582:	4603      	mov	r3, r0
 8001584:	647b      	str	r3, [r7, #68]	; 0x44

		// Estimated direction of gravity and magnetic field
		halfvx = q1q3 - q0q2;
 8001586:	6f39      	ldr	r1, [r7, #112]	; 0x70
 8001588:	6e38      	ldr	r0, [r7, #96]	; 0x60
 800158a:	f7ff faf1 	bl	8000b70 <__aeabi_fsub>
 800158e:	4603      	mov	r3, r0
 8001590:	643b      	str	r3, [r7, #64]	; 0x40
		halfvy = q0q1 + q2q3;
 8001592:	6db9      	ldr	r1, [r7, #88]	; 0x58
 8001594:	6f78      	ldr	r0, [r7, #116]	; 0x74
 8001596:	f7ff faed 	bl	8000b74 <__addsf3>
 800159a:	4603      	mov	r3, r0
 800159c:	63fb      	str	r3, [r7, #60]	; 0x3c
		halfvz = q0q0 - 0.5f + q3q3;
 800159e:	f04f 517c 	mov.w	r1, #1056964608	; 0x3f000000
 80015a2:	6fb8      	ldr	r0, [r7, #120]	; 0x78
 80015a4:	e008      	b.n	80015b8 <MahonyAHRSupdate+0x43c>
 80015a6:	bf00      	nop
 80015a8:	20000004 	.word	0x20000004
 80015ac:	20000224 	.word	0x20000224
 80015b0:	20000228 	.word	0x20000228
 80015b4:	2000022c 	.word	0x2000022c
 80015b8:	f7ff fada 	bl	8000b70 <__aeabi_fsub>
 80015bc:	4603      	mov	r3, r0
 80015be:	4619      	mov	r1, r3
 80015c0:	6d78      	ldr	r0, [r7, #84]	; 0x54
 80015c2:	f7ff fad7 	bl	8000b74 <__addsf3>
 80015c6:	4603      	mov	r3, r0
 80015c8:	63bb      	str	r3, [r7, #56]	; 0x38
        halfwx = bx * (0.5f - q2q2 - q3q3) + bz * (q1q3 - q0q2);
 80015ca:	6df9      	ldr	r1, [r7, #92]	; 0x5c
 80015cc:	f04f 507c 	mov.w	r0, #1056964608	; 0x3f000000
 80015d0:	f7ff face 	bl	8000b70 <__aeabi_fsub>
 80015d4:	4603      	mov	r3, r0
 80015d6:	6d79      	ldr	r1, [r7, #84]	; 0x54
 80015d8:	4618      	mov	r0, r3
 80015da:	f7ff fac9 	bl	8000b70 <__aeabi_fsub>
 80015de:	4603      	mov	r3, r0
 80015e0:	6cb9      	ldr	r1, [r7, #72]	; 0x48
 80015e2:	4618      	mov	r0, r3
 80015e4:	f7ff fbce 	bl	8000d84 <__aeabi_fmul>
 80015e8:	4603      	mov	r3, r0
 80015ea:	461c      	mov	r4, r3
 80015ec:	6f39      	ldr	r1, [r7, #112]	; 0x70
 80015ee:	6e38      	ldr	r0, [r7, #96]	; 0x60
 80015f0:	f7ff fabe 	bl	8000b70 <__aeabi_fsub>
 80015f4:	4603      	mov	r3, r0
 80015f6:	6c79      	ldr	r1, [r7, #68]	; 0x44
 80015f8:	4618      	mov	r0, r3
 80015fa:	f7ff fbc3 	bl	8000d84 <__aeabi_fmul>
 80015fe:	4603      	mov	r3, r0
 8001600:	4619      	mov	r1, r3
 8001602:	4620      	mov	r0, r4
 8001604:	f7ff fab6 	bl	8000b74 <__addsf3>
 8001608:	4603      	mov	r3, r0
 800160a:	637b      	str	r3, [r7, #52]	; 0x34
        halfwy = bx * (q1q2 - q0q3) + bz * (q0q1 + q2q3);
 800160c:	6ef9      	ldr	r1, [r7, #108]	; 0x6c
 800160e:	6e78      	ldr	r0, [r7, #100]	; 0x64
 8001610:	f7ff faae 	bl	8000b70 <__aeabi_fsub>
 8001614:	4603      	mov	r3, r0
 8001616:	6cb9      	ldr	r1, [r7, #72]	; 0x48
 8001618:	4618      	mov	r0, r3
 800161a:	f7ff fbb3 	bl	8000d84 <__aeabi_fmul>
 800161e:	4603      	mov	r3, r0
 8001620:	461c      	mov	r4, r3
 8001622:	6db9      	ldr	r1, [r7, #88]	; 0x58
 8001624:	6f78      	ldr	r0, [r7, #116]	; 0x74
 8001626:	f7ff faa5 	bl	8000b74 <__addsf3>
 800162a:	4603      	mov	r3, r0
 800162c:	6c79      	ldr	r1, [r7, #68]	; 0x44
 800162e:	4618      	mov	r0, r3
 8001630:	f7ff fba8 	bl	8000d84 <__aeabi_fmul>
 8001634:	4603      	mov	r3, r0
 8001636:	4619      	mov	r1, r3
 8001638:	4620      	mov	r0, r4
 800163a:	f7ff fa9b 	bl	8000b74 <__addsf3>
 800163e:	4603      	mov	r3, r0
 8001640:	633b      	str	r3, [r7, #48]	; 0x30
        halfwz = bx * (q0q2 + q1q3) + bz * (0.5f - q1q1 - q2q2);  
 8001642:	6e39      	ldr	r1, [r7, #96]	; 0x60
 8001644:	6f38      	ldr	r0, [r7, #112]	; 0x70
 8001646:	f7ff fa95 	bl	8000b74 <__addsf3>
 800164a:	4603      	mov	r3, r0
 800164c:	6cb9      	ldr	r1, [r7, #72]	; 0x48
 800164e:	4618      	mov	r0, r3
 8001650:	f7ff fb98 	bl	8000d84 <__aeabi_fmul>
 8001654:	4603      	mov	r3, r0
 8001656:	461c      	mov	r4, r3
 8001658:	6eb9      	ldr	r1, [r7, #104]	; 0x68
 800165a:	f04f 507c 	mov.w	r0, #1056964608	; 0x3f000000
 800165e:	f7ff fa87 	bl	8000b70 <__aeabi_fsub>
 8001662:	4603      	mov	r3, r0
 8001664:	6df9      	ldr	r1, [r7, #92]	; 0x5c
 8001666:	4618      	mov	r0, r3
 8001668:	f7ff fa82 	bl	8000b70 <__aeabi_fsub>
 800166c:	4603      	mov	r3, r0
 800166e:	6c79      	ldr	r1, [r7, #68]	; 0x44
 8001670:	4618      	mov	r0, r3
 8001672:	f7ff fb87 	bl	8000d84 <__aeabi_fmul>
 8001676:	4603      	mov	r3, r0
 8001678:	4619      	mov	r1, r3
 800167a:	4620      	mov	r0, r4
 800167c:	f7ff fa7a 	bl	8000b74 <__addsf3>
 8001680:	4603      	mov	r3, r0
 8001682:	62fb      	str	r3, [r7, #44]	; 0x2c
	
		// Error is sum of cross product between estimated direction and measured direction of field vectors
		halfex = (ay * halfvz - az * halfvy) + (my * halfwz - mz * halfwy);
 8001684:	6bb9      	ldr	r1, [r7, #56]	; 0x38
 8001686:	f8d7 0090 	ldr.w	r0, [r7, #144]	; 0x90
 800168a:	f7ff fb7b 	bl	8000d84 <__aeabi_fmul>
 800168e:	4603      	mov	r3, r0
 8001690:	461c      	mov	r4, r3
 8001692:	6bf9      	ldr	r1, [r7, #60]	; 0x3c
 8001694:	f8d7 0094 	ldr.w	r0, [r7, #148]	; 0x94
 8001698:	f7ff fb74 	bl	8000d84 <__aeabi_fmul>
 800169c:	4603      	mov	r3, r0
 800169e:	4619      	mov	r1, r3
 80016a0:	4620      	mov	r0, r4
 80016a2:	f7ff fa65 	bl	8000b70 <__aeabi_fsub>
 80016a6:	4603      	mov	r3, r0
 80016a8:	461c      	mov	r4, r3
 80016aa:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 80016ac:	f8d7 009c 	ldr.w	r0, [r7, #156]	; 0x9c
 80016b0:	f7ff fb68 	bl	8000d84 <__aeabi_fmul>
 80016b4:	4603      	mov	r3, r0
 80016b6:	461d      	mov	r5, r3
 80016b8:	6b39      	ldr	r1, [r7, #48]	; 0x30
 80016ba:	f8d7 00a0 	ldr.w	r0, [r7, #160]	; 0xa0
 80016be:	f7ff fb61 	bl	8000d84 <__aeabi_fmul>
 80016c2:	4603      	mov	r3, r0
 80016c4:	4619      	mov	r1, r3
 80016c6:	4628      	mov	r0, r5
 80016c8:	f7ff fa52 	bl	8000b70 <__aeabi_fsub>
 80016cc:	4603      	mov	r3, r0
 80016ce:	4619      	mov	r1, r3
 80016d0:	4620      	mov	r0, r4
 80016d2:	f7ff fa4f 	bl	8000b74 <__addsf3>
 80016d6:	4603      	mov	r3, r0
 80016d8:	62bb      	str	r3, [r7, #40]	; 0x28
		halfey = (az * halfvx - ax * halfvz) + (mz * halfwx - mx * halfwz);
 80016da:	6c39      	ldr	r1, [r7, #64]	; 0x40
 80016dc:	f8d7 0094 	ldr.w	r0, [r7, #148]	; 0x94
 80016e0:	f7ff fb50 	bl	8000d84 <__aeabi_fmul>
 80016e4:	4603      	mov	r3, r0
 80016e6:	461c      	mov	r4, r3
 80016e8:	6bb9      	ldr	r1, [r7, #56]	; 0x38
 80016ea:	6838      	ldr	r0, [r7, #0]
 80016ec:	f7ff fb4a 	bl	8000d84 <__aeabi_fmul>
 80016f0:	4603      	mov	r3, r0
 80016f2:	4619      	mov	r1, r3
 80016f4:	4620      	mov	r0, r4
 80016f6:	f7ff fa3b 	bl	8000b70 <__aeabi_fsub>
 80016fa:	4603      	mov	r3, r0
 80016fc:	461c      	mov	r4, r3
 80016fe:	6b79      	ldr	r1, [r7, #52]	; 0x34
 8001700:	f8d7 00a0 	ldr.w	r0, [r7, #160]	; 0xa0
 8001704:	f7ff fb3e 	bl	8000d84 <__aeabi_fmul>
 8001708:	4603      	mov	r3, r0
 800170a:	461d      	mov	r5, r3
 800170c:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 800170e:	f8d7 0098 	ldr.w	r0, [r7, #152]	; 0x98
 8001712:	f7ff fb37 	bl	8000d84 <__aeabi_fmul>
 8001716:	4603      	mov	r3, r0
 8001718:	4619      	mov	r1, r3
 800171a:	4628      	mov	r0, r5
 800171c:	f7ff fa28 	bl	8000b70 <__aeabi_fsub>
 8001720:	4603      	mov	r3, r0
 8001722:	4619      	mov	r1, r3
 8001724:	4620      	mov	r0, r4
 8001726:	f7ff fa25 	bl	8000b74 <__addsf3>
 800172a:	4603      	mov	r3, r0
 800172c:	627b      	str	r3, [r7, #36]	; 0x24
		halfez = (ax * halfvy - ay * halfvx) + (mx * halfwy - my * halfwx);
 800172e:	6bf9      	ldr	r1, [r7, #60]	; 0x3c
 8001730:	6838      	ldr	r0, [r7, #0]
 8001732:	f7ff fb27 	bl	8000d84 <__aeabi_fmul>
 8001736:	4603      	mov	r3, r0
 8001738:	461c      	mov	r4, r3
 800173a:	6c39      	ldr	r1, [r7, #64]	; 0x40
 800173c:	f8d7 0090 	ldr.w	r0, [r7, #144]	; 0x90
 8001740:	f7ff fb20 	bl	8000d84 <__aeabi_fmul>
 8001744:	4603      	mov	r3, r0
 8001746:	4619      	mov	r1, r3
 8001748:	4620      	mov	r0, r4
 800174a:	f7ff fa11 	bl	8000b70 <__aeabi_fsub>
 800174e:	4603      	mov	r3, r0
 8001750:	461c      	mov	r4, r3
 8001752:	6b39      	ldr	r1, [r7, #48]	; 0x30
 8001754:	f8d7 0098 	ldr.w	r0, [r7, #152]	; 0x98
 8001758:	f7ff fb14 	bl	8000d84 <__aeabi_fmul>
 800175c:	4603      	mov	r3, r0
 800175e:	461d      	mov	r5, r3
 8001760:	6b79      	ldr	r1, [r7, #52]	; 0x34
 8001762:	f8d7 009c 	ldr.w	r0, [r7, #156]	; 0x9c
 8001766:	f7ff fb0d 	bl	8000d84 <__aeabi_fmul>
 800176a:	4603      	mov	r3, r0
 800176c:	4619      	mov	r1, r3
 800176e:	4628      	mov	r0, r5
 8001770:	f7ff f9fe 	bl	8000b70 <__aeabi_fsub>
 8001774:	4603      	mov	r3, r0
 8001776:	4619      	mov	r1, r3
 8001778:	4620      	mov	r0, r4
 800177a:	f7ff f9fb 	bl	8000b74 <__addsf3>
 800177e:	4603      	mov	r3, r0
 8001780:	623b      	str	r3, [r7, #32]

		// Compute and apply integral feedback if enabled
		if(twoKi > 0.0f) {
 8001782:	4b34      	ldr	r3, [pc, #208]	; (8001854 <MahonyAHRSupdate+0x6d8>)
 8001784:	681b      	ldr	r3, [r3, #0]
 8001786:	f04f 0100 	mov.w	r1, #0
 800178a:	4618      	mov	r0, r3
 800178c:	f7ff fcb6 	bl	80010fc <__aeabi_fcmpgt>
 8001790:	4603      	mov	r3, r0
 8001792:	2b00      	cmp	r3, #0
 8001794:	d068      	beq.n	8001868 <MahonyAHRSupdate+0x6ec>
			integralFBx += twoKi * halfex * (1.0f / sampleFreq);	// integral error scaled by Ki
 8001796:	4b2f      	ldr	r3, [pc, #188]	; (8001854 <MahonyAHRSupdate+0x6d8>)
 8001798:	681b      	ldr	r3, [r3, #0]
 800179a:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 800179c:	4618      	mov	r0, r3
 800179e:	f7ff faf1 	bl	8000d84 <__aeabi_fmul>
 80017a2:	4603      	mov	r3, r0
 80017a4:	492c      	ldr	r1, [pc, #176]	; (8001858 <MahonyAHRSupdate+0x6dc>)
 80017a6:	4618      	mov	r0, r3
 80017a8:	f7ff faec 	bl	8000d84 <__aeabi_fmul>
 80017ac:	4603      	mov	r3, r0
 80017ae:	461a      	mov	r2, r3
 80017b0:	4b2a      	ldr	r3, [pc, #168]	; (800185c <MahonyAHRSupdate+0x6e0>)
 80017b2:	681b      	ldr	r3, [r3, #0]
 80017b4:	4619      	mov	r1, r3
 80017b6:	4610      	mov	r0, r2
 80017b8:	f7ff f9dc 	bl	8000b74 <__addsf3>
 80017bc:	4603      	mov	r3, r0
 80017be:	461a      	mov	r2, r3
 80017c0:	4b26      	ldr	r3, [pc, #152]	; (800185c <MahonyAHRSupdate+0x6e0>)
 80017c2:	601a      	str	r2, [r3, #0]
			integralFBy += twoKi * halfey * (1.0f / sampleFreq);
 80017c4:	4b23      	ldr	r3, [pc, #140]	; (8001854 <MahonyAHRSupdate+0x6d8>)
 80017c6:	681b      	ldr	r3, [r3, #0]
 80017c8:	6a79      	ldr	r1, [r7, #36]	; 0x24
 80017ca:	4618      	mov	r0, r3
 80017cc:	f7ff fada 	bl	8000d84 <__aeabi_fmul>
 80017d0:	4603      	mov	r3, r0
 80017d2:	4921      	ldr	r1, [pc, #132]	; (8001858 <MahonyAHRSupdate+0x6dc>)
 80017d4:	4618      	mov	r0, r3
 80017d6:	f7ff fad5 	bl	8000d84 <__aeabi_fmul>
 80017da:	4603      	mov	r3, r0
 80017dc:	461a      	mov	r2, r3
 80017de:	4b20      	ldr	r3, [pc, #128]	; (8001860 <MahonyAHRSupdate+0x6e4>)
 80017e0:	681b      	ldr	r3, [r3, #0]
 80017e2:	4619      	mov	r1, r3
 80017e4:	4610      	mov	r0, r2
 80017e6:	f7ff f9c5 	bl	8000b74 <__addsf3>
 80017ea:	4603      	mov	r3, r0
 80017ec:	461a      	mov	r2, r3
 80017ee:	4b1c      	ldr	r3, [pc, #112]	; (8001860 <MahonyAHRSupdate+0x6e4>)
 80017f0:	601a      	str	r2, [r3, #0]
			integralFBz += twoKi * halfez * (1.0f / sampleFreq);
 80017f2:	4b18      	ldr	r3, [pc, #96]	; (8001854 <MahonyAHRSupdate+0x6d8>)
 80017f4:	681b      	ldr	r3, [r3, #0]
 80017f6:	6a39      	ldr	r1, [r7, #32]
 80017f8:	4618      	mov	r0, r3
 80017fa:	f7ff fac3 	bl	8000d84 <__aeabi_fmul>
 80017fe:	4603      	mov	r3, r0
 8001800:	4915      	ldr	r1, [pc, #84]	; (8001858 <MahonyAHRSupdate+0x6dc>)
 8001802:	4618      	mov	r0, r3
 8001804:	f7ff fabe 	bl	8000d84 <__aeabi_fmul>
 8001808:	4603      	mov	r3, r0
 800180a:	461a      	mov	r2, r3
 800180c:	4b15      	ldr	r3, [pc, #84]	; (8001864 <MahonyAHRSupdate+0x6e8>)
 800180e:	681b      	ldr	r3, [r3, #0]
 8001810:	4619      	mov	r1, r3
 8001812:	4610      	mov	r0, r2
 8001814:	f7ff f9ae 	bl	8000b74 <__addsf3>
 8001818:	4603      	mov	r3, r0
 800181a:	461a      	mov	r2, r3
 800181c:	4b11      	ldr	r3, [pc, #68]	; (8001864 <MahonyAHRSupdate+0x6e8>)
 800181e:	601a      	str	r2, [r3, #0]
			gx += integralFBx;	// apply integral feedback
 8001820:	4b0e      	ldr	r3, [pc, #56]	; (800185c <MahonyAHRSupdate+0x6e0>)
 8001822:	681b      	ldr	r3, [r3, #0]
 8001824:	4619      	mov	r1, r3
 8001826:	68f8      	ldr	r0, [r7, #12]
 8001828:	f7ff f9a4 	bl	8000b74 <__addsf3>
 800182c:	4603      	mov	r3, r0
 800182e:	60fb      	str	r3, [r7, #12]
			gy += integralFBy;
 8001830:	4b0b      	ldr	r3, [pc, #44]	; (8001860 <MahonyAHRSupdate+0x6e4>)
 8001832:	681b      	ldr	r3, [r3, #0]
 8001834:	4619      	mov	r1, r3
 8001836:	68b8      	ldr	r0, [r7, #8]
 8001838:	f7ff f99c 	bl	8000b74 <__addsf3>
 800183c:	4603      	mov	r3, r0
 800183e:	60bb      	str	r3, [r7, #8]
			gz += integralFBz;
 8001840:	4b08      	ldr	r3, [pc, #32]	; (8001864 <MahonyAHRSupdate+0x6e8>)
 8001842:	681b      	ldr	r3, [r3, #0]
 8001844:	4619      	mov	r1, r3
 8001846:	6878      	ldr	r0, [r7, #4]
 8001848:	f7ff f994 	bl	8000b74 <__addsf3>
 800184c:	4603      	mov	r3, r0
 800184e:	607b      	str	r3, [r7, #4]
 8001850:	e016      	b.n	8001880 <MahonyAHRSupdate+0x704>
 8001852:	bf00      	nop
 8001854:	2000021c 	.word	0x2000021c
 8001858:	3c23d70a 	.word	0x3c23d70a
 800185c:	20000230 	.word	0x20000230
 8001860:	20000234 	.word	0x20000234
 8001864:	20000238 	.word	0x20000238
		}
		else {
			integralFBx = 0.0f;	// prevent integral windup
 8001868:	4b95      	ldr	r3, [pc, #596]	; (8001ac0 <MahonyAHRSupdate+0x944>)
 800186a:	f04f 0200 	mov.w	r2, #0
 800186e:	601a      	str	r2, [r3, #0]
			integralFBy = 0.0f;
 8001870:	4b94      	ldr	r3, [pc, #592]	; (8001ac4 <MahonyAHRSupdate+0x948>)
 8001872:	f04f 0200 	mov.w	r2, #0
 8001876:	601a      	str	r2, [r3, #0]
			integralFBz = 0.0f;
 8001878:	4b93      	ldr	r3, [pc, #588]	; (8001ac8 <MahonyAHRSupdate+0x94c>)
 800187a:	f04f 0200 	mov.w	r2, #0
 800187e:	601a      	str	r2, [r3, #0]
		}

		// Apply proportional feedback
		gx += twoKp * halfex;
 8001880:	4b92      	ldr	r3, [pc, #584]	; (8001acc <MahonyAHRSupdate+0x950>)
 8001882:	681b      	ldr	r3, [r3, #0]
 8001884:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 8001886:	4618      	mov	r0, r3
 8001888:	f7ff fa7c 	bl	8000d84 <__aeabi_fmul>
 800188c:	4603      	mov	r3, r0
 800188e:	4619      	mov	r1, r3
 8001890:	68f8      	ldr	r0, [r7, #12]
 8001892:	f7ff f96f 	bl	8000b74 <__addsf3>
 8001896:	4603      	mov	r3, r0
 8001898:	60fb      	str	r3, [r7, #12]
		gy += twoKp * halfey;
 800189a:	4b8c      	ldr	r3, [pc, #560]	; (8001acc <MahonyAHRSupdate+0x950>)
 800189c:	681b      	ldr	r3, [r3, #0]
 800189e:	6a79      	ldr	r1, [r7, #36]	; 0x24
 80018a0:	4618      	mov	r0, r3
 80018a2:	f7ff fa6f 	bl	8000d84 <__aeabi_fmul>
 80018a6:	4603      	mov	r3, r0
 80018a8:	4619      	mov	r1, r3
 80018aa:	68b8      	ldr	r0, [r7, #8]
 80018ac:	f7ff f962 	bl	8000b74 <__addsf3>
 80018b0:	4603      	mov	r3, r0
 80018b2:	60bb      	str	r3, [r7, #8]
		gz += twoKp * halfez;
 80018b4:	4b85      	ldr	r3, [pc, #532]	; (8001acc <MahonyAHRSupdate+0x950>)
 80018b6:	681b      	ldr	r3, [r3, #0]
 80018b8:	6a39      	ldr	r1, [r7, #32]
 80018ba:	4618      	mov	r0, r3
 80018bc:	f7ff fa62 	bl	8000d84 <__aeabi_fmul>
 80018c0:	4603      	mov	r3, r0
 80018c2:	4619      	mov	r1, r3
 80018c4:	6878      	ldr	r0, [r7, #4]
 80018c6:	f7ff f955 	bl	8000b74 <__addsf3>
 80018ca:	4603      	mov	r3, r0
 80018cc:	607b      	str	r3, [r7, #4]

		// derivitive feedback
		gx += twoKd * (halfex-last_errx)  * sampleFreq;
 80018ce:	4b80      	ldr	r3, [pc, #512]	; (8001ad0 <MahonyAHRSupdate+0x954>)
 80018d0:	681b      	ldr	r3, [r3, #0]
 80018d2:	4619      	mov	r1, r3
 80018d4:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 80018d6:	f7ff f94b 	bl	8000b70 <__aeabi_fsub>
 80018da:	4603      	mov	r3, r0
 80018dc:	461a      	mov	r2, r3
 80018de:	4b7d      	ldr	r3, [pc, #500]	; (8001ad4 <MahonyAHRSupdate+0x958>)
 80018e0:	681b      	ldr	r3, [r3, #0]
 80018e2:	4619      	mov	r1, r3
 80018e4:	4610      	mov	r0, r2
 80018e6:	f7ff fa4d 	bl	8000d84 <__aeabi_fmul>
 80018ea:	4603      	mov	r3, r0
 80018ec:	497a      	ldr	r1, [pc, #488]	; (8001ad8 <MahonyAHRSupdate+0x95c>)
 80018ee:	4618      	mov	r0, r3
 80018f0:	f7ff fa48 	bl	8000d84 <__aeabi_fmul>
 80018f4:	4603      	mov	r3, r0
 80018f6:	4619      	mov	r1, r3
 80018f8:	68f8      	ldr	r0, [r7, #12]
 80018fa:	f7ff f93b 	bl	8000b74 <__addsf3>
 80018fe:	4603      	mov	r3, r0
 8001900:	60fb      	str	r3, [r7, #12]
		gy += twoKd * (halfey-last_erry)  * sampleFreq;
 8001902:	4b76      	ldr	r3, [pc, #472]	; (8001adc <MahonyAHRSupdate+0x960>)
 8001904:	681b      	ldr	r3, [r3, #0]
 8001906:	4619      	mov	r1, r3
 8001908:	6a78      	ldr	r0, [r7, #36]	; 0x24
 800190a:	f7ff f931 	bl	8000b70 <__aeabi_fsub>
 800190e:	4603      	mov	r3, r0
 8001910:	461a      	mov	r2, r3
 8001912:	4b70      	ldr	r3, [pc, #448]	; (8001ad4 <MahonyAHRSupdate+0x958>)
 8001914:	681b      	ldr	r3, [r3, #0]
 8001916:	4619      	mov	r1, r3
 8001918:	4610      	mov	r0, r2
 800191a:	f7ff fa33 	bl	8000d84 <__aeabi_fmul>
 800191e:	4603      	mov	r3, r0
 8001920:	496d      	ldr	r1, [pc, #436]	; (8001ad8 <MahonyAHRSupdate+0x95c>)
 8001922:	4618      	mov	r0, r3
 8001924:	f7ff fa2e 	bl	8000d84 <__aeabi_fmul>
 8001928:	4603      	mov	r3, r0
 800192a:	4619      	mov	r1, r3
 800192c:	68b8      	ldr	r0, [r7, #8]
 800192e:	f7ff f921 	bl	8000b74 <__addsf3>
 8001932:	4603      	mov	r3, r0
 8001934:	60bb      	str	r3, [r7, #8]
		gz += twoKd * (halfez-last_errz)  * sampleFreq;
 8001936:	4b6a      	ldr	r3, [pc, #424]	; (8001ae0 <MahonyAHRSupdate+0x964>)
 8001938:	681b      	ldr	r3, [r3, #0]
 800193a:	4619      	mov	r1, r3
 800193c:	6a38      	ldr	r0, [r7, #32]
 800193e:	f7ff f917 	bl	8000b70 <__aeabi_fsub>
 8001942:	4603      	mov	r3, r0
 8001944:	461a      	mov	r2, r3
 8001946:	4b63      	ldr	r3, [pc, #396]	; (8001ad4 <MahonyAHRSupdate+0x958>)
 8001948:	681b      	ldr	r3, [r3, #0]
 800194a:	4619      	mov	r1, r3
 800194c:	4610      	mov	r0, r2
 800194e:	f7ff fa19 	bl	8000d84 <__aeabi_fmul>
 8001952:	4603      	mov	r3, r0
 8001954:	4960      	ldr	r1, [pc, #384]	; (8001ad8 <MahonyAHRSupdate+0x95c>)
 8001956:	4618      	mov	r0, r3
 8001958:	f7ff fa14 	bl	8000d84 <__aeabi_fmul>
 800195c:	4603      	mov	r3, r0
 800195e:	4619      	mov	r1, r3
 8001960:	6878      	ldr	r0, [r7, #4]
 8001962:	f7ff f907 	bl	8000b74 <__addsf3>
 8001966:	4603      	mov	r3, r0
 8001968:	607b      	str	r3, [r7, #4]



		last_errx = halfex;
 800196a:	4a59      	ldr	r2, [pc, #356]	; (8001ad0 <MahonyAHRSupdate+0x954>)
 800196c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800196e:	6013      	str	r3, [r2, #0]
		last_erry = halfey;
 8001970:	4a5a      	ldr	r2, [pc, #360]	; (8001adc <MahonyAHRSupdate+0x960>)
 8001972:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001974:	6013      	str	r3, [r2, #0]
		last_errz = halfez;
 8001976:	4a5a      	ldr	r2, [pc, #360]	; (8001ae0 <MahonyAHRSupdate+0x964>)
 8001978:	6a3b      	ldr	r3, [r7, #32]
 800197a:	6013      	str	r3, [r2, #0]

	}
	

	// Integrate rate of change of quaternion
	gx *= (0.5f * (1.0f / sampleFreq));		// pre-multiply common factors
 800197c:	4959      	ldr	r1, [pc, #356]	; (8001ae4 <MahonyAHRSupdate+0x968>)
 800197e:	68f8      	ldr	r0, [r7, #12]
 8001980:	f7ff fa00 	bl	8000d84 <__aeabi_fmul>
 8001984:	4603      	mov	r3, r0
 8001986:	60fb      	str	r3, [r7, #12]
	gy *= (0.5f * (1.0f / sampleFreq));
 8001988:	4956      	ldr	r1, [pc, #344]	; (8001ae4 <MahonyAHRSupdate+0x968>)
 800198a:	68b8      	ldr	r0, [r7, #8]
 800198c:	f7ff f9fa 	bl	8000d84 <__aeabi_fmul>
 8001990:	4603      	mov	r3, r0
 8001992:	60bb      	str	r3, [r7, #8]
	gz *= (0.5f * (1.0f / sampleFreq));
 8001994:	4953      	ldr	r1, [pc, #332]	; (8001ae4 <MahonyAHRSupdate+0x968>)
 8001996:	6878      	ldr	r0, [r7, #4]
 8001998:	f7ff f9f4 	bl	8000d84 <__aeabi_fmul>
 800199c:	4603      	mov	r3, r0
 800199e:	607b      	str	r3, [r7, #4]
	qa = q0;
 80019a0:	4b51      	ldr	r3, [pc, #324]	; (8001ae8 <MahonyAHRSupdate+0x96c>)
 80019a2:	681b      	ldr	r3, [r3, #0]
 80019a4:	61fb      	str	r3, [r7, #28]
	qb = q1;
 80019a6:	4b51      	ldr	r3, [pc, #324]	; (8001aec <MahonyAHRSupdate+0x970>)
 80019a8:	681b      	ldr	r3, [r3, #0]
 80019aa:	61bb      	str	r3, [r7, #24]
	qc = q2;
 80019ac:	4b50      	ldr	r3, [pc, #320]	; (8001af0 <MahonyAHRSupdate+0x974>)
 80019ae:	681b      	ldr	r3, [r3, #0]
 80019b0:	617b      	str	r3, [r7, #20]
	q0 += (-qb * gx - qc * gy - q3 * gz);
 80019b2:	69bb      	ldr	r3, [r7, #24]
 80019b4:	f083 4300 	eor.w	r3, r3, #2147483648	; 0x80000000
 80019b8:	68f9      	ldr	r1, [r7, #12]
 80019ba:	4618      	mov	r0, r3
 80019bc:	f7ff f9e2 	bl	8000d84 <__aeabi_fmul>
 80019c0:	4603      	mov	r3, r0
 80019c2:	461c      	mov	r4, r3
 80019c4:	68b9      	ldr	r1, [r7, #8]
 80019c6:	6978      	ldr	r0, [r7, #20]
 80019c8:	f7ff f9dc 	bl	8000d84 <__aeabi_fmul>
 80019cc:	4603      	mov	r3, r0
 80019ce:	4619      	mov	r1, r3
 80019d0:	4620      	mov	r0, r4
 80019d2:	f7ff f8cd 	bl	8000b70 <__aeabi_fsub>
 80019d6:	4603      	mov	r3, r0
 80019d8:	461c      	mov	r4, r3
 80019da:	4b46      	ldr	r3, [pc, #280]	; (8001af4 <MahonyAHRSupdate+0x978>)
 80019dc:	681b      	ldr	r3, [r3, #0]
 80019de:	6879      	ldr	r1, [r7, #4]
 80019e0:	4618      	mov	r0, r3
 80019e2:	f7ff f9cf 	bl	8000d84 <__aeabi_fmul>
 80019e6:	4603      	mov	r3, r0
 80019e8:	4619      	mov	r1, r3
 80019ea:	4620      	mov	r0, r4
 80019ec:	f7ff f8c0 	bl	8000b70 <__aeabi_fsub>
 80019f0:	4603      	mov	r3, r0
 80019f2:	461a      	mov	r2, r3
 80019f4:	4b3c      	ldr	r3, [pc, #240]	; (8001ae8 <MahonyAHRSupdate+0x96c>)
 80019f6:	681b      	ldr	r3, [r3, #0]
 80019f8:	4619      	mov	r1, r3
 80019fa:	4610      	mov	r0, r2
 80019fc:	f7ff f8ba 	bl	8000b74 <__addsf3>
 8001a00:	4603      	mov	r3, r0
 8001a02:	461a      	mov	r2, r3
 8001a04:	4b38      	ldr	r3, [pc, #224]	; (8001ae8 <MahonyAHRSupdate+0x96c>)
 8001a06:	601a      	str	r2, [r3, #0]
	q1 += (qa * gx + qc * gz - q3 * gy);
 8001a08:	68f9      	ldr	r1, [r7, #12]
 8001a0a:	69f8      	ldr	r0, [r7, #28]
 8001a0c:	f7ff f9ba 	bl	8000d84 <__aeabi_fmul>
 8001a10:	4603      	mov	r3, r0
 8001a12:	461c      	mov	r4, r3
 8001a14:	6879      	ldr	r1, [r7, #4]
 8001a16:	6978      	ldr	r0, [r7, #20]
 8001a18:	f7ff f9b4 	bl	8000d84 <__aeabi_fmul>
 8001a1c:	4603      	mov	r3, r0
 8001a1e:	4619      	mov	r1, r3
 8001a20:	4620      	mov	r0, r4
 8001a22:	f7ff f8a7 	bl	8000b74 <__addsf3>
 8001a26:	4603      	mov	r3, r0
 8001a28:	461c      	mov	r4, r3
 8001a2a:	4b32      	ldr	r3, [pc, #200]	; (8001af4 <MahonyAHRSupdate+0x978>)
 8001a2c:	681b      	ldr	r3, [r3, #0]
 8001a2e:	68b9      	ldr	r1, [r7, #8]
 8001a30:	4618      	mov	r0, r3
 8001a32:	f7ff f9a7 	bl	8000d84 <__aeabi_fmul>
 8001a36:	4603      	mov	r3, r0
 8001a38:	4619      	mov	r1, r3
 8001a3a:	4620      	mov	r0, r4
 8001a3c:	f7ff f898 	bl	8000b70 <__aeabi_fsub>
 8001a40:	4603      	mov	r3, r0
 8001a42:	461a      	mov	r2, r3
 8001a44:	4b29      	ldr	r3, [pc, #164]	; (8001aec <MahonyAHRSupdate+0x970>)
 8001a46:	681b      	ldr	r3, [r3, #0]
 8001a48:	4619      	mov	r1, r3
 8001a4a:	4610      	mov	r0, r2
 8001a4c:	f7ff f892 	bl	8000b74 <__addsf3>
 8001a50:	4603      	mov	r3, r0
 8001a52:	461a      	mov	r2, r3
 8001a54:	4b25      	ldr	r3, [pc, #148]	; (8001aec <MahonyAHRSupdate+0x970>)
 8001a56:	601a      	str	r2, [r3, #0]
	q2 += (qa * gy - qb * gz + q3 * gx);
 8001a58:	68b9      	ldr	r1, [r7, #8]
 8001a5a:	69f8      	ldr	r0, [r7, #28]
 8001a5c:	f7ff f992 	bl	8000d84 <__aeabi_fmul>
 8001a60:	4603      	mov	r3, r0
 8001a62:	461c      	mov	r4, r3
 8001a64:	6879      	ldr	r1, [r7, #4]
 8001a66:	69b8      	ldr	r0, [r7, #24]
 8001a68:	f7ff f98c 	bl	8000d84 <__aeabi_fmul>
 8001a6c:	4603      	mov	r3, r0
 8001a6e:	4619      	mov	r1, r3
 8001a70:	4620      	mov	r0, r4
 8001a72:	f7ff f87d 	bl	8000b70 <__aeabi_fsub>
 8001a76:	4603      	mov	r3, r0
 8001a78:	461c      	mov	r4, r3
 8001a7a:	4b1e      	ldr	r3, [pc, #120]	; (8001af4 <MahonyAHRSupdate+0x978>)
 8001a7c:	681b      	ldr	r3, [r3, #0]
 8001a7e:	68f9      	ldr	r1, [r7, #12]
 8001a80:	4618      	mov	r0, r3
 8001a82:	f7ff f97f 	bl	8000d84 <__aeabi_fmul>
 8001a86:	4603      	mov	r3, r0
 8001a88:	4619      	mov	r1, r3
 8001a8a:	4620      	mov	r0, r4
 8001a8c:	f7ff f872 	bl	8000b74 <__addsf3>
 8001a90:	4603      	mov	r3, r0
 8001a92:	461a      	mov	r2, r3
 8001a94:	4b16      	ldr	r3, [pc, #88]	; (8001af0 <MahonyAHRSupdate+0x974>)
 8001a96:	681b      	ldr	r3, [r3, #0]
 8001a98:	4619      	mov	r1, r3
 8001a9a:	4610      	mov	r0, r2
 8001a9c:	f7ff f86a 	bl	8000b74 <__addsf3>
 8001aa0:	4603      	mov	r3, r0
 8001aa2:	461a      	mov	r2, r3
 8001aa4:	4b12      	ldr	r3, [pc, #72]	; (8001af0 <MahonyAHRSupdate+0x974>)
 8001aa6:	601a      	str	r2, [r3, #0]
	q3 += (qa * gz + qb * gy - qc * gx); 
 8001aa8:	6879      	ldr	r1, [r7, #4]
 8001aaa:	69f8      	ldr	r0, [r7, #28]
 8001aac:	f7ff f96a 	bl	8000d84 <__aeabi_fmul>
 8001ab0:	4603      	mov	r3, r0
 8001ab2:	461c      	mov	r4, r3
 8001ab4:	68b9      	ldr	r1, [r7, #8]
 8001ab6:	69b8      	ldr	r0, [r7, #24]
 8001ab8:	f7ff f964 	bl	8000d84 <__aeabi_fmul>
 8001abc:	4603      	mov	r3, r0
 8001abe:	e01b      	b.n	8001af8 <MahonyAHRSupdate+0x97c>
 8001ac0:	20000230 	.word	0x20000230
 8001ac4:	20000234 	.word	0x20000234
 8001ac8:	20000238 	.word	0x20000238
 8001acc:	20000000 	.word	0x20000000
 8001ad0:	2000023c 	.word	0x2000023c
 8001ad4:	20000220 	.word	0x20000220
 8001ad8:	42c80000 	.word	0x42c80000
 8001adc:	20000240 	.word	0x20000240
 8001ae0:	20000244 	.word	0x20000244
 8001ae4:	3ba3d70a 	.word	0x3ba3d70a
 8001ae8:	20000004 	.word	0x20000004
 8001aec:	20000224 	.word	0x20000224
 8001af0:	20000228 	.word	0x20000228
 8001af4:	2000022c 	.word	0x2000022c
 8001af8:	4619      	mov	r1, r3
 8001afa:	4620      	mov	r0, r4
 8001afc:	f7ff f83a 	bl	8000b74 <__addsf3>
 8001b00:	4603      	mov	r3, r0
 8001b02:	461c      	mov	r4, r3
 8001b04:	68f9      	ldr	r1, [r7, #12]
 8001b06:	6978      	ldr	r0, [r7, #20]
 8001b08:	f7ff f93c 	bl	8000d84 <__aeabi_fmul>
 8001b0c:	4603      	mov	r3, r0
 8001b0e:	4619      	mov	r1, r3
 8001b10:	4620      	mov	r0, r4
 8001b12:	f7ff f82d 	bl	8000b70 <__aeabi_fsub>
 8001b16:	4603      	mov	r3, r0
 8001b18:	461a      	mov	r2, r3
 8001b1a:	4b37      	ldr	r3, [pc, #220]	; (8001bf8 <MahonyAHRSupdate+0xa7c>)
 8001b1c:	681b      	ldr	r3, [r3, #0]
 8001b1e:	4619      	mov	r1, r3
 8001b20:	4610      	mov	r0, r2
 8001b22:	f7ff f827 	bl	8000b74 <__addsf3>
 8001b26:	4603      	mov	r3, r0
 8001b28:	461a      	mov	r2, r3
 8001b2a:	4b33      	ldr	r3, [pc, #204]	; (8001bf8 <MahonyAHRSupdate+0xa7c>)
 8001b2c:	601a      	str	r2, [r3, #0]
	
	// Normalise quaternion
	recipNorm = invSqrt(q0 * q0 + q1 * q1 + q2 * q2 + q3 * q3);
 8001b2e:	4b33      	ldr	r3, [pc, #204]	; (8001bfc <MahonyAHRSupdate+0xa80>)
 8001b30:	681a      	ldr	r2, [r3, #0]
 8001b32:	4b32      	ldr	r3, [pc, #200]	; (8001bfc <MahonyAHRSupdate+0xa80>)
 8001b34:	681b      	ldr	r3, [r3, #0]
 8001b36:	4619      	mov	r1, r3
 8001b38:	4610      	mov	r0, r2
 8001b3a:	f7ff f923 	bl	8000d84 <__aeabi_fmul>
 8001b3e:	4603      	mov	r3, r0
 8001b40:	461c      	mov	r4, r3
 8001b42:	4b2f      	ldr	r3, [pc, #188]	; (8001c00 <MahonyAHRSupdate+0xa84>)
 8001b44:	681a      	ldr	r2, [r3, #0]
 8001b46:	4b2e      	ldr	r3, [pc, #184]	; (8001c00 <MahonyAHRSupdate+0xa84>)
 8001b48:	681b      	ldr	r3, [r3, #0]
 8001b4a:	4619      	mov	r1, r3
 8001b4c:	4610      	mov	r0, r2
 8001b4e:	f7ff f919 	bl	8000d84 <__aeabi_fmul>
 8001b52:	4603      	mov	r3, r0
 8001b54:	4619      	mov	r1, r3
 8001b56:	4620      	mov	r0, r4
 8001b58:	f7ff f80c 	bl	8000b74 <__addsf3>
 8001b5c:	4603      	mov	r3, r0
 8001b5e:	461c      	mov	r4, r3
 8001b60:	4b28      	ldr	r3, [pc, #160]	; (8001c04 <MahonyAHRSupdate+0xa88>)
 8001b62:	681a      	ldr	r2, [r3, #0]
 8001b64:	4b27      	ldr	r3, [pc, #156]	; (8001c04 <MahonyAHRSupdate+0xa88>)
 8001b66:	681b      	ldr	r3, [r3, #0]
 8001b68:	4619      	mov	r1, r3
 8001b6a:	4610      	mov	r0, r2
 8001b6c:	f7ff f90a 	bl	8000d84 <__aeabi_fmul>
 8001b70:	4603      	mov	r3, r0
 8001b72:	4619      	mov	r1, r3
 8001b74:	4620      	mov	r0, r4
 8001b76:	f7fe fffd 	bl	8000b74 <__addsf3>
 8001b7a:	4603      	mov	r3, r0
 8001b7c:	461c      	mov	r4, r3
 8001b7e:	4b1e      	ldr	r3, [pc, #120]	; (8001bf8 <MahonyAHRSupdate+0xa7c>)
 8001b80:	681a      	ldr	r2, [r3, #0]
 8001b82:	4b1d      	ldr	r3, [pc, #116]	; (8001bf8 <MahonyAHRSupdate+0xa7c>)
 8001b84:	681b      	ldr	r3, [r3, #0]
 8001b86:	4619      	mov	r1, r3
 8001b88:	4610      	mov	r0, r2
 8001b8a:	f7ff f8fb 	bl	8000d84 <__aeabi_fmul>
 8001b8e:	4603      	mov	r3, r0
 8001b90:	4619      	mov	r1, r3
 8001b92:	4620      	mov	r0, r4
 8001b94:	f7fe ffee 	bl	8000b74 <__addsf3>
 8001b98:	4603      	mov	r3, r0
 8001b9a:	4618      	mov	r0, r3
 8001b9c:	f000 faf4 	bl	8002188 <invSqrt>
 8001ba0:	67f8      	str	r0, [r7, #124]	; 0x7c
	q0 *= recipNorm;
 8001ba2:	4b16      	ldr	r3, [pc, #88]	; (8001bfc <MahonyAHRSupdate+0xa80>)
 8001ba4:	681b      	ldr	r3, [r3, #0]
 8001ba6:	6ff9      	ldr	r1, [r7, #124]	; 0x7c
 8001ba8:	4618      	mov	r0, r3
 8001baa:	f7ff f8eb 	bl	8000d84 <__aeabi_fmul>
 8001bae:	4603      	mov	r3, r0
 8001bb0:	461a      	mov	r2, r3
 8001bb2:	4b12      	ldr	r3, [pc, #72]	; (8001bfc <MahonyAHRSupdate+0xa80>)
 8001bb4:	601a      	str	r2, [r3, #0]
	q1 *= recipNorm;
 8001bb6:	4b12      	ldr	r3, [pc, #72]	; (8001c00 <MahonyAHRSupdate+0xa84>)
 8001bb8:	681b      	ldr	r3, [r3, #0]
 8001bba:	6ff9      	ldr	r1, [r7, #124]	; 0x7c
 8001bbc:	4618      	mov	r0, r3
 8001bbe:	f7ff f8e1 	bl	8000d84 <__aeabi_fmul>
 8001bc2:	4603      	mov	r3, r0
 8001bc4:	461a      	mov	r2, r3
 8001bc6:	4b0e      	ldr	r3, [pc, #56]	; (8001c00 <MahonyAHRSupdate+0xa84>)
 8001bc8:	601a      	str	r2, [r3, #0]
	q2 *= recipNorm;
 8001bca:	4b0e      	ldr	r3, [pc, #56]	; (8001c04 <MahonyAHRSupdate+0xa88>)
 8001bcc:	681b      	ldr	r3, [r3, #0]
 8001bce:	6ff9      	ldr	r1, [r7, #124]	; 0x7c
 8001bd0:	4618      	mov	r0, r3
 8001bd2:	f7ff f8d7 	bl	8000d84 <__aeabi_fmul>
 8001bd6:	4603      	mov	r3, r0
 8001bd8:	461a      	mov	r2, r3
 8001bda:	4b0a      	ldr	r3, [pc, #40]	; (8001c04 <MahonyAHRSupdate+0xa88>)
 8001bdc:	601a      	str	r2, [r3, #0]
	q3 *= recipNorm;
 8001bde:	4b06      	ldr	r3, [pc, #24]	; (8001bf8 <MahonyAHRSupdate+0xa7c>)
 8001be0:	681b      	ldr	r3, [r3, #0]
 8001be2:	6ff9      	ldr	r1, [r7, #124]	; 0x7c
 8001be4:	4618      	mov	r0, r3
 8001be6:	f7ff f8cd 	bl	8000d84 <__aeabi_fmul>
 8001bea:	4603      	mov	r3, r0
 8001bec:	461a      	mov	r2, r3
 8001bee:	4b02      	ldr	r3, [pc, #8]	; (8001bf8 <MahonyAHRSupdate+0xa7c>)
 8001bf0:	601a      	str	r2, [r3, #0]
}
 8001bf2:	3780      	adds	r7, #128	; 0x80
 8001bf4:	46bd      	mov	sp, r7
 8001bf6:	bdb0      	pop	{r4, r5, r7, pc}
 8001bf8:	2000022c 	.word	0x2000022c
 8001bfc:	20000004 	.word	0x20000004
 8001c00:	20000224 	.word	0x20000224
 8001c04:	20000228 	.word	0x20000228

08001c08 <MahonyAHRSupdateIMU>:

//---------------------------------------------------------------------------------------------------
// IMU algorithm update

void MahonyAHRSupdateIMU(float gx, float gy, float gz, float ax, float ay, float az) {
 8001c08:	b590      	push	{r4, r7, lr}
 8001c0a:	b08f      	sub	sp, #60	; 0x3c
 8001c0c:	af00      	add	r7, sp, #0
 8001c0e:	60f8      	str	r0, [r7, #12]
 8001c10:	60b9      	str	r1, [r7, #8]
 8001c12:	607a      	str	r2, [r7, #4]
 8001c14:	603b      	str	r3, [r7, #0]
	float halfvx, halfvy, halfvz;
	float halfex, halfey, halfez;
	float qa, qb, qc;

	// Compute feedback only if accelerometer measurement valid (avoids NaN in accelerometer normalisation)
	if(!((ax == 0.0f) && (ay == 0.0f) && (az == 0.0f))) {
 8001c16:	f04f 0100 	mov.w	r1, #0
 8001c1a:	6838      	ldr	r0, [r7, #0]
 8001c1c:	f7ff fa46 	bl	80010ac <__aeabi_fcmpeq>
 8001c20:	4603      	mov	r3, r0
 8001c22:	2b00      	cmp	r3, #0
 8001c24:	d010      	beq.n	8001c48 <MahonyAHRSupdateIMU+0x40>
 8001c26:	f04f 0100 	mov.w	r1, #0
 8001c2a:	6cb8      	ldr	r0, [r7, #72]	; 0x48
 8001c2c:	f7ff fa3e 	bl	80010ac <__aeabi_fcmpeq>
 8001c30:	4603      	mov	r3, r0
 8001c32:	2b00      	cmp	r3, #0
 8001c34:	d008      	beq.n	8001c48 <MahonyAHRSupdateIMU+0x40>
 8001c36:	f04f 0100 	mov.w	r1, #0
 8001c3a:	6cf8      	ldr	r0, [r7, #76]	; 0x4c
 8001c3c:	f7ff fa36 	bl	80010ac <__aeabi_fcmpeq>
 8001c40:	4603      	mov	r3, r0
 8001c42:	2b00      	cmp	r3, #0
 8001c44:	f040 8163 	bne.w	8001f0e <MahonyAHRSupdateIMU+0x306>

		// Normalise accelerometer measurement
		recipNorm = invSqrt(ax * ax + ay * ay + az * az);
 8001c48:	6839      	ldr	r1, [r7, #0]
 8001c4a:	6838      	ldr	r0, [r7, #0]
 8001c4c:	f7ff f89a 	bl	8000d84 <__aeabi_fmul>
 8001c50:	4603      	mov	r3, r0
 8001c52:	461c      	mov	r4, r3
 8001c54:	6cb9      	ldr	r1, [r7, #72]	; 0x48
 8001c56:	6cb8      	ldr	r0, [r7, #72]	; 0x48
 8001c58:	f7ff f894 	bl	8000d84 <__aeabi_fmul>
 8001c5c:	4603      	mov	r3, r0
 8001c5e:	4619      	mov	r1, r3
 8001c60:	4620      	mov	r0, r4
 8001c62:	f7fe ff87 	bl	8000b74 <__addsf3>
 8001c66:	4603      	mov	r3, r0
 8001c68:	461c      	mov	r4, r3
 8001c6a:	6cf9      	ldr	r1, [r7, #76]	; 0x4c
 8001c6c:	6cf8      	ldr	r0, [r7, #76]	; 0x4c
 8001c6e:	f7ff f889 	bl	8000d84 <__aeabi_fmul>
 8001c72:	4603      	mov	r3, r0
 8001c74:	4619      	mov	r1, r3
 8001c76:	4620      	mov	r0, r4
 8001c78:	f7fe ff7c 	bl	8000b74 <__addsf3>
 8001c7c:	4603      	mov	r3, r0
 8001c7e:	4618      	mov	r0, r3
 8001c80:	f000 fa82 	bl	8002188 <invSqrt>
 8001c84:	6378      	str	r0, [r7, #52]	; 0x34
		ax *= recipNorm;
 8001c86:	6b79      	ldr	r1, [r7, #52]	; 0x34
 8001c88:	6838      	ldr	r0, [r7, #0]
 8001c8a:	f7ff f87b 	bl	8000d84 <__aeabi_fmul>
 8001c8e:	4603      	mov	r3, r0
 8001c90:	603b      	str	r3, [r7, #0]
		ay *= recipNorm;
 8001c92:	6b79      	ldr	r1, [r7, #52]	; 0x34
 8001c94:	6cb8      	ldr	r0, [r7, #72]	; 0x48
 8001c96:	f7ff f875 	bl	8000d84 <__aeabi_fmul>
 8001c9a:	4603      	mov	r3, r0
 8001c9c:	64bb      	str	r3, [r7, #72]	; 0x48
		az *= recipNorm;        
 8001c9e:	6b79      	ldr	r1, [r7, #52]	; 0x34
 8001ca0:	6cf8      	ldr	r0, [r7, #76]	; 0x4c
 8001ca2:	f7ff f86f 	bl	8000d84 <__aeabi_fmul>
 8001ca6:	4603      	mov	r3, r0
 8001ca8:	64fb      	str	r3, [r7, #76]	; 0x4c

		// Estimated direction of gravity and vector perpendicular to magnetic flux
		halfvx = q1 * q3 - q0 * q2;
 8001caa:	4b76      	ldr	r3, [pc, #472]	; (8001e84 <MahonyAHRSupdateIMU+0x27c>)
 8001cac:	681a      	ldr	r2, [r3, #0]
 8001cae:	4b76      	ldr	r3, [pc, #472]	; (8001e88 <MahonyAHRSupdateIMU+0x280>)
 8001cb0:	681b      	ldr	r3, [r3, #0]
 8001cb2:	4619      	mov	r1, r3
 8001cb4:	4610      	mov	r0, r2
 8001cb6:	f7ff f865 	bl	8000d84 <__aeabi_fmul>
 8001cba:	4603      	mov	r3, r0
 8001cbc:	461c      	mov	r4, r3
 8001cbe:	4b73      	ldr	r3, [pc, #460]	; (8001e8c <MahonyAHRSupdateIMU+0x284>)
 8001cc0:	681a      	ldr	r2, [r3, #0]
 8001cc2:	4b73      	ldr	r3, [pc, #460]	; (8001e90 <MahonyAHRSupdateIMU+0x288>)
 8001cc4:	681b      	ldr	r3, [r3, #0]
 8001cc6:	4619      	mov	r1, r3
 8001cc8:	4610      	mov	r0, r2
 8001cca:	f7ff f85b 	bl	8000d84 <__aeabi_fmul>
 8001cce:	4603      	mov	r3, r0
 8001cd0:	4619      	mov	r1, r3
 8001cd2:	4620      	mov	r0, r4
 8001cd4:	f7fe ff4c 	bl	8000b70 <__aeabi_fsub>
 8001cd8:	4603      	mov	r3, r0
 8001cda:	633b      	str	r3, [r7, #48]	; 0x30
		halfvy = q0 * q1 + q2 * q3;
 8001cdc:	4b6b      	ldr	r3, [pc, #428]	; (8001e8c <MahonyAHRSupdateIMU+0x284>)
 8001cde:	681a      	ldr	r2, [r3, #0]
 8001ce0:	4b68      	ldr	r3, [pc, #416]	; (8001e84 <MahonyAHRSupdateIMU+0x27c>)
 8001ce2:	681b      	ldr	r3, [r3, #0]
 8001ce4:	4619      	mov	r1, r3
 8001ce6:	4610      	mov	r0, r2
 8001ce8:	f7ff f84c 	bl	8000d84 <__aeabi_fmul>
 8001cec:	4603      	mov	r3, r0
 8001cee:	461c      	mov	r4, r3
 8001cf0:	4b67      	ldr	r3, [pc, #412]	; (8001e90 <MahonyAHRSupdateIMU+0x288>)
 8001cf2:	681a      	ldr	r2, [r3, #0]
 8001cf4:	4b64      	ldr	r3, [pc, #400]	; (8001e88 <MahonyAHRSupdateIMU+0x280>)
 8001cf6:	681b      	ldr	r3, [r3, #0]
 8001cf8:	4619      	mov	r1, r3
 8001cfa:	4610      	mov	r0, r2
 8001cfc:	f7ff f842 	bl	8000d84 <__aeabi_fmul>
 8001d00:	4603      	mov	r3, r0
 8001d02:	4619      	mov	r1, r3
 8001d04:	4620      	mov	r0, r4
 8001d06:	f7fe ff35 	bl	8000b74 <__addsf3>
 8001d0a:	4603      	mov	r3, r0
 8001d0c:	62fb      	str	r3, [r7, #44]	; 0x2c
		halfvz = q0 * q0 - 0.5f + q3 * q3;
 8001d0e:	4b5f      	ldr	r3, [pc, #380]	; (8001e8c <MahonyAHRSupdateIMU+0x284>)
 8001d10:	681a      	ldr	r2, [r3, #0]
 8001d12:	4b5e      	ldr	r3, [pc, #376]	; (8001e8c <MahonyAHRSupdateIMU+0x284>)
 8001d14:	681b      	ldr	r3, [r3, #0]
 8001d16:	4619      	mov	r1, r3
 8001d18:	4610      	mov	r0, r2
 8001d1a:	f7ff f833 	bl	8000d84 <__aeabi_fmul>
 8001d1e:	4603      	mov	r3, r0
 8001d20:	f04f 517c 	mov.w	r1, #1056964608	; 0x3f000000
 8001d24:	4618      	mov	r0, r3
 8001d26:	f7fe ff23 	bl	8000b70 <__aeabi_fsub>
 8001d2a:	4603      	mov	r3, r0
 8001d2c:	461c      	mov	r4, r3
 8001d2e:	4b56      	ldr	r3, [pc, #344]	; (8001e88 <MahonyAHRSupdateIMU+0x280>)
 8001d30:	681a      	ldr	r2, [r3, #0]
 8001d32:	4b55      	ldr	r3, [pc, #340]	; (8001e88 <MahonyAHRSupdateIMU+0x280>)
 8001d34:	681b      	ldr	r3, [r3, #0]
 8001d36:	4619      	mov	r1, r3
 8001d38:	4610      	mov	r0, r2
 8001d3a:	f7ff f823 	bl	8000d84 <__aeabi_fmul>
 8001d3e:	4603      	mov	r3, r0
 8001d40:	4619      	mov	r1, r3
 8001d42:	4620      	mov	r0, r4
 8001d44:	f7fe ff16 	bl	8000b74 <__addsf3>
 8001d48:	4603      	mov	r3, r0
 8001d4a:	62bb      	str	r3, [r7, #40]	; 0x28
	
		// Error is sum of cross product between estimated and measured direction of gravity
		halfex = (ay * halfvz - az * halfvy);
 8001d4c:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 8001d4e:	6cb8      	ldr	r0, [r7, #72]	; 0x48
 8001d50:	f7ff f818 	bl	8000d84 <__aeabi_fmul>
 8001d54:	4603      	mov	r3, r0
 8001d56:	461c      	mov	r4, r3
 8001d58:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 8001d5a:	6cf8      	ldr	r0, [r7, #76]	; 0x4c
 8001d5c:	f7ff f812 	bl	8000d84 <__aeabi_fmul>
 8001d60:	4603      	mov	r3, r0
 8001d62:	4619      	mov	r1, r3
 8001d64:	4620      	mov	r0, r4
 8001d66:	f7fe ff03 	bl	8000b70 <__aeabi_fsub>
 8001d6a:	4603      	mov	r3, r0
 8001d6c:	627b      	str	r3, [r7, #36]	; 0x24
		halfey = (az * halfvx - ax * halfvz);
 8001d6e:	6b39      	ldr	r1, [r7, #48]	; 0x30
 8001d70:	6cf8      	ldr	r0, [r7, #76]	; 0x4c
 8001d72:	f7ff f807 	bl	8000d84 <__aeabi_fmul>
 8001d76:	4603      	mov	r3, r0
 8001d78:	461c      	mov	r4, r3
 8001d7a:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 8001d7c:	6838      	ldr	r0, [r7, #0]
 8001d7e:	f7ff f801 	bl	8000d84 <__aeabi_fmul>
 8001d82:	4603      	mov	r3, r0
 8001d84:	4619      	mov	r1, r3
 8001d86:	4620      	mov	r0, r4
 8001d88:	f7fe fef2 	bl	8000b70 <__aeabi_fsub>
 8001d8c:	4603      	mov	r3, r0
 8001d8e:	623b      	str	r3, [r7, #32]
		halfez = (ax * halfvy - ay * halfvx);
 8001d90:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 8001d92:	6838      	ldr	r0, [r7, #0]
 8001d94:	f7fe fff6 	bl	8000d84 <__aeabi_fmul>
 8001d98:	4603      	mov	r3, r0
 8001d9a:	461c      	mov	r4, r3
 8001d9c:	6b39      	ldr	r1, [r7, #48]	; 0x30
 8001d9e:	6cb8      	ldr	r0, [r7, #72]	; 0x48
 8001da0:	f7fe fff0 	bl	8000d84 <__aeabi_fmul>
 8001da4:	4603      	mov	r3, r0
 8001da6:	4619      	mov	r1, r3
 8001da8:	4620      	mov	r0, r4
 8001daa:	f7fe fee1 	bl	8000b70 <__aeabi_fsub>
 8001dae:	4603      	mov	r3, r0
 8001db0:	61fb      	str	r3, [r7, #28]

		// Compute and apply integral feedback if enabled
		if(twoKi > 0.0f) {
 8001db2:	4b38      	ldr	r3, [pc, #224]	; (8001e94 <MahonyAHRSupdateIMU+0x28c>)
 8001db4:	681b      	ldr	r3, [r3, #0]
 8001db6:	f04f 0100 	mov.w	r1, #0
 8001dba:	4618      	mov	r0, r3
 8001dbc:	f7ff f99e 	bl	80010fc <__aeabi_fcmpgt>
 8001dc0:	4603      	mov	r3, r0
 8001dc2:	2b00      	cmp	r3, #0
 8001dc4:	d070      	beq.n	8001ea8 <MahonyAHRSupdateIMU+0x2a0>
			integralFBx += twoKi * halfex * (1.0f / sampleFreq);	// integral error scaled by Ki
 8001dc6:	4b33      	ldr	r3, [pc, #204]	; (8001e94 <MahonyAHRSupdateIMU+0x28c>)
 8001dc8:	681b      	ldr	r3, [r3, #0]
 8001dca:	6a79      	ldr	r1, [r7, #36]	; 0x24
 8001dcc:	4618      	mov	r0, r3
 8001dce:	f7fe ffd9 	bl	8000d84 <__aeabi_fmul>
 8001dd2:	4603      	mov	r3, r0
 8001dd4:	4930      	ldr	r1, [pc, #192]	; (8001e98 <MahonyAHRSupdateIMU+0x290>)
 8001dd6:	4618      	mov	r0, r3
 8001dd8:	f7fe ffd4 	bl	8000d84 <__aeabi_fmul>
 8001ddc:	4603      	mov	r3, r0
 8001dde:	461a      	mov	r2, r3
 8001de0:	4b2e      	ldr	r3, [pc, #184]	; (8001e9c <MahonyAHRSupdateIMU+0x294>)
 8001de2:	681b      	ldr	r3, [r3, #0]
 8001de4:	4619      	mov	r1, r3
 8001de6:	4610      	mov	r0, r2
 8001de8:	f7fe fec4 	bl	8000b74 <__addsf3>
 8001dec:	4603      	mov	r3, r0
 8001dee:	461a      	mov	r2, r3
 8001df0:	4b2a      	ldr	r3, [pc, #168]	; (8001e9c <MahonyAHRSupdateIMU+0x294>)
 8001df2:	601a      	str	r2, [r3, #0]
			integralFBy += twoKi * halfey * (1.0f / sampleFreq);
 8001df4:	4b27      	ldr	r3, [pc, #156]	; (8001e94 <MahonyAHRSupdateIMU+0x28c>)
 8001df6:	681b      	ldr	r3, [r3, #0]
 8001df8:	6a39      	ldr	r1, [r7, #32]
 8001dfa:	4618      	mov	r0, r3
 8001dfc:	f7fe ffc2 	bl	8000d84 <__aeabi_fmul>
 8001e00:	4603      	mov	r3, r0
 8001e02:	4925      	ldr	r1, [pc, #148]	; (8001e98 <MahonyAHRSupdateIMU+0x290>)
 8001e04:	4618      	mov	r0, r3
 8001e06:	f7fe ffbd 	bl	8000d84 <__aeabi_fmul>
 8001e0a:	4603      	mov	r3, r0
 8001e0c:	461a      	mov	r2, r3
 8001e0e:	4b24      	ldr	r3, [pc, #144]	; (8001ea0 <MahonyAHRSupdateIMU+0x298>)
 8001e10:	681b      	ldr	r3, [r3, #0]
 8001e12:	4619      	mov	r1, r3
 8001e14:	4610      	mov	r0, r2
 8001e16:	f7fe fead 	bl	8000b74 <__addsf3>
 8001e1a:	4603      	mov	r3, r0
 8001e1c:	461a      	mov	r2, r3
 8001e1e:	4b20      	ldr	r3, [pc, #128]	; (8001ea0 <MahonyAHRSupdateIMU+0x298>)
 8001e20:	601a      	str	r2, [r3, #0]
			integralFBz += twoKi * halfez * (1.0f / sampleFreq);
 8001e22:	4b1c      	ldr	r3, [pc, #112]	; (8001e94 <MahonyAHRSupdateIMU+0x28c>)
 8001e24:	681b      	ldr	r3, [r3, #0]
 8001e26:	69f9      	ldr	r1, [r7, #28]
 8001e28:	4618      	mov	r0, r3
 8001e2a:	f7fe ffab 	bl	8000d84 <__aeabi_fmul>
 8001e2e:	4603      	mov	r3, r0
 8001e30:	4919      	ldr	r1, [pc, #100]	; (8001e98 <MahonyAHRSupdateIMU+0x290>)
 8001e32:	4618      	mov	r0, r3
 8001e34:	f7fe ffa6 	bl	8000d84 <__aeabi_fmul>
 8001e38:	4603      	mov	r3, r0
 8001e3a:	461a      	mov	r2, r3
 8001e3c:	4b19      	ldr	r3, [pc, #100]	; (8001ea4 <MahonyAHRSupdateIMU+0x29c>)
 8001e3e:	681b      	ldr	r3, [r3, #0]
 8001e40:	4619      	mov	r1, r3
 8001e42:	4610      	mov	r0, r2
 8001e44:	f7fe fe96 	bl	8000b74 <__addsf3>
 8001e48:	4603      	mov	r3, r0
 8001e4a:	461a      	mov	r2, r3
 8001e4c:	4b15      	ldr	r3, [pc, #84]	; (8001ea4 <MahonyAHRSupdateIMU+0x29c>)
 8001e4e:	601a      	str	r2, [r3, #0]
			gx += integralFBx;	// apply integral feedback
 8001e50:	4b12      	ldr	r3, [pc, #72]	; (8001e9c <MahonyAHRSupdateIMU+0x294>)
 8001e52:	681b      	ldr	r3, [r3, #0]
 8001e54:	4619      	mov	r1, r3
 8001e56:	68f8      	ldr	r0, [r7, #12]
 8001e58:	f7fe fe8c 	bl	8000b74 <__addsf3>
 8001e5c:	4603      	mov	r3, r0
 8001e5e:	60fb      	str	r3, [r7, #12]
			gy += integralFBy;
 8001e60:	4b0f      	ldr	r3, [pc, #60]	; (8001ea0 <MahonyAHRSupdateIMU+0x298>)
 8001e62:	681b      	ldr	r3, [r3, #0]
 8001e64:	4619      	mov	r1, r3
 8001e66:	68b8      	ldr	r0, [r7, #8]
 8001e68:	f7fe fe84 	bl	8000b74 <__addsf3>
 8001e6c:	4603      	mov	r3, r0
 8001e6e:	60bb      	str	r3, [r7, #8]
			gz += integralFBz;
 8001e70:	4b0c      	ldr	r3, [pc, #48]	; (8001ea4 <MahonyAHRSupdateIMU+0x29c>)
 8001e72:	681b      	ldr	r3, [r3, #0]
 8001e74:	4619      	mov	r1, r3
 8001e76:	6878      	ldr	r0, [r7, #4]
 8001e78:	f7fe fe7c 	bl	8000b74 <__addsf3>
 8001e7c:	4603      	mov	r3, r0
 8001e7e:	607b      	str	r3, [r7, #4]
 8001e80:	e01e      	b.n	8001ec0 <MahonyAHRSupdateIMU+0x2b8>
 8001e82:	bf00      	nop
 8001e84:	20000224 	.word	0x20000224
 8001e88:	2000022c 	.word	0x2000022c
 8001e8c:	20000004 	.word	0x20000004
 8001e90:	20000228 	.word	0x20000228
 8001e94:	2000021c 	.word	0x2000021c
 8001e98:	3c23d70a 	.word	0x3c23d70a
 8001e9c:	20000230 	.word	0x20000230
 8001ea0:	20000234 	.word	0x20000234
 8001ea4:	20000238 	.word	0x20000238
		}
		else {
			integralFBx = 0.0f;	// prevent integral windup
 8001ea8:	4b95      	ldr	r3, [pc, #596]	; (8002100 <MahonyAHRSupdateIMU+0x4f8>)
 8001eaa:	f04f 0200 	mov.w	r2, #0
 8001eae:	601a      	str	r2, [r3, #0]
			integralFBy = 0.0f;
 8001eb0:	4b94      	ldr	r3, [pc, #592]	; (8002104 <MahonyAHRSupdateIMU+0x4fc>)
 8001eb2:	f04f 0200 	mov.w	r2, #0
 8001eb6:	601a      	str	r2, [r3, #0]
			integralFBz = 0.0f;
 8001eb8:	4b93      	ldr	r3, [pc, #588]	; (8002108 <MahonyAHRSupdateIMU+0x500>)
 8001eba:	f04f 0200 	mov.w	r2, #0
 8001ebe:	601a      	str	r2, [r3, #0]
		}

		// Apply proportional feedback
		gx += twoKp * halfex;
 8001ec0:	4b92      	ldr	r3, [pc, #584]	; (800210c <MahonyAHRSupdateIMU+0x504>)
 8001ec2:	681b      	ldr	r3, [r3, #0]
 8001ec4:	6a79      	ldr	r1, [r7, #36]	; 0x24
 8001ec6:	4618      	mov	r0, r3
 8001ec8:	f7fe ff5c 	bl	8000d84 <__aeabi_fmul>
 8001ecc:	4603      	mov	r3, r0
 8001ece:	4619      	mov	r1, r3
 8001ed0:	68f8      	ldr	r0, [r7, #12]
 8001ed2:	f7fe fe4f 	bl	8000b74 <__addsf3>
 8001ed6:	4603      	mov	r3, r0
 8001ed8:	60fb      	str	r3, [r7, #12]
		gy += twoKp * halfey;
 8001eda:	4b8c      	ldr	r3, [pc, #560]	; (800210c <MahonyAHRSupdateIMU+0x504>)
 8001edc:	681b      	ldr	r3, [r3, #0]
 8001ede:	6a39      	ldr	r1, [r7, #32]
 8001ee0:	4618      	mov	r0, r3
 8001ee2:	f7fe ff4f 	bl	8000d84 <__aeabi_fmul>
 8001ee6:	4603      	mov	r3, r0
 8001ee8:	4619      	mov	r1, r3
 8001eea:	68b8      	ldr	r0, [r7, #8]
 8001eec:	f7fe fe42 	bl	8000b74 <__addsf3>
 8001ef0:	4603      	mov	r3, r0
 8001ef2:	60bb      	str	r3, [r7, #8]
		gz += twoKp * halfez;
 8001ef4:	4b85      	ldr	r3, [pc, #532]	; (800210c <MahonyAHRSupdateIMU+0x504>)
 8001ef6:	681b      	ldr	r3, [r3, #0]
 8001ef8:	69f9      	ldr	r1, [r7, #28]
 8001efa:	4618      	mov	r0, r3
 8001efc:	f7fe ff42 	bl	8000d84 <__aeabi_fmul>
 8001f00:	4603      	mov	r3, r0
 8001f02:	4619      	mov	r1, r3
 8001f04:	6878      	ldr	r0, [r7, #4]
 8001f06:	f7fe fe35 	bl	8000b74 <__addsf3>
 8001f0a:	4603      	mov	r3, r0
 8001f0c:	607b      	str	r3, [r7, #4]
	}
	
	// Integrate rate of change of quaternion
	gx *= (0.5f * (1.0f / sampleFreq));		// pre-multiply common factors
 8001f0e:	4980      	ldr	r1, [pc, #512]	; (8002110 <MahonyAHRSupdateIMU+0x508>)
 8001f10:	68f8      	ldr	r0, [r7, #12]
 8001f12:	f7fe ff37 	bl	8000d84 <__aeabi_fmul>
 8001f16:	4603      	mov	r3, r0
 8001f18:	60fb      	str	r3, [r7, #12]
	gy *= (0.5f * (1.0f / sampleFreq));
 8001f1a:	497d      	ldr	r1, [pc, #500]	; (8002110 <MahonyAHRSupdateIMU+0x508>)
 8001f1c:	68b8      	ldr	r0, [r7, #8]
 8001f1e:	f7fe ff31 	bl	8000d84 <__aeabi_fmul>
 8001f22:	4603      	mov	r3, r0
 8001f24:	60bb      	str	r3, [r7, #8]
	gz *= (0.5f * (1.0f / sampleFreq));
 8001f26:	497a      	ldr	r1, [pc, #488]	; (8002110 <MahonyAHRSupdateIMU+0x508>)
 8001f28:	6878      	ldr	r0, [r7, #4]
 8001f2a:	f7fe ff2b 	bl	8000d84 <__aeabi_fmul>
 8001f2e:	4603      	mov	r3, r0
 8001f30:	607b      	str	r3, [r7, #4]
	qa = q0;
 8001f32:	4b78      	ldr	r3, [pc, #480]	; (8002114 <MahonyAHRSupdateIMU+0x50c>)
 8001f34:	681b      	ldr	r3, [r3, #0]
 8001f36:	61bb      	str	r3, [r7, #24]
	qb = q1;
 8001f38:	4b77      	ldr	r3, [pc, #476]	; (8002118 <MahonyAHRSupdateIMU+0x510>)
 8001f3a:	681b      	ldr	r3, [r3, #0]
 8001f3c:	617b      	str	r3, [r7, #20]
	qc = q2;
 8001f3e:	4b77      	ldr	r3, [pc, #476]	; (800211c <MahonyAHRSupdateIMU+0x514>)
 8001f40:	681b      	ldr	r3, [r3, #0]
 8001f42:	613b      	str	r3, [r7, #16]
	q0 += (-qb * gx - qc * gy - q3 * gz);
 8001f44:	697b      	ldr	r3, [r7, #20]
 8001f46:	f083 4300 	eor.w	r3, r3, #2147483648	; 0x80000000
 8001f4a:	68f9      	ldr	r1, [r7, #12]
 8001f4c:	4618      	mov	r0, r3
 8001f4e:	f7fe ff19 	bl	8000d84 <__aeabi_fmul>
 8001f52:	4603      	mov	r3, r0
 8001f54:	461c      	mov	r4, r3
 8001f56:	68b9      	ldr	r1, [r7, #8]
 8001f58:	6938      	ldr	r0, [r7, #16]
 8001f5a:	f7fe ff13 	bl	8000d84 <__aeabi_fmul>
 8001f5e:	4603      	mov	r3, r0
 8001f60:	4619      	mov	r1, r3
 8001f62:	4620      	mov	r0, r4
 8001f64:	f7fe fe04 	bl	8000b70 <__aeabi_fsub>
 8001f68:	4603      	mov	r3, r0
 8001f6a:	461c      	mov	r4, r3
 8001f6c:	4b6c      	ldr	r3, [pc, #432]	; (8002120 <MahonyAHRSupdateIMU+0x518>)
 8001f6e:	681b      	ldr	r3, [r3, #0]
 8001f70:	6879      	ldr	r1, [r7, #4]
 8001f72:	4618      	mov	r0, r3
 8001f74:	f7fe ff06 	bl	8000d84 <__aeabi_fmul>
 8001f78:	4603      	mov	r3, r0
 8001f7a:	4619      	mov	r1, r3
 8001f7c:	4620      	mov	r0, r4
 8001f7e:	f7fe fdf7 	bl	8000b70 <__aeabi_fsub>
 8001f82:	4603      	mov	r3, r0
 8001f84:	461a      	mov	r2, r3
 8001f86:	4b63      	ldr	r3, [pc, #396]	; (8002114 <MahonyAHRSupdateIMU+0x50c>)
 8001f88:	681b      	ldr	r3, [r3, #0]
 8001f8a:	4619      	mov	r1, r3
 8001f8c:	4610      	mov	r0, r2
 8001f8e:	f7fe fdf1 	bl	8000b74 <__addsf3>
 8001f92:	4603      	mov	r3, r0
 8001f94:	461a      	mov	r2, r3
 8001f96:	4b5f      	ldr	r3, [pc, #380]	; (8002114 <MahonyAHRSupdateIMU+0x50c>)
 8001f98:	601a      	str	r2, [r3, #0]
	q1 += (qa * gx + qc * gz - q3 * gy);
 8001f9a:	68f9      	ldr	r1, [r7, #12]
 8001f9c:	69b8      	ldr	r0, [r7, #24]
 8001f9e:	f7fe fef1 	bl	8000d84 <__aeabi_fmul>
 8001fa2:	4603      	mov	r3, r0
 8001fa4:	461c      	mov	r4, r3
 8001fa6:	6879      	ldr	r1, [r7, #4]
 8001fa8:	6938      	ldr	r0, [r7, #16]
 8001faa:	f7fe feeb 	bl	8000d84 <__aeabi_fmul>
 8001fae:	4603      	mov	r3, r0
 8001fb0:	4619      	mov	r1, r3
 8001fb2:	4620      	mov	r0, r4
 8001fb4:	f7fe fdde 	bl	8000b74 <__addsf3>
 8001fb8:	4603      	mov	r3, r0
 8001fba:	461c      	mov	r4, r3
 8001fbc:	4b58      	ldr	r3, [pc, #352]	; (8002120 <MahonyAHRSupdateIMU+0x518>)
 8001fbe:	681b      	ldr	r3, [r3, #0]
 8001fc0:	68b9      	ldr	r1, [r7, #8]
 8001fc2:	4618      	mov	r0, r3
 8001fc4:	f7fe fede 	bl	8000d84 <__aeabi_fmul>
 8001fc8:	4603      	mov	r3, r0
 8001fca:	4619      	mov	r1, r3
 8001fcc:	4620      	mov	r0, r4
 8001fce:	f7fe fdcf 	bl	8000b70 <__aeabi_fsub>
 8001fd2:	4603      	mov	r3, r0
 8001fd4:	461a      	mov	r2, r3
 8001fd6:	4b50      	ldr	r3, [pc, #320]	; (8002118 <MahonyAHRSupdateIMU+0x510>)
 8001fd8:	681b      	ldr	r3, [r3, #0]
 8001fda:	4619      	mov	r1, r3
 8001fdc:	4610      	mov	r0, r2
 8001fde:	f7fe fdc9 	bl	8000b74 <__addsf3>
 8001fe2:	4603      	mov	r3, r0
 8001fe4:	461a      	mov	r2, r3
 8001fe6:	4b4c      	ldr	r3, [pc, #304]	; (8002118 <MahonyAHRSupdateIMU+0x510>)
 8001fe8:	601a      	str	r2, [r3, #0]
	q2 += (qa * gy - qb * gz + q3 * gx);
 8001fea:	68b9      	ldr	r1, [r7, #8]
 8001fec:	69b8      	ldr	r0, [r7, #24]
 8001fee:	f7fe fec9 	bl	8000d84 <__aeabi_fmul>
 8001ff2:	4603      	mov	r3, r0
 8001ff4:	461c      	mov	r4, r3
 8001ff6:	6879      	ldr	r1, [r7, #4]
 8001ff8:	6978      	ldr	r0, [r7, #20]
 8001ffa:	f7fe fec3 	bl	8000d84 <__aeabi_fmul>
 8001ffe:	4603      	mov	r3, r0
 8002000:	4619      	mov	r1, r3
 8002002:	4620      	mov	r0, r4
 8002004:	f7fe fdb4 	bl	8000b70 <__aeabi_fsub>
 8002008:	4603      	mov	r3, r0
 800200a:	461c      	mov	r4, r3
 800200c:	4b44      	ldr	r3, [pc, #272]	; (8002120 <MahonyAHRSupdateIMU+0x518>)
 800200e:	681b      	ldr	r3, [r3, #0]
 8002010:	68f9      	ldr	r1, [r7, #12]
 8002012:	4618      	mov	r0, r3
 8002014:	f7fe feb6 	bl	8000d84 <__aeabi_fmul>
 8002018:	4603      	mov	r3, r0
 800201a:	4619      	mov	r1, r3
 800201c:	4620      	mov	r0, r4
 800201e:	f7fe fda9 	bl	8000b74 <__addsf3>
 8002022:	4603      	mov	r3, r0
 8002024:	461a      	mov	r2, r3
 8002026:	4b3d      	ldr	r3, [pc, #244]	; (800211c <MahonyAHRSupdateIMU+0x514>)
 8002028:	681b      	ldr	r3, [r3, #0]
 800202a:	4619      	mov	r1, r3
 800202c:	4610      	mov	r0, r2
 800202e:	f7fe fda1 	bl	8000b74 <__addsf3>
 8002032:	4603      	mov	r3, r0
 8002034:	461a      	mov	r2, r3
 8002036:	4b39      	ldr	r3, [pc, #228]	; (800211c <MahonyAHRSupdateIMU+0x514>)
 8002038:	601a      	str	r2, [r3, #0]
	q3 += (qa * gz + qb * gy - qc * gx); 
 800203a:	6879      	ldr	r1, [r7, #4]
 800203c:	69b8      	ldr	r0, [r7, #24]
 800203e:	f7fe fea1 	bl	8000d84 <__aeabi_fmul>
 8002042:	4603      	mov	r3, r0
 8002044:	461c      	mov	r4, r3
 8002046:	68b9      	ldr	r1, [r7, #8]
 8002048:	6978      	ldr	r0, [r7, #20]
 800204a:	f7fe fe9b 	bl	8000d84 <__aeabi_fmul>
 800204e:	4603      	mov	r3, r0
 8002050:	4619      	mov	r1, r3
 8002052:	4620      	mov	r0, r4
 8002054:	f7fe fd8e 	bl	8000b74 <__addsf3>
 8002058:	4603      	mov	r3, r0
 800205a:	461c      	mov	r4, r3
 800205c:	68f9      	ldr	r1, [r7, #12]
 800205e:	6938      	ldr	r0, [r7, #16]
 8002060:	f7fe fe90 	bl	8000d84 <__aeabi_fmul>
 8002064:	4603      	mov	r3, r0
 8002066:	4619      	mov	r1, r3
 8002068:	4620      	mov	r0, r4
 800206a:	f7fe fd81 	bl	8000b70 <__aeabi_fsub>
 800206e:	4603      	mov	r3, r0
 8002070:	461a      	mov	r2, r3
 8002072:	4b2b      	ldr	r3, [pc, #172]	; (8002120 <MahonyAHRSupdateIMU+0x518>)
 8002074:	681b      	ldr	r3, [r3, #0]
 8002076:	4619      	mov	r1, r3
 8002078:	4610      	mov	r0, r2
 800207a:	f7fe fd7b 	bl	8000b74 <__addsf3>
 800207e:	4603      	mov	r3, r0
 8002080:	461a      	mov	r2, r3
 8002082:	4b27      	ldr	r3, [pc, #156]	; (8002120 <MahonyAHRSupdateIMU+0x518>)
 8002084:	601a      	str	r2, [r3, #0]
	
	// Normalise quaternion
	recipNorm = invSqrt(q0 * q0 + q1 * q1 + q2 * q2 + q3 * q3);
 8002086:	4b23      	ldr	r3, [pc, #140]	; (8002114 <MahonyAHRSupdateIMU+0x50c>)
 8002088:	681a      	ldr	r2, [r3, #0]
 800208a:	4b22      	ldr	r3, [pc, #136]	; (8002114 <MahonyAHRSupdateIMU+0x50c>)
 800208c:	681b      	ldr	r3, [r3, #0]
 800208e:	4619      	mov	r1, r3
 8002090:	4610      	mov	r0, r2
 8002092:	f7fe fe77 	bl	8000d84 <__aeabi_fmul>
 8002096:	4603      	mov	r3, r0
 8002098:	461c      	mov	r4, r3
 800209a:	4b1f      	ldr	r3, [pc, #124]	; (8002118 <MahonyAHRSupdateIMU+0x510>)
 800209c:	681a      	ldr	r2, [r3, #0]
 800209e:	4b1e      	ldr	r3, [pc, #120]	; (8002118 <MahonyAHRSupdateIMU+0x510>)
 80020a0:	681b      	ldr	r3, [r3, #0]
 80020a2:	4619      	mov	r1, r3
 80020a4:	4610      	mov	r0, r2
 80020a6:	f7fe fe6d 	bl	8000d84 <__aeabi_fmul>
 80020aa:	4603      	mov	r3, r0
 80020ac:	4619      	mov	r1, r3
 80020ae:	4620      	mov	r0, r4
 80020b0:	f7fe fd60 	bl	8000b74 <__addsf3>
 80020b4:	4603      	mov	r3, r0
 80020b6:	461c      	mov	r4, r3
 80020b8:	4b18      	ldr	r3, [pc, #96]	; (800211c <MahonyAHRSupdateIMU+0x514>)
 80020ba:	681a      	ldr	r2, [r3, #0]
 80020bc:	4b17      	ldr	r3, [pc, #92]	; (800211c <MahonyAHRSupdateIMU+0x514>)
 80020be:	681b      	ldr	r3, [r3, #0]
 80020c0:	4619      	mov	r1, r3
 80020c2:	4610      	mov	r0, r2
 80020c4:	f7fe fe5e 	bl	8000d84 <__aeabi_fmul>
 80020c8:	4603      	mov	r3, r0
 80020ca:	4619      	mov	r1, r3
 80020cc:	4620      	mov	r0, r4
 80020ce:	f7fe fd51 	bl	8000b74 <__addsf3>
 80020d2:	4603      	mov	r3, r0
 80020d4:	461c      	mov	r4, r3
 80020d6:	4b12      	ldr	r3, [pc, #72]	; (8002120 <MahonyAHRSupdateIMU+0x518>)
 80020d8:	681a      	ldr	r2, [r3, #0]
 80020da:	4b11      	ldr	r3, [pc, #68]	; (8002120 <MahonyAHRSupdateIMU+0x518>)
 80020dc:	681b      	ldr	r3, [r3, #0]
 80020de:	4619      	mov	r1, r3
 80020e0:	4610      	mov	r0, r2
 80020e2:	f7fe fe4f 	bl	8000d84 <__aeabi_fmul>
 80020e6:	4603      	mov	r3, r0
 80020e8:	4619      	mov	r1, r3
 80020ea:	4620      	mov	r0, r4
 80020ec:	f7fe fd42 	bl	8000b74 <__addsf3>
 80020f0:	4603      	mov	r3, r0
 80020f2:	4618      	mov	r0, r3
 80020f4:	f000 f848 	bl	8002188 <invSqrt>
 80020f8:	6378      	str	r0, [r7, #52]	; 0x34
	q0 *= recipNorm;
 80020fa:	4b06      	ldr	r3, [pc, #24]	; (8002114 <MahonyAHRSupdateIMU+0x50c>)
 80020fc:	681b      	ldr	r3, [r3, #0]
 80020fe:	e011      	b.n	8002124 <MahonyAHRSupdateIMU+0x51c>
 8002100:	20000230 	.word	0x20000230
 8002104:	20000234 	.word	0x20000234
 8002108:	20000238 	.word	0x20000238
 800210c:	20000000 	.word	0x20000000
 8002110:	3ba3d70a 	.word	0x3ba3d70a
 8002114:	20000004 	.word	0x20000004
 8002118:	20000224 	.word	0x20000224
 800211c:	20000228 	.word	0x20000228
 8002120:	2000022c 	.word	0x2000022c
 8002124:	6b79      	ldr	r1, [r7, #52]	; 0x34
 8002126:	4618      	mov	r0, r3
 8002128:	f7fe fe2c 	bl	8000d84 <__aeabi_fmul>
 800212c:	4603      	mov	r3, r0
 800212e:	461a      	mov	r2, r3
 8002130:	4b11      	ldr	r3, [pc, #68]	; (8002178 <MahonyAHRSupdateIMU+0x570>)
 8002132:	601a      	str	r2, [r3, #0]
	q1 *= recipNorm;
 8002134:	4b11      	ldr	r3, [pc, #68]	; (800217c <MahonyAHRSupdateIMU+0x574>)
 8002136:	681b      	ldr	r3, [r3, #0]
 8002138:	6b79      	ldr	r1, [r7, #52]	; 0x34
 800213a:	4618      	mov	r0, r3
 800213c:	f7fe fe22 	bl	8000d84 <__aeabi_fmul>
 8002140:	4603      	mov	r3, r0
 8002142:	461a      	mov	r2, r3
 8002144:	4b0d      	ldr	r3, [pc, #52]	; (800217c <MahonyAHRSupdateIMU+0x574>)
 8002146:	601a      	str	r2, [r3, #0]
	q2 *= recipNorm;
 8002148:	4b0d      	ldr	r3, [pc, #52]	; (8002180 <MahonyAHRSupdateIMU+0x578>)
 800214a:	681b      	ldr	r3, [r3, #0]
 800214c:	6b79      	ldr	r1, [r7, #52]	; 0x34
 800214e:	4618      	mov	r0, r3
 8002150:	f7fe fe18 	bl	8000d84 <__aeabi_fmul>
 8002154:	4603      	mov	r3, r0
 8002156:	461a      	mov	r2, r3
 8002158:	4b09      	ldr	r3, [pc, #36]	; (8002180 <MahonyAHRSupdateIMU+0x578>)
 800215a:	601a      	str	r2, [r3, #0]
	q3 *= recipNorm;
 800215c:	4b09      	ldr	r3, [pc, #36]	; (8002184 <MahonyAHRSupdateIMU+0x57c>)
 800215e:	681b      	ldr	r3, [r3, #0]
 8002160:	6b79      	ldr	r1, [r7, #52]	; 0x34
 8002162:	4618      	mov	r0, r3
 8002164:	f7fe fe0e 	bl	8000d84 <__aeabi_fmul>
 8002168:	4603      	mov	r3, r0
 800216a:	461a      	mov	r2, r3
 800216c:	4b05      	ldr	r3, [pc, #20]	; (8002184 <MahonyAHRSupdateIMU+0x57c>)
 800216e:	601a      	str	r2, [r3, #0]
}
 8002170:	bf00      	nop
 8002172:	373c      	adds	r7, #60	; 0x3c
 8002174:	46bd      	mov	sp, r7
 8002176:	bd90      	pop	{r4, r7, pc}
 8002178:	20000004 	.word	0x20000004
 800217c:	20000224 	.word	0x20000224
 8002180:	20000228 	.word	0x20000228
 8002184:	2000022c 	.word	0x2000022c

08002188 <invSqrt>:

//---------------------------------------------------------------------------------------------------
// Fast inverse square-root
// See: http://en.wikipedia.org/wiki/Fast_inverse_square_root

float invSqrt(float x) {
 8002188:	b580      	push	{r7, lr}
 800218a:	b086      	sub	sp, #24
 800218c:	af00      	add	r7, sp, #0
 800218e:	6078      	str	r0, [r7, #4]
	float halfx = 0.5f * x;
 8002190:	f04f 517c 	mov.w	r1, #1056964608	; 0x3f000000
 8002194:	6878      	ldr	r0, [r7, #4]
 8002196:	f7fe fdf5 	bl	8000d84 <__aeabi_fmul>
 800219a:	4603      	mov	r3, r0
 800219c:	617b      	str	r3, [r7, #20]
	float y = x;
 800219e:	687b      	ldr	r3, [r7, #4]
 80021a0:	613b      	str	r3, [r7, #16]
	long i = *(long*)&y;
 80021a2:	f107 0310 	add.w	r3, r7, #16
 80021a6:	681b      	ldr	r3, [r3, #0]
 80021a8:	60fb      	str	r3, [r7, #12]
	i = 0x5f3759df - (i>>1);
 80021aa:	68fb      	ldr	r3, [r7, #12]
 80021ac:	105a      	asrs	r2, r3, #1
 80021ae:	4b13      	ldr	r3, [pc, #76]	; (80021fc <invSqrt+0x74>)
 80021b0:	1a9b      	subs	r3, r3, r2
 80021b2:	60fb      	str	r3, [r7, #12]
	y = *(float*)&i;
 80021b4:	f107 030c 	add.w	r3, r7, #12
 80021b8:	681b      	ldr	r3, [r3, #0]
 80021ba:	613b      	str	r3, [r7, #16]
	y = y * (1.5f - (halfx * y * y));
 80021bc:	693b      	ldr	r3, [r7, #16]
 80021be:	6979      	ldr	r1, [r7, #20]
 80021c0:	4618      	mov	r0, r3
 80021c2:	f7fe fddf 	bl	8000d84 <__aeabi_fmul>
 80021c6:	4603      	mov	r3, r0
 80021c8:	461a      	mov	r2, r3
 80021ca:	693b      	ldr	r3, [r7, #16]
 80021cc:	4619      	mov	r1, r3
 80021ce:	4610      	mov	r0, r2
 80021d0:	f7fe fdd8 	bl	8000d84 <__aeabi_fmul>
 80021d4:	4603      	mov	r3, r0
 80021d6:	4619      	mov	r1, r3
 80021d8:	f04f 507f 	mov.w	r0, #1069547520	; 0x3fc00000
 80021dc:	f7fe fcc8 	bl	8000b70 <__aeabi_fsub>
 80021e0:	4603      	mov	r3, r0
 80021e2:	461a      	mov	r2, r3
 80021e4:	693b      	ldr	r3, [r7, #16]
 80021e6:	4619      	mov	r1, r3
 80021e8:	4610      	mov	r0, r2
 80021ea:	f7fe fdcb 	bl	8000d84 <__aeabi_fmul>
 80021ee:	4603      	mov	r3, r0
 80021f0:	613b      	str	r3, [r7, #16]
	return y;
 80021f2:	693b      	ldr	r3, [r7, #16]
}
 80021f4:	4618      	mov	r0, r3
 80021f6:	3718      	adds	r7, #24
 80021f8:	46bd      	mov	sp, r7
 80021fa:	bd80      	pop	{r7, pc}
 80021fc:	5f3759df 	.word	0x5f3759df

08002200 <MPU9250_Init>:
double base[3]={0,0,0};
double acce[3];


void MPU9250_Init (void)
{
 8002200:	b580      	push	{r7, lr}
 8002202:	b086      	sub	sp, #24
 8002204:	af04      	add	r7, sp, #16
    uint8_t check;
    uint8_t Data;

	// check WHO_AM_I

    HAL_I2C_Mem_Read (&hi2c1, MPU9250_ADDR,WHO_AM_I_REG,1, &check, 1, 1000);
 8002206:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 800220a:	9302      	str	r3, [sp, #8]
 800220c:	2301      	movs	r3, #1
 800220e:	9301      	str	r3, [sp, #4]
 8002210:	1dfb      	adds	r3, r7, #7
 8002212:	9300      	str	r3, [sp, #0]
 8002214:	2301      	movs	r3, #1
 8002216:	2275      	movs	r2, #117	; 0x75
 8002218:	21d0      	movs	r1, #208	; 0xd0
 800221a:	4860      	ldr	r0, [pc, #384]	; (800239c <MPU9250_Init+0x19c>)
 800221c:	f002 fb52 	bl	80048c4 <HAL_I2C_Mem_Read>

    if (check == 0x71)
 8002220:	79fb      	ldrb	r3, [r7, #7]
 8002222:	2b71      	cmp	r3, #113	; 0x71
 8002224:	f040 8096 	bne.w	8002354 <MPU9250_Init+0x154>
	{
		//Reset
		Data = 0X80;
 8002228:	2380      	movs	r3, #128	; 0x80
 800222a:	71bb      	strb	r3, [r7, #6]
		HAL_I2C_Mem_Write(&hi2c1, MPU9250_ADDR, PWR_MGMT_1_REG, 1,&Data, 1, 1000);
 800222c:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8002230:	9302      	str	r3, [sp, #8]
 8002232:	2301      	movs	r3, #1
 8002234:	9301      	str	r3, [sp, #4]
 8002236:	1dbb      	adds	r3, r7, #6
 8002238:	9300      	str	r3, [sp, #0]
 800223a:	2301      	movs	r3, #1
 800223c:	226b      	movs	r2, #107	; 0x6b
 800223e:	21d0      	movs	r1, #208	; 0xd0
 8002240:	4856      	ldr	r0, [pc, #344]	; (800239c <MPU9250_Init+0x19c>)
 8002242:	f002 fa45 	bl	80046d0 <HAL_I2C_Mem_Write>

		//Wake up
        Data = 0X00;
 8002246:	2300      	movs	r3, #0
 8002248:	71bb      	strb	r3, [r7, #6]
        HAL_I2C_Mem_Write(&hi2c1, MPU9250_ADDR, PWR_MGMT_1_REG, 1,&Data, 1, 1000);
 800224a:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 800224e:	9302      	str	r3, [sp, #8]
 8002250:	2301      	movs	r3, #1
 8002252:	9301      	str	r3, [sp, #4]
 8002254:	1dbb      	adds	r3, r7, #6
 8002256:	9300      	str	r3, [sp, #0]
 8002258:	2301      	movs	r3, #1
 800225a:	226b      	movs	r2, #107	; 0x6b
 800225c:	21d0      	movs	r1, #208	; 0xd0
 800225e:	484f      	ldr	r0, [pc, #316]	; (800239c <MPU9250_Init+0x19c>)
 8002260:	f002 fa36 	bl	80046d0 <HAL_I2C_Mem_Write>

		// Set DATA RATE = 1kHZ
        Data = 0x00;
 8002264:	2300      	movs	r3, #0
 8002266:	71bb      	strb	r3, [r7, #6]
        HAL_I2C_Mem_Write(&hi2c1, MPU9250_ADDR, SMPLRT_DIV_REG, 1, &Data, 1, 1000);
 8002268:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 800226c:	9302      	str	r3, [sp, #8]
 800226e:	2301      	movs	r3, #1
 8002270:	9301      	str	r3, [sp, #4]
 8002272:	1dbb      	adds	r3, r7, #6
 8002274:	9300      	str	r3, [sp, #0]
 8002276:	2301      	movs	r3, #1
 8002278:	2219      	movs	r2, #25
 800227a:	21d0      	movs	r1, #208	; 0xd0
 800227c:	4847      	ldr	r0, [pc, #284]	; (800239c <MPU9250_Init+0x19c>)
 800227e:	f002 fa27 	bl	80046d0 <HAL_I2C_Mem_Write>

		// Set accelerometer +-2g
		Data = 0x00;
 8002282:	2300      	movs	r3, #0
 8002284:	71bb      	strb	r3, [r7, #6]
		HAL_I2C_Mem_Write(&hi2c1, MPU9250_ADDR, ACCEL_CONFIG_REG, 1, &Data, 1, 1000);
 8002286:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 800228a:	9302      	str	r3, [sp, #8]
 800228c:	2301      	movs	r3, #1
 800228e:	9301      	str	r3, [sp, #4]
 8002290:	1dbb      	adds	r3, r7, #6
 8002292:	9300      	str	r3, [sp, #0]
 8002294:	2301      	movs	r3, #1
 8002296:	221c      	movs	r2, #28
 8002298:	21d0      	movs	r1, #208	; 0xd0
 800229a:	4840      	ldr	r0, [pc, #256]	; (800239c <MPU9250_Init+0x19c>)
 800229c:	f002 fa18 	bl	80046d0 <HAL_I2C_Mem_Write>

		// Set Gyroscope +-250
		Data = 0x11;
 80022a0:	2311      	movs	r3, #17
 80022a2:	71bb      	strb	r3, [r7, #6]
		HAL_I2C_Mem_Write(&hi2c1, MPU9250_ADDR, GYRO_CONFIG_REG, 1, &Data, 1, 1000);
 80022a4:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 80022a8:	9302      	str	r3, [sp, #8]
 80022aa:	2301      	movs	r3, #1
 80022ac:	9301      	str	r3, [sp, #4]
 80022ae:	1dbb      	adds	r3, r7, #6
 80022b0:	9300      	str	r3, [sp, #0]
 80022b2:	2301      	movs	r3, #1
 80022b4:	221b      	movs	r2, #27
 80022b6:	21d0      	movs	r1, #208	; 0xd0
 80022b8:	4838      	ldr	r0, [pc, #224]	; (800239c <MPU9250_Init+0x19c>)
 80022ba:	f002 fa09 	bl	80046d0 <HAL_I2C_Mem_Write>

		// Set DLPF Gyro Bandwidth = 188hz
		Data = 0x01;
 80022be:	2301      	movs	r3, #1
 80022c0:	71bb      	strb	r3, [r7, #6]
		HAL_I2C_Mem_Write(&hi2c1, MPU9250_ADDR, CONFIG_REG, 1, &Data, 1, 1000);
 80022c2:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 80022c6:	9302      	str	r3, [sp, #8]
 80022c8:	2301      	movs	r3, #1
 80022ca:	9301      	str	r3, [sp, #4]
 80022cc:	1dbb      	adds	r3, r7, #6
 80022ce:	9300      	str	r3, [sp, #0]
 80022d0:	2301      	movs	r3, #1
 80022d2:	221a      	movs	r2, #26
 80022d4:	21d0      	movs	r1, #208	; 0xd0
 80022d6:	4831      	ldr	r0, [pc, #196]	; (800239c <MPU9250_Init+0x19c>)
 80022d8:	f002 f9fa 	bl	80046d0 <HAL_I2C_Mem_Write>

		// Set DLPF ACCEL Bandwidth = 5hz
		Data = 0x06;
 80022dc:	2306      	movs	r3, #6
 80022de:	71bb      	strb	r3, [r7, #6]
		HAL_I2C_Mem_Write(&hi2c1, MPU9250_ADDR, ACCEL_CONFIG2_REG, 1, &Data, 1, 1000);
 80022e0:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 80022e4:	9302      	str	r3, [sp, #8]
 80022e6:	2301      	movs	r3, #1
 80022e8:	9301      	str	r3, [sp, #4]
 80022ea:	1dbb      	adds	r3, r7, #6
 80022ec:	9300      	str	r3, [sp, #0]
 80022ee:	2301      	movs	r3, #1
 80022f0:	221d      	movs	r2, #29
 80022f2:	21d0      	movs	r1, #208	; 0xd0
 80022f4:	4829      	ldr	r0, [pc, #164]	; (800239c <MPU9250_Init+0x19c>)
 80022f6:	f002 f9eb 	bl	80046d0 <HAL_I2C_Mem_Write>

		//The logic level for INT pin is active low
		//BYPASS Enable
		Data = 0x82;
 80022fa:	2382      	movs	r3, #130	; 0x82
 80022fc:	71bb      	strb	r3, [r7, #6]
		HAL_I2C_Mem_Write(&hi2c1, MPU9250_ADDR, INT_PIN_CFG_REG, 1, &Data, 1, 1000);
 80022fe:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8002302:	9302      	str	r3, [sp, #8]
 8002304:	2301      	movs	r3, #1
 8002306:	9301      	str	r3, [sp, #4]
 8002308:	1dbb      	adds	r3, r7, #6
 800230a:	9300      	str	r3, [sp, #0]
 800230c:	2301      	movs	r3, #1
 800230e:	2237      	movs	r2, #55	; 0x37
 8002310:	21d0      	movs	r1, #208	; 0xd0
 8002312:	4822      	ldr	r0, [pc, #136]	; (800239c <MPU9250_Init+0x19c>)
 8002314:	f002 f9dc 	bl	80046d0 <HAL_I2C_Mem_Write>

		// Auto selects the best available clock source ?? PLL if ready, else use the Internal oscillator
		Data = 0x01;
 8002318:	2301      	movs	r3, #1
 800231a:	71bb      	strb	r3, [r7, #6]
		HAL_I2C_Mem_Write(&hi2c1, MPU9250_ADDR, PWR_MGMT_1_REG, 1, &Data, 1, 1000);
 800231c:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8002320:	9302      	str	r3, [sp, #8]
 8002322:	2301      	movs	r3, #1
 8002324:	9301      	str	r3, [sp, #4]
 8002326:	1dbb      	adds	r3, r7, #6
 8002328:	9300      	str	r3, [sp, #0]
 800232a:	2301      	movs	r3, #1
 800232c:	226b      	movs	r2, #107	; 0x6b
 800232e:	21d0      	movs	r1, #208	; 0xd0
 8002330:	481a      	ldr	r0, [pc, #104]	; (800239c <MPU9250_Init+0x19c>)
 8002332:	f002 f9cd 	bl	80046d0 <HAL_I2C_Mem_Write>

		// Enable ACCEL & GYRO
		Data = 0x00;
 8002336:	2300      	movs	r3, #0
 8002338:	71bb      	strb	r3, [r7, #6]
		HAL_I2C_Mem_Write(&hi2c1, MPU9250_ADDR, PWR_MGMT_2_REG, 1, &Data, 1, 1000);
 800233a:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 800233e:	9302      	str	r3, [sp, #8]
 8002340:	2301      	movs	r3, #1
 8002342:	9301      	str	r3, [sp, #4]
 8002344:	1dbb      	adds	r3, r7, #6
 8002346:	9300      	str	r3, [sp, #0]
 8002348:	2301      	movs	r3, #1
 800234a:	226c      	movs	r2, #108	; 0x6c
 800234c:	21d0      	movs	r1, #208	; 0xd0
 800234e:	4813      	ldr	r0, [pc, #76]	; (800239c <MPU9250_Init+0x19c>)
 8002350:	f002 f9be 	bl	80046d0 <HAL_I2C_Mem_Write>
	}

	HAL_I2C_Mem_Read (&hi2c1, (AK8963_ADDR<<1),AK8963_WHOAMI_REG,1, &check, 1, 1000);
 8002354:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8002358:	9302      	str	r3, [sp, #8]
 800235a:	2301      	movs	r3, #1
 800235c:	9301      	str	r3, [sp, #4]
 800235e:	1dfb      	adds	r3, r7, #7
 8002360:	9300      	str	r3, [sp, #0]
 8002362:	2301      	movs	r3, #1
 8002364:	2200      	movs	r2, #0
 8002366:	2118      	movs	r1, #24
 8002368:	480c      	ldr	r0, [pc, #48]	; (800239c <MPU9250_Init+0x19c>)
 800236a:	f002 faab 	bl	80048c4 <HAL_I2C_Mem_Read>

	if (check == 0x48){
 800236e:	79fb      	ldrb	r3, [r7, #7]
 8002370:	2b48      	cmp	r3, #72	; 0x48
 8002372:	d10e      	bne.n	8002392 <MPU9250_Init+0x192>
		// Single measurement mode
		// 16-bit output
		Data = 0x11;
 8002374:	2311      	movs	r3, #17
 8002376:	71bb      	strb	r3, [r7, #6]
		HAL_I2C_Mem_Write(&hi2c1, (AK8963_ADDR<<1), AK8963_CNTL1_REG, 1, &Data, 1, 1000);
 8002378:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 800237c:	9302      	str	r3, [sp, #8]
 800237e:	2301      	movs	r3, #1
 8002380:	9301      	str	r3, [sp, #4]
 8002382:	1dbb      	adds	r3, r7, #6
 8002384:	9300      	str	r3, [sp, #0]
 8002386:	2301      	movs	r3, #1
 8002388:	220a      	movs	r2, #10
 800238a:	2118      	movs	r1, #24
 800238c:	4803      	ldr	r0, [pc, #12]	; (800239c <MPU9250_Init+0x19c>)
 800238e:	f002 f99f 	bl	80046d0 <HAL_I2C_Mem_Write>
	}
}
 8002392:	bf00      	nop
 8002394:	3708      	adds	r7, #8
 8002396:	46bd      	mov	sp, r7
 8002398:	bd80      	pop	{r7, pc}
 800239a:	bf00      	nop
 800239c:	20000328 	.word	0x20000328

080023a0 <initAK8963>:
void initAK8963(float * destination)
{
 80023a0:	b590      	push	{r4, r7, lr}
 80023a2:	b089      	sub	sp, #36	; 0x24
 80023a4:	af04      	add	r7, sp, #16
 80023a6:	6078      	str	r0, [r7, #4]
  // First extract the factory calibration for each magnetometer axis
    uint8_t rawData[3];  // x/y/z gyro calibration data stored here
    uint8_t Data;
    Data = 0x00;
 80023a8:	2300      	movs	r3, #0
 80023aa:	72fb      	strb	r3, [r7, #11]
    HAL_I2C_Mem_Write(&hi2c1, (AK8963_ADDR<<1), AK8963_CNTL1_REG, 1, &Data, 1, 1000);	 // Power down magnetometer
 80023ac:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 80023b0:	9302      	str	r3, [sp, #8]
 80023b2:	2301      	movs	r3, #1
 80023b4:	9301      	str	r3, [sp, #4]
 80023b6:	f107 030b 	add.w	r3, r7, #11
 80023ba:	9300      	str	r3, [sp, #0]
 80023bc:	2301      	movs	r3, #1
 80023be:	220a      	movs	r2, #10
 80023c0:	2118      	movs	r1, #24
 80023c2:	485e      	ldr	r0, [pc, #376]	; (800253c <initAK8963+0x19c>)
 80023c4:	f002 f984 	bl	80046d0 <HAL_I2C_Mem_Write>
    HAL_Delay(10);
 80023c8:	200a      	movs	r0, #10
 80023ca:	f001 fd0f 	bl	8003dec <HAL_Delay>
    Data = 0x0F;
 80023ce:	230f      	movs	r3, #15
 80023d0:	72fb      	strb	r3, [r7, #11]
    HAL_I2C_Mem_Write(&hi2c1, (AK8963_ADDR<<1), AK8963_CNTL1_REG, 1, &Data, 1, 1000);	// Enter Fuse ROM access mode
 80023d2:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 80023d6:	9302      	str	r3, [sp, #8]
 80023d8:	2301      	movs	r3, #1
 80023da:	9301      	str	r3, [sp, #4]
 80023dc:	f107 030b 	add.w	r3, r7, #11
 80023e0:	9300      	str	r3, [sp, #0]
 80023e2:	2301      	movs	r3, #1
 80023e4:	220a      	movs	r2, #10
 80023e6:	2118      	movs	r1, #24
 80023e8:	4854      	ldr	r0, [pc, #336]	; (800253c <initAK8963+0x19c>)
 80023ea:	f002 f971 	bl	80046d0 <HAL_I2C_Mem_Write>
    HAL_Delay(10);
 80023ee:	200a      	movs	r0, #10
 80023f0:	f001 fcfc 	bl	8003dec <HAL_Delay>
    HAL_I2C_Mem_Read (&hi2c1, (AK8963_ADDR<<1),AK8963_ASAX,1, &rawData, 3, 1000); // Read the x-, y-, and z-axis calibration values
 80023f4:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 80023f8:	9302      	str	r3, [sp, #8]
 80023fa:	2303      	movs	r3, #3
 80023fc:	9301      	str	r3, [sp, #4]
 80023fe:	f107 030c 	add.w	r3, r7, #12
 8002402:	9300      	str	r3, [sp, #0]
 8002404:	2301      	movs	r3, #1
 8002406:	2210      	movs	r2, #16
 8002408:	2118      	movs	r1, #24
 800240a:	484c      	ldr	r0, [pc, #304]	; (800253c <initAK8963+0x19c>)
 800240c:	f002 fa5a 	bl	80048c4 <HAL_I2C_Mem_Read>
    destination[0] =  (float)(rawData[0] - 128)/256. + 1.;   // Return x-axis sensitivity adjustment values, etc.
 8002410:	7b3b      	ldrb	r3, [r7, #12]
 8002412:	3b80      	subs	r3, #128	; 0x80
 8002414:	4618      	mov	r0, r3
 8002416:	f7fe fc61 	bl	8000cdc <__aeabi_i2f>
 800241a:	4603      	mov	r3, r0
 800241c:	4618      	mov	r0, r3
 800241e:	f7fe f803 	bl	8000428 <__aeabi_f2d>
 8002422:	f04f 0200 	mov.w	r2, #0
 8002426:	4b46      	ldr	r3, [pc, #280]	; (8002540 <initAK8963+0x1a0>)
 8002428:	f7fe f980 	bl	800072c <__aeabi_ddiv>
 800242c:	4603      	mov	r3, r0
 800242e:	460c      	mov	r4, r1
 8002430:	4618      	mov	r0, r3
 8002432:	4621      	mov	r1, r4
 8002434:	f04f 0200 	mov.w	r2, #0
 8002438:	4b42      	ldr	r3, [pc, #264]	; (8002544 <initAK8963+0x1a4>)
 800243a:	f7fd fe97 	bl	800016c <__adddf3>
 800243e:	4603      	mov	r3, r0
 8002440:	460c      	mov	r4, r1
 8002442:	4618      	mov	r0, r3
 8002444:	4621      	mov	r1, r4
 8002446:	f7fe fb3f 	bl	8000ac8 <__aeabi_d2f>
 800244a:	4602      	mov	r2, r0
 800244c:	687b      	ldr	r3, [r7, #4]
 800244e:	601a      	str	r2, [r3, #0]
    destination[1] =  (float)(rawData[1] - 128)/256. + 1.;
 8002450:	7b7b      	ldrb	r3, [r7, #13]
 8002452:	3b80      	subs	r3, #128	; 0x80
 8002454:	4618      	mov	r0, r3
 8002456:	f7fe fc41 	bl	8000cdc <__aeabi_i2f>
 800245a:	4603      	mov	r3, r0
 800245c:	4618      	mov	r0, r3
 800245e:	f7fd ffe3 	bl	8000428 <__aeabi_f2d>
 8002462:	f04f 0200 	mov.w	r2, #0
 8002466:	4b36      	ldr	r3, [pc, #216]	; (8002540 <initAK8963+0x1a0>)
 8002468:	f7fe f960 	bl	800072c <__aeabi_ddiv>
 800246c:	4603      	mov	r3, r0
 800246e:	460c      	mov	r4, r1
 8002470:	4618      	mov	r0, r3
 8002472:	4621      	mov	r1, r4
 8002474:	f04f 0200 	mov.w	r2, #0
 8002478:	4b32      	ldr	r3, [pc, #200]	; (8002544 <initAK8963+0x1a4>)
 800247a:	f7fd fe77 	bl	800016c <__adddf3>
 800247e:	4603      	mov	r3, r0
 8002480:	460c      	mov	r4, r1
 8002482:	4619      	mov	r1, r3
 8002484:	4622      	mov	r2, r4
 8002486:	687b      	ldr	r3, [r7, #4]
 8002488:	1d1c      	adds	r4, r3, #4
 800248a:	4608      	mov	r0, r1
 800248c:	4611      	mov	r1, r2
 800248e:	f7fe fb1b 	bl	8000ac8 <__aeabi_d2f>
 8002492:	4603      	mov	r3, r0
 8002494:	6023      	str	r3, [r4, #0]
    destination[2] =  (float)(rawData[2] - 128)/256. + 1.;
 8002496:	7bbb      	ldrb	r3, [r7, #14]
 8002498:	3b80      	subs	r3, #128	; 0x80
 800249a:	4618      	mov	r0, r3
 800249c:	f7fe fc1e 	bl	8000cdc <__aeabi_i2f>
 80024a0:	4603      	mov	r3, r0
 80024a2:	4618      	mov	r0, r3
 80024a4:	f7fd ffc0 	bl	8000428 <__aeabi_f2d>
 80024a8:	f04f 0200 	mov.w	r2, #0
 80024ac:	4b24      	ldr	r3, [pc, #144]	; (8002540 <initAK8963+0x1a0>)
 80024ae:	f7fe f93d 	bl	800072c <__aeabi_ddiv>
 80024b2:	4603      	mov	r3, r0
 80024b4:	460c      	mov	r4, r1
 80024b6:	4618      	mov	r0, r3
 80024b8:	4621      	mov	r1, r4
 80024ba:	f04f 0200 	mov.w	r2, #0
 80024be:	4b21      	ldr	r3, [pc, #132]	; (8002544 <initAK8963+0x1a4>)
 80024c0:	f7fd fe54 	bl	800016c <__adddf3>
 80024c4:	4603      	mov	r3, r0
 80024c6:	460c      	mov	r4, r1
 80024c8:	4619      	mov	r1, r3
 80024ca:	4622      	mov	r2, r4
 80024cc:	687b      	ldr	r3, [r7, #4]
 80024ce:	f103 0408 	add.w	r4, r3, #8
 80024d2:	4608      	mov	r0, r1
 80024d4:	4611      	mov	r1, r2
 80024d6:	f7fe faf7 	bl	8000ac8 <__aeabi_d2f>
 80024da:	4603      	mov	r3, r0
 80024dc:	6023      	str	r3, [r4, #0]
    Data = 0x00;
 80024de:	2300      	movs	r3, #0
 80024e0:	72fb      	strb	r3, [r7, #11]
    HAL_I2C_Mem_Write(&hi2c1, (AK8963_ADDR<<1), AK8963_CNTL1_REG, 1, &Data, 1, 1000);	 // Power down magnetometer
 80024e2:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 80024e6:	9302      	str	r3, [sp, #8]
 80024e8:	2301      	movs	r3, #1
 80024ea:	9301      	str	r3, [sp, #4]
 80024ec:	f107 030b 	add.w	r3, r7, #11
 80024f0:	9300      	str	r3, [sp, #0]
 80024f2:	2301      	movs	r3, #1
 80024f4:	220a      	movs	r2, #10
 80024f6:	2118      	movs	r1, #24
 80024f8:	4810      	ldr	r0, [pc, #64]	; (800253c <initAK8963+0x19c>)
 80024fa:	f002 f8e9 	bl	80046d0 <HAL_I2C_Mem_Write>
    HAL_Delay(10);
 80024fe:	200a      	movs	r0, #10
 8002500:	f001 fc74 	bl	8003dec <HAL_Delay>
  // Configure the magnetometer for continuous read and highest resolution
  // set Mscale bit 4 to 1 (0) to enable 16 (14) bit resolution in CNTL register,
  // and enable continuous mode data acquisition Mmode (bits [3:0]), 0010 for 8 Hz and 0110 for 100 Hz sample rates
    Data = 1 << 4 | Mmode;
 8002504:	4b10      	ldr	r3, [pc, #64]	; (8002548 <initAK8963+0x1a8>)
 8002506:	781b      	ldrb	r3, [r3, #0]
 8002508:	f043 0310 	orr.w	r3, r3, #16
 800250c:	b2db      	uxtb	r3, r3
 800250e:	72fb      	strb	r3, [r7, #11]
    HAL_I2C_Mem_Write(&hi2c1, (AK8963_ADDR<<1), AK8963_CNTL1_REG, 1, &Data, 1, 1000); // Set magnetometer data resolution and sample ODR
 8002510:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8002514:	9302      	str	r3, [sp, #8]
 8002516:	2301      	movs	r3, #1
 8002518:	9301      	str	r3, [sp, #4]
 800251a:	f107 030b 	add.w	r3, r7, #11
 800251e:	9300      	str	r3, [sp, #0]
 8002520:	2301      	movs	r3, #1
 8002522:	220a      	movs	r2, #10
 8002524:	2118      	movs	r1, #24
 8002526:	4805      	ldr	r0, [pc, #20]	; (800253c <initAK8963+0x19c>)
 8002528:	f002 f8d2 	bl	80046d0 <HAL_I2C_Mem_Write>
    HAL_Delay(10);
 800252c:	200a      	movs	r0, #10
 800252e:	f001 fc5d 	bl	8003dec <HAL_Delay>
}
 8002532:	bf00      	nop
 8002534:	3714      	adds	r7, #20
 8002536:	46bd      	mov	sp, r7
 8002538:	bd90      	pop	{r4, r7, pc}
 800253a:	bf00      	nop
 800253c:	20000328 	.word	0x20000328
 8002540:	40700000 	.word	0x40700000
 8002544:	3ff00000 	.word	0x3ff00000
 8002548:	20000008 	.word	0x20000008

0800254c <MPU9250_Read_Accel>:


void MPU9250_Read_Accel (void)
{
 800254c:	b590      	push	{r4, r7, lr}
 800254e:	b087      	sub	sp, #28
 8002550:	af04      	add	r7, sp, #16
	uint8_t Rec_Data[6];

	// Read 6 BYTES of data starting from ACCEL_XOUT_H register

	HAL_I2C_Mem_Read (&hi2c1, MPU9250_ADDR, ACCEL_XOUT_H_REG, 1, Rec_Data, 6, 1000);
 8002552:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8002556:	9302      	str	r3, [sp, #8]
 8002558:	2306      	movs	r3, #6
 800255a:	9301      	str	r3, [sp, #4]
 800255c:	463b      	mov	r3, r7
 800255e:	9300      	str	r3, [sp, #0]
 8002560:	2301      	movs	r3, #1
 8002562:	223b      	movs	r2, #59	; 0x3b
 8002564:	21d0      	movs	r1, #208	; 0xd0
 8002566:	4841      	ldr	r0, [pc, #260]	; (800266c <MPU9250_Read_Accel+0x120>)
 8002568:	f002 f9ac 	bl	80048c4 <HAL_I2C_Mem_Read>

	Accel_X_RAW = (int16_t)(Rec_Data[0] << 8 | Rec_Data [1]);
 800256c:	783b      	ldrb	r3, [r7, #0]
 800256e:	021b      	lsls	r3, r3, #8
 8002570:	b21a      	sxth	r2, r3
 8002572:	787b      	ldrb	r3, [r7, #1]
 8002574:	b21b      	sxth	r3, r3
 8002576:	4313      	orrs	r3, r2
 8002578:	b21a      	sxth	r2, r3
 800257a:	4b3d      	ldr	r3, [pc, #244]	; (8002670 <MPU9250_Read_Accel+0x124>)
 800257c:	801a      	strh	r2, [r3, #0]
	Accel_Y_RAW = (int16_t)(Rec_Data[2] << 8 | Rec_Data [3]);
 800257e:	78bb      	ldrb	r3, [r7, #2]
 8002580:	021b      	lsls	r3, r3, #8
 8002582:	b21a      	sxth	r2, r3
 8002584:	78fb      	ldrb	r3, [r7, #3]
 8002586:	b21b      	sxth	r3, r3
 8002588:	4313      	orrs	r3, r2
 800258a:	b21a      	sxth	r2, r3
 800258c:	4b39      	ldr	r3, [pc, #228]	; (8002674 <MPU9250_Read_Accel+0x128>)
 800258e:	801a      	strh	r2, [r3, #0]
	Accel_Z_RAW = (int16_t)(Rec_Data[4] << 8 | Rec_Data [5]);
 8002590:	793b      	ldrb	r3, [r7, #4]
 8002592:	021b      	lsls	r3, r3, #8
 8002594:	b21a      	sxth	r2, r3
 8002596:	797b      	ldrb	r3, [r7, #5]
 8002598:	b21b      	sxth	r3, r3
 800259a:	4313      	orrs	r3, r2
 800259c:	b21a      	sxth	r2, r3
 800259e:	4b36      	ldr	r3, [pc, #216]	; (8002678 <MPU9250_Read_Accel+0x12c>)
 80025a0:	801a      	strh	r2, [r3, #0]

	/*** convert the RAW values into acceleration in 'g'
	     check ACCEL_CONFIG Register              ****/

	Ax = Accel_X_RAW/16384.0 ;
 80025a2:	4b33      	ldr	r3, [pc, #204]	; (8002670 <MPU9250_Read_Accel+0x124>)
 80025a4:	f9b3 3000 	ldrsh.w	r3, [r3]
 80025a8:	4618      	mov	r0, r3
 80025aa:	f7fd ff2b 	bl	8000404 <__aeabi_i2d>
 80025ae:	f04f 0200 	mov.w	r2, #0
 80025b2:	4b32      	ldr	r3, [pc, #200]	; (800267c <MPU9250_Read_Accel+0x130>)
 80025b4:	f7fe f8ba 	bl	800072c <__aeabi_ddiv>
 80025b8:	4603      	mov	r3, r0
 80025ba:	460c      	mov	r4, r1
 80025bc:	4618      	mov	r0, r3
 80025be:	4621      	mov	r1, r4
 80025c0:	f7fe fa82 	bl	8000ac8 <__aeabi_d2f>
 80025c4:	4602      	mov	r2, r0
 80025c6:	4b2e      	ldr	r3, [pc, #184]	; (8002680 <MPU9250_Read_Accel+0x134>)
 80025c8:	601a      	str	r2, [r3, #0]
	Ay = Accel_Y_RAW/16384.0 ;
 80025ca:	4b2a      	ldr	r3, [pc, #168]	; (8002674 <MPU9250_Read_Accel+0x128>)
 80025cc:	f9b3 3000 	ldrsh.w	r3, [r3]
 80025d0:	4618      	mov	r0, r3
 80025d2:	f7fd ff17 	bl	8000404 <__aeabi_i2d>
 80025d6:	f04f 0200 	mov.w	r2, #0
 80025da:	4b28      	ldr	r3, [pc, #160]	; (800267c <MPU9250_Read_Accel+0x130>)
 80025dc:	f7fe f8a6 	bl	800072c <__aeabi_ddiv>
 80025e0:	4603      	mov	r3, r0
 80025e2:	460c      	mov	r4, r1
 80025e4:	4618      	mov	r0, r3
 80025e6:	4621      	mov	r1, r4
 80025e8:	f7fe fa6e 	bl	8000ac8 <__aeabi_d2f>
 80025ec:	4602      	mov	r2, r0
 80025ee:	4b25      	ldr	r3, [pc, #148]	; (8002684 <MPU9250_Read_Accel+0x138>)
 80025f0:	601a      	str	r2, [r3, #0]
    Az = Accel_Z_RAW/16384.0 ;
 80025f2:	4b21      	ldr	r3, [pc, #132]	; (8002678 <MPU9250_Read_Accel+0x12c>)
 80025f4:	f9b3 3000 	ldrsh.w	r3, [r3]
 80025f8:	4618      	mov	r0, r3
 80025fa:	f7fd ff03 	bl	8000404 <__aeabi_i2d>
 80025fe:	f04f 0200 	mov.w	r2, #0
 8002602:	4b1e      	ldr	r3, [pc, #120]	; (800267c <MPU9250_Read_Accel+0x130>)
 8002604:	f7fe f892 	bl	800072c <__aeabi_ddiv>
 8002608:	4603      	mov	r3, r0
 800260a:	460c      	mov	r4, r1
 800260c:	4618      	mov	r0, r3
 800260e:	4621      	mov	r1, r4
 8002610:	f7fe fa5a 	bl	8000ac8 <__aeabi_d2f>
 8002614:	4602      	mov	r2, r0
 8002616:	4b1c      	ldr	r3, [pc, #112]	; (8002688 <MPU9250_Read_Accel+0x13c>)
 8002618:	601a      	str	r2, [r3, #0]
    Ax-=accelBias[0];
 800261a:	4b19      	ldr	r3, [pc, #100]	; (8002680 <MPU9250_Read_Accel+0x134>)
 800261c:	681a      	ldr	r2, [r3, #0]
 800261e:	4b1b      	ldr	r3, [pc, #108]	; (800268c <MPU9250_Read_Accel+0x140>)
 8002620:	681b      	ldr	r3, [r3, #0]
 8002622:	4619      	mov	r1, r3
 8002624:	4610      	mov	r0, r2
 8002626:	f7fe faa3 	bl	8000b70 <__aeabi_fsub>
 800262a:	4603      	mov	r3, r0
 800262c:	461a      	mov	r2, r3
 800262e:	4b14      	ldr	r3, [pc, #80]	; (8002680 <MPU9250_Read_Accel+0x134>)
 8002630:	601a      	str	r2, [r3, #0]
	Ay-=accelBias[1];
 8002632:	4b14      	ldr	r3, [pc, #80]	; (8002684 <MPU9250_Read_Accel+0x138>)
 8002634:	681a      	ldr	r2, [r3, #0]
 8002636:	4b15      	ldr	r3, [pc, #84]	; (800268c <MPU9250_Read_Accel+0x140>)
 8002638:	685b      	ldr	r3, [r3, #4]
 800263a:	4619      	mov	r1, r3
 800263c:	4610      	mov	r0, r2
 800263e:	f7fe fa97 	bl	8000b70 <__aeabi_fsub>
 8002642:	4603      	mov	r3, r0
 8002644:	461a      	mov	r2, r3
 8002646:	4b0f      	ldr	r3, [pc, #60]	; (8002684 <MPU9250_Read_Accel+0x138>)
 8002648:	601a      	str	r2, [r3, #0]
    Az-=accelBias[2];
 800264a:	4b0f      	ldr	r3, [pc, #60]	; (8002688 <MPU9250_Read_Accel+0x13c>)
 800264c:	681a      	ldr	r2, [r3, #0]
 800264e:	4b0f      	ldr	r3, [pc, #60]	; (800268c <MPU9250_Read_Accel+0x140>)
 8002650:	689b      	ldr	r3, [r3, #8]
 8002652:	4619      	mov	r1, r3
 8002654:	4610      	mov	r0, r2
 8002656:	f7fe fa8b 	bl	8000b70 <__aeabi_fsub>
 800265a:	4603      	mov	r3, r0
 800265c:	461a      	mov	r2, r3
 800265e:	4b0a      	ldr	r3, [pc, #40]	; (8002688 <MPU9250_Read_Accel+0x13c>)
 8002660:	601a      	str	r2, [r3, #0]
}
 8002662:	bf00      	nop
 8002664:	370c      	adds	r7, #12
 8002666:	46bd      	mov	sp, r7
 8002668:	bd90      	pop	{r4, r7, pc}
 800266a:	bf00      	nop
 800266c:	20000328 	.word	0x20000328
 8002670:	20000248 	.word	0x20000248
 8002674:	2000024a 	.word	0x2000024a
 8002678:	2000024c 	.word	0x2000024c
 800267c:	40d00000 	.word	0x40d00000
 8002680:	200003b0 	.word	0x200003b0
 8002684:	20000388 	.word	0x20000388
 8002688:	200003bc 	.word	0x200003bc
 800268c:	20000274 	.word	0x20000274

08002690 <MPU9250_Read_Gyro>:


void MPU9250_Read_Gyro (void)
{
 8002690:	b5b0      	push	{r4, r5, r7, lr}
 8002692:	b086      	sub	sp, #24
 8002694:	af04      	add	r7, sp, #16
	uint8_t Rec_Data[6];

	// Read 6 BYTES of data starting from GYRO_XOUT_H register

	HAL_I2C_Mem_Read (&hi2c1, MPU9250_ADDR, GYRO_XOUT_H_REG, 1, Rec_Data, 6, 1000);
 8002696:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 800269a:	9302      	str	r3, [sp, #8]
 800269c:	2306      	movs	r3, #6
 800269e:	9301      	str	r3, [sp, #4]
 80026a0:	463b      	mov	r3, r7
 80026a2:	9300      	str	r3, [sp, #0]
 80026a4:	2301      	movs	r3, #1
 80026a6:	2243      	movs	r2, #67	; 0x43
 80026a8:	21d0      	movs	r1, #208	; 0xd0
 80026aa:	4847      	ldr	r0, [pc, #284]	; (80027c8 <MPU9250_Read_Gyro+0x138>)
 80026ac:	f002 f90a 	bl	80048c4 <HAL_I2C_Mem_Read>

	Gyro_X_RAW = (int16_t)(Rec_Data[0] << 8 | Rec_Data [1]);
 80026b0:	783b      	ldrb	r3, [r7, #0]
 80026b2:	021b      	lsls	r3, r3, #8
 80026b4:	b21a      	sxth	r2, r3
 80026b6:	787b      	ldrb	r3, [r7, #1]
 80026b8:	b21b      	sxth	r3, r3
 80026ba:	4313      	orrs	r3, r2
 80026bc:	b21a      	sxth	r2, r3
 80026be:	4b43      	ldr	r3, [pc, #268]	; (80027cc <MPU9250_Read_Gyro+0x13c>)
 80026c0:	801a      	strh	r2, [r3, #0]
	Gyro_Y_RAW = (int16_t)(Rec_Data[2] << 8 | Rec_Data [3]);
 80026c2:	78bb      	ldrb	r3, [r7, #2]
 80026c4:	021b      	lsls	r3, r3, #8
 80026c6:	b21a      	sxth	r2, r3
 80026c8:	78fb      	ldrb	r3, [r7, #3]
 80026ca:	b21b      	sxth	r3, r3
 80026cc:	4313      	orrs	r3, r2
 80026ce:	b21a      	sxth	r2, r3
 80026d0:	4b3f      	ldr	r3, [pc, #252]	; (80027d0 <MPU9250_Read_Gyro+0x140>)
 80026d2:	801a      	strh	r2, [r3, #0]
	Gyro_Z_RAW = (int16_t)(Rec_Data[4] << 8 | Rec_Data [5]);
 80026d4:	793b      	ldrb	r3, [r7, #4]
 80026d6:	021b      	lsls	r3, r3, #8
 80026d8:	b21a      	sxth	r2, r3
 80026da:	797b      	ldrb	r3, [r7, #5]
 80026dc:	b21b      	sxth	r3, r3
 80026de:	4313      	orrs	r3, r2
 80026e0:	b21a      	sxth	r2, r3
 80026e2:	4b3c      	ldr	r3, [pc, #240]	; (80027d4 <MPU9250_Read_Gyro+0x144>)
 80026e4:	801a      	strh	r2, [r3, #0]

	/*** convert the RAW values into dps
	 check GYRO_CONFIG Register              ****/

	Gx = Gyro_X_RAW/131.0 - gyroBias[0];
 80026e6:	4b39      	ldr	r3, [pc, #228]	; (80027cc <MPU9250_Read_Gyro+0x13c>)
 80026e8:	f9b3 3000 	ldrsh.w	r3, [r3]
 80026ec:	4618      	mov	r0, r3
 80026ee:	f7fd fe89 	bl	8000404 <__aeabi_i2d>
 80026f2:	a333      	add	r3, pc, #204	; (adr r3, 80027c0 <MPU9250_Read_Gyro+0x130>)
 80026f4:	e9d3 2300 	ldrd	r2, r3, [r3]
 80026f8:	f7fe f818 	bl	800072c <__aeabi_ddiv>
 80026fc:	4603      	mov	r3, r0
 80026fe:	460c      	mov	r4, r1
 8002700:	4625      	mov	r5, r4
 8002702:	461c      	mov	r4, r3
 8002704:	4b34      	ldr	r3, [pc, #208]	; (80027d8 <MPU9250_Read_Gyro+0x148>)
 8002706:	681b      	ldr	r3, [r3, #0]
 8002708:	4618      	mov	r0, r3
 800270a:	f7fd fe8d 	bl	8000428 <__aeabi_f2d>
 800270e:	4602      	mov	r2, r0
 8002710:	460b      	mov	r3, r1
 8002712:	4620      	mov	r0, r4
 8002714:	4629      	mov	r1, r5
 8002716:	f7fd fd27 	bl	8000168 <__aeabi_dsub>
 800271a:	4603      	mov	r3, r0
 800271c:	460c      	mov	r4, r1
 800271e:	4618      	mov	r0, r3
 8002720:	4621      	mov	r1, r4
 8002722:	f7fe f9d1 	bl	8000ac8 <__aeabi_d2f>
 8002726:	4602      	mov	r2, r0
 8002728:	4b2c      	ldr	r3, [pc, #176]	; (80027dc <MPU9250_Read_Gyro+0x14c>)
 800272a:	601a      	str	r2, [r3, #0]
	Gy = Gyro_Y_RAW/131.0 - gyroBias[1];
 800272c:	4b28      	ldr	r3, [pc, #160]	; (80027d0 <MPU9250_Read_Gyro+0x140>)
 800272e:	f9b3 3000 	ldrsh.w	r3, [r3]
 8002732:	4618      	mov	r0, r3
 8002734:	f7fd fe66 	bl	8000404 <__aeabi_i2d>
 8002738:	a321      	add	r3, pc, #132	; (adr r3, 80027c0 <MPU9250_Read_Gyro+0x130>)
 800273a:	e9d3 2300 	ldrd	r2, r3, [r3]
 800273e:	f7fd fff5 	bl	800072c <__aeabi_ddiv>
 8002742:	4603      	mov	r3, r0
 8002744:	460c      	mov	r4, r1
 8002746:	4625      	mov	r5, r4
 8002748:	461c      	mov	r4, r3
 800274a:	4b23      	ldr	r3, [pc, #140]	; (80027d8 <MPU9250_Read_Gyro+0x148>)
 800274c:	685b      	ldr	r3, [r3, #4]
 800274e:	4618      	mov	r0, r3
 8002750:	f7fd fe6a 	bl	8000428 <__aeabi_f2d>
 8002754:	4602      	mov	r2, r0
 8002756:	460b      	mov	r3, r1
 8002758:	4620      	mov	r0, r4
 800275a:	4629      	mov	r1, r5
 800275c:	f7fd fd04 	bl	8000168 <__aeabi_dsub>
 8002760:	4603      	mov	r3, r0
 8002762:	460c      	mov	r4, r1
 8002764:	4618      	mov	r0, r3
 8002766:	4621      	mov	r1, r4
 8002768:	f7fe f9ae 	bl	8000ac8 <__aeabi_d2f>
 800276c:	4602      	mov	r2, r0
 800276e:	4b1c      	ldr	r3, [pc, #112]	; (80027e0 <MPU9250_Read_Gyro+0x150>)
 8002770:	601a      	str	r2, [r3, #0]
	Gz = Gyro_Z_RAW/131.0 - gyroBias[2];
 8002772:	4b18      	ldr	r3, [pc, #96]	; (80027d4 <MPU9250_Read_Gyro+0x144>)
 8002774:	f9b3 3000 	ldrsh.w	r3, [r3]
 8002778:	4618      	mov	r0, r3
 800277a:	f7fd fe43 	bl	8000404 <__aeabi_i2d>
 800277e:	a310      	add	r3, pc, #64	; (adr r3, 80027c0 <MPU9250_Read_Gyro+0x130>)
 8002780:	e9d3 2300 	ldrd	r2, r3, [r3]
 8002784:	f7fd ffd2 	bl	800072c <__aeabi_ddiv>
 8002788:	4603      	mov	r3, r0
 800278a:	460c      	mov	r4, r1
 800278c:	4625      	mov	r5, r4
 800278e:	461c      	mov	r4, r3
 8002790:	4b11      	ldr	r3, [pc, #68]	; (80027d8 <MPU9250_Read_Gyro+0x148>)
 8002792:	689b      	ldr	r3, [r3, #8]
 8002794:	4618      	mov	r0, r3
 8002796:	f7fd fe47 	bl	8000428 <__aeabi_f2d>
 800279a:	4602      	mov	r2, r0
 800279c:	460b      	mov	r3, r1
 800279e:	4620      	mov	r0, r4
 80027a0:	4629      	mov	r1, r5
 80027a2:	f7fd fce1 	bl	8000168 <__aeabi_dsub>
 80027a6:	4603      	mov	r3, r0
 80027a8:	460c      	mov	r4, r1
 80027aa:	4618      	mov	r0, r3
 80027ac:	4621      	mov	r1, r4
 80027ae:	f7fe f98b 	bl	8000ac8 <__aeabi_d2f>
 80027b2:	4602      	mov	r2, r0
 80027b4:	4b0b      	ldr	r3, [pc, #44]	; (80027e4 <MPU9250_Read_Gyro+0x154>)
 80027b6:	601a      	str	r2, [r3, #0]
}
 80027b8:	bf00      	nop
 80027ba:	3708      	adds	r7, #8
 80027bc:	46bd      	mov	sp, r7
 80027be:	bdb0      	pop	{r4, r5, r7, pc}
 80027c0:	00000000 	.word	0x00000000
 80027c4:	40606000 	.word	0x40606000
 80027c8:	20000328 	.word	0x20000328
 80027cc:	2000024e 	.word	0x2000024e
 80027d0:	20000250 	.word	0x20000250
 80027d4:	20000252 	.word	0x20000252
 80027d8:	20000268 	.word	0x20000268
 80027dc:	200002c0 	.word	0x200002c0
 80027e0:	20000390 	.word	0x20000390
 80027e4:	20000480 	.word	0x20000480

080027e8 <MPU9250_Read_Mag>:

	Temp=21+((double)Temp_RAW)/333.87;
}

void MPU9250_Read_Mag (void)
{
 80027e8:	b580      	push	{r7, lr}
 80027ea:	b088      	sub	sp, #32
 80027ec:	af04      	add	r7, sp, #16
	uint8_t Rec_Data[6];
	uint8_t Data = 0x11;
 80027ee:	2311      	movs	r3, #17
 80027f0:	71fb      	strb	r3, [r7, #7]
	// Read 6 BYTES of data starting from AK8963_HXL_REG register

	HAL_I2C_Mem_Read (&hi2c1, (AK8963_ADDR<<1), AK8963_HXL_REG, 1, Rec_Data, 6, 1000);
 80027f2:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 80027f6:	9302      	str	r3, [sp, #8]
 80027f8:	2306      	movs	r3, #6
 80027fa:	9301      	str	r3, [sp, #4]
 80027fc:	f107 0308 	add.w	r3, r7, #8
 8002800:	9300      	str	r3, [sp, #0]
 8002802:	2301      	movs	r3, #1
 8002804:	2203      	movs	r2, #3
 8002806:	2118      	movs	r1, #24
 8002808:	485a      	ldr	r0, [pc, #360]	; (8002974 <MPU9250_Read_Mag+0x18c>)
 800280a:	f002 f85b 	bl	80048c4 <HAL_I2C_Mem_Read>

	Mag_X_RAW = (int16_t)(Rec_Data[1] << 8 | Rec_Data [0]);
 800280e:	7a7b      	ldrb	r3, [r7, #9]
 8002810:	021b      	lsls	r3, r3, #8
 8002812:	b21a      	sxth	r2, r3
 8002814:	7a3b      	ldrb	r3, [r7, #8]
 8002816:	b21b      	sxth	r3, r3
 8002818:	4313      	orrs	r3, r2
 800281a:	b21a      	sxth	r2, r3
 800281c:	4b56      	ldr	r3, [pc, #344]	; (8002978 <MPU9250_Read_Mag+0x190>)
 800281e:	801a      	strh	r2, [r3, #0]
	Mag_Y_RAW = (int16_t)(Rec_Data[3] << 8 | Rec_Data [2]);
 8002820:	7afb      	ldrb	r3, [r7, #11]
 8002822:	021b      	lsls	r3, r3, #8
 8002824:	b21a      	sxth	r2, r3
 8002826:	7abb      	ldrb	r3, [r7, #10]
 8002828:	b21b      	sxth	r3, r3
 800282a:	4313      	orrs	r3, r2
 800282c:	b21a      	sxth	r2, r3
 800282e:	4b53      	ldr	r3, [pc, #332]	; (800297c <MPU9250_Read_Mag+0x194>)
 8002830:	801a      	strh	r2, [r3, #0]
	Mag_Z_RAW = (int16_t)(Rec_Data[5] << 8 | Rec_Data [4]);
 8002832:	7b7b      	ldrb	r3, [r7, #13]
 8002834:	021b      	lsls	r3, r3, #8
 8002836:	b21a      	sxth	r2, r3
 8002838:	7b3b      	ldrb	r3, [r7, #12]
 800283a:	b21b      	sxth	r3, r3
 800283c:	4313      	orrs	r3, r2
 800283e:	b21a      	sxth	r2, r3
 8002840:	4b4f      	ldr	r3, [pc, #316]	; (8002980 <MPU9250_Read_Mag+0x198>)
 8002842:	801a      	strh	r2, [r3, #0]

	/*** convert the RAW values into µT
		 check HXL Register              ****/
	Mx = (float)Mag_X_RAW*mRes*magCalibration[0] - magBias[0];  // get actual magnetometer value, this depends on scale being set
 8002844:	4b4c      	ldr	r3, [pc, #304]	; (8002978 <MPU9250_Read_Mag+0x190>)
 8002846:	f9b3 3000 	ldrsh.w	r3, [r3]
 800284a:	4618      	mov	r0, r3
 800284c:	f7fe fa46 	bl	8000cdc <__aeabi_i2f>
 8002850:	4602      	mov	r2, r0
 8002852:	4b4c      	ldr	r3, [pc, #304]	; (8002984 <MPU9250_Read_Mag+0x19c>)
 8002854:	681b      	ldr	r3, [r3, #0]
 8002856:	4619      	mov	r1, r3
 8002858:	4610      	mov	r0, r2
 800285a:	f7fe fa93 	bl	8000d84 <__aeabi_fmul>
 800285e:	4603      	mov	r3, r0
 8002860:	461a      	mov	r2, r3
 8002862:	4b49      	ldr	r3, [pc, #292]	; (8002988 <MPU9250_Read_Mag+0x1a0>)
 8002864:	681b      	ldr	r3, [r3, #0]
 8002866:	4619      	mov	r1, r3
 8002868:	4610      	mov	r0, r2
 800286a:	f7fe fa8b 	bl	8000d84 <__aeabi_fmul>
 800286e:	4603      	mov	r3, r0
 8002870:	461a      	mov	r2, r3
 8002872:	4b46      	ldr	r3, [pc, #280]	; (800298c <MPU9250_Read_Mag+0x1a4>)
 8002874:	681b      	ldr	r3, [r3, #0]
 8002876:	4619      	mov	r1, r3
 8002878:	4610      	mov	r0, r2
 800287a:	f7fe f979 	bl	8000b70 <__aeabi_fsub>
 800287e:	4603      	mov	r3, r0
 8002880:	461a      	mov	r2, r3
 8002882:	4b43      	ldr	r3, [pc, #268]	; (8002990 <MPU9250_Read_Mag+0x1a8>)
 8002884:	601a      	str	r2, [r3, #0]
	My = (float)Mag_Y_RAW*mRes*magCalibration[1] - magBias[1];
 8002886:	4b3d      	ldr	r3, [pc, #244]	; (800297c <MPU9250_Read_Mag+0x194>)
 8002888:	f9b3 3000 	ldrsh.w	r3, [r3]
 800288c:	4618      	mov	r0, r3
 800288e:	f7fe fa25 	bl	8000cdc <__aeabi_i2f>
 8002892:	4602      	mov	r2, r0
 8002894:	4b3b      	ldr	r3, [pc, #236]	; (8002984 <MPU9250_Read_Mag+0x19c>)
 8002896:	681b      	ldr	r3, [r3, #0]
 8002898:	4619      	mov	r1, r3
 800289a:	4610      	mov	r0, r2
 800289c:	f7fe fa72 	bl	8000d84 <__aeabi_fmul>
 80028a0:	4603      	mov	r3, r0
 80028a2:	461a      	mov	r2, r3
 80028a4:	4b38      	ldr	r3, [pc, #224]	; (8002988 <MPU9250_Read_Mag+0x1a0>)
 80028a6:	685b      	ldr	r3, [r3, #4]
 80028a8:	4619      	mov	r1, r3
 80028aa:	4610      	mov	r0, r2
 80028ac:	f7fe fa6a 	bl	8000d84 <__aeabi_fmul>
 80028b0:	4603      	mov	r3, r0
 80028b2:	461a      	mov	r2, r3
 80028b4:	4b35      	ldr	r3, [pc, #212]	; (800298c <MPU9250_Read_Mag+0x1a4>)
 80028b6:	685b      	ldr	r3, [r3, #4]
 80028b8:	4619      	mov	r1, r3
 80028ba:	4610      	mov	r0, r2
 80028bc:	f7fe f958 	bl	8000b70 <__aeabi_fsub>
 80028c0:	4603      	mov	r3, r0
 80028c2:	461a      	mov	r2, r3
 80028c4:	4b33      	ldr	r3, [pc, #204]	; (8002994 <MPU9250_Read_Mag+0x1ac>)
 80028c6:	601a      	str	r2, [r3, #0]
	Mz = (float)Mag_Z_RAW*mRes*magCalibration[2] - magBias[2];
 80028c8:	4b2d      	ldr	r3, [pc, #180]	; (8002980 <MPU9250_Read_Mag+0x198>)
 80028ca:	f9b3 3000 	ldrsh.w	r3, [r3]
 80028ce:	4618      	mov	r0, r3
 80028d0:	f7fe fa04 	bl	8000cdc <__aeabi_i2f>
 80028d4:	4602      	mov	r2, r0
 80028d6:	4b2b      	ldr	r3, [pc, #172]	; (8002984 <MPU9250_Read_Mag+0x19c>)
 80028d8:	681b      	ldr	r3, [r3, #0]
 80028da:	4619      	mov	r1, r3
 80028dc:	4610      	mov	r0, r2
 80028de:	f7fe fa51 	bl	8000d84 <__aeabi_fmul>
 80028e2:	4603      	mov	r3, r0
 80028e4:	461a      	mov	r2, r3
 80028e6:	4b28      	ldr	r3, [pc, #160]	; (8002988 <MPU9250_Read_Mag+0x1a0>)
 80028e8:	689b      	ldr	r3, [r3, #8]
 80028ea:	4619      	mov	r1, r3
 80028ec:	4610      	mov	r0, r2
 80028ee:	f7fe fa49 	bl	8000d84 <__aeabi_fmul>
 80028f2:	4603      	mov	r3, r0
 80028f4:	461a      	mov	r2, r3
 80028f6:	4b25      	ldr	r3, [pc, #148]	; (800298c <MPU9250_Read_Mag+0x1a4>)
 80028f8:	689b      	ldr	r3, [r3, #8]
 80028fa:	4619      	mov	r1, r3
 80028fc:	4610      	mov	r0, r2
 80028fe:	f7fe f937 	bl	8000b70 <__aeabi_fsub>
 8002902:	4603      	mov	r3, r0
 8002904:	461a      	mov	r2, r3
 8002906:	4b24      	ldr	r3, [pc, #144]	; (8002998 <MPU9250_Read_Mag+0x1b0>)
 8002908:	601a      	str	r2, [r3, #0]
	Mx *= magScale[0];
 800290a:	4b24      	ldr	r3, [pc, #144]	; (800299c <MPU9250_Read_Mag+0x1b4>)
 800290c:	681a      	ldr	r2, [r3, #0]
 800290e:	4b20      	ldr	r3, [pc, #128]	; (8002990 <MPU9250_Read_Mag+0x1a8>)
 8002910:	681b      	ldr	r3, [r3, #0]
 8002912:	4619      	mov	r1, r3
 8002914:	4610      	mov	r0, r2
 8002916:	f7fe fa35 	bl	8000d84 <__aeabi_fmul>
 800291a:	4603      	mov	r3, r0
 800291c:	461a      	mov	r2, r3
 800291e:	4b1c      	ldr	r3, [pc, #112]	; (8002990 <MPU9250_Read_Mag+0x1a8>)
 8002920:	601a      	str	r2, [r3, #0]
	My *= magScale[1];
 8002922:	4b1e      	ldr	r3, [pc, #120]	; (800299c <MPU9250_Read_Mag+0x1b4>)
 8002924:	685a      	ldr	r2, [r3, #4]
 8002926:	4b1b      	ldr	r3, [pc, #108]	; (8002994 <MPU9250_Read_Mag+0x1ac>)
 8002928:	681b      	ldr	r3, [r3, #0]
 800292a:	4619      	mov	r1, r3
 800292c:	4610      	mov	r0, r2
 800292e:	f7fe fa29 	bl	8000d84 <__aeabi_fmul>
 8002932:	4603      	mov	r3, r0
 8002934:	461a      	mov	r2, r3
 8002936:	4b17      	ldr	r3, [pc, #92]	; (8002994 <MPU9250_Read_Mag+0x1ac>)
 8002938:	601a      	str	r2, [r3, #0]
	Mz *= magScale[2];
 800293a:	4b18      	ldr	r3, [pc, #96]	; (800299c <MPU9250_Read_Mag+0x1b4>)
 800293c:	689a      	ldr	r2, [r3, #8]
 800293e:	4b16      	ldr	r3, [pc, #88]	; (8002998 <MPU9250_Read_Mag+0x1b0>)
 8002940:	681b      	ldr	r3, [r3, #0]
 8002942:	4619      	mov	r1, r3
 8002944:	4610      	mov	r0, r2
 8002946:	f7fe fa1d 	bl	8000d84 <__aeabi_fmul>
 800294a:	4603      	mov	r3, r0
 800294c:	461a      	mov	r2, r3
 800294e:	4b12      	ldr	r3, [pc, #72]	; (8002998 <MPU9250_Read_Mag+0x1b0>)
 8002950:	601a      	str	r2, [r3, #0]

	HAL_I2C_Mem_Write(&hi2c1, (AK8963_ADDR<<1), AK8963_CNTL1_REG, 1, &Data, 1, 1000);
 8002952:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8002956:	9302      	str	r3, [sp, #8]
 8002958:	2301      	movs	r3, #1
 800295a:	9301      	str	r3, [sp, #4]
 800295c:	1dfb      	adds	r3, r7, #7
 800295e:	9300      	str	r3, [sp, #0]
 8002960:	2301      	movs	r3, #1
 8002962:	220a      	movs	r2, #10
 8002964:	2118      	movs	r1, #24
 8002966:	4803      	ldr	r0, [pc, #12]	; (8002974 <MPU9250_Read_Mag+0x18c>)
 8002968:	f001 feb2 	bl	80046d0 <HAL_I2C_Mem_Write>
}
 800296c:	bf00      	nop
 800296e:	3710      	adds	r7, #16
 8002970:	46bd      	mov	sp, r7
 8002972:	bd80      	pop	{r7, pc}
 8002974:	20000328 	.word	0x20000328
 8002978:	20000254 	.word	0x20000254
 800297c:	20000256 	.word	0x20000256
 8002980:	20000258 	.word	0x20000258
 8002984:	20000018 	.word	0x20000018
 8002988:	2000025c 	.word	0x2000025c
 800298c:	20000280 	.word	0x20000280
 8002990:	20000488 	.word	0x20000488
 8002994:	2000038c 	.word	0x2000038c
 8002998:	20000324 	.word	0x20000324
 800299c:	2000028c 	.word	0x2000028c

080029a0 <magcalMPU9250>:
void magcalMPU9250(float * dest1, float * dest2)
{
 80029a0:	b590      	push	{r4, r7, lr}
 80029a2:	b095      	sub	sp, #84	; 0x54
 80029a4:	af00      	add	r7, sp, #0
 80029a6:	6078      	str	r0, [r7, #4]
 80029a8:	6039      	str	r1, [r7, #0]
    uint16_t ii = 0, sample_count = 0;
 80029aa:	2300      	movs	r3, #0
 80029ac:	f8a7 304e 	strh.w	r3, [r7, #78]	; 0x4e
 80029b0:	2300      	movs	r3, #0
 80029b2:	f8a7 304c 	strh.w	r3, [r7, #76]	; 0x4c
    int32_t mag_bias[3] = {0, 0, 0}, mag_scale[3] = {0, 0, 0};
 80029b6:	2300      	movs	r3, #0
 80029b8:	633b      	str	r3, [r7, #48]	; 0x30
 80029ba:	2300      	movs	r3, #0
 80029bc:	637b      	str	r3, [r7, #52]	; 0x34
 80029be:	2300      	movs	r3, #0
 80029c0:	63bb      	str	r3, [r7, #56]	; 0x38
 80029c2:	2300      	movs	r3, #0
 80029c4:	627b      	str	r3, [r7, #36]	; 0x24
 80029c6:	2300      	movs	r3, #0
 80029c8:	62bb      	str	r3, [r7, #40]	; 0x28
 80029ca:	2300      	movs	r3, #0
 80029cc:	62fb      	str	r3, [r7, #44]	; 0x2c
    int16_t mag_max[3] = {-32767, -32767, -32767}, mag_min[3] = {32767, 32767, 32767}, mag_temp[3] = {0, 0, 0};
 80029ce:	4ab7      	ldr	r2, [pc, #732]	; (8002cac <magcalMPU9250+0x30c>)
 80029d0:	f107 031c 	add.w	r3, r7, #28
 80029d4:	e892 0003 	ldmia.w	r2, {r0, r1}
 80029d8:	6018      	str	r0, [r3, #0]
 80029da:	3304      	adds	r3, #4
 80029dc:	8019      	strh	r1, [r3, #0]
 80029de:	4ab4      	ldr	r2, [pc, #720]	; (8002cb0 <magcalMPU9250+0x310>)
 80029e0:	f107 0314 	add.w	r3, r7, #20
 80029e4:	e892 0003 	ldmia.w	r2, {r0, r1}
 80029e8:	6018      	str	r0, [r3, #0]
 80029ea:	3304      	adds	r3, #4
 80029ec:	8019      	strh	r1, [r3, #0]
 80029ee:	2300      	movs	r3, #0
 80029f0:	81bb      	strh	r3, [r7, #12]
 80029f2:	2300      	movs	r3, #0
 80029f4:	81fb      	strh	r3, [r7, #14]
 80029f6:	2300      	movs	r3, #0
 80029f8:	823b      	strh	r3, [r7, #16]
    char *str = "turn sensor \n\n";
 80029fa:	4bae      	ldr	r3, [pc, #696]	; (8002cb4 <magcalMPU9250+0x314>)
 80029fc:	647b      	str	r3, [r7, #68]	; 0x44
    HAL_UART_Transmit(&huart2, (uint8_t *)str, strlen (str), HAL_MAX_DELAY);
 80029fe:	6c78      	ldr	r0, [r7, #68]	; 0x44
 8002a00:	f7fd fba6 	bl	8000150 <strlen>
 8002a04:	4603      	mov	r3, r0
 8002a06:	b29a      	uxth	r2, r3
 8002a08:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 8002a0c:	6c79      	ldr	r1, [r7, #68]	; 0x44
 8002a0e:	48aa      	ldr	r0, [pc, #680]	; (8002cb8 <magcalMPU9250+0x318>)
 8002a10:	f004 f9b7 	bl	8006d82 <HAL_UART_Transmit>
    HAL_Delay(1000);
 8002a14:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 8002a18:	f001 f9e8 	bl	8003dec <HAL_Delay>

    // shoot for ~fifteen seconds of mag data
    if(Mmode == 0x02) sample_count = 128;  // at 8 Hz ODR, new mag data is available every 125 ms
 8002a1c:	4ba7      	ldr	r3, [pc, #668]	; (8002cbc <magcalMPU9250+0x31c>)
 8002a1e:	781b      	ldrb	r3, [r3, #0]
 8002a20:	2b02      	cmp	r3, #2
 8002a22:	d102      	bne.n	8002a2a <magcalMPU9250+0x8a>
 8002a24:	2380      	movs	r3, #128	; 0x80
 8002a26:	f8a7 304c 	strh.w	r3, [r7, #76]	; 0x4c
    if(Mmode == 0x06) sample_count = 1500;  // at 100 Hz ODR, new mag data is available every 10 ms
 8002a2a:	4ba4      	ldr	r3, [pc, #656]	; (8002cbc <magcalMPU9250+0x31c>)
 8002a2c:	781b      	ldrb	r3, [r3, #0]
 8002a2e:	2b06      	cmp	r3, #6
 8002a30:	d103      	bne.n	8002a3a <magcalMPU9250+0x9a>
 8002a32:	f240 53dc 	movw	r3, #1500	; 0x5dc
 8002a36:	f8a7 304c 	strh.w	r3, [r7, #76]	; 0x4c
    for(ii = 0; ii < sample_count; ii++) {
 8002a3a:	2300      	movs	r3, #0
 8002a3c:	f8a7 304e 	strh.w	r3, [r7, #78]	; 0x4e
 8002a40:	e065      	b.n	8002b0e <magcalMPU9250+0x16e>
        MPU9250_Read_Mag ();  // Read the mag data
 8002a42:	f7ff fed1 	bl	80027e8 <MPU9250_Read_Mag>
        mag_temp[0]=Mag_X_RAW;
 8002a46:	4b9e      	ldr	r3, [pc, #632]	; (8002cc0 <magcalMPU9250+0x320>)
 8002a48:	f9b3 3000 	ldrsh.w	r3, [r3]
 8002a4c:	81bb      	strh	r3, [r7, #12]
        mag_temp[1]= Mag_Y_RAW;
 8002a4e:	4b9d      	ldr	r3, [pc, #628]	; (8002cc4 <magcalMPU9250+0x324>)
 8002a50:	f9b3 3000 	ldrsh.w	r3, [r3]
 8002a54:	81fb      	strh	r3, [r7, #14]
        mag_temp[2]= Mag_Z_RAW;
 8002a56:	4b9c      	ldr	r3, [pc, #624]	; (8002cc8 <magcalMPU9250+0x328>)
 8002a58:	f9b3 3000 	ldrsh.w	r3, [r3]
 8002a5c:	823b      	strh	r3, [r7, #16]
    for (int jj = 0; jj < 3; jj++) {
 8002a5e:	2300      	movs	r3, #0
 8002a60:	64bb      	str	r3, [r7, #72]	; 0x48
 8002a62:	e03e      	b.n	8002ae2 <magcalMPU9250+0x142>
        if(mag_temp[jj] > mag_max[jj]) mag_max[jj] = mag_temp[jj];
 8002a64:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8002a66:	005b      	lsls	r3, r3, #1
 8002a68:	f107 0250 	add.w	r2, r7, #80	; 0x50
 8002a6c:	4413      	add	r3, r2
 8002a6e:	f933 2c44 	ldrsh.w	r2, [r3, #-68]
 8002a72:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8002a74:	005b      	lsls	r3, r3, #1
 8002a76:	f107 0150 	add.w	r1, r7, #80	; 0x50
 8002a7a:	440b      	add	r3, r1
 8002a7c:	f933 3c34 	ldrsh.w	r3, [r3, #-52]
 8002a80:	429a      	cmp	r2, r3
 8002a82:	dd0d      	ble.n	8002aa0 <magcalMPU9250+0x100>
 8002a84:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8002a86:	005b      	lsls	r3, r3, #1
 8002a88:	f107 0250 	add.w	r2, r7, #80	; 0x50
 8002a8c:	4413      	add	r3, r2
 8002a8e:	f933 2c44 	ldrsh.w	r2, [r3, #-68]
 8002a92:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8002a94:	005b      	lsls	r3, r3, #1
 8002a96:	f107 0150 	add.w	r1, r7, #80	; 0x50
 8002a9a:	440b      	add	r3, r1
 8002a9c:	f823 2c34 	strh.w	r2, [r3, #-52]
        if(mag_temp[jj] < mag_min[jj]) mag_min[jj] = mag_temp[jj];
 8002aa0:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8002aa2:	005b      	lsls	r3, r3, #1
 8002aa4:	f107 0250 	add.w	r2, r7, #80	; 0x50
 8002aa8:	4413      	add	r3, r2
 8002aaa:	f933 2c44 	ldrsh.w	r2, [r3, #-68]
 8002aae:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8002ab0:	005b      	lsls	r3, r3, #1
 8002ab2:	f107 0150 	add.w	r1, r7, #80	; 0x50
 8002ab6:	440b      	add	r3, r1
 8002ab8:	f933 3c3c 	ldrsh.w	r3, [r3, #-60]
 8002abc:	429a      	cmp	r2, r3
 8002abe:	da0d      	bge.n	8002adc <magcalMPU9250+0x13c>
 8002ac0:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8002ac2:	005b      	lsls	r3, r3, #1
 8002ac4:	f107 0250 	add.w	r2, r7, #80	; 0x50
 8002ac8:	4413      	add	r3, r2
 8002aca:	f933 2c44 	ldrsh.w	r2, [r3, #-68]
 8002ace:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8002ad0:	005b      	lsls	r3, r3, #1
 8002ad2:	f107 0150 	add.w	r1, r7, #80	; 0x50
 8002ad6:	440b      	add	r3, r1
 8002ad8:	f823 2c3c 	strh.w	r2, [r3, #-60]
    for (int jj = 0; jj < 3; jj++) {
 8002adc:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8002ade:	3301      	adds	r3, #1
 8002ae0:	64bb      	str	r3, [r7, #72]	; 0x48
 8002ae2:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8002ae4:	2b02      	cmp	r3, #2
 8002ae6:	ddbd      	ble.n	8002a64 <magcalMPU9250+0xc4>
    }
    if(Mmode == 0x02) HAL_Delay(135);  // at 8 Hz ODR, new mag data is available every 125 ms
 8002ae8:	4b74      	ldr	r3, [pc, #464]	; (8002cbc <magcalMPU9250+0x31c>)
 8002aea:	781b      	ldrb	r3, [r3, #0]
 8002aec:	2b02      	cmp	r3, #2
 8002aee:	d102      	bne.n	8002af6 <magcalMPU9250+0x156>
 8002af0:	2087      	movs	r0, #135	; 0x87
 8002af2:	f001 f97b 	bl	8003dec <HAL_Delay>
    if(Mmode == 0x06) HAL_Delay(12);  // at 100 Hz ODR, new mag data is available every 10 ms
 8002af6:	4b71      	ldr	r3, [pc, #452]	; (8002cbc <magcalMPU9250+0x31c>)
 8002af8:	781b      	ldrb	r3, [r3, #0]
 8002afa:	2b06      	cmp	r3, #6
 8002afc:	d102      	bne.n	8002b04 <magcalMPU9250+0x164>
 8002afe:	200c      	movs	r0, #12
 8002b00:	f001 f974 	bl	8003dec <HAL_Delay>
    for(ii = 0; ii < sample_count; ii++) {
 8002b04:	f8b7 304e 	ldrh.w	r3, [r7, #78]	; 0x4e
 8002b08:	3301      	adds	r3, #1
 8002b0a:	f8a7 304e 	strh.w	r3, [r7, #78]	; 0x4e
 8002b0e:	f8b7 204e 	ldrh.w	r2, [r7, #78]	; 0x4e
 8002b12:	f8b7 304c 	ldrh.w	r3, [r7, #76]	; 0x4c
 8002b16:	429a      	cmp	r2, r3
 8002b18:	d393      	bcc.n	8002a42 <magcalMPU9250+0xa2>
    }
    char *str2 = "mag done\n\n";
 8002b1a:	4b6c      	ldr	r3, [pc, #432]	; (8002ccc <magcalMPU9250+0x32c>)
 8002b1c:	643b      	str	r3, [r7, #64]	; 0x40
    HAL_UART_Transmit(&huart2, (uint8_t *)str2, strlen (str2), HAL_MAX_DELAY);
 8002b1e:	6c38      	ldr	r0, [r7, #64]	; 0x40
 8002b20:	f7fd fb16 	bl	8000150 <strlen>
 8002b24:	4603      	mov	r3, r0
 8002b26:	b29a      	uxth	r2, r3
 8002b28:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 8002b2c:	6c39      	ldr	r1, [r7, #64]	; 0x40
 8002b2e:	4862      	ldr	r0, [pc, #392]	; (8002cb8 <magcalMPU9250+0x318>)
 8002b30:	f004 f927 	bl	8006d82 <HAL_UART_Transmit>
//    Serial.println("mag x min/max:"); Serial.println(mag_max[0]); Serial.println(mag_min[0]);
//    Serial.println("mag y min/max:"); Serial.println(mag_max[1]); Serial.println(mag_min[1]);
//    Serial.println("mag z min/max:"); Serial.println(mag_max[2]); Serial.println(mag_min[2]);

    // Get hard iron correction
    mag_bias[0]  = (mag_max[0] + mag_min[0])/2;  // get average x mag bias in counts
 8002b34:	f9b7 301c 	ldrsh.w	r3, [r7, #28]
 8002b38:	461a      	mov	r2, r3
 8002b3a:	f9b7 3014 	ldrsh.w	r3, [r7, #20]
 8002b3e:	4413      	add	r3, r2
 8002b40:	0fda      	lsrs	r2, r3, #31
 8002b42:	4413      	add	r3, r2
 8002b44:	105b      	asrs	r3, r3, #1
 8002b46:	633b      	str	r3, [r7, #48]	; 0x30
    mag_bias[1]  = (mag_max[1] + mag_min[1])/2;  // get average y mag bias in counts
 8002b48:	f9b7 301e 	ldrsh.w	r3, [r7, #30]
 8002b4c:	461a      	mov	r2, r3
 8002b4e:	f9b7 3016 	ldrsh.w	r3, [r7, #22]
 8002b52:	4413      	add	r3, r2
 8002b54:	0fda      	lsrs	r2, r3, #31
 8002b56:	4413      	add	r3, r2
 8002b58:	105b      	asrs	r3, r3, #1
 8002b5a:	637b      	str	r3, [r7, #52]	; 0x34
    mag_bias[2]  = (mag_max[2] + mag_min[2])/2;  // get average z mag bias in counts
 8002b5c:	f9b7 3020 	ldrsh.w	r3, [r7, #32]
 8002b60:	461a      	mov	r2, r3
 8002b62:	f9b7 3018 	ldrsh.w	r3, [r7, #24]
 8002b66:	4413      	add	r3, r2
 8002b68:	0fda      	lsrs	r2, r3, #31
 8002b6a:	4413      	add	r3, r2
 8002b6c:	105b      	asrs	r3, r3, #1
 8002b6e:	63bb      	str	r3, [r7, #56]	; 0x38

    dest1[0] = (float) mag_bias[0]*mRes*magCalibration[0];  // save mag biases in G for main program
 8002b70:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8002b72:	4618      	mov	r0, r3
 8002b74:	f7fe f8b2 	bl	8000cdc <__aeabi_i2f>
 8002b78:	4602      	mov	r2, r0
 8002b7a:	4b55      	ldr	r3, [pc, #340]	; (8002cd0 <magcalMPU9250+0x330>)
 8002b7c:	681b      	ldr	r3, [r3, #0]
 8002b7e:	4619      	mov	r1, r3
 8002b80:	4610      	mov	r0, r2
 8002b82:	f7fe f8ff 	bl	8000d84 <__aeabi_fmul>
 8002b86:	4603      	mov	r3, r0
 8002b88:	461a      	mov	r2, r3
 8002b8a:	4b52      	ldr	r3, [pc, #328]	; (8002cd4 <magcalMPU9250+0x334>)
 8002b8c:	681b      	ldr	r3, [r3, #0]
 8002b8e:	4619      	mov	r1, r3
 8002b90:	4610      	mov	r0, r2
 8002b92:	f7fe f8f7 	bl	8000d84 <__aeabi_fmul>
 8002b96:	4603      	mov	r3, r0
 8002b98:	461a      	mov	r2, r3
 8002b9a:	687b      	ldr	r3, [r7, #4]
 8002b9c:	601a      	str	r2, [r3, #0]
    dest1[1] = (float) mag_bias[1]*mRes*magCalibration[1];
 8002b9e:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8002ba0:	4618      	mov	r0, r3
 8002ba2:	f7fe f89b 	bl	8000cdc <__aeabi_i2f>
 8002ba6:	4602      	mov	r2, r0
 8002ba8:	4b49      	ldr	r3, [pc, #292]	; (8002cd0 <magcalMPU9250+0x330>)
 8002baa:	681b      	ldr	r3, [r3, #0]
 8002bac:	4619      	mov	r1, r3
 8002bae:	4610      	mov	r0, r2
 8002bb0:	f7fe f8e8 	bl	8000d84 <__aeabi_fmul>
 8002bb4:	4603      	mov	r3, r0
 8002bb6:	4618      	mov	r0, r3
 8002bb8:	4b46      	ldr	r3, [pc, #280]	; (8002cd4 <magcalMPU9250+0x334>)
 8002bba:	685a      	ldr	r2, [r3, #4]
 8002bbc:	687b      	ldr	r3, [r7, #4]
 8002bbe:	1d1c      	adds	r4, r3, #4
 8002bc0:	4611      	mov	r1, r2
 8002bc2:	f7fe f8df 	bl	8000d84 <__aeabi_fmul>
 8002bc6:	4603      	mov	r3, r0
 8002bc8:	6023      	str	r3, [r4, #0]
    dest1[2] = (float) mag_bias[2]*mRes*magCalibration[2];
 8002bca:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8002bcc:	4618      	mov	r0, r3
 8002bce:	f7fe f885 	bl	8000cdc <__aeabi_i2f>
 8002bd2:	4602      	mov	r2, r0
 8002bd4:	4b3e      	ldr	r3, [pc, #248]	; (8002cd0 <magcalMPU9250+0x330>)
 8002bd6:	681b      	ldr	r3, [r3, #0]
 8002bd8:	4619      	mov	r1, r3
 8002bda:	4610      	mov	r0, r2
 8002bdc:	f7fe f8d2 	bl	8000d84 <__aeabi_fmul>
 8002be0:	4603      	mov	r3, r0
 8002be2:	4618      	mov	r0, r3
 8002be4:	4b3b      	ldr	r3, [pc, #236]	; (8002cd4 <magcalMPU9250+0x334>)
 8002be6:	689a      	ldr	r2, [r3, #8]
 8002be8:	687b      	ldr	r3, [r7, #4]
 8002bea:	f103 0408 	add.w	r4, r3, #8
 8002bee:	4611      	mov	r1, r2
 8002bf0:	f7fe f8c8 	bl	8000d84 <__aeabi_fmul>
 8002bf4:	4603      	mov	r3, r0
 8002bf6:	6023      	str	r3, [r4, #0]

    // Get soft iron correction estimate
    mag_scale[0]  = (mag_max[0] - mag_min[0])/2;  // get average x axis max chord length in counts
 8002bf8:	f9b7 301c 	ldrsh.w	r3, [r7, #28]
 8002bfc:	461a      	mov	r2, r3
 8002bfe:	f9b7 3014 	ldrsh.w	r3, [r7, #20]
 8002c02:	1ad3      	subs	r3, r2, r3
 8002c04:	0fda      	lsrs	r2, r3, #31
 8002c06:	4413      	add	r3, r2
 8002c08:	105b      	asrs	r3, r3, #1
 8002c0a:	627b      	str	r3, [r7, #36]	; 0x24
    mag_scale[1]  = (mag_max[1] - mag_min[1])/2;  // get average y axis max chord length in counts
 8002c0c:	f9b7 301e 	ldrsh.w	r3, [r7, #30]
 8002c10:	461a      	mov	r2, r3
 8002c12:	f9b7 3016 	ldrsh.w	r3, [r7, #22]
 8002c16:	1ad3      	subs	r3, r2, r3
 8002c18:	0fda      	lsrs	r2, r3, #31
 8002c1a:	4413      	add	r3, r2
 8002c1c:	105b      	asrs	r3, r3, #1
 8002c1e:	62bb      	str	r3, [r7, #40]	; 0x28
    mag_scale[2]  = (mag_max[2] - mag_min[2])/2;  // get average z axis max chord length in counts
 8002c20:	f9b7 3020 	ldrsh.w	r3, [r7, #32]
 8002c24:	461a      	mov	r2, r3
 8002c26:	f9b7 3018 	ldrsh.w	r3, [r7, #24]
 8002c2a:	1ad3      	subs	r3, r2, r3
 8002c2c:	0fda      	lsrs	r2, r3, #31
 8002c2e:	4413      	add	r3, r2
 8002c30:	105b      	asrs	r3, r3, #1
 8002c32:	62fb      	str	r3, [r7, #44]	; 0x2c

    float avg_rad = mag_scale[0] + mag_scale[1] + mag_scale[2];
 8002c34:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8002c36:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8002c38:	441a      	add	r2, r3
 8002c3a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8002c3c:	4413      	add	r3, r2
 8002c3e:	4618      	mov	r0, r3
 8002c40:	f7fe f84c 	bl	8000cdc <__aeabi_i2f>
 8002c44:	4603      	mov	r3, r0
 8002c46:	63fb      	str	r3, [r7, #60]	; 0x3c
    avg_rad /= 3.0;
 8002c48:	4923      	ldr	r1, [pc, #140]	; (8002cd8 <magcalMPU9250+0x338>)
 8002c4a:	6bf8      	ldr	r0, [r7, #60]	; 0x3c
 8002c4c:	f7fe f94e 	bl	8000eec <__aeabi_fdiv>
 8002c50:	4603      	mov	r3, r0
 8002c52:	63fb      	str	r3, [r7, #60]	; 0x3c

    dest2[0] = avg_rad/((float)mag_scale[0]);
 8002c54:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002c56:	4618      	mov	r0, r3
 8002c58:	f7fe f840 	bl	8000cdc <__aeabi_i2f>
 8002c5c:	4603      	mov	r3, r0
 8002c5e:	4619      	mov	r1, r3
 8002c60:	6bf8      	ldr	r0, [r7, #60]	; 0x3c
 8002c62:	f7fe f943 	bl	8000eec <__aeabi_fdiv>
 8002c66:	4603      	mov	r3, r0
 8002c68:	461a      	mov	r2, r3
 8002c6a:	683b      	ldr	r3, [r7, #0]
 8002c6c:	601a      	str	r2, [r3, #0]
    dest2[1] = avg_rad/((float)mag_scale[1]);
 8002c6e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8002c70:	4618      	mov	r0, r3
 8002c72:	f7fe f833 	bl	8000cdc <__aeabi_i2f>
 8002c76:	4602      	mov	r2, r0
 8002c78:	683b      	ldr	r3, [r7, #0]
 8002c7a:	1d1c      	adds	r4, r3, #4
 8002c7c:	4611      	mov	r1, r2
 8002c7e:	6bf8      	ldr	r0, [r7, #60]	; 0x3c
 8002c80:	f7fe f934 	bl	8000eec <__aeabi_fdiv>
 8002c84:	4603      	mov	r3, r0
 8002c86:	6023      	str	r3, [r4, #0]
    dest2[2] = avg_rad/((float)mag_scale[2]);
 8002c88:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8002c8a:	4618      	mov	r0, r3
 8002c8c:	f7fe f826 	bl	8000cdc <__aeabi_i2f>
 8002c90:	4602      	mov	r2, r0
 8002c92:	683b      	ldr	r3, [r7, #0]
 8002c94:	f103 0408 	add.w	r4, r3, #8
 8002c98:	4611      	mov	r1, r2
 8002c9a:	6bf8      	ldr	r0, [r7, #60]	; 0x3c
 8002c9c:	f7fe f926 	bl	8000eec <__aeabi_fdiv>
 8002ca0:	4603      	mov	r3, r0
 8002ca2:	6023      	str	r3, [r4, #0]
}
 8002ca4:	bf00      	nop
 8002ca6:	3754      	adds	r7, #84	; 0x54
 8002ca8:	46bd      	mov	sp, r7
 8002caa:	bd90      	pop	{r4, r7, pc}
 8002cac:	0800b8f4 	.word	0x0800b8f4
 8002cb0:	0800b8fc 	.word	0x0800b8fc
 8002cb4:	0800b8d8 	.word	0x0800b8d8
 8002cb8:	20000408 	.word	0x20000408
 8002cbc:	20000008 	.word	0x20000008
 8002cc0:	20000254 	.word	0x20000254
 8002cc4:	20000256 	.word	0x20000256
 8002cc8:	20000258 	.word	0x20000258
 8002ccc:	0800b8e8 	.word	0x0800b8e8
 8002cd0:	20000018 	.word	0x20000018
 8002cd4:	2000025c 	.word	0x2000025c
 8002cd8:	40400000 	.word	0x40400000

08002cdc <calibrateMPU9250>:

void calibrateMPU9250(float * dest1, float * dest2)
{
 8002cdc:	b5b0      	push	{r4, r5, r7, lr}
 8002cde:	b094      	sub	sp, #80	; 0x50
 8002ce0:	af04      	add	r7, sp, #16
 8002ce2:	6078      	str	r0, [r7, #4]
 8002ce4:	6039      	str	r1, [r7, #0]
	uint8_t data[12]; // data array to hold accelerometer and gyro x, y, z, data
	uint16_t ii, packet_count, fifo_count;
	int32_t gyro_bias[3]  = {0, 0, 0}, accel_bias[3] = {0, 0, 0};
 8002ce6:	2300      	movs	r3, #0
 8002ce8:	61fb      	str	r3, [r7, #28]
 8002cea:	2300      	movs	r3, #0
 8002cec:	623b      	str	r3, [r7, #32]
 8002cee:	2300      	movs	r3, #0
 8002cf0:	627b      	str	r3, [r7, #36]	; 0x24
 8002cf2:	2300      	movs	r3, #0
 8002cf4:	613b      	str	r3, [r7, #16]
 8002cf6:	2300      	movs	r3, #0
 8002cf8:	617b      	str	r3, [r7, #20]
 8002cfa:	2300      	movs	r3, #0
 8002cfc:	61bb      	str	r3, [r7, #24]
	uint8_t Data;



// Configure device for bias calculation
	Data = 0x01;
 8002cfe:	2301      	movs	r3, #1
 8002d00:	73fb      	strb	r3, [r7, #15]
	HAL_I2C_Mem_Write(&hi2c1, MPU9250_ADDR, PWR_MGMT_1_REG, 1, &Data, 1, 1000);
 8002d02:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8002d06:	9302      	str	r3, [sp, #8]
 8002d08:	2301      	movs	r3, #1
 8002d0a:	9301      	str	r3, [sp, #4]
 8002d0c:	f107 030f 	add.w	r3, r7, #15
 8002d10:	9300      	str	r3, [sp, #0]
 8002d12:	2301      	movs	r3, #1
 8002d14:	226b      	movs	r2, #107	; 0x6b
 8002d16:	21d0      	movs	r1, #208	; 0xd0
 8002d18:	48b1      	ldr	r0, [pc, #708]	; (8002fe0 <calibrateMPU9250+0x304>)
 8002d1a:	f001 fcd9 	bl	80046d0 <HAL_I2C_Mem_Write>
	Data = 0x00;
 8002d1e:	2300      	movs	r3, #0
 8002d20:	73fb      	strb	r3, [r7, #15]
	HAL_I2C_Mem_Write(&hi2c1, MPU9250_ADDR, PWR_MGMT_1_REG, 1, &Data, 1, 1000);   // Turn on internal clock source
 8002d22:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8002d26:	9302      	str	r3, [sp, #8]
 8002d28:	2301      	movs	r3, #1
 8002d2a:	9301      	str	r3, [sp, #4]
 8002d2c:	f107 030f 	add.w	r3, r7, #15
 8002d30:	9300      	str	r3, [sp, #0]
 8002d32:	2301      	movs	r3, #1
 8002d34:	226b      	movs	r2, #107	; 0x6b
 8002d36:	21d0      	movs	r1, #208	; 0xd0
 8002d38:	48a9      	ldr	r0, [pc, #676]	; (8002fe0 <calibrateMPU9250+0x304>)
 8002d3a:	f001 fcc9 	bl	80046d0 <HAL_I2C_Mem_Write>
	HAL_I2C_Mem_Write(&hi2c1, MPU9250_ADDR, I2C_MST_CTRL, 1, &Data, 1, 1000);		 // Disable I2C master
 8002d3e:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8002d42:	9302      	str	r3, [sp, #8]
 8002d44:	2301      	movs	r3, #1
 8002d46:	9301      	str	r3, [sp, #4]
 8002d48:	f107 030f 	add.w	r3, r7, #15
 8002d4c:	9300      	str	r3, [sp, #0]
 8002d4e:	2301      	movs	r3, #1
 8002d50:	2224      	movs	r2, #36	; 0x24
 8002d52:	21d0      	movs	r1, #208	; 0xd0
 8002d54:	48a2      	ldr	r0, [pc, #648]	; (8002fe0 <calibrateMPU9250+0x304>)
 8002d56:	f001 fcbb 	bl	80046d0 <HAL_I2C_Mem_Write>
	HAL_I2C_Mem_Write(&hi2c1, MPU9250_ADDR, USER_CTRL, 1, &Data, 1, 1000);	  // Disable FIFO and I2C master modes
 8002d5a:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8002d5e:	9302      	str	r3, [sp, #8]
 8002d60:	2301      	movs	r3, #1
 8002d62:	9301      	str	r3, [sp, #4]
 8002d64:	f107 030f 	add.w	r3, r7, #15
 8002d68:	9300      	str	r3, [sp, #0]
 8002d6a:	2301      	movs	r3, #1
 8002d6c:	226a      	movs	r2, #106	; 0x6a
 8002d6e:	21d0      	movs	r1, #208	; 0xd0
 8002d70:	489b      	ldr	r0, [pc, #620]	; (8002fe0 <calibrateMPU9250+0x304>)
 8002d72:	f001 fcad 	bl	80046d0 <HAL_I2C_Mem_Write>
	Data = 0x0C;
 8002d76:	230c      	movs	r3, #12
 8002d78:	73fb      	strb	r3, [r7, #15]
	HAL_I2C_Mem_Write(&hi2c1, MPU9250_ADDR, USER_CTRL, 1, &Data, 1, 1000);	  // Reset FIFO and DMP
 8002d7a:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8002d7e:	9302      	str	r3, [sp, #8]
 8002d80:	2301      	movs	r3, #1
 8002d82:	9301      	str	r3, [sp, #4]
 8002d84:	f107 030f 	add.w	r3, r7, #15
 8002d88:	9300      	str	r3, [sp, #0]
 8002d8a:	2301      	movs	r3, #1
 8002d8c:	226a      	movs	r2, #106	; 0x6a
 8002d8e:	21d0      	movs	r1, #208	; 0xd0
 8002d90:	4893      	ldr	r0, [pc, #588]	; (8002fe0 <calibrateMPU9250+0x304>)
 8002d92:	f001 fc9d 	bl	80046d0 <HAL_I2C_Mem_Write>


// Configure MPU6050 gyro and accelerometer for bias calculation

	Data = 0x01;
 8002d96:	2301      	movs	r3, #1
 8002d98:	73fb      	strb	r3, [r7, #15]
	HAL_I2C_Mem_Write(&hi2c1, MPU9250_ADDR, CONFIG_REG, 1, &Data, 1, 1000);     // Set low-pass filter to 188 Hz
 8002d9a:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8002d9e:	9302      	str	r3, [sp, #8]
 8002da0:	2301      	movs	r3, #1
 8002da2:	9301      	str	r3, [sp, #4]
 8002da4:	f107 030f 	add.w	r3, r7, #15
 8002da8:	9300      	str	r3, [sp, #0]
 8002daa:	2301      	movs	r3, #1
 8002dac:	221a      	movs	r2, #26
 8002dae:	21d0      	movs	r1, #208	; 0xd0
 8002db0:	488b      	ldr	r0, [pc, #556]	; (8002fe0 <calibrateMPU9250+0x304>)
 8002db2:	f001 fc8d 	bl	80046d0 <HAL_I2C_Mem_Write>
	Data = 0x00;
 8002db6:	2300      	movs	r3, #0
 8002db8:	73fb      	strb	r3, [r7, #15]
	HAL_I2C_Mem_Write(&hi2c1, MPU9250_ADDR, SMPLRT_DIV_REG, 1, &Data, 1, 1000);  // Set sample rate to 1 kHz
 8002dba:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8002dbe:	9302      	str	r3, [sp, #8]
 8002dc0:	2301      	movs	r3, #1
 8002dc2:	9301      	str	r3, [sp, #4]
 8002dc4:	f107 030f 	add.w	r3, r7, #15
 8002dc8:	9300      	str	r3, [sp, #0]
 8002dca:	2301      	movs	r3, #1
 8002dcc:	2219      	movs	r2, #25
 8002dce:	21d0      	movs	r1, #208	; 0xd0
 8002dd0:	4883      	ldr	r0, [pc, #524]	; (8002fe0 <calibrateMPU9250+0x304>)
 8002dd2:	f001 fc7d 	bl	80046d0 <HAL_I2C_Mem_Write>
	HAL_I2C_Mem_Write(&hi2c1, MPU9250_ADDR, GYRO_CONFIG_REG, 1, &Data, 1, 1000);	 // Set gyro full-scale to 250 degrees per second, maximum sensitivity
 8002dd6:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8002dda:	9302      	str	r3, [sp, #8]
 8002ddc:	2301      	movs	r3, #1
 8002dde:	9301      	str	r3, [sp, #4]
 8002de0:	f107 030f 	add.w	r3, r7, #15
 8002de4:	9300      	str	r3, [sp, #0]
 8002de6:	2301      	movs	r3, #1
 8002de8:	221b      	movs	r2, #27
 8002dea:	21d0      	movs	r1, #208	; 0xd0
 8002dec:	487c      	ldr	r0, [pc, #496]	; (8002fe0 <calibrateMPU9250+0x304>)
 8002dee:	f001 fc6f 	bl	80046d0 <HAL_I2C_Mem_Write>
	HAL_I2C_Mem_Write(&hi2c1, MPU9250_ADDR, ACCEL_CONFIG_REG, 1, &Data, 1, 1000);	 // Set accelerometer full-scale to 2 g, maximum sensitivity
 8002df2:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8002df6:	9302      	str	r3, [sp, #8]
 8002df8:	2301      	movs	r3, #1
 8002dfa:	9301      	str	r3, [sp, #4]
 8002dfc:	f107 030f 	add.w	r3, r7, #15
 8002e00:	9300      	str	r3, [sp, #0]
 8002e02:	2301      	movs	r3, #1
 8002e04:	221c      	movs	r2, #28
 8002e06:	21d0      	movs	r1, #208	; 0xd0
 8002e08:	4875      	ldr	r0, [pc, #468]	; (8002fe0 <calibrateMPU9250+0x304>)
 8002e0a:	f001 fc61 	bl	80046d0 <HAL_I2C_Mem_Write>

	uint16_t  gyrosensitivity  = 131;   // = 131 LSB/degrees/sec
 8002e0e:	2383      	movs	r3, #131	; 0x83
 8002e10:	877b      	strh	r3, [r7, #58]	; 0x3a
	uint16_t  accelsensitivity = 16384;  // = 16384 LSB/g
 8002e12:	f44f 4380 	mov.w	r3, #16384	; 0x4000
 8002e16:	873b      	strh	r3, [r7, #56]	; 0x38

    // Configure FIFO to capture accelerometer and gyro data for bias calculation
	Data = 0x40;
 8002e18:	2340      	movs	r3, #64	; 0x40
 8002e1a:	73fb      	strb	r3, [r7, #15]
	HAL_I2C_Mem_Write(&hi2c1, MPU9250_ADDR, USER_CTRL, 1, &Data, 1, 1000);  // Enable FIFO
 8002e1c:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8002e20:	9302      	str	r3, [sp, #8]
 8002e22:	2301      	movs	r3, #1
 8002e24:	9301      	str	r3, [sp, #4]
 8002e26:	f107 030f 	add.w	r3, r7, #15
 8002e2a:	9300      	str	r3, [sp, #0]
 8002e2c:	2301      	movs	r3, #1
 8002e2e:	226a      	movs	r2, #106	; 0x6a
 8002e30:	21d0      	movs	r1, #208	; 0xd0
 8002e32:	486b      	ldr	r0, [pc, #428]	; (8002fe0 <calibrateMPU9250+0x304>)
 8002e34:	f001 fc4c 	bl	80046d0 <HAL_I2C_Mem_Write>
	Data = 0x78;
 8002e38:	2378      	movs	r3, #120	; 0x78
 8002e3a:	73fb      	strb	r3, [r7, #15]
	for(int j=0;j<100;j++){
 8002e3c:	2300      	movs	r3, #0
 8002e3e:	63fb      	str	r3, [r7, #60]	; 0x3c
 8002e40:	e02d      	b.n	8002e9e <calibrateMPU9250+0x1c2>
		MPU9250_Read_Accel();
 8002e42:	f7ff fb83 	bl	800254c <MPU9250_Read_Accel>
		MPU9250_Read_Gyro();
 8002e46:	f7ff fc23 	bl	8002690 <MPU9250_Read_Gyro>
		accel_bias[0]+=Accel_X_RAW;
 8002e4a:	693b      	ldr	r3, [r7, #16]
 8002e4c:	4a65      	ldr	r2, [pc, #404]	; (8002fe4 <calibrateMPU9250+0x308>)
 8002e4e:	f9b2 2000 	ldrsh.w	r2, [r2]
 8002e52:	4413      	add	r3, r2
 8002e54:	613b      	str	r3, [r7, #16]
		accel_bias[1]+=Accel_Y_RAW;
 8002e56:	697b      	ldr	r3, [r7, #20]
 8002e58:	4a63      	ldr	r2, [pc, #396]	; (8002fe8 <calibrateMPU9250+0x30c>)
 8002e5a:	f9b2 2000 	ldrsh.w	r2, [r2]
 8002e5e:	4413      	add	r3, r2
 8002e60:	617b      	str	r3, [r7, #20]
		accel_bias[2]+=Accel_Z_RAW;
 8002e62:	69bb      	ldr	r3, [r7, #24]
 8002e64:	4a61      	ldr	r2, [pc, #388]	; (8002fec <calibrateMPU9250+0x310>)
 8002e66:	f9b2 2000 	ldrsh.w	r2, [r2]
 8002e6a:	4413      	add	r3, r2
 8002e6c:	61bb      	str	r3, [r7, #24]
		gyro_bias[0]+=Gyro_X_RAW;
 8002e6e:	69fb      	ldr	r3, [r7, #28]
 8002e70:	4a5f      	ldr	r2, [pc, #380]	; (8002ff0 <calibrateMPU9250+0x314>)
 8002e72:	f9b2 2000 	ldrsh.w	r2, [r2]
 8002e76:	4413      	add	r3, r2
 8002e78:	61fb      	str	r3, [r7, #28]
		gyro_bias[1]+=Gyro_Y_RAW;
 8002e7a:	6a3b      	ldr	r3, [r7, #32]
 8002e7c:	4a5d      	ldr	r2, [pc, #372]	; (8002ff4 <calibrateMPU9250+0x318>)
 8002e7e:	f9b2 2000 	ldrsh.w	r2, [r2]
 8002e82:	4413      	add	r3, r2
 8002e84:	623b      	str	r3, [r7, #32]
		gyro_bias[2]+=Gyro_Z_RAW;
 8002e86:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002e88:	4a5b      	ldr	r2, [pc, #364]	; (8002ff8 <calibrateMPU9250+0x31c>)
 8002e8a:	f9b2 2000 	ldrsh.w	r2, [r2]
 8002e8e:	4413      	add	r3, r2
 8002e90:	627b      	str	r3, [r7, #36]	; 0x24
		HAL_Delay(1);
 8002e92:	2001      	movs	r0, #1
 8002e94:	f000 ffaa 	bl	8003dec <HAL_Delay>
	for(int j=0;j<100;j++){
 8002e98:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8002e9a:	3301      	adds	r3, #1
 8002e9c:	63fb      	str	r3, [r7, #60]	; 0x3c
 8002e9e:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8002ea0:	2b63      	cmp	r3, #99	; 0x63
 8002ea2:	ddce      	ble.n	8002e42 <calibrateMPU9250+0x166>
	}
	packet_count = 100;// How many sets of full gyro and accelerometer data for averaging
 8002ea4:	2364      	movs	r3, #100	; 0x64
 8002ea6:	86fb      	strh	r3, [r7, #54]	; 0x36


    accel_bias[0] /= (int32_t) packet_count; // Normalize sums to get average count biases
 8002ea8:	693a      	ldr	r2, [r7, #16]
 8002eaa:	8efb      	ldrh	r3, [r7, #54]	; 0x36
 8002eac:	fb92 f3f3 	sdiv	r3, r2, r3
 8002eb0:	613b      	str	r3, [r7, #16]
    accel_bias[1] /= (int32_t) packet_count;
 8002eb2:	697a      	ldr	r2, [r7, #20]
 8002eb4:	8efb      	ldrh	r3, [r7, #54]	; 0x36
 8002eb6:	fb92 f3f3 	sdiv	r3, r2, r3
 8002eba:	617b      	str	r3, [r7, #20]
    accel_bias[2] /= (int32_t) packet_count;
 8002ebc:	69ba      	ldr	r2, [r7, #24]
 8002ebe:	8efb      	ldrh	r3, [r7, #54]	; 0x36
 8002ec0:	fb92 f3f3 	sdiv	r3, r2, r3
 8002ec4:	61bb      	str	r3, [r7, #24]
    gyro_bias[0]  /= (int32_t) packet_count;
 8002ec6:	69fa      	ldr	r2, [r7, #28]
 8002ec8:	8efb      	ldrh	r3, [r7, #54]	; 0x36
 8002eca:	fb92 f3f3 	sdiv	r3, r2, r3
 8002ece:	61fb      	str	r3, [r7, #28]
    gyro_bias[1]  /= (int32_t) packet_count;
 8002ed0:	6a3a      	ldr	r2, [r7, #32]
 8002ed2:	8efb      	ldrh	r3, [r7, #54]	; 0x36
 8002ed4:	fb92 f3f3 	sdiv	r3, r2, r3
 8002ed8:	623b      	str	r3, [r7, #32]
    gyro_bias[2]  /= (int32_t) packet_count;
 8002eda:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8002edc:	8efb      	ldrh	r3, [r7, #54]	; 0x36
 8002ede:	fb92 f3f3 	sdiv	r3, r2, r3
 8002ee2:	627b      	str	r3, [r7, #36]	; 0x24

	if(accel_bias[2] > 0L) {accel_bias[2] -= (int32_t) accelsensitivity;}  // Remove gravity from the z-axis accelerometer bias calculation
 8002ee4:	69bb      	ldr	r3, [r7, #24]
 8002ee6:	2b00      	cmp	r3, #0
 8002ee8:	dd04      	ble.n	8002ef4 <calibrateMPU9250+0x218>
 8002eea:	69ba      	ldr	r2, [r7, #24]
 8002eec:	8f3b      	ldrh	r3, [r7, #56]	; 0x38
 8002eee:	1ad3      	subs	r3, r2, r3
 8002ef0:	61bb      	str	r3, [r7, #24]
 8002ef2:	e003      	b.n	8002efc <calibrateMPU9250+0x220>
	else {accel_bias[2] += (int32_t) accelsensitivity;}
 8002ef4:	69ba      	ldr	r2, [r7, #24]
 8002ef6:	8f3b      	ldrh	r3, [r7, #56]	; 0x38
 8002ef8:	4413      	add	r3, r2
 8002efa:	61bb      	str	r3, [r7, #24]



// Output scaled gyro biases for display in the main program
	dest1[0] = (float) gyro_bias[0]/(float) gyrosensitivity;
 8002efc:	69fb      	ldr	r3, [r7, #28]
 8002efe:	4618      	mov	r0, r3
 8002f00:	f7fd feec 	bl	8000cdc <__aeabi_i2f>
 8002f04:	4604      	mov	r4, r0
 8002f06:	8f7b      	ldrh	r3, [r7, #58]	; 0x3a
 8002f08:	4618      	mov	r0, r3
 8002f0a:	f7fd fee3 	bl	8000cd4 <__aeabi_ui2f>
 8002f0e:	4603      	mov	r3, r0
 8002f10:	4619      	mov	r1, r3
 8002f12:	4620      	mov	r0, r4
 8002f14:	f7fd ffea 	bl	8000eec <__aeabi_fdiv>
 8002f18:	4603      	mov	r3, r0
 8002f1a:	461a      	mov	r2, r3
 8002f1c:	687b      	ldr	r3, [r7, #4]
 8002f1e:	601a      	str	r2, [r3, #0]
	dest1[1] = (float) gyro_bias[1]/(float) gyrosensitivity;
 8002f20:	6a3b      	ldr	r3, [r7, #32]
 8002f22:	4618      	mov	r0, r3
 8002f24:	f7fd feda 	bl	8000cdc <__aeabi_i2f>
 8002f28:	4605      	mov	r5, r0
 8002f2a:	8f7b      	ldrh	r3, [r7, #58]	; 0x3a
 8002f2c:	4618      	mov	r0, r3
 8002f2e:	f7fd fed1 	bl	8000cd4 <__aeabi_ui2f>
 8002f32:	4602      	mov	r2, r0
 8002f34:	687b      	ldr	r3, [r7, #4]
 8002f36:	1d1c      	adds	r4, r3, #4
 8002f38:	4611      	mov	r1, r2
 8002f3a:	4628      	mov	r0, r5
 8002f3c:	f7fd ffd6 	bl	8000eec <__aeabi_fdiv>
 8002f40:	4603      	mov	r3, r0
 8002f42:	6023      	str	r3, [r4, #0]
	dest1[2] = (float) gyro_bias[2]/(float) gyrosensitivity;
 8002f44:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002f46:	4618      	mov	r0, r3
 8002f48:	f7fd fec8 	bl	8000cdc <__aeabi_i2f>
 8002f4c:	4605      	mov	r5, r0
 8002f4e:	8f7b      	ldrh	r3, [r7, #58]	; 0x3a
 8002f50:	4618      	mov	r0, r3
 8002f52:	f7fd febf 	bl	8000cd4 <__aeabi_ui2f>
 8002f56:	4602      	mov	r2, r0
 8002f58:	687b      	ldr	r3, [r7, #4]
 8002f5a:	f103 0408 	add.w	r4, r3, #8
 8002f5e:	4611      	mov	r1, r2
 8002f60:	4628      	mov	r0, r5
 8002f62:	f7fd ffc3 	bl	8000eec <__aeabi_fdiv>
 8002f66:	4603      	mov	r3, r0
 8002f68:	6023      	str	r3, [r4, #0]




// Output scaled accelerometer biases for display in the main program
	dest2[0] = (float)accel_bias[0]/(float)accelsensitivity;
 8002f6a:	693b      	ldr	r3, [r7, #16]
 8002f6c:	4618      	mov	r0, r3
 8002f6e:	f7fd feb5 	bl	8000cdc <__aeabi_i2f>
 8002f72:	4604      	mov	r4, r0
 8002f74:	8f3b      	ldrh	r3, [r7, #56]	; 0x38
 8002f76:	4618      	mov	r0, r3
 8002f78:	f7fd feac 	bl	8000cd4 <__aeabi_ui2f>
 8002f7c:	4603      	mov	r3, r0
 8002f7e:	4619      	mov	r1, r3
 8002f80:	4620      	mov	r0, r4
 8002f82:	f7fd ffb3 	bl	8000eec <__aeabi_fdiv>
 8002f86:	4603      	mov	r3, r0
 8002f88:	461a      	mov	r2, r3
 8002f8a:	683b      	ldr	r3, [r7, #0]
 8002f8c:	601a      	str	r2, [r3, #0]
	dest2[1] = (float)accel_bias[1]/(float)accelsensitivity;
 8002f8e:	697b      	ldr	r3, [r7, #20]
 8002f90:	4618      	mov	r0, r3
 8002f92:	f7fd fea3 	bl	8000cdc <__aeabi_i2f>
 8002f96:	4605      	mov	r5, r0
 8002f98:	8f3b      	ldrh	r3, [r7, #56]	; 0x38
 8002f9a:	4618      	mov	r0, r3
 8002f9c:	f7fd fe9a 	bl	8000cd4 <__aeabi_ui2f>
 8002fa0:	4602      	mov	r2, r0
 8002fa2:	683b      	ldr	r3, [r7, #0]
 8002fa4:	1d1c      	adds	r4, r3, #4
 8002fa6:	4611      	mov	r1, r2
 8002fa8:	4628      	mov	r0, r5
 8002faa:	f7fd ff9f 	bl	8000eec <__aeabi_fdiv>
 8002fae:	4603      	mov	r3, r0
 8002fb0:	6023      	str	r3, [r4, #0]
	dest2[2] = (float)accel_bias[2]/(float)accelsensitivity;
 8002fb2:	69bb      	ldr	r3, [r7, #24]
 8002fb4:	4618      	mov	r0, r3
 8002fb6:	f7fd fe91 	bl	8000cdc <__aeabi_i2f>
 8002fba:	4605      	mov	r5, r0
 8002fbc:	8f3b      	ldrh	r3, [r7, #56]	; 0x38
 8002fbe:	4618      	mov	r0, r3
 8002fc0:	f7fd fe88 	bl	8000cd4 <__aeabi_ui2f>
 8002fc4:	4602      	mov	r2, r0
 8002fc6:	683b      	ldr	r3, [r7, #0]
 8002fc8:	f103 0408 	add.w	r4, r3, #8
 8002fcc:	4611      	mov	r1, r2
 8002fce:	4628      	mov	r0, r5
 8002fd0:	f7fd ff8c 	bl	8000eec <__aeabi_fdiv>
 8002fd4:	4603      	mov	r3, r0
 8002fd6:	6023      	str	r3, [r4, #0]
}
 8002fd8:	bf00      	nop
 8002fda:	3740      	adds	r7, #64	; 0x40
 8002fdc:	46bd      	mov	sp, r7
 8002fde:	bdb0      	pop	{r4, r5, r7, pc}
 8002fe0:	20000328 	.word	0x20000328
 8002fe4:	20000248 	.word	0x20000248
 8002fe8:	2000024a 	.word	0x2000024a
 8002fec:	2000024c 	.word	0x2000024c
 8002ff0:	2000024e 	.word	0x2000024e
 8002ff4:	20000250 	.word	0x20000250
 8002ff8:	20000252 	.word	0x20000252

08002ffc <Clock_Start>:
	prior[0]=roll;
	prior[1]=pitch;
	prior[2]=0;
}

void Clock_Start(){
 8002ffc:	b580      	push	{r7, lr}
 8002ffe:	af00      	add	r7, sp, #0
	TIM2->CNT=0x00;
 8003000:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
 8003004:	2200      	movs	r2, #0
 8003006:	625a      	str	r2, [r3, #36]	; 0x24
	HAL_TIM_Base_Start(&htim2);
 8003008:	4802      	ldr	r0, [pc, #8]	; (8003014 <Clock_Start+0x18>)
 800300a:	f003 fbef 	bl	80067ec <HAL_TIM_Base_Start>
}
 800300e:	bf00      	nop
 8003010:	bd80      	pop	{r7, pc}
 8003012:	bf00      	nop
 8003014:	200003c0 	.word	0x200003c0

08003018 <Clock_End>:

int Clock_End(){
 8003018:	b580      	push	{r7, lr}
 800301a:	b082      	sub	sp, #8
 800301c:	af00      	add	r7, sp, #0
	int result;
	result = TIM2->CNT;
 800301e:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
 8003022:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003024:	607b      	str	r3, [r7, #4]
	HAL_TIM_Base_Stop(&htim2);
 8003026:	4804      	ldr	r0, [pc, #16]	; (8003038 <Clock_End+0x20>)
 8003028:	f003 fc2a 	bl	8006880 <HAL_TIM_Base_Stop>
	return result;
 800302c:	687b      	ldr	r3, [r7, #4]
}
 800302e:	4618      	mov	r0, r3
 8003030:	3708      	adds	r7, #8
 8003032:	46bd      	mov	sp, r7
 8003034:	bd80      	pop	{r7, pc}
 8003036:	bf00      	nop
 8003038:	200003c0 	.word	0x200003c0

0800303c <adxl_write>:
//
//	/* USER CODE END SPI2_Init 2 */
//}


void adxl_write(uint8_t address,uint8_t value){
 800303c:	b580      	push	{r7, lr}
 800303e:	b084      	sub	sp, #16
 8003040:	af00      	add	r7, sp, #0
 8003042:	4603      	mov	r3, r0
 8003044:	460a      	mov	r2, r1
 8003046:	71fb      	strb	r3, [r7, #7]
 8003048:	4613      	mov	r3, r2
 800304a:	71bb      	strb	r3, [r7, #6]
	uint8_t data[2];
	data[0]=address|0x40;
 800304c:	79fb      	ldrb	r3, [r7, #7]
 800304e:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8003052:	b2db      	uxtb	r3, r3
 8003054:	733b      	strb	r3, [r7, #12]
	data[1]=value;
 8003056:	79bb      	ldrb	r3, [r7, #6]
 8003058:	737b      	strb	r3, [r7, #13]
	HAL_GPIO_WritePin(GPIOB,GPIO_PIN_9,GPIO_PIN_RESET);
 800305a:	2200      	movs	r2, #0
 800305c:	f44f 7100 	mov.w	r1, #512	; 0x200
 8003060:	4809      	ldr	r0, [pc, #36]	; (8003088 <adxl_write+0x4c>)
 8003062:	f001 f9c3 	bl	80043ec <HAL_GPIO_WritePin>
	HAL_SPI_Transmit(&hspi2,data,2,100);
 8003066:	f107 010c 	add.w	r1, r7, #12
 800306a:	2364      	movs	r3, #100	; 0x64
 800306c:	2202      	movs	r2, #2
 800306e:	4807      	ldr	r0, [pc, #28]	; (800308c <adxl_write+0x50>)
 8003070:	f002 fe84 	bl	8005d7c <HAL_SPI_Transmit>
	HAL_GPIO_WritePin(GPIOB,GPIO_PIN_9,GPIO_PIN_SET);
 8003074:	2201      	movs	r2, #1
 8003076:	f44f 7100 	mov.w	r1, #512	; 0x200
 800307a:	4803      	ldr	r0, [pc, #12]	; (8003088 <adxl_write+0x4c>)
 800307c:	f001 f9b6 	bl	80043ec <HAL_GPIO_WritePin>
}
 8003080:	bf00      	nop
 8003082:	3710      	adds	r7, #16
 8003084:	46bd      	mov	sp, r7
 8003086:	bd80      	pop	{r7, pc}
 8003088:	40010c00 	.word	0x40010c00
 800308c:	200002c8 	.word	0x200002c8

08003090 <adxl_read_data>:

void adxl_read_data(uint8_t address){
 8003090:	b580      	push	{r7, lr}
 8003092:	b082      	sub	sp, #8
 8003094:	af00      	add	r7, sp, #0
 8003096:	4603      	mov	r3, r0
 8003098:	71fb      	strb	r3, [r7, #7]
	address |= 0x80;
 800309a:	79fb      	ldrb	r3, [r7, #7]
 800309c:	f063 037f 	orn	r3, r3, #127	; 0x7f
 80030a0:	b2db      	uxtb	r3, r3
 80030a2:	71fb      	strb	r3, [r7, #7]
	address |= 0x40;
 80030a4:	79fb      	ldrb	r3, [r7, #7]
 80030a6:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 80030aa:	b2db      	uxtb	r3, r3
 80030ac:	71fb      	strb	r3, [r7, #7]
	HAL_GPIO_WritePin(GPIOB,GPIO_PIN_9,GPIO_PIN_RESET);
 80030ae:	2200      	movs	r2, #0
 80030b0:	f44f 7100 	mov.w	r1, #512	; 0x200
 80030b4:	480c      	ldr	r0, [pc, #48]	; (80030e8 <adxl_read_data+0x58>)
 80030b6:	f001 f999 	bl	80043ec <HAL_GPIO_WritePin>
	HAL_SPI_Transmit(&hspi2,&address,1,100);
 80030ba:	1df9      	adds	r1, r7, #7
 80030bc:	2364      	movs	r3, #100	; 0x64
 80030be:	2201      	movs	r2, #1
 80030c0:	480a      	ldr	r0, [pc, #40]	; (80030ec <adxl_read_data+0x5c>)
 80030c2:	f002 fe5b 	bl	8005d7c <HAL_SPI_Transmit>
	HAL_SPI_Receive(&hspi2,data_rec,6,100);
 80030c6:	2364      	movs	r3, #100	; 0x64
 80030c8:	2206      	movs	r2, #6
 80030ca:	4909      	ldr	r1, [pc, #36]	; (80030f0 <adxl_read_data+0x60>)
 80030cc:	4807      	ldr	r0, [pc, #28]	; (80030ec <adxl_read_data+0x5c>)
 80030ce:	f002 ff91 	bl	8005ff4 <HAL_SPI_Receive>
	HAL_GPIO_WritePin(GPIOB,GPIO_PIN_9,GPIO_PIN_SET);
 80030d2:	2201      	movs	r2, #1
 80030d4:	f44f 7100 	mov.w	r1, #512	; 0x200
 80030d8:	4803      	ldr	r0, [pc, #12]	; (80030e8 <adxl_read_data+0x58>)
 80030da:	f001 f987 	bl	80043ec <HAL_GPIO_WritePin>
}
 80030de:	bf00      	nop
 80030e0:	3708      	adds	r7, #8
 80030e2:	46bd      	mov	sp, r7
 80030e4:	bd80      	pop	{r7, pc}
 80030e6:	bf00      	nop
 80030e8:	40010c00 	.word	0x40010c00
 80030ec:	200002c8 	.word	0x200002c8
 80030f0:	2000045c 	.word	0x2000045c

080030f4 <adxl_init>:
	HAL_SPI_Transmit(&hspi2,&address,1,100);
	HAL_SPI_Receive(&hspi2,&data,1,100);
	HAL_GPIO_WritePin(GPIOB,GPIO_PIN_9,GPIO_PIN_SET);
}

void adxl_init(void){
 80030f4:	b580      	push	{r7, lr}
 80030f6:	af00      	add	r7, sp, #0
	adxl_write(0x31,0x00); //DATA_FORMAT=> +-2g
 80030f8:	2100      	movs	r1, #0
 80030fa:	2031      	movs	r0, #49	; 0x31
 80030fc:	f7ff ff9e 	bl	800303c <adxl_write>
	adxl_write(0x2d,0x00); //POWER_CTL => Wakeup Bits
 8003100:	2100      	movs	r1, #0
 8003102:	202d      	movs	r0, #45	; 0x2d
 8003104:	f7ff ff9a 	bl	800303c <adxl_write>
	adxl_write(0x2c,0x0A); //100hz
 8003108:	210a      	movs	r1, #10
 800310a:	202c      	movs	r0, #44	; 0x2c
 800310c:	f7ff ff96 	bl	800303c <adxl_write>
	adxl_write(0x2d,0x08); //POWER_CTL => Measure Bit
 8003110:	2108      	movs	r1, #8
 8003112:	202d      	movs	r0, #45	; 0x2d
 8003114:	f7ff ff92 	bl	800303c <adxl_write>
	adxl_write(0x2e,0x00); //INT_ENABLE => close
 8003118:	2100      	movs	r1, #0
 800311a:	202e      	movs	r0, #46	; 0x2e
 800311c:	f7ff ff8e 	bl	800303c <adxl_write>
	adxl_write(0x24,0x4b); //THRESH_ACT =>75
 8003120:	214b      	movs	r1, #75	; 0x4b
 8003122:	2024      	movs	r0, #36	; 0x24
 8003124:	f7ff ff8a 	bl	800303c <adxl_write>
	adxl_write(0x27,0x40); //ACT_INACT_CTL => dc-coupled operation,enable ACT_X
 8003128:	2140      	movs	r1, #64	; 0x40
 800312a:	2027      	movs	r0, #39	; 0x27
 800312c:	f7ff ff86 	bl	800303c <adxl_write>
	adxl_write(0x2f,0x10); //INT_MAP => Activity map INT2
 8003130:	2110      	movs	r1, #16
 8003132:	202f      	movs	r0, #47	; 0x2f
 8003134:	f7ff ff82 	bl	800303c <adxl_write>
	adxl_write(0x2e,0x93); //INT_ENABLE => open
 8003138:	2193      	movs	r1, #147	; 0x93
 800313a:	202e      	movs	r0, #46	; 0x2e
 800313c:	f7ff ff7e 	bl	800303c <adxl_write>
}
 8003140:	bf00      	nop
 8003142:	bd80      	pop	{r7, pc}

08003144 <getData_from_ADXL>:

void getData_from_ADXL(int id){
 8003144:	b580      	push	{r7, lr}
 8003146:	b09c      	sub	sp, #112	; 0x70
 8003148:	af00      	add	r7, sp, #0
 800314a:	6078      	str	r0, [r7, #4]

	unsigned char buffer[100]="\0";
 800314c:	4b26      	ldr	r3, [pc, #152]	; (80031e8 <getData_from_ADXL+0xa4>)
 800314e:	881b      	ldrh	r3, [r3, #0]
 8003150:	81bb      	strh	r3, [r7, #12]
 8003152:	f107 030e 	add.w	r3, r7, #14
 8003156:	2262      	movs	r2, #98	; 0x62
 8003158:	2100      	movs	r1, #0
 800315a:	4618      	mov	r0, r3
 800315c:	f004 f9e2 	bl	8007524 <memset>
//	while(HAL_UART_GetState(&huart2)!=HAL_UART_STATE_READY);
//
//	if(HAL_UART_Transmit(&huart2,(uint8_t*)buffer,sizeof(buffer),100)!=HAL_OK){
//		Error_Handler();
//	}
	adxl_read_data(0x32);
 8003160:	2032      	movs	r0, #50	; 0x32
 8003162:	f7ff ff95 	bl	8003090 <adxl_read_data>
	x=(data_rec[1]<<8)|data_rec[0];
 8003166:	4b21      	ldr	r3, [pc, #132]	; (80031ec <getData_from_ADXL+0xa8>)
 8003168:	785b      	ldrb	r3, [r3, #1]
 800316a:	021b      	lsls	r3, r3, #8
 800316c:	b21a      	sxth	r2, r3
 800316e:	4b1f      	ldr	r3, [pc, #124]	; (80031ec <getData_from_ADXL+0xa8>)
 8003170:	781b      	ldrb	r3, [r3, #0]
 8003172:	b21b      	sxth	r3, r3
 8003174:	4313      	orrs	r3, r2
 8003176:	b21a      	sxth	r2, r3
 8003178:	4b1d      	ldr	r3, [pc, #116]	; (80031f0 <getData_from_ADXL+0xac>)
 800317a:	801a      	strh	r2, [r3, #0]
	y=(data_rec[3]<<8)|data_rec[2];
 800317c:	4b1b      	ldr	r3, [pc, #108]	; (80031ec <getData_from_ADXL+0xa8>)
 800317e:	78db      	ldrb	r3, [r3, #3]
 8003180:	021b      	lsls	r3, r3, #8
 8003182:	b21a      	sxth	r2, r3
 8003184:	4b19      	ldr	r3, [pc, #100]	; (80031ec <getData_from_ADXL+0xa8>)
 8003186:	789b      	ldrb	r3, [r3, #2]
 8003188:	b21b      	sxth	r3, r3
 800318a:	4313      	orrs	r3, r2
 800318c:	b21a      	sxth	r2, r3
 800318e:	4b19      	ldr	r3, [pc, #100]	; (80031f4 <getData_from_ADXL+0xb0>)
 8003190:	801a      	strh	r2, [r3, #0]
	z=(data_rec[5]<<8)|data_rec[4];
 8003192:	4b16      	ldr	r3, [pc, #88]	; (80031ec <getData_from_ADXL+0xa8>)
 8003194:	795b      	ldrb	r3, [r3, #5]
 8003196:	021b      	lsls	r3, r3, #8
 8003198:	b21a      	sxth	r2, r3
 800319a:	4b14      	ldr	r3, [pc, #80]	; (80031ec <getData_from_ADXL+0xa8>)
 800319c:	791b      	ldrb	r3, [r3, #4]
 800319e:	b21b      	sxth	r3, r3
 80031a0:	4313      	orrs	r3, r2
 80031a2:	b21a      	sxth	r2, r3
 80031a4:	4b14      	ldr	r3, [pc, #80]	; (80031f8 <getData_from_ADXL+0xb4>)
 80031a6:	801a      	strh	r2, [r3, #0]

	Ax=x;
 80031a8:	4b11      	ldr	r3, [pc, #68]	; (80031f0 <getData_from_ADXL+0xac>)
 80031aa:	f9b3 3000 	ldrsh.w	r3, [r3]
 80031ae:	4618      	mov	r0, r3
 80031b0:	f7fd fd94 	bl	8000cdc <__aeabi_i2f>
 80031b4:	4602      	mov	r2, r0
 80031b6:	4b11      	ldr	r3, [pc, #68]	; (80031fc <getData_from_ADXL+0xb8>)
 80031b8:	601a      	str	r2, [r3, #0]
	Ay=y;
 80031ba:	4b0e      	ldr	r3, [pc, #56]	; (80031f4 <getData_from_ADXL+0xb0>)
 80031bc:	f9b3 3000 	ldrsh.w	r3, [r3]
 80031c0:	4618      	mov	r0, r3
 80031c2:	f7fd fd8b 	bl	8000cdc <__aeabi_i2f>
 80031c6:	4602      	mov	r2, r0
 80031c8:	4b0d      	ldr	r3, [pc, #52]	; (8003200 <getData_from_ADXL+0xbc>)
 80031ca:	601a      	str	r2, [r3, #0]
	Az=z;
 80031cc:	4b0a      	ldr	r3, [pc, #40]	; (80031f8 <getData_from_ADXL+0xb4>)
 80031ce:	f9b3 3000 	ldrsh.w	r3, [r3]
 80031d2:	4618      	mov	r0, r3
 80031d4:	f7fd fd82 	bl	8000cdc <__aeabi_i2f>
 80031d8:	4602      	mov	r2, r0
 80031da:	4b0a      	ldr	r3, [pc, #40]	; (8003204 <getData_from_ADXL+0xc0>)
 80031dc:	601a      	str	r2, [r3, #0]
//	sprintf(buffer,"%d,%7.2f,%7.2f,%7.2f\n\r",id,xg,yg,zg);
//	while(HAL_UART_GetState(&huart2)!=HAL_UART_STATE_READY);
//	if(HAL_UART_Transmit(&huart2,(uint8_t*)buffer,sizeof(buffer),100)!=HAL_OK){
//		Error_Handler();
//	}
}
 80031de:	bf00      	nop
 80031e0:	3770      	adds	r7, #112	; 0x70
 80031e2:	46bd      	mov	sp, r7
 80031e4:	bd80      	pop	{r7, pc}
 80031e6:	bf00      	nop
 80031e8:	0800b904 	.word	0x0800b904
 80031ec:	2000045c 	.word	0x2000045c
 80031f0:	200002c4 	.word	0x200002c4
 80031f4:	200003b6 	.word	0x200003b6
 80031f8:	20000394 	.word	0x20000394
 80031fc:	200003b0 	.word	0x200003b0
 8003200:	20000388 	.word	0x20000388
 8003204:	200003bc 	.word	0x200003bc

08003208 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8003208:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800320c:	b0af      	sub	sp, #188	; 0xbc
 800320e:	af0c      	add	r7, sp, #48	; 0x30
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
	HAL_Init();
 8003210:	f000 fd8a 	bl	8003d28 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
	SystemClock_Config();
 8003214:	f000 f9fe 	bl	8003614 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
	MX_GPIO_Init();
 8003218:	f000 fb1e 	bl	8003858 <MX_GPIO_Init>
	MX_USART2_UART_Init();
 800321c:	f000 faf2 	bl	8003804 <MX_USART2_UART_Init>
	MX_I2C1_Init();
 8003220:	f000 fa3e 	bl	80036a0 <MX_I2C1_Init>
	MX_TIM2_Init();
 8003224:	f000 faa0 	bl	8003768 <MX_TIM2_Init>
	MX_SPI2_Init();
 8003228:	f000 fa68 	bl	80036fc <MX_SPI2_Init>
  /* USER CODE BEGIN 2 */
	MPU9250_Init();
 800322c:	f7fe ffe8 	bl	8002200 <MPU9250_Init>
	HAL_Delay(2000);
 8003230:	f44f 60fa 	mov.w	r0, #2000	; 0x7d0
 8003234:	f000 fdda 	bl	8003dec <HAL_Delay>

	calibrateMPU9250(gyroBias,accelBias);
 8003238:	499e      	ldr	r1, [pc, #632]	; (80034b4 <main+0x2ac>)
 800323a:	489f      	ldr	r0, [pc, #636]	; (80034b8 <main+0x2b0>)
 800323c:	f7ff fd4e 	bl	8002cdc <calibrateMPU9250>

	initAK8963(magCalibration);
 8003240:	489e      	ldr	r0, [pc, #632]	; (80034bc <main+0x2b4>)
 8003242:	f7ff f8ad 	bl	80023a0 <initAK8963>
	magcalMPU9250(magBias, magScale);
 8003246:	499e      	ldr	r1, [pc, #632]	; (80034c0 <main+0x2b8>)
 8003248:	489e      	ldr	r0, [pc, #632]	; (80034c4 <main+0x2bc>)
 800324a:	f7ff fba9 	bl	80029a0 <magcalMPU9250>
	//gxf=new_Kalman();
	//gyf=new_Kalman();
	//gzf=new_Kalman();
	adxl_init();
 800324e:	f7ff ff51 	bl	80030f4 <adxl_init>

  /* USER CODE END 2 */

  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
	float ahrs[]={0,0,0};
 8003252:	f04f 0300 	mov.w	r3, #0
 8003256:	677b      	str	r3, [r7, #116]	; 0x74
 8003258:	f04f 0300 	mov.w	r3, #0
 800325c:	67bb      	str	r3, [r7, #120]	; 0x78
 800325e:	f04f 0300 	mov.w	r3, #0
 8003262:	67fb      	str	r3, [r7, #124]	; 0x7c
	int m=0;
 8003264:	2300      	movs	r3, #0
 8003266:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
//	}

	while (1)
	{

		Clock_Start();
 800326a:	f7ff fec7 	bl	8002ffc <Clock_Start>
//		MPU9250_Read_Accel();
		MPU9250_Read_Gyro();
 800326e:	f7ff fa0f 	bl	8002690 <MPU9250_Read_Gyro>
		MPU9250_Read_Mag();
 8003272:	f7ff fab9 	bl	80027e8 <MPU9250_Read_Mag>
		getData_from_ADXL(100);
 8003276:	2064      	movs	r0, #100	; 0x64
 8003278:	f7ff ff64 	bl	8003144 <getData_from_ADXL>

		MahonyAHRSupdate(Gx, Gy, Gz, Ax, Ay, Az, My, Mx, Mz);
 800327c:	4b92      	ldr	r3, [pc, #584]	; (80034c8 <main+0x2c0>)
 800327e:	681d      	ldr	r5, [r3, #0]
 8003280:	4b92      	ldr	r3, [pc, #584]	; (80034cc <main+0x2c4>)
 8003282:	681e      	ldr	r6, [r3, #0]
 8003284:	4b92      	ldr	r3, [pc, #584]	; (80034d0 <main+0x2c8>)
 8003286:	f8d3 c000 	ldr.w	ip, [r3]
 800328a:	4b92      	ldr	r3, [pc, #584]	; (80034d4 <main+0x2cc>)
 800328c:	f8d3 e000 	ldr.w	lr, [r3]
 8003290:	4b91      	ldr	r3, [pc, #580]	; (80034d8 <main+0x2d0>)
 8003292:	681b      	ldr	r3, [r3, #0]
 8003294:	4a91      	ldr	r2, [pc, #580]	; (80034dc <main+0x2d4>)
 8003296:	6812      	ldr	r2, [r2, #0]
 8003298:	4991      	ldr	r1, [pc, #580]	; (80034e0 <main+0x2d8>)
 800329a:	6809      	ldr	r1, [r1, #0]
 800329c:	4891      	ldr	r0, [pc, #580]	; (80034e4 <main+0x2dc>)
 800329e:	6800      	ldr	r0, [r0, #0]
 80032a0:	4c91      	ldr	r4, [pc, #580]	; (80034e8 <main+0x2e0>)
 80032a2:	6824      	ldr	r4, [r4, #0]
 80032a4:	9404      	str	r4, [sp, #16]
 80032a6:	9003      	str	r0, [sp, #12]
 80032a8:	9102      	str	r1, [sp, #8]
 80032aa:	9201      	str	r2, [sp, #4]
 80032ac:	9300      	str	r3, [sp, #0]
 80032ae:	4673      	mov	r3, lr
 80032b0:	4662      	mov	r2, ip
 80032b2:	4631      	mov	r1, r6
 80032b4:	4628      	mov	r0, r5
 80032b6:	f7fd ff61 	bl	800117c <MahonyAHRSupdate>

		prior[2]=angle[2];
 80032ba:	4b8c      	ldr	r3, [pc, #560]	; (80034ec <main+0x2e4>)
 80032bc:	f103 0410 	add.w	r4, r3, #16
 80032c0:	e9d4 3400 	ldrd	r3, r4, [r4]
 80032c4:	4a8a      	ldr	r2, [pc, #552]	; (80034f0 <main+0x2e8>)
 80032c6:	e9c2 3404 	strd	r3, r4, [r2, #16]
		prior[0]=angle[0];
 80032ca:	4b88      	ldr	r3, [pc, #544]	; (80034ec <main+0x2e4>)
 80032cc:	cb18      	ldmia	r3, {r3, r4}
 80032ce:	4a88      	ldr	r2, [pc, #544]	; (80034f0 <main+0x2e8>)
 80032d0:	e9c2 3400 	strd	r3, r4, [r2]
		prior[1]=angle[1];
 80032d4:	4b85      	ldr	r3, [pc, #532]	; (80034ec <main+0x2e4>)
 80032d6:	f103 0408 	add.w	r4, r3, #8
 80032da:	e9d4 3400 	ldrd	r3, r4, [r4]
 80032de:	4a84      	ldr	r2, [pc, #528]	; (80034f0 <main+0x2e8>)
 80032e0:	e9c2 3402 	strd	r3, r4, [r2, #8]
	 	ahrs[0]=atan2f(q0*q1 + q2*q3, 0.5f - q1*q1 - q2*q2) * rad2deg;
 80032e4:	4b83      	ldr	r3, [pc, #524]	; (80034f4 <main+0x2ec>)
 80032e6:	681a      	ldr	r2, [r3, #0]
 80032e8:	4b83      	ldr	r3, [pc, #524]	; (80034f8 <main+0x2f0>)
 80032ea:	681b      	ldr	r3, [r3, #0]
 80032ec:	4619      	mov	r1, r3
 80032ee:	4610      	mov	r0, r2
 80032f0:	f7fd fd48 	bl	8000d84 <__aeabi_fmul>
 80032f4:	4603      	mov	r3, r0
 80032f6:	461c      	mov	r4, r3
 80032f8:	4b80      	ldr	r3, [pc, #512]	; (80034fc <main+0x2f4>)
 80032fa:	681a      	ldr	r2, [r3, #0]
 80032fc:	4b80      	ldr	r3, [pc, #512]	; (8003500 <main+0x2f8>)
 80032fe:	681b      	ldr	r3, [r3, #0]
 8003300:	4619      	mov	r1, r3
 8003302:	4610      	mov	r0, r2
 8003304:	f7fd fd3e 	bl	8000d84 <__aeabi_fmul>
 8003308:	4603      	mov	r3, r0
 800330a:	4619      	mov	r1, r3
 800330c:	4620      	mov	r0, r4
 800330e:	f7fd fc31 	bl	8000b74 <__addsf3>
 8003312:	4603      	mov	r3, r0
 8003314:	461c      	mov	r4, r3
 8003316:	4b78      	ldr	r3, [pc, #480]	; (80034f8 <main+0x2f0>)
 8003318:	681a      	ldr	r2, [r3, #0]
 800331a:	4b77      	ldr	r3, [pc, #476]	; (80034f8 <main+0x2f0>)
 800331c:	681b      	ldr	r3, [r3, #0]
 800331e:	4619      	mov	r1, r3
 8003320:	4610      	mov	r0, r2
 8003322:	f7fd fd2f 	bl	8000d84 <__aeabi_fmul>
 8003326:	4603      	mov	r3, r0
 8003328:	4619      	mov	r1, r3
 800332a:	f04f 507c 	mov.w	r0, #1056964608	; 0x3f000000
 800332e:	f7fd fc1f 	bl	8000b70 <__aeabi_fsub>
 8003332:	4603      	mov	r3, r0
 8003334:	461d      	mov	r5, r3
 8003336:	4b71      	ldr	r3, [pc, #452]	; (80034fc <main+0x2f4>)
 8003338:	681a      	ldr	r2, [r3, #0]
 800333a:	4b70      	ldr	r3, [pc, #448]	; (80034fc <main+0x2f4>)
 800333c:	681b      	ldr	r3, [r3, #0]
 800333e:	4619      	mov	r1, r3
 8003340:	4610      	mov	r0, r2
 8003342:	f7fd fd1f 	bl	8000d84 <__aeabi_fmul>
 8003346:	4603      	mov	r3, r0
 8003348:	4619      	mov	r1, r3
 800334a:	4628      	mov	r0, r5
 800334c:	f7fd fc10 	bl	8000b70 <__aeabi_fsub>
 8003350:	4603      	mov	r3, r0
 8003352:	4619      	mov	r1, r3
 8003354:	4620      	mov	r0, r4
 8003356:	f007 fec5 	bl	800b0e4 <atan2f>
 800335a:	4603      	mov	r3, r0
 800335c:	4618      	mov	r0, r3
 800335e:	f7fd f863 	bl	8000428 <__aeabi_f2d>
 8003362:	4b68      	ldr	r3, [pc, #416]	; (8003504 <main+0x2fc>)
 8003364:	cb18      	ldmia	r3, {r3, r4}
 8003366:	461a      	mov	r2, r3
 8003368:	4623      	mov	r3, r4
 800336a:	f7fd f8b5 	bl	80004d8 <__aeabi_dmul>
 800336e:	4603      	mov	r3, r0
 8003370:	460c      	mov	r4, r1
 8003372:	4618      	mov	r0, r3
 8003374:	4621      	mov	r1, r4
 8003376:	f7fd fba7 	bl	8000ac8 <__aeabi_d2f>
 800337a:	4603      	mov	r3, r0
 800337c:	677b      	str	r3, [r7, #116]	; 0x74
	 	ahrs[1]=asinf(-2.0f * (q1*q3 - q0*q2)) * rad2deg;
 800337e:	4b5e      	ldr	r3, [pc, #376]	; (80034f8 <main+0x2f0>)
 8003380:	681a      	ldr	r2, [r3, #0]
 8003382:	4b5f      	ldr	r3, [pc, #380]	; (8003500 <main+0x2f8>)
 8003384:	681b      	ldr	r3, [r3, #0]
 8003386:	4619      	mov	r1, r3
 8003388:	4610      	mov	r0, r2
 800338a:	f7fd fcfb 	bl	8000d84 <__aeabi_fmul>
 800338e:	4603      	mov	r3, r0
 8003390:	461c      	mov	r4, r3
 8003392:	4b58      	ldr	r3, [pc, #352]	; (80034f4 <main+0x2ec>)
 8003394:	681a      	ldr	r2, [r3, #0]
 8003396:	4b59      	ldr	r3, [pc, #356]	; (80034fc <main+0x2f4>)
 8003398:	681b      	ldr	r3, [r3, #0]
 800339a:	4619      	mov	r1, r3
 800339c:	4610      	mov	r0, r2
 800339e:	f7fd fcf1 	bl	8000d84 <__aeabi_fmul>
 80033a2:	4603      	mov	r3, r0
 80033a4:	4619      	mov	r1, r3
 80033a6:	4620      	mov	r0, r4
 80033a8:	f7fd fbe2 	bl	8000b70 <__aeabi_fsub>
 80033ac:	4603      	mov	r3, r0
 80033ae:	f04f 4140 	mov.w	r1, #3221225472	; 0xc0000000
 80033b2:	4618      	mov	r0, r3
 80033b4:	f7fd fce6 	bl	8000d84 <__aeabi_fmul>
 80033b8:	4603      	mov	r3, r0
 80033ba:	4618      	mov	r0, r3
 80033bc:	f007 fe44 	bl	800b048 <asinf>
 80033c0:	4603      	mov	r3, r0
 80033c2:	4618      	mov	r0, r3
 80033c4:	f7fd f830 	bl	8000428 <__aeabi_f2d>
 80033c8:	4b4e      	ldr	r3, [pc, #312]	; (8003504 <main+0x2fc>)
 80033ca:	cb18      	ldmia	r3, {r3, r4}
 80033cc:	461a      	mov	r2, r3
 80033ce:	4623      	mov	r3, r4
 80033d0:	f7fd f882 	bl	80004d8 <__aeabi_dmul>
 80033d4:	4603      	mov	r3, r0
 80033d6:	460c      	mov	r4, r1
 80033d8:	4618      	mov	r0, r3
 80033da:	4621      	mov	r1, r4
 80033dc:	f7fd fb74 	bl	8000ac8 <__aeabi_d2f>
 80033e0:	4603      	mov	r3, r0
 80033e2:	67bb      	str	r3, [r7, #120]	; 0x78
	 	ahrs[2]=atan2f(q1*q2 + q0*q3, 0.5f - q2*q2 - q3*q3)* rad2deg;
 80033e4:	4b44      	ldr	r3, [pc, #272]	; (80034f8 <main+0x2f0>)
 80033e6:	681a      	ldr	r2, [r3, #0]
 80033e8:	4b44      	ldr	r3, [pc, #272]	; (80034fc <main+0x2f4>)
 80033ea:	681b      	ldr	r3, [r3, #0]
 80033ec:	4619      	mov	r1, r3
 80033ee:	4610      	mov	r0, r2
 80033f0:	f7fd fcc8 	bl	8000d84 <__aeabi_fmul>
 80033f4:	4603      	mov	r3, r0
 80033f6:	461c      	mov	r4, r3
 80033f8:	4b3e      	ldr	r3, [pc, #248]	; (80034f4 <main+0x2ec>)
 80033fa:	681a      	ldr	r2, [r3, #0]
 80033fc:	4b40      	ldr	r3, [pc, #256]	; (8003500 <main+0x2f8>)
 80033fe:	681b      	ldr	r3, [r3, #0]
 8003400:	4619      	mov	r1, r3
 8003402:	4610      	mov	r0, r2
 8003404:	f7fd fcbe 	bl	8000d84 <__aeabi_fmul>
 8003408:	4603      	mov	r3, r0
 800340a:	4619      	mov	r1, r3
 800340c:	4620      	mov	r0, r4
 800340e:	f7fd fbb1 	bl	8000b74 <__addsf3>
 8003412:	4603      	mov	r3, r0
 8003414:	461c      	mov	r4, r3
 8003416:	4b39      	ldr	r3, [pc, #228]	; (80034fc <main+0x2f4>)
 8003418:	681a      	ldr	r2, [r3, #0]
 800341a:	4b38      	ldr	r3, [pc, #224]	; (80034fc <main+0x2f4>)
 800341c:	681b      	ldr	r3, [r3, #0]
 800341e:	4619      	mov	r1, r3
 8003420:	4610      	mov	r0, r2
 8003422:	f7fd fcaf 	bl	8000d84 <__aeabi_fmul>
 8003426:	4603      	mov	r3, r0
 8003428:	4619      	mov	r1, r3
 800342a:	f04f 507c 	mov.w	r0, #1056964608	; 0x3f000000
 800342e:	f7fd fb9f 	bl	8000b70 <__aeabi_fsub>
 8003432:	4603      	mov	r3, r0
 8003434:	461d      	mov	r5, r3
 8003436:	4b32      	ldr	r3, [pc, #200]	; (8003500 <main+0x2f8>)
 8003438:	681a      	ldr	r2, [r3, #0]
 800343a:	4b31      	ldr	r3, [pc, #196]	; (8003500 <main+0x2f8>)
 800343c:	681b      	ldr	r3, [r3, #0]
 800343e:	4619      	mov	r1, r3
 8003440:	4610      	mov	r0, r2
 8003442:	f7fd fc9f 	bl	8000d84 <__aeabi_fmul>
 8003446:	4603      	mov	r3, r0
 8003448:	4619      	mov	r1, r3
 800344a:	4628      	mov	r0, r5
 800344c:	f7fd fb90 	bl	8000b70 <__aeabi_fsub>
 8003450:	4603      	mov	r3, r0
 8003452:	4619      	mov	r1, r3
 8003454:	4620      	mov	r0, r4
 8003456:	f007 fe45 	bl	800b0e4 <atan2f>
 800345a:	4603      	mov	r3, r0
 800345c:	4618      	mov	r0, r3
 800345e:	f7fc ffe3 	bl	8000428 <__aeabi_f2d>
 8003462:	4b28      	ldr	r3, [pc, #160]	; (8003504 <main+0x2fc>)
 8003464:	cb18      	ldmia	r3, {r3, r4}
 8003466:	461a      	mov	r2, r3
 8003468:	4623      	mov	r3, r4
 800346a:	f7fd f835 	bl	80004d8 <__aeabi_dmul>
 800346e:	4603      	mov	r3, r0
 8003470:	460c      	mov	r4, r1
 8003472:	4618      	mov	r0, r3
 8003474:	4621      	mov	r1, r4
 8003476:	f7fd fb27 	bl	8000ac8 <__aeabi_d2f>
 800347a:	4603      	mov	r3, r0
 800347c:	67fb      	str	r3, [r7, #124]	; 0x7c
	 	 	base[2]=cos(angle[1]/rad2deg)*cos(angle[0]/rad2deg)*sqrt(Ax*Ax+Ay*Ay+Az*Az);
	 	 // get acce
	 	 	acce[0]=Ax-base[0];	acce[1]=Ay-base[1];	acce[2]=Az-base[2];*/
		char mes[86];
		//below is for linear acc caculation
		sprintf(mes,"%6.3f,%6.3f,%6.3f,%6.3f,%6.3f,%6.3f,%6.3f\n\r" ,Ax, Ay, Az,q0 ,q1 ,q2 ,q3 );
 800347e:	4b15      	ldr	r3, [pc, #84]	; (80034d4 <main+0x2cc>)
 8003480:	681b      	ldr	r3, [r3, #0]
 8003482:	4618      	mov	r0, r3
 8003484:	f7fc ffd0 	bl	8000428 <__aeabi_f2d>
 8003488:	e9c7 0104 	strd	r0, r1, [r7, #16]
 800348c:	4b12      	ldr	r3, [pc, #72]	; (80034d8 <main+0x2d0>)
 800348e:	681b      	ldr	r3, [r3, #0]
 8003490:	4618      	mov	r0, r3
 8003492:	f7fc ffc9 	bl	8000428 <__aeabi_f2d>
 8003496:	4680      	mov	r8, r0
 8003498:	4689      	mov	r9, r1
 800349a:	4b10      	ldr	r3, [pc, #64]	; (80034dc <main+0x2d4>)
 800349c:	681b      	ldr	r3, [r3, #0]
 800349e:	4618      	mov	r0, r3
 80034a0:	f7fc ffc2 	bl	8000428 <__aeabi_f2d>
 80034a4:	4682      	mov	sl, r0
 80034a6:	468b      	mov	fp, r1
 80034a8:	4b12      	ldr	r3, [pc, #72]	; (80034f4 <main+0x2ec>)
 80034aa:	681b      	ldr	r3, [r3, #0]
 80034ac:	4618      	mov	r0, r3
 80034ae:	f7fc ffbb 	bl	8000428 <__aeabi_f2d>
 80034b2:	e029      	b.n	8003508 <main+0x300>
 80034b4:	20000274 	.word	0x20000274
 80034b8:	20000268 	.word	0x20000268
 80034bc:	2000025c 	.word	0x2000025c
 80034c0:	2000028c 	.word	0x2000028c
 80034c4:	20000280 	.word	0x20000280
 80034c8:	200002c0 	.word	0x200002c0
 80034cc:	20000390 	.word	0x20000390
 80034d0:	20000480 	.word	0x20000480
 80034d4:	200003b0 	.word	0x200003b0
 80034d8:	20000388 	.word	0x20000388
 80034dc:	200003bc 	.word	0x200003bc
 80034e0:	2000038c 	.word	0x2000038c
 80034e4:	20000488 	.word	0x20000488
 80034e8:	20000324 	.word	0x20000324
 80034ec:	20000398 	.word	0x20000398
 80034f0:	200002a8 	.word	0x200002a8
 80034f4:	20000004 	.word	0x20000004
 80034f8:	20000224 	.word	0x20000224
 80034fc:	20000228 	.word	0x20000228
 8003500:	2000022c 	.word	0x2000022c
 8003504:	20000010 	.word	0x20000010
 8003508:	e9c7 0102 	strd	r0, r1, [r7, #8]
 800350c:	4b3a      	ldr	r3, [pc, #232]	; (80035f8 <main+0x3f0>)
 800350e:	681b      	ldr	r3, [r3, #0]
 8003510:	4618      	mov	r0, r3
 8003512:	f7fc ff89 	bl	8000428 <__aeabi_f2d>
 8003516:	e9c7 0100 	strd	r0, r1, [r7]
 800351a:	4b38      	ldr	r3, [pc, #224]	; (80035fc <main+0x3f4>)
 800351c:	681b      	ldr	r3, [r3, #0]
 800351e:	4618      	mov	r0, r3
 8003520:	f7fc ff82 	bl	8000428 <__aeabi_f2d>
 8003524:	4605      	mov	r5, r0
 8003526:	460e      	mov	r6, r1
 8003528:	4b35      	ldr	r3, [pc, #212]	; (8003600 <main+0x3f8>)
 800352a:	681b      	ldr	r3, [r3, #0]
 800352c:	4618      	mov	r0, r3
 800352e:	f7fc ff7b 	bl	8000428 <__aeabi_f2d>
 8003532:	4603      	mov	r3, r0
 8003534:	460c      	mov	r4, r1
 8003536:	f107 001c 	add.w	r0, r7, #28
 800353a:	e9cd 340a 	strd	r3, r4, [sp, #40]	; 0x28
 800353e:	e9cd 5608 	strd	r5, r6, [sp, #32]
 8003542:	e9d7 3400 	ldrd	r3, r4, [r7]
 8003546:	e9cd 3406 	strd	r3, r4, [sp, #24]
 800354a:	e9d7 3402 	ldrd	r3, r4, [r7, #8]
 800354e:	e9cd 3404 	strd	r3, r4, [sp, #16]
 8003552:	e9cd ab02 	strd	sl, fp, [sp, #8]
 8003556:	e9cd 8900 	strd	r8, r9, [sp]
 800355a:	e9d7 2304 	ldrd	r2, r3, [r7, #16]
 800355e:	4929      	ldr	r1, [pc, #164]	; (8003604 <main+0x3fc>)
 8003560:	f004 fed2 	bl	8008308 <siprintf>

		//marked for temp
//		sprintf(mes,"%7.2f,%7.2f,%7.2f\n",ahrs[0],ahrs[1],ahrs[2]);
		HAL_UART_Transmit(&huart2, (uint8_t *)mes, strlen(mes), HAL_MAX_DELAY);
 8003564:	f107 031c 	add.w	r3, r7, #28
 8003568:	4618      	mov	r0, r3
 800356a:	f7fc fdf1 	bl	8000150 <strlen>
 800356e:	4603      	mov	r3, r0
 8003570:	b29a      	uxth	r2, r3
 8003572:	f107 011c 	add.w	r1, r7, #28
 8003576:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 800357a:	4823      	ldr	r0, [pc, #140]	; (8003608 <main+0x400>)
 800357c:	f003 fc01 	bl	8006d82 <HAL_UART_Transmit>
		//above is for 345 ic

		//sprintf(mes,"%6.3f,%6.3f,%6.3f,%6.3f,%6.3f,%6.3f\n",Ax,Ay,Az,accelBias[0],accelBias[1],accelBias[2]);

	 	 // calculate delay time
		int cost = Clock_End()/2;
 8003580:	f7ff fd4a 	bl	8003018 <Clock_End>
 8003584:	4603      	mov	r3, r0
 8003586:	0fda      	lsrs	r2, r3, #31
 8003588:	4413      	add	r3, r2
 800358a:	105b      	asrs	r3, r3, #1
 800358c:	f8c7 3080 	str.w	r3, [r7, #128]	; 0x80

		if(dt*1000-cost>0)
 8003590:	4b1e      	ldr	r3, [pc, #120]	; (800360c <main+0x404>)
 8003592:	681b      	ldr	r3, [r3, #0]
 8003594:	491e      	ldr	r1, [pc, #120]	; (8003610 <main+0x408>)
 8003596:	4618      	mov	r0, r3
 8003598:	f7fd fbf4 	bl	8000d84 <__aeabi_fmul>
 800359c:	4603      	mov	r3, r0
 800359e:	461c      	mov	r4, r3
 80035a0:	f8d7 0080 	ldr.w	r0, [r7, #128]	; 0x80
 80035a4:	f7fd fb9a 	bl	8000cdc <__aeabi_i2f>
 80035a8:	4603      	mov	r3, r0
 80035aa:	4619      	mov	r1, r3
 80035ac:	4620      	mov	r0, r4
 80035ae:	f7fd fadf 	bl	8000b70 <__aeabi_fsub>
 80035b2:	4603      	mov	r3, r0
 80035b4:	f04f 0100 	mov.w	r1, #0
 80035b8:	4618      	mov	r0, r3
 80035ba:	f7fd fd9f 	bl	80010fc <__aeabi_fcmpgt>
 80035be:	4603      	mov	r3, r0
 80035c0:	2b00      	cmp	r3, #0
 80035c2:	d018      	beq.n	80035f6 <main+0x3ee>
			HAL_Delay (dt*1000-cost);
 80035c4:	4b11      	ldr	r3, [pc, #68]	; (800360c <main+0x404>)
 80035c6:	681b      	ldr	r3, [r3, #0]
 80035c8:	4911      	ldr	r1, [pc, #68]	; (8003610 <main+0x408>)
 80035ca:	4618      	mov	r0, r3
 80035cc:	f7fd fbda 	bl	8000d84 <__aeabi_fmul>
 80035d0:	4603      	mov	r3, r0
 80035d2:	461c      	mov	r4, r3
 80035d4:	f8d7 0080 	ldr.w	r0, [r7, #128]	; 0x80
 80035d8:	f7fd fb80 	bl	8000cdc <__aeabi_i2f>
 80035dc:	4603      	mov	r3, r0
 80035de:	4619      	mov	r1, r3
 80035e0:	4620      	mov	r0, r4
 80035e2:	f7fd fac5 	bl	8000b70 <__aeabi_fsub>
 80035e6:	4603      	mov	r3, r0
 80035e8:	4618      	mov	r0, r3
 80035ea:	f7fd fda7 	bl	800113c <__aeabi_f2uiz>
 80035ee:	4603      	mov	r3, r0
 80035f0:	4618      	mov	r0, r3
 80035f2:	f000 fbfb 	bl	8003dec <HAL_Delay>
	{
 80035f6:	e638      	b.n	800326a <main+0x62>
 80035f8:	20000224 	.word	0x20000224
 80035fc:	20000228 	.word	0x20000228
 8003600:	2000022c 	.word	0x2000022c
 8003604:	0800b968 	.word	0x0800b968
 8003608:	20000408 	.word	0x20000408
 800360c:	2000001c 	.word	0x2000001c
 8003610:	447a0000 	.word	0x447a0000

08003614 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8003614:	b580      	push	{r7, lr}
 8003616:	b090      	sub	sp, #64	; 0x40
 8003618:	af00      	add	r7, sp, #0
	RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 800361a:	f107 0318 	add.w	r3, r7, #24
 800361e:	2228      	movs	r2, #40	; 0x28
 8003620:	2100      	movs	r1, #0
 8003622:	4618      	mov	r0, r3
 8003624:	f003 ff7e 	bl	8007524 <memset>
	RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8003628:	1d3b      	adds	r3, r7, #4
 800362a:	2200      	movs	r2, #0
 800362c:	601a      	str	r2, [r3, #0]
 800362e:	605a      	str	r2, [r3, #4]
 8003630:	609a      	str	r2, [r3, #8]
 8003632:	60da      	str	r2, [r3, #12]
 8003634:	611a      	str	r2, [r3, #16]

	/** Initializes the RCC Oscillators according to the specified parameters
	* in the RCC_OscInitTypeDef structure.
	*/
	RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSE;
 8003636:	2301      	movs	r3, #1
 8003638:	61bb      	str	r3, [r7, #24]
	RCC_OscInitStruct.HSEState = RCC_HSE_ON;
 800363a:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 800363e:	61fb      	str	r3, [r7, #28]
	RCC_OscInitStruct.HSEPredivValue = RCC_HSE_PREDIV_DIV1;
 8003640:	2300      	movs	r3, #0
 8003642:	623b      	str	r3, [r7, #32]
	RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 8003644:	2301      	movs	r3, #1
 8003646:	62bb      	str	r3, [r7, #40]	; 0x28
	RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8003648:	2302      	movs	r3, #2
 800364a:	637b      	str	r3, [r7, #52]	; 0x34
	RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 800364c:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 8003650:	63bb      	str	r3, [r7, #56]	; 0x38
	RCC_OscInitStruct.PLL.PLLMUL = RCC_PLL_MUL9;
 8003652:	f44f 13e0 	mov.w	r3, #1835008	; 0x1c0000
 8003656:	63fb      	str	r3, [r7, #60]	; 0x3c
	if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8003658:	f107 0318 	add.w	r3, r7, #24
 800365c:	4618      	mov	r0, r3
 800365e:	f001 feed 	bl	800543c <HAL_RCC_OscConfig>
 8003662:	4603      	mov	r3, r0
 8003664:	2b00      	cmp	r3, #0
 8003666:	d001      	beq.n	800366c <SystemClock_Config+0x58>
	{
		Error_Handler();
 8003668:	f000 f990 	bl	800398c <Error_Handler>
	}
	/** Initializes the CPU, AHB and APB buses clocks
	*/
	RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 800366c:	230f      	movs	r3, #15
 800366e:	607b      	str	r3, [r7, #4]
							  |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
	RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8003670:	2302      	movs	r3, #2
 8003672:	60bb      	str	r3, [r7, #8]
	RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8003674:	2300      	movs	r3, #0
 8003676:	60fb      	str	r3, [r7, #12]
	RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV2;
 8003678:	f44f 6380 	mov.w	r3, #1024	; 0x400
 800367c:	613b      	str	r3, [r7, #16]
	RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 800367e:	2300      	movs	r3, #0
 8003680:	617b      	str	r3, [r7, #20]

	if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_2) != HAL_OK)
 8003682:	1d3b      	adds	r3, r7, #4
 8003684:	2102      	movs	r1, #2
 8003686:	4618      	mov	r0, r3
 8003688:	f002 f958 	bl	800593c <HAL_RCC_ClockConfig>
 800368c:	4603      	mov	r3, r0
 800368e:	2b00      	cmp	r3, #0
 8003690:	d001      	beq.n	8003696 <SystemClock_Config+0x82>
	{
		Error_Handler();
 8003692:	f000 f97b 	bl	800398c <Error_Handler>
	}
}
 8003696:	bf00      	nop
 8003698:	3740      	adds	r7, #64	; 0x40
 800369a:	46bd      	mov	sp, r7
 800369c:	bd80      	pop	{r7, pc}
	...

080036a0 <MX_I2C1_Init>:
  * @brief I2C1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_I2C1_Init(void)
{
 80036a0:	b580      	push	{r7, lr}
 80036a2:	af00      	add	r7, sp, #0
  /* USER CODE END I2C1_Init 0 */

  /* USER CODE BEGIN I2C1_Init 1 */

  /* USER CODE END I2C1_Init 1 */
	hi2c1.Instance = I2C1;
 80036a4:	4b12      	ldr	r3, [pc, #72]	; (80036f0 <MX_I2C1_Init+0x50>)
 80036a6:	4a13      	ldr	r2, [pc, #76]	; (80036f4 <MX_I2C1_Init+0x54>)
 80036a8:	601a      	str	r2, [r3, #0]
	hi2c1.Init.ClockSpeed = 400000;
 80036aa:	4b11      	ldr	r3, [pc, #68]	; (80036f0 <MX_I2C1_Init+0x50>)
 80036ac:	4a12      	ldr	r2, [pc, #72]	; (80036f8 <MX_I2C1_Init+0x58>)
 80036ae:	605a      	str	r2, [r3, #4]
	hi2c1.Init.DutyCycle = I2C_DUTYCYCLE_2;
 80036b0:	4b0f      	ldr	r3, [pc, #60]	; (80036f0 <MX_I2C1_Init+0x50>)
 80036b2:	2200      	movs	r2, #0
 80036b4:	609a      	str	r2, [r3, #8]
	hi2c1.Init.OwnAddress1 = 0;
 80036b6:	4b0e      	ldr	r3, [pc, #56]	; (80036f0 <MX_I2C1_Init+0x50>)
 80036b8:	2200      	movs	r2, #0
 80036ba:	60da      	str	r2, [r3, #12]
	hi2c1.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 80036bc:	4b0c      	ldr	r3, [pc, #48]	; (80036f0 <MX_I2C1_Init+0x50>)
 80036be:	f44f 4280 	mov.w	r2, #16384	; 0x4000
 80036c2:	611a      	str	r2, [r3, #16]
	hi2c1.Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
 80036c4:	4b0a      	ldr	r3, [pc, #40]	; (80036f0 <MX_I2C1_Init+0x50>)
 80036c6:	2200      	movs	r2, #0
 80036c8:	615a      	str	r2, [r3, #20]
	hi2c1.Init.OwnAddress2 = 0;
 80036ca:	4b09      	ldr	r3, [pc, #36]	; (80036f0 <MX_I2C1_Init+0x50>)
 80036cc:	2200      	movs	r2, #0
 80036ce:	619a      	str	r2, [r3, #24]
	hi2c1.Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
 80036d0:	4b07      	ldr	r3, [pc, #28]	; (80036f0 <MX_I2C1_Init+0x50>)
 80036d2:	2200      	movs	r2, #0
 80036d4:	61da      	str	r2, [r3, #28]
	hi2c1.Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
 80036d6:	4b06      	ldr	r3, [pc, #24]	; (80036f0 <MX_I2C1_Init+0x50>)
 80036d8:	2200      	movs	r2, #0
 80036da:	621a      	str	r2, [r3, #32]
	if (HAL_I2C_Init(&hi2c1) != HAL_OK)
 80036dc:	4804      	ldr	r0, [pc, #16]	; (80036f0 <MX_I2C1_Init+0x50>)
 80036de:	f000 febf 	bl	8004460 <HAL_I2C_Init>
 80036e2:	4603      	mov	r3, r0
 80036e4:	2b00      	cmp	r3, #0
 80036e6:	d001      	beq.n	80036ec <MX_I2C1_Init+0x4c>
	{
		Error_Handler();
 80036e8:	f000 f950 	bl	800398c <Error_Handler>
	}
  /* USER CODE BEGIN I2C1_Init 2 */

  /* USER CODE END I2C1_Init 2 */

}
 80036ec:	bf00      	nop
 80036ee:	bd80      	pop	{r7, pc}
 80036f0:	20000328 	.word	0x20000328
 80036f4:	40005400 	.word	0x40005400
 80036f8:	00061a80 	.word	0x00061a80

080036fc <MX_SPI2_Init>:
  * @brief SPI2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_SPI2_Init(void)
{
 80036fc:	b580      	push	{r7, lr}
 80036fe:	af00      	add	r7, sp, #0

	/* USER CODE BEGIN SPI2_Init 1 */

	/* USER CODE END SPI2_Init 1 */
	/* SPI2 parameter configuration*/
	hspi2.Instance = SPI2;
 8003700:	4b17      	ldr	r3, [pc, #92]	; (8003760 <MX_SPI2_Init+0x64>)
 8003702:	4a18      	ldr	r2, [pc, #96]	; (8003764 <MX_SPI2_Init+0x68>)
 8003704:	601a      	str	r2, [r3, #0]
	hspi2.Init.Mode = SPI_MODE_MASTER;
 8003706:	4b16      	ldr	r3, [pc, #88]	; (8003760 <MX_SPI2_Init+0x64>)
 8003708:	f44f 7282 	mov.w	r2, #260	; 0x104
 800370c:	605a      	str	r2, [r3, #4]
	hspi2.Init.Direction = SPI_DIRECTION_2LINES;
 800370e:	4b14      	ldr	r3, [pc, #80]	; (8003760 <MX_SPI2_Init+0x64>)
 8003710:	2200      	movs	r2, #0
 8003712:	609a      	str	r2, [r3, #8]
	hspi2.Init.DataSize = SPI_DATASIZE_8BIT;
 8003714:	4b12      	ldr	r3, [pc, #72]	; (8003760 <MX_SPI2_Init+0x64>)
 8003716:	2200      	movs	r2, #0
 8003718:	60da      	str	r2, [r3, #12]
	hspi2.Init.CLKPolarity = SPI_POLARITY_HIGH;
 800371a:	4b11      	ldr	r3, [pc, #68]	; (8003760 <MX_SPI2_Init+0x64>)
 800371c:	2202      	movs	r2, #2
 800371e:	611a      	str	r2, [r3, #16]
	hspi2.Init.CLKPhase = SPI_PHASE_2EDGE;
 8003720:	4b0f      	ldr	r3, [pc, #60]	; (8003760 <MX_SPI2_Init+0x64>)
 8003722:	2201      	movs	r2, #1
 8003724:	615a      	str	r2, [r3, #20]
	hspi2.Init.NSS = SPI_NSS_SOFT;
 8003726:	4b0e      	ldr	r3, [pc, #56]	; (8003760 <MX_SPI2_Init+0x64>)
 8003728:	f44f 7200 	mov.w	r2, #512	; 0x200
 800372c:	619a      	str	r2, [r3, #24]
	hspi2.Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_16;
 800372e:	4b0c      	ldr	r3, [pc, #48]	; (8003760 <MX_SPI2_Init+0x64>)
 8003730:	2218      	movs	r2, #24
 8003732:	61da      	str	r2, [r3, #28]
	hspi2.Init.FirstBit = SPI_FIRSTBIT_MSB;
 8003734:	4b0a      	ldr	r3, [pc, #40]	; (8003760 <MX_SPI2_Init+0x64>)
 8003736:	2200      	movs	r2, #0
 8003738:	621a      	str	r2, [r3, #32]
	hspi2.Init.TIMode = SPI_TIMODE_DISABLE;
 800373a:	4b09      	ldr	r3, [pc, #36]	; (8003760 <MX_SPI2_Init+0x64>)
 800373c:	2200      	movs	r2, #0
 800373e:	625a      	str	r2, [r3, #36]	; 0x24
	hspi2.Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8003740:	4b07      	ldr	r3, [pc, #28]	; (8003760 <MX_SPI2_Init+0x64>)
 8003742:	2200      	movs	r2, #0
 8003744:	629a      	str	r2, [r3, #40]	; 0x28
	hspi2.Init.CRCPolynomial = 10;
 8003746:	4b06      	ldr	r3, [pc, #24]	; (8003760 <MX_SPI2_Init+0x64>)
 8003748:	220a      	movs	r2, #10
 800374a:	62da      	str	r2, [r3, #44]	; 0x2c
	if (HAL_SPI_Init(&hspi2) != HAL_OK)
 800374c:	4804      	ldr	r0, [pc, #16]	; (8003760 <MX_SPI2_Init+0x64>)
 800374e:	f002 fa91 	bl	8005c74 <HAL_SPI_Init>
 8003752:	4603      	mov	r3, r0
 8003754:	2b00      	cmp	r3, #0
 8003756:	d001      	beq.n	800375c <MX_SPI2_Init+0x60>
	{
		Error_Handler();
 8003758:	f000 f918 	bl	800398c <Error_Handler>
	}
	/* USER CODE BEGIN SPI2_Init 2 */

	/* USER CODE END SPI2_Init 2 */

}
 800375c:	bf00      	nop
 800375e:	bd80      	pop	{r7, pc}
 8003760:	200002c8 	.word	0x200002c8
 8003764:	40003800 	.word	0x40003800

08003768 <MX_TIM2_Init>:
  * @brief TIM2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM2_Init(void)
{
 8003768:	b580      	push	{r7, lr}
 800376a:	b086      	sub	sp, #24
 800376c:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM2_Init 0 */

  /* USER CODE END TIM2_Init 0 */

	TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 800376e:	f107 0308 	add.w	r3, r7, #8
 8003772:	2200      	movs	r2, #0
 8003774:	601a      	str	r2, [r3, #0]
 8003776:	605a      	str	r2, [r3, #4]
 8003778:	609a      	str	r2, [r3, #8]
 800377a:	60da      	str	r2, [r3, #12]
	TIM_MasterConfigTypeDef sMasterConfig = {0};
 800377c:	463b      	mov	r3, r7
 800377e:	2200      	movs	r2, #0
 8003780:	601a      	str	r2, [r3, #0]
 8003782:	605a      	str	r2, [r3, #4]

	/* USER CODE BEGIN TIM2_Init 1 */

	/* USER CODE END TIM2_Init 1 */
	htim2.Instance = TIM2;
 8003784:	4b1e      	ldr	r3, [pc, #120]	; (8003800 <MX_TIM2_Init+0x98>)
 8003786:	f04f 4280 	mov.w	r2, #1073741824	; 0x40000000
 800378a:	601a      	str	r2, [r3, #0]
	htim2.Init.Prescaler = 36000;
 800378c:	4b1c      	ldr	r3, [pc, #112]	; (8003800 <MX_TIM2_Init+0x98>)
 800378e:	f648 42a0 	movw	r2, #36000	; 0x8ca0
 8003792:	605a      	str	r2, [r3, #4]
	htim2.Init.CounterMode = TIM_COUNTERMODE_UP;
 8003794:	4b1a      	ldr	r3, [pc, #104]	; (8003800 <MX_TIM2_Init+0x98>)
 8003796:	2200      	movs	r2, #0
 8003798:	609a      	str	r2, [r3, #8]
	htim2.Init.Period = 65535;
 800379a:	4b19      	ldr	r3, [pc, #100]	; (8003800 <MX_TIM2_Init+0x98>)
 800379c:	f64f 72ff 	movw	r2, #65535	; 0xffff
 80037a0:	60da      	str	r2, [r3, #12]
	htim2.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 80037a2:	4b17      	ldr	r3, [pc, #92]	; (8003800 <MX_TIM2_Init+0x98>)
 80037a4:	2200      	movs	r2, #0
 80037a6:	611a      	str	r2, [r3, #16]
	htim2.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 80037a8:	4b15      	ldr	r3, [pc, #84]	; (8003800 <MX_TIM2_Init+0x98>)
 80037aa:	2200      	movs	r2, #0
 80037ac:	619a      	str	r2, [r3, #24]
	if (HAL_TIM_Base_Init(&htim2) != HAL_OK)
 80037ae:	4814      	ldr	r0, [pc, #80]	; (8003800 <MX_TIM2_Init+0x98>)
 80037b0:	f002 ffcc 	bl	800674c <HAL_TIM_Base_Init>
 80037b4:	4603      	mov	r3, r0
 80037b6:	2b00      	cmp	r3, #0
 80037b8:	d001      	beq.n	80037be <MX_TIM2_Init+0x56>
	{
		Error_Handler();
 80037ba:	f000 f8e7 	bl	800398c <Error_Handler>
	}
	sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 80037be:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 80037c2:	60bb      	str	r3, [r7, #8]
	if (HAL_TIM_ConfigClockSource(&htim2, &sClockSourceConfig) != HAL_OK)
 80037c4:	f107 0308 	add.w	r3, r7, #8
 80037c8:	4619      	mov	r1, r3
 80037ca:	480d      	ldr	r0, [pc, #52]	; (8003800 <MX_TIM2_Init+0x98>)
 80037cc:	f003 f87e 	bl	80068cc <HAL_TIM_ConfigClockSource>
 80037d0:	4603      	mov	r3, r0
 80037d2:	2b00      	cmp	r3, #0
 80037d4:	d001      	beq.n	80037da <MX_TIM2_Init+0x72>
	{
		Error_Handler();
 80037d6:	f000 f8d9 	bl	800398c <Error_Handler>
	}
	sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 80037da:	2300      	movs	r3, #0
 80037dc:	603b      	str	r3, [r7, #0]
	sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 80037de:	2300      	movs	r3, #0
 80037e0:	607b      	str	r3, [r7, #4]
	if (HAL_TIMEx_MasterConfigSynchronization(&htim2, &sMasterConfig) != HAL_OK)
 80037e2:	463b      	mov	r3, r7
 80037e4:	4619      	mov	r1, r3
 80037e6:	4806      	ldr	r0, [pc, #24]	; (8003800 <MX_TIM2_Init+0x98>)
 80037e8:	f003 fa20 	bl	8006c2c <HAL_TIMEx_MasterConfigSynchronization>
 80037ec:	4603      	mov	r3, r0
 80037ee:	2b00      	cmp	r3, #0
 80037f0:	d001      	beq.n	80037f6 <MX_TIM2_Init+0x8e>
	{
		Error_Handler();
 80037f2:	f000 f8cb 	bl	800398c <Error_Handler>
	}
  /* USER CODE BEGIN TIM2_Init 2 */

  /* USER CODE END TIM2_Init 2 */

}
 80037f6:	bf00      	nop
 80037f8:	3718      	adds	r7, #24
 80037fa:	46bd      	mov	sp, r7
 80037fc:	bd80      	pop	{r7, pc}
 80037fe:	bf00      	nop
 8003800:	200003c0 	.word	0x200003c0

08003804 <MX_USART2_UART_Init>:
  * @brief USART2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART2_UART_Init(void)
{
 8003804:	b580      	push	{r7, lr}
 8003806:	af00      	add	r7, sp, #0
  /* USER CODE END USART2_Init 0 */

  /* USER CODE BEGIN USART2_Init 1 */

  /* USER CODE END USART2_Init 1 */
	huart2.Instance = USART2;
 8003808:	4b11      	ldr	r3, [pc, #68]	; (8003850 <MX_USART2_UART_Init+0x4c>)
 800380a:	4a12      	ldr	r2, [pc, #72]	; (8003854 <MX_USART2_UART_Init+0x50>)
 800380c:	601a      	str	r2, [r3, #0]
	huart2.Init.BaudRate = 115200;
 800380e:	4b10      	ldr	r3, [pc, #64]	; (8003850 <MX_USART2_UART_Init+0x4c>)
 8003810:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
 8003814:	605a      	str	r2, [r3, #4]
	huart2.Init.WordLength = UART_WORDLENGTH_8B;
 8003816:	4b0e      	ldr	r3, [pc, #56]	; (8003850 <MX_USART2_UART_Init+0x4c>)
 8003818:	2200      	movs	r2, #0
 800381a:	609a      	str	r2, [r3, #8]
	huart2.Init.StopBits = UART_STOPBITS_1;
 800381c:	4b0c      	ldr	r3, [pc, #48]	; (8003850 <MX_USART2_UART_Init+0x4c>)
 800381e:	2200      	movs	r2, #0
 8003820:	60da      	str	r2, [r3, #12]
	huart2.Init.Parity = UART_PARITY_NONE;
 8003822:	4b0b      	ldr	r3, [pc, #44]	; (8003850 <MX_USART2_UART_Init+0x4c>)
 8003824:	2200      	movs	r2, #0
 8003826:	611a      	str	r2, [r3, #16]
	huart2.Init.Mode = UART_MODE_TX_RX;
 8003828:	4b09      	ldr	r3, [pc, #36]	; (8003850 <MX_USART2_UART_Init+0x4c>)
 800382a:	220c      	movs	r2, #12
 800382c:	615a      	str	r2, [r3, #20]
	huart2.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 800382e:	4b08      	ldr	r3, [pc, #32]	; (8003850 <MX_USART2_UART_Init+0x4c>)
 8003830:	2200      	movs	r2, #0
 8003832:	619a      	str	r2, [r3, #24]
	huart2.Init.OverSampling = UART_OVERSAMPLING_16;
 8003834:	4b06      	ldr	r3, [pc, #24]	; (8003850 <MX_USART2_UART_Init+0x4c>)
 8003836:	2200      	movs	r2, #0
 8003838:	61da      	str	r2, [r3, #28]
	if (HAL_UART_Init(&huart2) != HAL_OK)
 800383a:	4805      	ldr	r0, [pc, #20]	; (8003850 <MX_USART2_UART_Init+0x4c>)
 800383c:	f003 fa54 	bl	8006ce8 <HAL_UART_Init>
 8003840:	4603      	mov	r3, r0
 8003842:	2b00      	cmp	r3, #0
 8003844:	d001      	beq.n	800384a <MX_USART2_UART_Init+0x46>
	{
		Error_Handler();
 8003846:	f000 f8a1 	bl	800398c <Error_Handler>
	}
  /* USER CODE BEGIN USART2_Init 2 */

  /* USER CODE END USART2_Init 2 */

}
 800384a:	bf00      	nop
 800384c:	bd80      	pop	{r7, pc}
 800384e:	bf00      	nop
 8003850:	20000408 	.word	0x20000408
 8003854:	40004400 	.word	0x40004400

08003858 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 8003858:	b580      	push	{r7, lr}
 800385a:	b088      	sub	sp, #32
 800385c:	af00      	add	r7, sp, #0
	GPIO_InitTypeDef GPIO_InitStruct = {0};
 800385e:	f107 0310 	add.w	r3, r7, #16
 8003862:	2200      	movs	r2, #0
 8003864:	601a      	str	r2, [r3, #0]
 8003866:	605a      	str	r2, [r3, #4]
 8003868:	609a      	str	r2, [r3, #8]
 800386a:	60da      	str	r2, [r3, #12]

	/* GPIO Ports Clock Enable */
	__HAL_RCC_GPIOC_CLK_ENABLE();
 800386c:	4b42      	ldr	r3, [pc, #264]	; (8003978 <MX_GPIO_Init+0x120>)
 800386e:	699b      	ldr	r3, [r3, #24]
 8003870:	4a41      	ldr	r2, [pc, #260]	; (8003978 <MX_GPIO_Init+0x120>)
 8003872:	f043 0310 	orr.w	r3, r3, #16
 8003876:	6193      	str	r3, [r2, #24]
 8003878:	4b3f      	ldr	r3, [pc, #252]	; (8003978 <MX_GPIO_Init+0x120>)
 800387a:	699b      	ldr	r3, [r3, #24]
 800387c:	f003 0310 	and.w	r3, r3, #16
 8003880:	60fb      	str	r3, [r7, #12]
 8003882:	68fb      	ldr	r3, [r7, #12]
	__HAL_RCC_GPIOD_CLK_ENABLE();
 8003884:	4b3c      	ldr	r3, [pc, #240]	; (8003978 <MX_GPIO_Init+0x120>)
 8003886:	699b      	ldr	r3, [r3, #24]
 8003888:	4a3b      	ldr	r2, [pc, #236]	; (8003978 <MX_GPIO_Init+0x120>)
 800388a:	f043 0320 	orr.w	r3, r3, #32
 800388e:	6193      	str	r3, [r2, #24]
 8003890:	4b39      	ldr	r3, [pc, #228]	; (8003978 <MX_GPIO_Init+0x120>)
 8003892:	699b      	ldr	r3, [r3, #24]
 8003894:	f003 0320 	and.w	r3, r3, #32
 8003898:	60bb      	str	r3, [r7, #8]
 800389a:	68bb      	ldr	r3, [r7, #8]
	__HAL_RCC_GPIOA_CLK_ENABLE();
 800389c:	4b36      	ldr	r3, [pc, #216]	; (8003978 <MX_GPIO_Init+0x120>)
 800389e:	699b      	ldr	r3, [r3, #24]
 80038a0:	4a35      	ldr	r2, [pc, #212]	; (8003978 <MX_GPIO_Init+0x120>)
 80038a2:	f043 0304 	orr.w	r3, r3, #4
 80038a6:	6193      	str	r3, [r2, #24]
 80038a8:	4b33      	ldr	r3, [pc, #204]	; (8003978 <MX_GPIO_Init+0x120>)
 80038aa:	699b      	ldr	r3, [r3, #24]
 80038ac:	f003 0304 	and.w	r3, r3, #4
 80038b0:	607b      	str	r3, [r7, #4]
 80038b2:	687b      	ldr	r3, [r7, #4]
	__HAL_RCC_GPIOB_CLK_ENABLE();
 80038b4:	4b30      	ldr	r3, [pc, #192]	; (8003978 <MX_GPIO_Init+0x120>)
 80038b6:	699b      	ldr	r3, [r3, #24]
 80038b8:	4a2f      	ldr	r2, [pc, #188]	; (8003978 <MX_GPIO_Init+0x120>)
 80038ba:	f043 0308 	orr.w	r3, r3, #8
 80038be:	6193      	str	r3, [r2, #24]
 80038c0:	4b2d      	ldr	r3, [pc, #180]	; (8003978 <MX_GPIO_Init+0x120>)
 80038c2:	699b      	ldr	r3, [r3, #24]
 80038c4:	f003 0308 	and.w	r3, r3, #8
 80038c8:	603b      	str	r3, [r7, #0]
 80038ca:	683b      	ldr	r3, [r7, #0]

	/*Configure GPIO pin Output Level */
	HAL_GPIO_WritePin(GPIOC, GPIO_PIN_13, GPIO_PIN_RESET);
 80038cc:	2200      	movs	r2, #0
 80038ce:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 80038d2:	482a      	ldr	r0, [pc, #168]	; (800397c <MX_GPIO_Init+0x124>)
 80038d4:	f000 fd8a 	bl	80043ec <HAL_GPIO_WritePin>

	/*Configure GPIO pin Output Level */
	HAL_GPIO_WritePin(GPIOA, GPIO_PIN_5|GPIO_PIN_7, GPIO_PIN_RESET);
 80038d8:	2200      	movs	r2, #0
 80038da:	21a0      	movs	r1, #160	; 0xa0
 80038dc:	4828      	ldr	r0, [pc, #160]	; (8003980 <MX_GPIO_Init+0x128>)
 80038de:	f000 fd85 	bl	80043ec <HAL_GPIO_WritePin>

	/*Configure GPIO pin Output Level */
	HAL_GPIO_WritePin(GPIOB, GPIO_PIN_9, GPIO_PIN_RESET);
 80038e2:	2200      	movs	r2, #0
 80038e4:	f44f 7100 	mov.w	r1, #512	; 0x200
 80038e8:	4826      	ldr	r0, [pc, #152]	; (8003984 <MX_GPIO_Init+0x12c>)
 80038ea:	f000 fd7f 	bl	80043ec <HAL_GPIO_WritePin>

	/*Configure GPIO pin : PC13 */
	GPIO_InitStruct.Pin = GPIO_PIN_13;
 80038ee:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 80038f2:	613b      	str	r3, [r7, #16]
	GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80038f4:	2301      	movs	r3, #1
 80038f6:	617b      	str	r3, [r7, #20]
	GPIO_InitStruct.Pull = GPIO_NOPULL;
 80038f8:	2300      	movs	r3, #0
 80038fa:	61bb      	str	r3, [r7, #24]
	GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80038fc:	2302      	movs	r3, #2
 80038fe:	61fb      	str	r3, [r7, #28]
	HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8003900:	f107 0310 	add.w	r3, r7, #16
 8003904:	4619      	mov	r1, r3
 8003906:	481d      	ldr	r0, [pc, #116]	; (800397c <MX_GPIO_Init+0x124>)
 8003908:	f000 fc16 	bl	8004138 <HAL_GPIO_Init>

	/*Configure GPIO pin : PA1 */
	GPIO_InitStruct.Pin = GPIO_PIN_1;
 800390c:	2302      	movs	r3, #2
 800390e:	613b      	str	r3, [r7, #16]
	GPIO_InitStruct.Mode = GPIO_MODE_IT_RISING;
 8003910:	4b1d      	ldr	r3, [pc, #116]	; (8003988 <MX_GPIO_Init+0x130>)
 8003912:	617b      	str	r3, [r7, #20]
	GPIO_InitStruct.Pull = GPIO_PULLUP;
 8003914:	2301      	movs	r3, #1
 8003916:	61bb      	str	r3, [r7, #24]
	HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8003918:	f107 0310 	add.w	r3, r7, #16
 800391c:	4619      	mov	r1, r3
 800391e:	4818      	ldr	r0, [pc, #96]	; (8003980 <MX_GPIO_Init+0x128>)
 8003920:	f000 fc0a 	bl	8004138 <HAL_GPIO_Init>

	/*Configure GPIO pins : PA5 PA7 */
	GPIO_InitStruct.Pin = GPIO_PIN_5|GPIO_PIN_7;
 8003924:	23a0      	movs	r3, #160	; 0xa0
 8003926:	613b      	str	r3, [r7, #16]
	GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8003928:	2301      	movs	r3, #1
 800392a:	617b      	str	r3, [r7, #20]
	GPIO_InitStruct.Pull = GPIO_NOPULL;
 800392c:	2300      	movs	r3, #0
 800392e:	61bb      	str	r3, [r7, #24]
	GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8003930:	2302      	movs	r3, #2
 8003932:	61fb      	str	r3, [r7, #28]
	HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8003934:	f107 0310 	add.w	r3, r7, #16
 8003938:	4619      	mov	r1, r3
 800393a:	4811      	ldr	r0, [pc, #68]	; (8003980 <MX_GPIO_Init+0x128>)
 800393c:	f000 fbfc 	bl	8004138 <HAL_GPIO_Init>

	/*Configure GPIO pin : PB9 */
	GPIO_InitStruct.Pin = GPIO_PIN_9;
 8003940:	f44f 7300 	mov.w	r3, #512	; 0x200
 8003944:	613b      	str	r3, [r7, #16]
	GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8003946:	2301      	movs	r3, #1
 8003948:	617b      	str	r3, [r7, #20]
	GPIO_InitStruct.Pull = GPIO_NOPULL;
 800394a:	2300      	movs	r3, #0
 800394c:	61bb      	str	r3, [r7, #24]
	GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800394e:	2302      	movs	r3, #2
 8003950:	61fb      	str	r3, [r7, #28]
	HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8003952:	f107 0310 	add.w	r3, r7, #16
 8003956:	4619      	mov	r1, r3
 8003958:	480a      	ldr	r0, [pc, #40]	; (8003984 <MX_GPIO_Init+0x12c>)
 800395a:	f000 fbed 	bl	8004138 <HAL_GPIO_Init>

	/* EXTI interrupt init*/
	HAL_NVIC_SetPriority(EXTI1_IRQn, 0, 0);
 800395e:	2200      	movs	r2, #0
 8003960:	2100      	movs	r1, #0
 8003962:	2007      	movs	r0, #7
 8003964:	f000 fb3b 	bl	8003fde <HAL_NVIC_SetPriority>
	HAL_NVIC_EnableIRQ(EXTI1_IRQn);
 8003968:	2007      	movs	r0, #7
 800396a:	f000 fb54 	bl	8004016 <HAL_NVIC_EnableIRQ>

}
 800396e:	bf00      	nop
 8003970:	3720      	adds	r7, #32
 8003972:	46bd      	mov	sp, r7
 8003974:	bd80      	pop	{r7, pc}
 8003976:	bf00      	nop
 8003978:	40021000 	.word	0x40021000
 800397c:	40011000 	.word	0x40011000
 8003980:	40010800 	.word	0x40010800
 8003984:	40010c00 	.word	0x40010c00
 8003988:	10110000 	.word	0x10110000

0800398c <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 800398c:	b480      	push	{r7}
 800398e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */

  /* USER CODE END Error_Handler_Debug */
}
 8003990:	bf00      	nop
 8003992:	46bd      	mov	sp, r7
 8003994:	bc80      	pop	{r7}
 8003996:	4770      	bx	lr

08003998 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8003998:	b480      	push	{r7}
 800399a:	b085      	sub	sp, #20
 800399c:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_AFIO_CLK_ENABLE();
 800399e:	4b15      	ldr	r3, [pc, #84]	; (80039f4 <HAL_MspInit+0x5c>)
 80039a0:	699b      	ldr	r3, [r3, #24]
 80039a2:	4a14      	ldr	r2, [pc, #80]	; (80039f4 <HAL_MspInit+0x5c>)
 80039a4:	f043 0301 	orr.w	r3, r3, #1
 80039a8:	6193      	str	r3, [r2, #24]
 80039aa:	4b12      	ldr	r3, [pc, #72]	; (80039f4 <HAL_MspInit+0x5c>)
 80039ac:	699b      	ldr	r3, [r3, #24]
 80039ae:	f003 0301 	and.w	r3, r3, #1
 80039b2:	60bb      	str	r3, [r7, #8]
 80039b4:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_PWR_CLK_ENABLE();
 80039b6:	4b0f      	ldr	r3, [pc, #60]	; (80039f4 <HAL_MspInit+0x5c>)
 80039b8:	69db      	ldr	r3, [r3, #28]
 80039ba:	4a0e      	ldr	r2, [pc, #56]	; (80039f4 <HAL_MspInit+0x5c>)
 80039bc:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80039c0:	61d3      	str	r3, [r2, #28]
 80039c2:	4b0c      	ldr	r3, [pc, #48]	; (80039f4 <HAL_MspInit+0x5c>)
 80039c4:	69db      	ldr	r3, [r3, #28]
 80039c6:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80039ca:	607b      	str	r3, [r7, #4]
 80039cc:	687b      	ldr	r3, [r7, #4]

  /* System interrupt init*/

  /** NOJTAG: JTAG-DP Disabled and SW-DP Enabled
  */
  __HAL_AFIO_REMAP_SWJ_NOJTAG();
 80039ce:	4b0a      	ldr	r3, [pc, #40]	; (80039f8 <HAL_MspInit+0x60>)
 80039d0:	685b      	ldr	r3, [r3, #4]
 80039d2:	60fb      	str	r3, [r7, #12]
 80039d4:	68fb      	ldr	r3, [r7, #12]
 80039d6:	f023 63e0 	bic.w	r3, r3, #117440512	; 0x7000000
 80039da:	60fb      	str	r3, [r7, #12]
 80039dc:	68fb      	ldr	r3, [r7, #12]
 80039de:	f043 7300 	orr.w	r3, r3, #33554432	; 0x2000000
 80039e2:	60fb      	str	r3, [r7, #12]
 80039e4:	4a04      	ldr	r2, [pc, #16]	; (80039f8 <HAL_MspInit+0x60>)
 80039e6:	68fb      	ldr	r3, [r7, #12]
 80039e8:	6053      	str	r3, [r2, #4]

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 80039ea:	bf00      	nop
 80039ec:	3714      	adds	r7, #20
 80039ee:	46bd      	mov	sp, r7
 80039f0:	bc80      	pop	{r7}
 80039f2:	4770      	bx	lr
 80039f4:	40021000 	.word	0x40021000
 80039f8:	40010000 	.word	0x40010000

080039fc <HAL_I2C_MspInit>:
* This function configures the hardware resources used in this example
* @param hi2c: I2C handle pointer
* @retval None
*/
void HAL_I2C_MspInit(I2C_HandleTypeDef* hi2c)
{
 80039fc:	b580      	push	{r7, lr}
 80039fe:	b088      	sub	sp, #32
 8003a00:	af00      	add	r7, sp, #0
 8003a02:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8003a04:	f107 0310 	add.w	r3, r7, #16
 8003a08:	2200      	movs	r2, #0
 8003a0a:	601a      	str	r2, [r3, #0]
 8003a0c:	605a      	str	r2, [r3, #4]
 8003a0e:	609a      	str	r2, [r3, #8]
 8003a10:	60da      	str	r2, [r3, #12]
  if(hi2c->Instance==I2C1)
 8003a12:	687b      	ldr	r3, [r7, #4]
 8003a14:	681b      	ldr	r3, [r3, #0]
 8003a16:	4a15      	ldr	r2, [pc, #84]	; (8003a6c <HAL_I2C_MspInit+0x70>)
 8003a18:	4293      	cmp	r3, r2
 8003a1a:	d123      	bne.n	8003a64 <HAL_I2C_MspInit+0x68>
  {
  /* USER CODE BEGIN I2C1_MspInit 0 */

  /* USER CODE END I2C1_MspInit 0 */

    __HAL_RCC_GPIOB_CLK_ENABLE();
 8003a1c:	4b14      	ldr	r3, [pc, #80]	; (8003a70 <HAL_I2C_MspInit+0x74>)
 8003a1e:	699b      	ldr	r3, [r3, #24]
 8003a20:	4a13      	ldr	r2, [pc, #76]	; (8003a70 <HAL_I2C_MspInit+0x74>)
 8003a22:	f043 0308 	orr.w	r3, r3, #8
 8003a26:	6193      	str	r3, [r2, #24]
 8003a28:	4b11      	ldr	r3, [pc, #68]	; (8003a70 <HAL_I2C_MspInit+0x74>)
 8003a2a:	699b      	ldr	r3, [r3, #24]
 8003a2c:	f003 0308 	and.w	r3, r3, #8
 8003a30:	60fb      	str	r3, [r7, #12]
 8003a32:	68fb      	ldr	r3, [r7, #12]
    /**I2C1 GPIO Configuration
    PB6     ------> I2C1_SCL
    PB7     ------> I2C1_SDA
    */
    GPIO_InitStruct.Pin = GPIO_PIN_6|GPIO_PIN_7;
 8003a34:	23c0      	movs	r3, #192	; 0xc0
 8003a36:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 8003a38:	2312      	movs	r3, #18
 8003a3a:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 8003a3c:	2303      	movs	r3, #3
 8003a3e:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8003a40:	f107 0310 	add.w	r3, r7, #16
 8003a44:	4619      	mov	r1, r3
 8003a46:	480b      	ldr	r0, [pc, #44]	; (8003a74 <HAL_I2C_MspInit+0x78>)
 8003a48:	f000 fb76 	bl	8004138 <HAL_GPIO_Init>

    /* Peripheral clock enable */
    __HAL_RCC_I2C1_CLK_ENABLE();
 8003a4c:	4b08      	ldr	r3, [pc, #32]	; (8003a70 <HAL_I2C_MspInit+0x74>)
 8003a4e:	69db      	ldr	r3, [r3, #28]
 8003a50:	4a07      	ldr	r2, [pc, #28]	; (8003a70 <HAL_I2C_MspInit+0x74>)
 8003a52:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 8003a56:	61d3      	str	r3, [r2, #28]
 8003a58:	4b05      	ldr	r3, [pc, #20]	; (8003a70 <HAL_I2C_MspInit+0x74>)
 8003a5a:	69db      	ldr	r3, [r3, #28]
 8003a5c:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8003a60:	60bb      	str	r3, [r7, #8]
 8003a62:	68bb      	ldr	r3, [r7, #8]
  /* USER CODE BEGIN I2C1_MspInit 1 */

  /* USER CODE END I2C1_MspInit 1 */
  }

}
 8003a64:	bf00      	nop
 8003a66:	3720      	adds	r7, #32
 8003a68:	46bd      	mov	sp, r7
 8003a6a:	bd80      	pop	{r7, pc}
 8003a6c:	40005400 	.word	0x40005400
 8003a70:	40021000 	.word	0x40021000
 8003a74:	40010c00 	.word	0x40010c00

08003a78 <HAL_SPI_MspInit>:
* This function configures the hardware resources used in this example
* @param hspi: SPI handle pointer
* @retval None
*/
void HAL_SPI_MspInit(SPI_HandleTypeDef* hspi)
{
 8003a78:	b580      	push	{r7, lr}
 8003a7a:	b088      	sub	sp, #32
 8003a7c:	af00      	add	r7, sp, #0
 8003a7e:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8003a80:	f107 0310 	add.w	r3, r7, #16
 8003a84:	2200      	movs	r2, #0
 8003a86:	601a      	str	r2, [r3, #0]
 8003a88:	605a      	str	r2, [r3, #4]
 8003a8a:	609a      	str	r2, [r3, #8]
 8003a8c:	60da      	str	r2, [r3, #12]
  if(hspi->Instance==SPI2)
 8003a8e:	687b      	ldr	r3, [r7, #4]
 8003a90:	681b      	ldr	r3, [r3, #0]
 8003a92:	4a1c      	ldr	r2, [pc, #112]	; (8003b04 <HAL_SPI_MspInit+0x8c>)
 8003a94:	4293      	cmp	r3, r2
 8003a96:	d131      	bne.n	8003afc <HAL_SPI_MspInit+0x84>
  {
  /* USER CODE BEGIN SPI2_MspInit 0 */

  /* USER CODE END SPI2_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_SPI2_CLK_ENABLE();
 8003a98:	4b1b      	ldr	r3, [pc, #108]	; (8003b08 <HAL_SPI_MspInit+0x90>)
 8003a9a:	69db      	ldr	r3, [r3, #28]
 8003a9c:	4a1a      	ldr	r2, [pc, #104]	; (8003b08 <HAL_SPI_MspInit+0x90>)
 8003a9e:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8003aa2:	61d3      	str	r3, [r2, #28]
 8003aa4:	4b18      	ldr	r3, [pc, #96]	; (8003b08 <HAL_SPI_MspInit+0x90>)
 8003aa6:	69db      	ldr	r3, [r3, #28]
 8003aa8:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8003aac:	60fb      	str	r3, [r7, #12]
 8003aae:	68fb      	ldr	r3, [r7, #12]

    __HAL_RCC_GPIOB_CLK_ENABLE();
 8003ab0:	4b15      	ldr	r3, [pc, #84]	; (8003b08 <HAL_SPI_MspInit+0x90>)
 8003ab2:	699b      	ldr	r3, [r3, #24]
 8003ab4:	4a14      	ldr	r2, [pc, #80]	; (8003b08 <HAL_SPI_MspInit+0x90>)
 8003ab6:	f043 0308 	orr.w	r3, r3, #8
 8003aba:	6193      	str	r3, [r2, #24]
 8003abc:	4b12      	ldr	r3, [pc, #72]	; (8003b08 <HAL_SPI_MspInit+0x90>)
 8003abe:	699b      	ldr	r3, [r3, #24]
 8003ac0:	f003 0308 	and.w	r3, r3, #8
 8003ac4:	60bb      	str	r3, [r7, #8]
 8003ac6:	68bb      	ldr	r3, [r7, #8]
    /**SPI2 GPIO Configuration
    PB13     ------> SPI2_SCK
    PB14     ------> SPI2_MISO
    PB15     ------> SPI2_MOSI
    */
    GPIO_InitStruct.Pin = GPIO_PIN_13|GPIO_PIN_15;
 8003ac8:	f44f 4320 	mov.w	r3, #40960	; 0xa000
 8003acc:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8003ace:	2302      	movs	r3, #2
 8003ad0:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 8003ad2:	2303      	movs	r3, #3
 8003ad4:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8003ad6:	f107 0310 	add.w	r3, r7, #16
 8003ada:	4619      	mov	r1, r3
 8003adc:	480b      	ldr	r0, [pc, #44]	; (8003b0c <HAL_SPI_MspInit+0x94>)
 8003ade:	f000 fb2b 	bl	8004138 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_14;
 8003ae2:	f44f 4380 	mov.w	r3, #16384	; 0x4000
 8003ae6:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8003ae8:	2300      	movs	r3, #0
 8003aea:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8003aec:	2300      	movs	r3, #0
 8003aee:	61bb      	str	r3, [r7, #24]
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8003af0:	f107 0310 	add.w	r3, r7, #16
 8003af4:	4619      	mov	r1, r3
 8003af6:	4805      	ldr	r0, [pc, #20]	; (8003b0c <HAL_SPI_MspInit+0x94>)
 8003af8:	f000 fb1e 	bl	8004138 <HAL_GPIO_Init>
  /* USER CODE BEGIN SPI2_MspInit 1 */

  /* USER CODE END SPI2_MspInit 1 */
  }

}
 8003afc:	bf00      	nop
 8003afe:	3720      	adds	r7, #32
 8003b00:	46bd      	mov	sp, r7
 8003b02:	bd80      	pop	{r7, pc}
 8003b04:	40003800 	.word	0x40003800
 8003b08:	40021000 	.word	0x40021000
 8003b0c:	40010c00 	.word	0x40010c00

08003b10 <HAL_TIM_Base_MspInit>:
* This function configures the hardware resources used in this example
* @param htim_base: TIM_Base handle pointer
* @retval None
*/
void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* htim_base)
{
 8003b10:	b480      	push	{r7}
 8003b12:	b085      	sub	sp, #20
 8003b14:	af00      	add	r7, sp, #0
 8003b16:	6078      	str	r0, [r7, #4]
  if(htim_base->Instance==TIM2)
 8003b18:	687b      	ldr	r3, [r7, #4]
 8003b1a:	681b      	ldr	r3, [r3, #0]
 8003b1c:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8003b20:	d10b      	bne.n	8003b3a <HAL_TIM_Base_MspInit+0x2a>
  {
  /* USER CODE BEGIN TIM2_MspInit 0 */

  /* USER CODE END TIM2_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM2_CLK_ENABLE();
 8003b22:	4b08      	ldr	r3, [pc, #32]	; (8003b44 <HAL_TIM_Base_MspInit+0x34>)
 8003b24:	69db      	ldr	r3, [r3, #28]
 8003b26:	4a07      	ldr	r2, [pc, #28]	; (8003b44 <HAL_TIM_Base_MspInit+0x34>)
 8003b28:	f043 0301 	orr.w	r3, r3, #1
 8003b2c:	61d3      	str	r3, [r2, #28]
 8003b2e:	4b05      	ldr	r3, [pc, #20]	; (8003b44 <HAL_TIM_Base_MspInit+0x34>)
 8003b30:	69db      	ldr	r3, [r3, #28]
 8003b32:	f003 0301 	and.w	r3, r3, #1
 8003b36:	60fb      	str	r3, [r7, #12]
 8003b38:	68fb      	ldr	r3, [r7, #12]
  /* USER CODE BEGIN TIM2_MspInit 1 */

  /* USER CODE END TIM2_MspInit 1 */
  }

}
 8003b3a:	bf00      	nop
 8003b3c:	3714      	adds	r7, #20
 8003b3e:	46bd      	mov	sp, r7
 8003b40:	bc80      	pop	{r7}
 8003b42:	4770      	bx	lr
 8003b44:	40021000 	.word	0x40021000

08003b48 <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 8003b48:	b580      	push	{r7, lr}
 8003b4a:	b088      	sub	sp, #32
 8003b4c:	af00      	add	r7, sp, #0
 8003b4e:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8003b50:	f107 0310 	add.w	r3, r7, #16
 8003b54:	2200      	movs	r2, #0
 8003b56:	601a      	str	r2, [r3, #0]
 8003b58:	605a      	str	r2, [r3, #4]
 8003b5a:	609a      	str	r2, [r3, #8]
 8003b5c:	60da      	str	r2, [r3, #12]
  if(huart->Instance==USART2)
 8003b5e:	687b      	ldr	r3, [r7, #4]
 8003b60:	681b      	ldr	r3, [r3, #0]
 8003b62:	4a1f      	ldr	r2, [pc, #124]	; (8003be0 <HAL_UART_MspInit+0x98>)
 8003b64:	4293      	cmp	r3, r2
 8003b66:	d137      	bne.n	8003bd8 <HAL_UART_MspInit+0x90>
  {
  /* USER CODE BEGIN USART2_MspInit 0 */

  /* USER CODE END USART2_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_USART2_CLK_ENABLE();
 8003b68:	4b1e      	ldr	r3, [pc, #120]	; (8003be4 <HAL_UART_MspInit+0x9c>)
 8003b6a:	69db      	ldr	r3, [r3, #28]
 8003b6c:	4a1d      	ldr	r2, [pc, #116]	; (8003be4 <HAL_UART_MspInit+0x9c>)
 8003b6e:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8003b72:	61d3      	str	r3, [r2, #28]
 8003b74:	4b1b      	ldr	r3, [pc, #108]	; (8003be4 <HAL_UART_MspInit+0x9c>)
 8003b76:	69db      	ldr	r3, [r3, #28]
 8003b78:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8003b7c:	60fb      	str	r3, [r7, #12]
 8003b7e:	68fb      	ldr	r3, [r7, #12]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8003b80:	4b18      	ldr	r3, [pc, #96]	; (8003be4 <HAL_UART_MspInit+0x9c>)
 8003b82:	699b      	ldr	r3, [r3, #24]
 8003b84:	4a17      	ldr	r2, [pc, #92]	; (8003be4 <HAL_UART_MspInit+0x9c>)
 8003b86:	f043 0304 	orr.w	r3, r3, #4
 8003b8a:	6193      	str	r3, [r2, #24]
 8003b8c:	4b15      	ldr	r3, [pc, #84]	; (8003be4 <HAL_UART_MspInit+0x9c>)
 8003b8e:	699b      	ldr	r3, [r3, #24]
 8003b90:	f003 0304 	and.w	r3, r3, #4
 8003b94:	60bb      	str	r3, [r7, #8]
 8003b96:	68bb      	ldr	r3, [r7, #8]
    /**USART2 GPIO Configuration
    PA2     ------> USART2_TX
    PA3     ------> USART2_RX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_2;
 8003b98:	2304      	movs	r3, #4
 8003b9a:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8003b9c:	2302      	movs	r3, #2
 8003b9e:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 8003ba0:	2303      	movs	r3, #3
 8003ba2:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8003ba4:	f107 0310 	add.w	r3, r7, #16
 8003ba8:	4619      	mov	r1, r3
 8003baa:	480f      	ldr	r0, [pc, #60]	; (8003be8 <HAL_UART_MspInit+0xa0>)
 8003bac:	f000 fac4 	bl	8004138 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_3;
 8003bb0:	2308      	movs	r3, #8
 8003bb2:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8003bb4:	2300      	movs	r3, #0
 8003bb6:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8003bb8:	2300      	movs	r3, #0
 8003bba:	61bb      	str	r3, [r7, #24]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8003bbc:	f107 0310 	add.w	r3, r7, #16
 8003bc0:	4619      	mov	r1, r3
 8003bc2:	4809      	ldr	r0, [pc, #36]	; (8003be8 <HAL_UART_MspInit+0xa0>)
 8003bc4:	f000 fab8 	bl	8004138 <HAL_GPIO_Init>

    /* USART2 interrupt Init */
    HAL_NVIC_SetPriority(USART2_IRQn, 0, 0);
 8003bc8:	2200      	movs	r2, #0
 8003bca:	2100      	movs	r1, #0
 8003bcc:	2026      	movs	r0, #38	; 0x26
 8003bce:	f000 fa06 	bl	8003fde <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(USART2_IRQn);
 8003bd2:	2026      	movs	r0, #38	; 0x26
 8003bd4:	f000 fa1f 	bl	8004016 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN USART2_MspInit 1 */

  /* USER CODE END USART2_MspInit 1 */
  }

}
 8003bd8:	bf00      	nop
 8003bda:	3720      	adds	r7, #32
 8003bdc:	46bd      	mov	sp, r7
 8003bde:	bd80      	pop	{r7, pc}
 8003be0:	40004400 	.word	0x40004400
 8003be4:	40021000 	.word	0x40021000
 8003be8:	40010800 	.word	0x40010800

08003bec <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8003bec:	b480      	push	{r7}
 8003bee:	af00      	add	r7, sp, #0

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */

  /* USER CODE END NonMaskableInt_IRQn 1 */
}
 8003bf0:	bf00      	nop
 8003bf2:	46bd      	mov	sp, r7
 8003bf4:	bc80      	pop	{r7}
 8003bf6:	4770      	bx	lr

08003bf8 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8003bf8:	b480      	push	{r7}
 8003bfa:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8003bfc:	e7fe      	b.n	8003bfc <HardFault_Handler+0x4>

08003bfe <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8003bfe:	b480      	push	{r7}
 8003c00:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8003c02:	e7fe      	b.n	8003c02 <MemManage_Handler+0x4>

08003c04 <BusFault_Handler>:

/**
  * @brief This function handles Prefetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8003c04:	b480      	push	{r7}
 8003c06:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8003c08:	e7fe      	b.n	8003c08 <BusFault_Handler+0x4>

08003c0a <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8003c0a:	b480      	push	{r7}
 8003c0c:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8003c0e:	e7fe      	b.n	8003c0e <UsageFault_Handler+0x4>

08003c10 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8003c10:	b480      	push	{r7}
 8003c12:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 8003c14:	bf00      	nop
 8003c16:	46bd      	mov	sp, r7
 8003c18:	bc80      	pop	{r7}
 8003c1a:	4770      	bx	lr

08003c1c <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8003c1c:	b480      	push	{r7}
 8003c1e:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8003c20:	bf00      	nop
 8003c22:	46bd      	mov	sp, r7
 8003c24:	bc80      	pop	{r7}
 8003c26:	4770      	bx	lr

08003c28 <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8003c28:	b480      	push	{r7}
 8003c2a:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8003c2c:	bf00      	nop
 8003c2e:	46bd      	mov	sp, r7
 8003c30:	bc80      	pop	{r7}
 8003c32:	4770      	bx	lr

08003c34 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8003c34:	b580      	push	{r7, lr}
 8003c36:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8003c38:	f000 f8bc 	bl	8003db4 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8003c3c:	bf00      	nop
 8003c3e:	bd80      	pop	{r7, pc}

08003c40 <EXTI1_IRQHandler>:

/**
  * @brief This function handles EXTI line1 interrupt.
  */
void EXTI1_IRQHandler(void)
{
 8003c40:	b580      	push	{r7, lr}
 8003c42:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN EXTI1_IRQn 0 */

  /* USER CODE END EXTI1_IRQn 0 */
  HAL_GPIO_EXTI_IRQHandler(GPIO_PIN_1);
 8003c44:	2002      	movs	r0, #2
 8003c46:	f000 fbe9 	bl	800441c <HAL_GPIO_EXTI_IRQHandler>
  /* USER CODE BEGIN EXTI1_IRQn 1 */

  /* USER CODE END EXTI1_IRQn 1 */
}
 8003c4a:	bf00      	nop
 8003c4c:	bd80      	pop	{r7, pc}
	...

08003c50 <USART2_IRQHandler>:

/**
  * @brief This function handles USART2 global interrupt.
  */
void USART2_IRQHandler(void)
{
 8003c50:	b580      	push	{r7, lr}
 8003c52:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USART2_IRQn 0 */

  /* USER CODE END USART2_IRQn 0 */
  HAL_UART_IRQHandler(&huart2);
 8003c54:	4802      	ldr	r0, [pc, #8]	; (8003c60 <USART2_IRQHandler+0x10>)
 8003c56:	f003 f927 	bl	8006ea8 <HAL_UART_IRQHandler>
  /* USER CODE BEGIN USART2_IRQn 1 */

  /* USER CODE END USART2_IRQn 1 */
}
 8003c5a:	bf00      	nop
 8003c5c:	bd80      	pop	{r7, pc}
 8003c5e:	bf00      	nop
 8003c60:	20000408 	.word	0x20000408

08003c64 <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 8003c64:	b580      	push	{r7, lr}
 8003c66:	b086      	sub	sp, #24
 8003c68:	af00      	add	r7, sp, #0
 8003c6a:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 8003c6c:	4a14      	ldr	r2, [pc, #80]	; (8003cc0 <_sbrk+0x5c>)
 8003c6e:	4b15      	ldr	r3, [pc, #84]	; (8003cc4 <_sbrk+0x60>)
 8003c70:	1ad3      	subs	r3, r2, r3
 8003c72:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 8003c74:	697b      	ldr	r3, [r7, #20]
 8003c76:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initalize heap end at first call */
  if (NULL == __sbrk_heap_end)
 8003c78:	4b13      	ldr	r3, [pc, #76]	; (8003cc8 <_sbrk+0x64>)
 8003c7a:	681b      	ldr	r3, [r3, #0]
 8003c7c:	2b00      	cmp	r3, #0
 8003c7e:	d102      	bne.n	8003c86 <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 8003c80:	4b11      	ldr	r3, [pc, #68]	; (8003cc8 <_sbrk+0x64>)
 8003c82:	4a12      	ldr	r2, [pc, #72]	; (8003ccc <_sbrk+0x68>)
 8003c84:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 8003c86:	4b10      	ldr	r3, [pc, #64]	; (8003cc8 <_sbrk+0x64>)
 8003c88:	681a      	ldr	r2, [r3, #0]
 8003c8a:	687b      	ldr	r3, [r7, #4]
 8003c8c:	4413      	add	r3, r2
 8003c8e:	693a      	ldr	r2, [r7, #16]
 8003c90:	429a      	cmp	r2, r3
 8003c92:	d207      	bcs.n	8003ca4 <_sbrk+0x40>
  {
    errno = ENOMEM;
 8003c94:	f003 fc14 	bl	80074c0 <__errno>
 8003c98:	4602      	mov	r2, r0
 8003c9a:	230c      	movs	r3, #12
 8003c9c:	6013      	str	r3, [r2, #0]
    return (void *)-1;
 8003c9e:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 8003ca2:	e009      	b.n	8003cb8 <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 8003ca4:	4b08      	ldr	r3, [pc, #32]	; (8003cc8 <_sbrk+0x64>)
 8003ca6:	681b      	ldr	r3, [r3, #0]
 8003ca8:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 8003caa:	4b07      	ldr	r3, [pc, #28]	; (8003cc8 <_sbrk+0x64>)
 8003cac:	681a      	ldr	r2, [r3, #0]
 8003cae:	687b      	ldr	r3, [r7, #4]
 8003cb0:	4413      	add	r3, r2
 8003cb2:	4a05      	ldr	r2, [pc, #20]	; (8003cc8 <_sbrk+0x64>)
 8003cb4:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 8003cb6:	68fb      	ldr	r3, [r7, #12]
}
 8003cb8:	4618      	mov	r0, r3
 8003cba:	3718      	adds	r7, #24
 8003cbc:	46bd      	mov	sp, r7
 8003cbe:	bd80      	pop	{r7, pc}
 8003cc0:	20005000 	.word	0x20005000
 8003cc4:	00000400 	.word	0x00000400
 8003cc8:	20000298 	.word	0x20000298
 8003ccc:	20000498 	.word	0x20000498

08003cd0 <SystemInit>:
  * @note   This function should be used only after reset.
  * @param  None
  * @retval None
  */
void SystemInit (void)
{
 8003cd0:	b480      	push	{r7}
 8003cd2:	af00      	add	r7, sp, #0

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM. */
#endif /* USER_VECT_TAB_ADDRESS */
}
 8003cd4:	bf00      	nop
 8003cd6:	46bd      	mov	sp, r7
 8003cd8:	bc80      	pop	{r7}
 8003cda:	4770      	bx	lr

08003cdc <Reset_Handler>:
 8003cdc:	2100      	movs	r1, #0
 8003cde:	e003      	b.n	8003ce8 <LoopCopyDataInit>

08003ce0 <CopyDataInit>:
 8003ce0:	4b0b      	ldr	r3, [pc, #44]	; (8003d10 <LoopFillZerobss+0x14>)
 8003ce2:	585b      	ldr	r3, [r3, r1]
 8003ce4:	5043      	str	r3, [r0, r1]
 8003ce6:	3104      	adds	r1, #4

08003ce8 <LoopCopyDataInit>:
 8003ce8:	480a      	ldr	r0, [pc, #40]	; (8003d14 <LoopFillZerobss+0x18>)
 8003cea:	4b0b      	ldr	r3, [pc, #44]	; (8003d18 <LoopFillZerobss+0x1c>)
 8003cec:	1842      	adds	r2, r0, r1
 8003cee:	429a      	cmp	r2, r3
 8003cf0:	d3f6      	bcc.n	8003ce0 <CopyDataInit>
 8003cf2:	4a0a      	ldr	r2, [pc, #40]	; (8003d1c <LoopFillZerobss+0x20>)
 8003cf4:	e002      	b.n	8003cfc <LoopFillZerobss>

08003cf6 <FillZerobss>:
 8003cf6:	2300      	movs	r3, #0
 8003cf8:	f842 3b04 	str.w	r3, [r2], #4

08003cfc <LoopFillZerobss>:
 8003cfc:	4b08      	ldr	r3, [pc, #32]	; (8003d20 <LoopFillZerobss+0x24>)
 8003cfe:	429a      	cmp	r2, r3
 8003d00:	d3f9      	bcc.n	8003cf6 <FillZerobss>
 8003d02:	f7ff ffe5 	bl	8003cd0 <SystemInit>
 8003d06:	f003 fbe1 	bl	80074cc <__libc_init_array>
 8003d0a:	f7ff fa7d 	bl	8003208 <main>
 8003d0e:	4770      	bx	lr
 8003d10:	0800bca4 	.word	0x0800bca4
 8003d14:	20000000 	.word	0x20000000
 8003d18:	20000200 	.word	0x20000200
 8003d1c:	20000200 	.word	0x20000200
 8003d20:	20000494 	.word	0x20000494

08003d24 <ADC1_2_IRQHandler>:
 8003d24:	e7fe      	b.n	8003d24 <ADC1_2_IRQHandler>
	...

08003d28 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8003d28:	b580      	push	{r7, lr}
 8003d2a:	af00      	add	r7, sp, #0
    defined(STM32F102x6) || defined(STM32F102xB) || \
    defined(STM32F103x6) || defined(STM32F103xB) || defined(STM32F103xE) || defined(STM32F103xG) || \
    defined(STM32F105xC) || defined(STM32F107xC)

  /* Prefetch buffer is not available on value line devices */
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8003d2c:	4b08      	ldr	r3, [pc, #32]	; (8003d50 <HAL_Init+0x28>)
 8003d2e:	681b      	ldr	r3, [r3, #0]
 8003d30:	4a07      	ldr	r2, [pc, #28]	; (8003d50 <HAL_Init+0x28>)
 8003d32:	f043 0310 	orr.w	r3, r3, #16
 8003d36:	6013      	str	r3, [r2, #0]
#endif
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8003d38:	2003      	movs	r0, #3
 8003d3a:	f000 f945 	bl	8003fc8 <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 8003d3e:	2000      	movs	r0, #0
 8003d40:	f000 f808 	bl	8003d54 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 8003d44:	f7ff fe28 	bl	8003998 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8003d48:	2300      	movs	r3, #0
}
 8003d4a:	4618      	mov	r0, r3
 8003d4c:	bd80      	pop	{r7, pc}
 8003d4e:	bf00      	nop
 8003d50:	40022000 	.word	0x40022000

08003d54 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8003d54:	b580      	push	{r7, lr}
 8003d56:	b082      	sub	sp, #8
 8003d58:	af00      	add	r7, sp, #0
 8003d5a:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 8003d5c:	4b12      	ldr	r3, [pc, #72]	; (8003da8 <HAL_InitTick+0x54>)
 8003d5e:	681a      	ldr	r2, [r3, #0]
 8003d60:	4b12      	ldr	r3, [pc, #72]	; (8003dac <HAL_InitTick+0x58>)
 8003d62:	781b      	ldrb	r3, [r3, #0]
 8003d64:	4619      	mov	r1, r3
 8003d66:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8003d6a:	fbb3 f3f1 	udiv	r3, r3, r1
 8003d6e:	fbb2 f3f3 	udiv	r3, r2, r3
 8003d72:	4618      	mov	r0, r3
 8003d74:	f000 f95d 	bl	8004032 <HAL_SYSTICK_Config>
 8003d78:	4603      	mov	r3, r0
 8003d7a:	2b00      	cmp	r3, #0
 8003d7c:	d001      	beq.n	8003d82 <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 8003d7e:	2301      	movs	r3, #1
 8003d80:	e00e      	b.n	8003da0 <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8003d82:	687b      	ldr	r3, [r7, #4]
 8003d84:	2b0f      	cmp	r3, #15
 8003d86:	d80a      	bhi.n	8003d9e <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8003d88:	2200      	movs	r2, #0
 8003d8a:	6879      	ldr	r1, [r7, #4]
 8003d8c:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8003d90:	f000 f925 	bl	8003fde <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 8003d94:	4a06      	ldr	r2, [pc, #24]	; (8003db0 <HAL_InitTick+0x5c>)
 8003d96:	687b      	ldr	r3, [r7, #4]
 8003d98:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 8003d9a:	2300      	movs	r3, #0
 8003d9c:	e000      	b.n	8003da0 <HAL_InitTick+0x4c>
    return HAL_ERROR;
 8003d9e:	2301      	movs	r3, #1
}
 8003da0:	4618      	mov	r0, r3
 8003da2:	3708      	adds	r7, #8
 8003da4:	46bd      	mov	sp, r7
 8003da6:	bd80      	pop	{r7, pc}
 8003da8:	20000020 	.word	0x20000020
 8003dac:	20000028 	.word	0x20000028
 8003db0:	20000024 	.word	0x20000024

08003db4 <HAL_IncTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8003db4:	b480      	push	{r7}
 8003db6:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8003db8:	4b05      	ldr	r3, [pc, #20]	; (8003dd0 <HAL_IncTick+0x1c>)
 8003dba:	781b      	ldrb	r3, [r3, #0]
 8003dbc:	461a      	mov	r2, r3
 8003dbe:	4b05      	ldr	r3, [pc, #20]	; (8003dd4 <HAL_IncTick+0x20>)
 8003dc0:	681b      	ldr	r3, [r3, #0]
 8003dc2:	4413      	add	r3, r2
 8003dc4:	4a03      	ldr	r2, [pc, #12]	; (8003dd4 <HAL_IncTick+0x20>)
 8003dc6:	6013      	str	r3, [r2, #0]
}
 8003dc8:	bf00      	nop
 8003dca:	46bd      	mov	sp, r7
 8003dcc:	bc80      	pop	{r7}
 8003dce:	4770      	bx	lr
 8003dd0:	20000028 	.word	0x20000028
 8003dd4:	2000048c 	.word	0x2000048c

08003dd8 <HAL_GetTick>:
  * @note  This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8003dd8:	b480      	push	{r7}
 8003dda:	af00      	add	r7, sp, #0
  return uwTick;
 8003ddc:	4b02      	ldr	r3, [pc, #8]	; (8003de8 <HAL_GetTick+0x10>)
 8003dde:	681b      	ldr	r3, [r3, #0]
}
 8003de0:	4618      	mov	r0, r3
 8003de2:	46bd      	mov	sp, r7
 8003de4:	bc80      	pop	{r7}
 8003de6:	4770      	bx	lr
 8003de8:	2000048c 	.word	0x2000048c

08003dec <HAL_Delay>:
  *       implementations in user file.
  * @param Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8003dec:	b580      	push	{r7, lr}
 8003dee:	b084      	sub	sp, #16
 8003df0:	af00      	add	r7, sp, #0
 8003df2:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 8003df4:	f7ff fff0 	bl	8003dd8 <HAL_GetTick>
 8003df8:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 8003dfa:	687b      	ldr	r3, [r7, #4]
 8003dfc:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 8003dfe:	68fb      	ldr	r3, [r7, #12]
 8003e00:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8003e04:	d005      	beq.n	8003e12 <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 8003e06:	4b09      	ldr	r3, [pc, #36]	; (8003e2c <HAL_Delay+0x40>)
 8003e08:	781b      	ldrb	r3, [r3, #0]
 8003e0a:	461a      	mov	r2, r3
 8003e0c:	68fb      	ldr	r3, [r7, #12]
 8003e0e:	4413      	add	r3, r2
 8003e10:	60fb      	str	r3, [r7, #12]
  }

  while ((HAL_GetTick() - tickstart) < wait)
 8003e12:	bf00      	nop
 8003e14:	f7ff ffe0 	bl	8003dd8 <HAL_GetTick>
 8003e18:	4602      	mov	r2, r0
 8003e1a:	68bb      	ldr	r3, [r7, #8]
 8003e1c:	1ad3      	subs	r3, r2, r3
 8003e1e:	68fa      	ldr	r2, [r7, #12]
 8003e20:	429a      	cmp	r2, r3
 8003e22:	d8f7      	bhi.n	8003e14 <HAL_Delay+0x28>
  {
  }
}
 8003e24:	bf00      	nop
 8003e26:	3710      	adds	r7, #16
 8003e28:	46bd      	mov	sp, r7
 8003e2a:	bd80      	pop	{r7, pc}
 8003e2c:	20000028 	.word	0x20000028

08003e30 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8003e30:	b480      	push	{r7}
 8003e32:	b085      	sub	sp, #20
 8003e34:	af00      	add	r7, sp, #0
 8003e36:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8003e38:	687b      	ldr	r3, [r7, #4]
 8003e3a:	f003 0307 	and.w	r3, r3, #7
 8003e3e:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8003e40:	4b0c      	ldr	r3, [pc, #48]	; (8003e74 <__NVIC_SetPriorityGrouping+0x44>)
 8003e42:	68db      	ldr	r3, [r3, #12]
 8003e44:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8003e46:	68ba      	ldr	r2, [r7, #8]
 8003e48:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 8003e4c:	4013      	ands	r3, r2
 8003e4e:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos) );               /* Insert write key and priority group */
 8003e50:	68fb      	ldr	r3, [r7, #12]
 8003e52:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8003e54:	68bb      	ldr	r3, [r7, #8]
 8003e56:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8003e58:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 8003e5c:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8003e60:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8003e62:	4a04      	ldr	r2, [pc, #16]	; (8003e74 <__NVIC_SetPriorityGrouping+0x44>)
 8003e64:	68bb      	ldr	r3, [r7, #8]
 8003e66:	60d3      	str	r3, [r2, #12]
}
 8003e68:	bf00      	nop
 8003e6a:	3714      	adds	r7, #20
 8003e6c:	46bd      	mov	sp, r7
 8003e6e:	bc80      	pop	{r7}
 8003e70:	4770      	bx	lr
 8003e72:	bf00      	nop
 8003e74:	e000ed00 	.word	0xe000ed00

08003e78 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8003e78:	b480      	push	{r7}
 8003e7a:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8003e7c:	4b04      	ldr	r3, [pc, #16]	; (8003e90 <__NVIC_GetPriorityGrouping+0x18>)
 8003e7e:	68db      	ldr	r3, [r3, #12]
 8003e80:	0a1b      	lsrs	r3, r3, #8
 8003e82:	f003 0307 	and.w	r3, r3, #7
}
 8003e86:	4618      	mov	r0, r3
 8003e88:	46bd      	mov	sp, r7
 8003e8a:	bc80      	pop	{r7}
 8003e8c:	4770      	bx	lr
 8003e8e:	bf00      	nop
 8003e90:	e000ed00 	.word	0xe000ed00

08003e94 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8003e94:	b480      	push	{r7}
 8003e96:	b083      	sub	sp, #12
 8003e98:	af00      	add	r7, sp, #0
 8003e9a:	4603      	mov	r3, r0
 8003e9c:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8003e9e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8003ea2:	2b00      	cmp	r3, #0
 8003ea4:	db0b      	blt.n	8003ebe <__NVIC_EnableIRQ+0x2a>
  {
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8003ea6:	79fb      	ldrb	r3, [r7, #7]
 8003ea8:	f003 021f 	and.w	r2, r3, #31
 8003eac:	4906      	ldr	r1, [pc, #24]	; (8003ec8 <__NVIC_EnableIRQ+0x34>)
 8003eae:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8003eb2:	095b      	lsrs	r3, r3, #5
 8003eb4:	2001      	movs	r0, #1
 8003eb6:	fa00 f202 	lsl.w	r2, r0, r2
 8003eba:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  }
}
 8003ebe:	bf00      	nop
 8003ec0:	370c      	adds	r7, #12
 8003ec2:	46bd      	mov	sp, r7
 8003ec4:	bc80      	pop	{r7}
 8003ec6:	4770      	bx	lr
 8003ec8:	e000e100 	.word	0xe000e100

08003ecc <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8003ecc:	b480      	push	{r7}
 8003ece:	b083      	sub	sp, #12
 8003ed0:	af00      	add	r7, sp, #0
 8003ed2:	4603      	mov	r3, r0
 8003ed4:	6039      	str	r1, [r7, #0]
 8003ed6:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8003ed8:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8003edc:	2b00      	cmp	r3, #0
 8003ede:	db0a      	blt.n	8003ef6 <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8003ee0:	683b      	ldr	r3, [r7, #0]
 8003ee2:	b2da      	uxtb	r2, r3
 8003ee4:	490c      	ldr	r1, [pc, #48]	; (8003f18 <__NVIC_SetPriority+0x4c>)
 8003ee6:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8003eea:	0112      	lsls	r2, r2, #4
 8003eec:	b2d2      	uxtb	r2, r2
 8003eee:	440b      	add	r3, r1
 8003ef0:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8003ef4:	e00a      	b.n	8003f0c <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8003ef6:	683b      	ldr	r3, [r7, #0]
 8003ef8:	b2da      	uxtb	r2, r3
 8003efa:	4908      	ldr	r1, [pc, #32]	; (8003f1c <__NVIC_SetPriority+0x50>)
 8003efc:	79fb      	ldrb	r3, [r7, #7]
 8003efe:	f003 030f 	and.w	r3, r3, #15
 8003f02:	3b04      	subs	r3, #4
 8003f04:	0112      	lsls	r2, r2, #4
 8003f06:	b2d2      	uxtb	r2, r2
 8003f08:	440b      	add	r3, r1
 8003f0a:	761a      	strb	r2, [r3, #24]
}
 8003f0c:	bf00      	nop
 8003f0e:	370c      	adds	r7, #12
 8003f10:	46bd      	mov	sp, r7
 8003f12:	bc80      	pop	{r7}
 8003f14:	4770      	bx	lr
 8003f16:	bf00      	nop
 8003f18:	e000e100 	.word	0xe000e100
 8003f1c:	e000ed00 	.word	0xe000ed00

08003f20 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8003f20:	b480      	push	{r7}
 8003f22:	b089      	sub	sp, #36	; 0x24
 8003f24:	af00      	add	r7, sp, #0
 8003f26:	60f8      	str	r0, [r7, #12]
 8003f28:	60b9      	str	r1, [r7, #8]
 8003f2a:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8003f2c:	68fb      	ldr	r3, [r7, #12]
 8003f2e:	f003 0307 	and.w	r3, r3, #7
 8003f32:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8003f34:	69fb      	ldr	r3, [r7, #28]
 8003f36:	f1c3 0307 	rsb	r3, r3, #7
 8003f3a:	2b04      	cmp	r3, #4
 8003f3c:	bf28      	it	cs
 8003f3e:	2304      	movcs	r3, #4
 8003f40:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8003f42:	69fb      	ldr	r3, [r7, #28]
 8003f44:	3304      	adds	r3, #4
 8003f46:	2b06      	cmp	r3, #6
 8003f48:	d902      	bls.n	8003f50 <NVIC_EncodePriority+0x30>
 8003f4a:	69fb      	ldr	r3, [r7, #28]
 8003f4c:	3b03      	subs	r3, #3
 8003f4e:	e000      	b.n	8003f52 <NVIC_EncodePriority+0x32>
 8003f50:	2300      	movs	r3, #0
 8003f52:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8003f54:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 8003f58:	69bb      	ldr	r3, [r7, #24]
 8003f5a:	fa02 f303 	lsl.w	r3, r2, r3
 8003f5e:	43da      	mvns	r2, r3
 8003f60:	68bb      	ldr	r3, [r7, #8]
 8003f62:	401a      	ands	r2, r3
 8003f64:	697b      	ldr	r3, [r7, #20]
 8003f66:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8003f68:	f04f 31ff 	mov.w	r1, #4294967295	; 0xffffffff
 8003f6c:	697b      	ldr	r3, [r7, #20]
 8003f6e:	fa01 f303 	lsl.w	r3, r1, r3
 8003f72:	43d9      	mvns	r1, r3
 8003f74:	687b      	ldr	r3, [r7, #4]
 8003f76:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8003f78:	4313      	orrs	r3, r2
         );
}
 8003f7a:	4618      	mov	r0, r3
 8003f7c:	3724      	adds	r7, #36	; 0x24
 8003f7e:	46bd      	mov	sp, r7
 8003f80:	bc80      	pop	{r7}
 8003f82:	4770      	bx	lr

08003f84 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8003f84:	b580      	push	{r7, lr}
 8003f86:	b082      	sub	sp, #8
 8003f88:	af00      	add	r7, sp, #0
 8003f8a:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8003f8c:	687b      	ldr	r3, [r7, #4]
 8003f8e:	3b01      	subs	r3, #1
 8003f90:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8003f94:	d301      	bcc.n	8003f9a <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 8003f96:	2301      	movs	r3, #1
 8003f98:	e00f      	b.n	8003fba <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8003f9a:	4a0a      	ldr	r2, [pc, #40]	; (8003fc4 <SysTick_Config+0x40>)
 8003f9c:	687b      	ldr	r3, [r7, #4]
 8003f9e:	3b01      	subs	r3, #1
 8003fa0:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8003fa2:	210f      	movs	r1, #15
 8003fa4:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8003fa8:	f7ff ff90 	bl	8003ecc <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8003fac:	4b05      	ldr	r3, [pc, #20]	; (8003fc4 <SysTick_Config+0x40>)
 8003fae:	2200      	movs	r2, #0
 8003fb0:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8003fb2:	4b04      	ldr	r3, [pc, #16]	; (8003fc4 <SysTick_Config+0x40>)
 8003fb4:	2207      	movs	r2, #7
 8003fb6:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8003fb8:	2300      	movs	r3, #0
}
 8003fba:	4618      	mov	r0, r3
 8003fbc:	3708      	adds	r7, #8
 8003fbe:	46bd      	mov	sp, r7
 8003fc0:	bd80      	pop	{r7, pc}
 8003fc2:	bf00      	nop
 8003fc4:	e000e010 	.word	0xe000e010

08003fc8 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8003fc8:	b580      	push	{r7, lr}
 8003fca:	b082      	sub	sp, #8
 8003fcc:	af00      	add	r7, sp, #0
 8003fce:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8003fd0:	6878      	ldr	r0, [r7, #4]
 8003fd2:	f7ff ff2d 	bl	8003e30 <__NVIC_SetPriorityGrouping>
}
 8003fd6:	bf00      	nop
 8003fd8:	3708      	adds	r7, #8
 8003fda:	46bd      	mov	sp, r7
 8003fdc:	bd80      	pop	{r7, pc}

08003fde <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 8003fde:	b580      	push	{r7, lr}
 8003fe0:	b086      	sub	sp, #24
 8003fe2:	af00      	add	r7, sp, #0
 8003fe4:	4603      	mov	r3, r0
 8003fe6:	60b9      	str	r1, [r7, #8]
 8003fe8:	607a      	str	r2, [r7, #4]
 8003fea:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 8003fec:	2300      	movs	r3, #0
 8003fee:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 8003ff0:	f7ff ff42 	bl	8003e78 <__NVIC_GetPriorityGrouping>
 8003ff4:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8003ff6:	687a      	ldr	r2, [r7, #4]
 8003ff8:	68b9      	ldr	r1, [r7, #8]
 8003ffa:	6978      	ldr	r0, [r7, #20]
 8003ffc:	f7ff ff90 	bl	8003f20 <NVIC_EncodePriority>
 8004000:	4602      	mov	r2, r0
 8004002:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8004006:	4611      	mov	r1, r2
 8004008:	4618      	mov	r0, r3
 800400a:	f7ff ff5f 	bl	8003ecc <__NVIC_SetPriority>
}
 800400e:	bf00      	nop
 8004010:	3718      	adds	r7, #24
 8004012:	46bd      	mov	sp, r7
 8004014:	bd80      	pop	{r7, pc}

08004016 <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f10xxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8004016:	b580      	push	{r7, lr}
 8004018:	b082      	sub	sp, #8
 800401a:	af00      	add	r7, sp, #0
 800401c:	4603      	mov	r3, r0
 800401e:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));

  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8004020:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8004024:	4618      	mov	r0, r3
 8004026:	f7ff ff35 	bl	8003e94 <__NVIC_EnableIRQ>
}
 800402a:	bf00      	nop
 800402c:	3708      	adds	r7, #8
 800402e:	46bd      	mov	sp, r7
 8004030:	bd80      	pop	{r7, pc}

08004032 <HAL_SYSTICK_Config>:
  * @param  TicksNumb: Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8004032:	b580      	push	{r7, lr}
 8004034:	b082      	sub	sp, #8
 8004036:	af00      	add	r7, sp, #0
 8004038:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 800403a:	6878      	ldr	r0, [r7, #4]
 800403c:	f7ff ffa2 	bl	8003f84 <SysTick_Config>
 8004040:	4603      	mov	r3, r0
}
 8004042:	4618      	mov	r0, r3
 8004044:	3708      	adds	r7, #8
 8004046:	46bd      	mov	sp, r7
 8004048:	bd80      	pop	{r7, pc}
	...

0800404c <HAL_DMA_Abort_IT>:
  * @param  hdma  : pointer to a DMA_HandleTypeDef structure that contains
  *                 the configuration information for the specified DMA Channel.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort_IT(DMA_HandleTypeDef *hdma)
{  
 800404c:	b580      	push	{r7, lr}
 800404e:	b084      	sub	sp, #16
 8004050:	af00      	add	r7, sp, #0
 8004052:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8004054:	2300      	movs	r3, #0
 8004056:	73fb      	strb	r3, [r7, #15]
  
  if(HAL_DMA_STATE_BUSY != hdma->State)
 8004058:	687b      	ldr	r3, [r7, #4]
 800405a:	f893 3021 	ldrb.w	r3, [r3, #33]	; 0x21
 800405e:	2b02      	cmp	r3, #2
 8004060:	d005      	beq.n	800406e <HAL_DMA_Abort_IT+0x22>
  {
    /* no transfer ongoing */
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 8004062:	687b      	ldr	r3, [r7, #4]
 8004064:	2204      	movs	r2, #4
 8004066:	639a      	str	r2, [r3, #56]	; 0x38
        
    status = HAL_ERROR;
 8004068:	2301      	movs	r3, #1
 800406a:	73fb      	strb	r3, [r7, #15]
 800406c:	e051      	b.n	8004112 <HAL_DMA_Abort_IT+0xc6>
  }
  else
  { 
    /* Disable DMA IT */
    __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 800406e:	687b      	ldr	r3, [r7, #4]
 8004070:	681b      	ldr	r3, [r3, #0]
 8004072:	681a      	ldr	r2, [r3, #0]
 8004074:	687b      	ldr	r3, [r7, #4]
 8004076:	681b      	ldr	r3, [r3, #0]
 8004078:	f022 020e 	bic.w	r2, r2, #14
 800407c:	601a      	str	r2, [r3, #0]

    /* Disable the channel */
    __HAL_DMA_DISABLE(hdma);
 800407e:	687b      	ldr	r3, [r7, #4]
 8004080:	681b      	ldr	r3, [r3, #0]
 8004082:	681a      	ldr	r2, [r3, #0]
 8004084:	687b      	ldr	r3, [r7, #4]
 8004086:	681b      	ldr	r3, [r3, #0]
 8004088:	f022 0201 	bic.w	r2, r2, #1
 800408c:	601a      	str	r2, [r3, #0]

    /* Clear all flags */
    __HAL_DMA_CLEAR_FLAG(hdma, __HAL_DMA_GET_GI_FLAG_INDEX(hdma));
 800408e:	687b      	ldr	r3, [r7, #4]
 8004090:	681b      	ldr	r3, [r3, #0]
 8004092:	4a22      	ldr	r2, [pc, #136]	; (800411c <HAL_DMA_Abort_IT+0xd0>)
 8004094:	4293      	cmp	r3, r2
 8004096:	d029      	beq.n	80040ec <HAL_DMA_Abort_IT+0xa0>
 8004098:	687b      	ldr	r3, [r7, #4]
 800409a:	681b      	ldr	r3, [r3, #0]
 800409c:	4a20      	ldr	r2, [pc, #128]	; (8004120 <HAL_DMA_Abort_IT+0xd4>)
 800409e:	4293      	cmp	r3, r2
 80040a0:	d022      	beq.n	80040e8 <HAL_DMA_Abort_IT+0x9c>
 80040a2:	687b      	ldr	r3, [r7, #4]
 80040a4:	681b      	ldr	r3, [r3, #0]
 80040a6:	4a1f      	ldr	r2, [pc, #124]	; (8004124 <HAL_DMA_Abort_IT+0xd8>)
 80040a8:	4293      	cmp	r3, r2
 80040aa:	d01a      	beq.n	80040e2 <HAL_DMA_Abort_IT+0x96>
 80040ac:	687b      	ldr	r3, [r7, #4]
 80040ae:	681b      	ldr	r3, [r3, #0]
 80040b0:	4a1d      	ldr	r2, [pc, #116]	; (8004128 <HAL_DMA_Abort_IT+0xdc>)
 80040b2:	4293      	cmp	r3, r2
 80040b4:	d012      	beq.n	80040dc <HAL_DMA_Abort_IT+0x90>
 80040b6:	687b      	ldr	r3, [r7, #4]
 80040b8:	681b      	ldr	r3, [r3, #0]
 80040ba:	4a1c      	ldr	r2, [pc, #112]	; (800412c <HAL_DMA_Abort_IT+0xe0>)
 80040bc:	4293      	cmp	r3, r2
 80040be:	d00a      	beq.n	80040d6 <HAL_DMA_Abort_IT+0x8a>
 80040c0:	687b      	ldr	r3, [r7, #4]
 80040c2:	681b      	ldr	r3, [r3, #0]
 80040c4:	4a1a      	ldr	r2, [pc, #104]	; (8004130 <HAL_DMA_Abort_IT+0xe4>)
 80040c6:	4293      	cmp	r3, r2
 80040c8:	d102      	bne.n	80040d0 <HAL_DMA_Abort_IT+0x84>
 80040ca:	f44f 1380 	mov.w	r3, #1048576	; 0x100000
 80040ce:	e00e      	b.n	80040ee <HAL_DMA_Abort_IT+0xa2>
 80040d0:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
 80040d4:	e00b      	b.n	80040ee <HAL_DMA_Abort_IT+0xa2>
 80040d6:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 80040da:	e008      	b.n	80040ee <HAL_DMA_Abort_IT+0xa2>
 80040dc:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 80040e0:	e005      	b.n	80040ee <HAL_DMA_Abort_IT+0xa2>
 80040e2:	f44f 7380 	mov.w	r3, #256	; 0x100
 80040e6:	e002      	b.n	80040ee <HAL_DMA_Abort_IT+0xa2>
 80040e8:	2310      	movs	r3, #16
 80040ea:	e000      	b.n	80040ee <HAL_DMA_Abort_IT+0xa2>
 80040ec:	2301      	movs	r3, #1
 80040ee:	4a11      	ldr	r2, [pc, #68]	; (8004134 <HAL_DMA_Abort_IT+0xe8>)
 80040f0:	6053      	str	r3, [r2, #4]

    /* Change the DMA state */
    hdma->State = HAL_DMA_STATE_READY;
 80040f2:	687b      	ldr	r3, [r7, #4]
 80040f4:	2201      	movs	r2, #1
 80040f6:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 80040fa:	687b      	ldr	r3, [r7, #4]
 80040fc:	2200      	movs	r2, #0
 80040fe:	f883 2020 	strb.w	r2, [r3, #32]

    /* Call User Abort callback */
    if(hdma->XferAbortCallback != NULL)
 8004102:	687b      	ldr	r3, [r7, #4]
 8004104:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8004106:	2b00      	cmp	r3, #0
 8004108:	d003      	beq.n	8004112 <HAL_DMA_Abort_IT+0xc6>
    {
      hdma->XferAbortCallback(hdma);
 800410a:	687b      	ldr	r3, [r7, #4]
 800410c:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800410e:	6878      	ldr	r0, [r7, #4]
 8004110:	4798      	blx	r3
    } 
  }
  return status;
 8004112:	7bfb      	ldrb	r3, [r7, #15]
}
 8004114:	4618      	mov	r0, r3
 8004116:	3710      	adds	r7, #16
 8004118:	46bd      	mov	sp, r7
 800411a:	bd80      	pop	{r7, pc}
 800411c:	40020008 	.word	0x40020008
 8004120:	4002001c 	.word	0x4002001c
 8004124:	40020030 	.word	0x40020030
 8004128:	40020044 	.word	0x40020044
 800412c:	40020058 	.word	0x40020058
 8004130:	4002006c 	.word	0x4002006c
 8004134:	40020000 	.word	0x40020000

08004138 <HAL_GPIO_Init>:
  * @param  GPIO_Init: pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8004138:	b480      	push	{r7}
 800413a:	b08b      	sub	sp, #44	; 0x2c
 800413c:	af00      	add	r7, sp, #0
 800413e:	6078      	str	r0, [r7, #4]
 8004140:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00u;
 8004142:	2300      	movs	r3, #0
 8004144:	627b      	str	r3, [r7, #36]	; 0x24
  uint32_t ioposition;
  uint32_t iocurrent;
  uint32_t temp;
  uint32_t config = 0x00u;
 8004146:	2300      	movs	r3, #0
 8004148:	623b      	str	r3, [r7, #32]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 800414a:	e127      	b.n	800439c <HAL_GPIO_Init+0x264>
  {
    /* Get the IO position */
    ioposition = (0x01uL << position);
 800414c:	2201      	movs	r2, #1
 800414e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004150:	fa02 f303 	lsl.w	r3, r2, r3
 8004154:	61fb      	str	r3, [r7, #28]

    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 8004156:	683b      	ldr	r3, [r7, #0]
 8004158:	681b      	ldr	r3, [r3, #0]
 800415a:	69fa      	ldr	r2, [r7, #28]
 800415c:	4013      	ands	r3, r2
 800415e:	61bb      	str	r3, [r7, #24]

    if (iocurrent == ioposition)
 8004160:	69ba      	ldr	r2, [r7, #24]
 8004162:	69fb      	ldr	r3, [r7, #28]
 8004164:	429a      	cmp	r2, r3
 8004166:	f040 8116 	bne.w	8004396 <HAL_GPIO_Init+0x25e>
    {
      /* Check the Alternate function parameters */
      assert_param(IS_GPIO_AF_INSTANCE(GPIOx));

      /* Based on the required mode, filling config variable with MODEy[1:0] and CNFy[3:2] corresponding bits */
      switch (GPIO_Init->Mode)
 800416a:	683b      	ldr	r3, [r7, #0]
 800416c:	685b      	ldr	r3, [r3, #4]
 800416e:	2b12      	cmp	r3, #18
 8004170:	d034      	beq.n	80041dc <HAL_GPIO_Init+0xa4>
 8004172:	2b12      	cmp	r3, #18
 8004174:	d80d      	bhi.n	8004192 <HAL_GPIO_Init+0x5a>
 8004176:	2b02      	cmp	r3, #2
 8004178:	d02b      	beq.n	80041d2 <HAL_GPIO_Init+0x9a>
 800417a:	2b02      	cmp	r3, #2
 800417c:	d804      	bhi.n	8004188 <HAL_GPIO_Init+0x50>
 800417e:	2b00      	cmp	r3, #0
 8004180:	d031      	beq.n	80041e6 <HAL_GPIO_Init+0xae>
 8004182:	2b01      	cmp	r3, #1
 8004184:	d01c      	beq.n	80041c0 <HAL_GPIO_Init+0x88>
          config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_ANALOG;
          break;

        /* Parameters are checked with assert_param */
        default:
          break;
 8004186:	e048      	b.n	800421a <HAL_GPIO_Init+0xe2>
      switch (GPIO_Init->Mode)
 8004188:	2b03      	cmp	r3, #3
 800418a:	d043      	beq.n	8004214 <HAL_GPIO_Init+0xdc>
 800418c:	2b11      	cmp	r3, #17
 800418e:	d01b      	beq.n	80041c8 <HAL_GPIO_Init+0x90>
          break;
 8004190:	e043      	b.n	800421a <HAL_GPIO_Init+0xe2>
      switch (GPIO_Init->Mode)
 8004192:	4a89      	ldr	r2, [pc, #548]	; (80043b8 <HAL_GPIO_Init+0x280>)
 8004194:	4293      	cmp	r3, r2
 8004196:	d026      	beq.n	80041e6 <HAL_GPIO_Init+0xae>
 8004198:	4a87      	ldr	r2, [pc, #540]	; (80043b8 <HAL_GPIO_Init+0x280>)
 800419a:	4293      	cmp	r3, r2
 800419c:	d806      	bhi.n	80041ac <HAL_GPIO_Init+0x74>
 800419e:	4a87      	ldr	r2, [pc, #540]	; (80043bc <HAL_GPIO_Init+0x284>)
 80041a0:	4293      	cmp	r3, r2
 80041a2:	d020      	beq.n	80041e6 <HAL_GPIO_Init+0xae>
 80041a4:	4a86      	ldr	r2, [pc, #536]	; (80043c0 <HAL_GPIO_Init+0x288>)
 80041a6:	4293      	cmp	r3, r2
 80041a8:	d01d      	beq.n	80041e6 <HAL_GPIO_Init+0xae>
          break;
 80041aa:	e036      	b.n	800421a <HAL_GPIO_Init+0xe2>
      switch (GPIO_Init->Mode)
 80041ac:	4a85      	ldr	r2, [pc, #532]	; (80043c4 <HAL_GPIO_Init+0x28c>)
 80041ae:	4293      	cmp	r3, r2
 80041b0:	d019      	beq.n	80041e6 <HAL_GPIO_Init+0xae>
 80041b2:	4a85      	ldr	r2, [pc, #532]	; (80043c8 <HAL_GPIO_Init+0x290>)
 80041b4:	4293      	cmp	r3, r2
 80041b6:	d016      	beq.n	80041e6 <HAL_GPIO_Init+0xae>
 80041b8:	4a84      	ldr	r2, [pc, #528]	; (80043cc <HAL_GPIO_Init+0x294>)
 80041ba:	4293      	cmp	r3, r2
 80041bc:	d013      	beq.n	80041e6 <HAL_GPIO_Init+0xae>
          break;
 80041be:	e02c      	b.n	800421a <HAL_GPIO_Init+0xe2>
          config = GPIO_Init->Speed + GPIO_CR_CNF_GP_OUTPUT_PP;
 80041c0:	683b      	ldr	r3, [r7, #0]
 80041c2:	68db      	ldr	r3, [r3, #12]
 80041c4:	623b      	str	r3, [r7, #32]
          break;
 80041c6:	e028      	b.n	800421a <HAL_GPIO_Init+0xe2>
          config = GPIO_Init->Speed + GPIO_CR_CNF_GP_OUTPUT_OD;
 80041c8:	683b      	ldr	r3, [r7, #0]
 80041ca:	68db      	ldr	r3, [r3, #12]
 80041cc:	3304      	adds	r3, #4
 80041ce:	623b      	str	r3, [r7, #32]
          break;
 80041d0:	e023      	b.n	800421a <HAL_GPIO_Init+0xe2>
          config = GPIO_Init->Speed + GPIO_CR_CNF_AF_OUTPUT_PP;
 80041d2:	683b      	ldr	r3, [r7, #0]
 80041d4:	68db      	ldr	r3, [r3, #12]
 80041d6:	3308      	adds	r3, #8
 80041d8:	623b      	str	r3, [r7, #32]
          break;
 80041da:	e01e      	b.n	800421a <HAL_GPIO_Init+0xe2>
          config = GPIO_Init->Speed + GPIO_CR_CNF_AF_OUTPUT_OD;
 80041dc:	683b      	ldr	r3, [r7, #0]
 80041de:	68db      	ldr	r3, [r3, #12]
 80041e0:	330c      	adds	r3, #12
 80041e2:	623b      	str	r3, [r7, #32]
          break;
 80041e4:	e019      	b.n	800421a <HAL_GPIO_Init+0xe2>
          if (GPIO_Init->Pull == GPIO_NOPULL)
 80041e6:	683b      	ldr	r3, [r7, #0]
 80041e8:	689b      	ldr	r3, [r3, #8]
 80041ea:	2b00      	cmp	r3, #0
 80041ec:	d102      	bne.n	80041f4 <HAL_GPIO_Init+0xbc>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_FLOATING;
 80041ee:	2304      	movs	r3, #4
 80041f0:	623b      	str	r3, [r7, #32]
          break;
 80041f2:	e012      	b.n	800421a <HAL_GPIO_Init+0xe2>
          else if (GPIO_Init->Pull == GPIO_PULLUP)
 80041f4:	683b      	ldr	r3, [r7, #0]
 80041f6:	689b      	ldr	r3, [r3, #8]
 80041f8:	2b01      	cmp	r3, #1
 80041fa:	d105      	bne.n	8004208 <HAL_GPIO_Init+0xd0>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_PU_PD;
 80041fc:	2308      	movs	r3, #8
 80041fe:	623b      	str	r3, [r7, #32]
            GPIOx->BSRR = ioposition;
 8004200:	687b      	ldr	r3, [r7, #4]
 8004202:	69fa      	ldr	r2, [r7, #28]
 8004204:	611a      	str	r2, [r3, #16]
          break;
 8004206:	e008      	b.n	800421a <HAL_GPIO_Init+0xe2>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_PU_PD;
 8004208:	2308      	movs	r3, #8
 800420a:	623b      	str	r3, [r7, #32]
            GPIOx->BRR = ioposition;
 800420c:	687b      	ldr	r3, [r7, #4]
 800420e:	69fa      	ldr	r2, [r7, #28]
 8004210:	615a      	str	r2, [r3, #20]
          break;
 8004212:	e002      	b.n	800421a <HAL_GPIO_Init+0xe2>
          config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_ANALOG;
 8004214:	2300      	movs	r3, #0
 8004216:	623b      	str	r3, [r7, #32]
          break;
 8004218:	bf00      	nop
      }

      /* Check if the current bit belongs to first half or last half of the pin count number
       in order to address CRH or CRL register*/
      configregister = (iocurrent < GPIO_PIN_8) ? &GPIOx->CRL     : &GPIOx->CRH;
 800421a:	69bb      	ldr	r3, [r7, #24]
 800421c:	2bff      	cmp	r3, #255	; 0xff
 800421e:	d801      	bhi.n	8004224 <HAL_GPIO_Init+0xec>
 8004220:	687b      	ldr	r3, [r7, #4]
 8004222:	e001      	b.n	8004228 <HAL_GPIO_Init+0xf0>
 8004224:	687b      	ldr	r3, [r7, #4]
 8004226:	3304      	adds	r3, #4
 8004228:	617b      	str	r3, [r7, #20]
      registeroffset = (iocurrent < GPIO_PIN_8) ? (position << 2u) : ((position - 8u) << 2u);
 800422a:	69bb      	ldr	r3, [r7, #24]
 800422c:	2bff      	cmp	r3, #255	; 0xff
 800422e:	d802      	bhi.n	8004236 <HAL_GPIO_Init+0xfe>
 8004230:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004232:	009b      	lsls	r3, r3, #2
 8004234:	e002      	b.n	800423c <HAL_GPIO_Init+0x104>
 8004236:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004238:	3b08      	subs	r3, #8
 800423a:	009b      	lsls	r3, r3, #2
 800423c:	613b      	str	r3, [r7, #16]

      /* Apply the new configuration of the pin to the register */
      MODIFY_REG((*configregister), ((GPIO_CRL_MODE0 | GPIO_CRL_CNF0) << registeroffset), (config << registeroffset));
 800423e:	697b      	ldr	r3, [r7, #20]
 8004240:	681a      	ldr	r2, [r3, #0]
 8004242:	210f      	movs	r1, #15
 8004244:	693b      	ldr	r3, [r7, #16]
 8004246:	fa01 f303 	lsl.w	r3, r1, r3
 800424a:	43db      	mvns	r3, r3
 800424c:	401a      	ands	r2, r3
 800424e:	6a39      	ldr	r1, [r7, #32]
 8004250:	693b      	ldr	r3, [r7, #16]
 8004252:	fa01 f303 	lsl.w	r3, r1, r3
 8004256:	431a      	orrs	r2, r3
 8004258:	697b      	ldr	r3, [r7, #20]
 800425a:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) == EXTI_MODE)
 800425c:	683b      	ldr	r3, [r7, #0]
 800425e:	685b      	ldr	r3, [r3, #4]
 8004260:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8004264:	2b00      	cmp	r3, #0
 8004266:	f000 8096 	beq.w	8004396 <HAL_GPIO_Init+0x25e>
      {
        /* Enable AFIO Clock */
        __HAL_RCC_AFIO_CLK_ENABLE();
 800426a:	4b59      	ldr	r3, [pc, #356]	; (80043d0 <HAL_GPIO_Init+0x298>)
 800426c:	699b      	ldr	r3, [r3, #24]
 800426e:	4a58      	ldr	r2, [pc, #352]	; (80043d0 <HAL_GPIO_Init+0x298>)
 8004270:	f043 0301 	orr.w	r3, r3, #1
 8004274:	6193      	str	r3, [r2, #24]
 8004276:	4b56      	ldr	r3, [pc, #344]	; (80043d0 <HAL_GPIO_Init+0x298>)
 8004278:	699b      	ldr	r3, [r3, #24]
 800427a:	f003 0301 	and.w	r3, r3, #1
 800427e:	60bb      	str	r3, [r7, #8]
 8004280:	68bb      	ldr	r3, [r7, #8]
        temp = AFIO->EXTICR[position >> 2u];
 8004282:	4a54      	ldr	r2, [pc, #336]	; (80043d4 <HAL_GPIO_Init+0x29c>)
 8004284:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004286:	089b      	lsrs	r3, r3, #2
 8004288:	3302      	adds	r3, #2
 800428a:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800428e:	60fb      	str	r3, [r7, #12]
        CLEAR_BIT(temp, (0x0Fu) << (4u * (position & 0x03u)));
 8004290:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004292:	f003 0303 	and.w	r3, r3, #3
 8004296:	009b      	lsls	r3, r3, #2
 8004298:	220f      	movs	r2, #15
 800429a:	fa02 f303 	lsl.w	r3, r2, r3
 800429e:	43db      	mvns	r3, r3
 80042a0:	68fa      	ldr	r2, [r7, #12]
 80042a2:	4013      	ands	r3, r2
 80042a4:	60fb      	str	r3, [r7, #12]
        SET_BIT(temp, (GPIO_GET_INDEX(GPIOx)) << (4u * (position & 0x03u)));
 80042a6:	687b      	ldr	r3, [r7, #4]
 80042a8:	4a4b      	ldr	r2, [pc, #300]	; (80043d8 <HAL_GPIO_Init+0x2a0>)
 80042aa:	4293      	cmp	r3, r2
 80042ac:	d013      	beq.n	80042d6 <HAL_GPIO_Init+0x19e>
 80042ae:	687b      	ldr	r3, [r7, #4]
 80042b0:	4a4a      	ldr	r2, [pc, #296]	; (80043dc <HAL_GPIO_Init+0x2a4>)
 80042b2:	4293      	cmp	r3, r2
 80042b4:	d00d      	beq.n	80042d2 <HAL_GPIO_Init+0x19a>
 80042b6:	687b      	ldr	r3, [r7, #4]
 80042b8:	4a49      	ldr	r2, [pc, #292]	; (80043e0 <HAL_GPIO_Init+0x2a8>)
 80042ba:	4293      	cmp	r3, r2
 80042bc:	d007      	beq.n	80042ce <HAL_GPIO_Init+0x196>
 80042be:	687b      	ldr	r3, [r7, #4]
 80042c0:	4a48      	ldr	r2, [pc, #288]	; (80043e4 <HAL_GPIO_Init+0x2ac>)
 80042c2:	4293      	cmp	r3, r2
 80042c4:	d101      	bne.n	80042ca <HAL_GPIO_Init+0x192>
 80042c6:	2303      	movs	r3, #3
 80042c8:	e006      	b.n	80042d8 <HAL_GPIO_Init+0x1a0>
 80042ca:	2304      	movs	r3, #4
 80042cc:	e004      	b.n	80042d8 <HAL_GPIO_Init+0x1a0>
 80042ce:	2302      	movs	r3, #2
 80042d0:	e002      	b.n	80042d8 <HAL_GPIO_Init+0x1a0>
 80042d2:	2301      	movs	r3, #1
 80042d4:	e000      	b.n	80042d8 <HAL_GPIO_Init+0x1a0>
 80042d6:	2300      	movs	r3, #0
 80042d8:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80042da:	f002 0203 	and.w	r2, r2, #3
 80042de:	0092      	lsls	r2, r2, #2
 80042e0:	4093      	lsls	r3, r2
 80042e2:	68fa      	ldr	r2, [r7, #12]
 80042e4:	4313      	orrs	r3, r2
 80042e6:	60fb      	str	r3, [r7, #12]
        AFIO->EXTICR[position >> 2u] = temp;
 80042e8:	493a      	ldr	r1, [pc, #232]	; (80043d4 <HAL_GPIO_Init+0x29c>)
 80042ea:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80042ec:	089b      	lsrs	r3, r3, #2
 80042ee:	3302      	adds	r3, #2
 80042f0:	68fa      	ldr	r2, [r7, #12]
 80042f2:	f841 2023 	str.w	r2, [r1, r3, lsl #2]


        /* Configure the interrupt mask */
        if ((GPIO_Init->Mode & GPIO_MODE_IT) == GPIO_MODE_IT)
 80042f6:	683b      	ldr	r3, [r7, #0]
 80042f8:	685b      	ldr	r3, [r3, #4]
 80042fa:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 80042fe:	2b00      	cmp	r3, #0
 8004300:	d006      	beq.n	8004310 <HAL_GPIO_Init+0x1d8>
        {
          SET_BIT(EXTI->IMR, iocurrent);
 8004302:	4b39      	ldr	r3, [pc, #228]	; (80043e8 <HAL_GPIO_Init+0x2b0>)
 8004304:	681a      	ldr	r2, [r3, #0]
 8004306:	4938      	ldr	r1, [pc, #224]	; (80043e8 <HAL_GPIO_Init+0x2b0>)
 8004308:	69bb      	ldr	r3, [r7, #24]
 800430a:	4313      	orrs	r3, r2
 800430c:	600b      	str	r3, [r1, #0]
 800430e:	e006      	b.n	800431e <HAL_GPIO_Init+0x1e6>
        }
        else
        {
          CLEAR_BIT(EXTI->IMR, iocurrent);
 8004310:	4b35      	ldr	r3, [pc, #212]	; (80043e8 <HAL_GPIO_Init+0x2b0>)
 8004312:	681a      	ldr	r2, [r3, #0]
 8004314:	69bb      	ldr	r3, [r7, #24]
 8004316:	43db      	mvns	r3, r3
 8004318:	4933      	ldr	r1, [pc, #204]	; (80043e8 <HAL_GPIO_Init+0x2b0>)
 800431a:	4013      	ands	r3, r2
 800431c:	600b      	str	r3, [r1, #0]
        }

        /* Configure the event mask */
        if ((GPIO_Init->Mode & GPIO_MODE_EVT) == GPIO_MODE_EVT)
 800431e:	683b      	ldr	r3, [r7, #0]
 8004320:	685b      	ldr	r3, [r3, #4]
 8004322:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8004326:	2b00      	cmp	r3, #0
 8004328:	d006      	beq.n	8004338 <HAL_GPIO_Init+0x200>
        {
          SET_BIT(EXTI->EMR, iocurrent);
 800432a:	4b2f      	ldr	r3, [pc, #188]	; (80043e8 <HAL_GPIO_Init+0x2b0>)
 800432c:	685a      	ldr	r2, [r3, #4]
 800432e:	492e      	ldr	r1, [pc, #184]	; (80043e8 <HAL_GPIO_Init+0x2b0>)
 8004330:	69bb      	ldr	r3, [r7, #24]
 8004332:	4313      	orrs	r3, r2
 8004334:	604b      	str	r3, [r1, #4]
 8004336:	e006      	b.n	8004346 <HAL_GPIO_Init+0x20e>
        }
        else
        {
          CLEAR_BIT(EXTI->EMR, iocurrent);
 8004338:	4b2b      	ldr	r3, [pc, #172]	; (80043e8 <HAL_GPIO_Init+0x2b0>)
 800433a:	685a      	ldr	r2, [r3, #4]
 800433c:	69bb      	ldr	r3, [r7, #24]
 800433e:	43db      	mvns	r3, r3
 8004340:	4929      	ldr	r1, [pc, #164]	; (80043e8 <HAL_GPIO_Init+0x2b0>)
 8004342:	4013      	ands	r3, r2
 8004344:	604b      	str	r3, [r1, #4]
        }

        /* Enable or disable the rising trigger */
        if ((GPIO_Init->Mode & RISING_EDGE) == RISING_EDGE)
 8004346:	683b      	ldr	r3, [r7, #0]
 8004348:	685b      	ldr	r3, [r3, #4]
 800434a:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 800434e:	2b00      	cmp	r3, #0
 8004350:	d006      	beq.n	8004360 <HAL_GPIO_Init+0x228>
        {
          SET_BIT(EXTI->RTSR, iocurrent);
 8004352:	4b25      	ldr	r3, [pc, #148]	; (80043e8 <HAL_GPIO_Init+0x2b0>)
 8004354:	689a      	ldr	r2, [r3, #8]
 8004356:	4924      	ldr	r1, [pc, #144]	; (80043e8 <HAL_GPIO_Init+0x2b0>)
 8004358:	69bb      	ldr	r3, [r7, #24]
 800435a:	4313      	orrs	r3, r2
 800435c:	608b      	str	r3, [r1, #8]
 800435e:	e006      	b.n	800436e <HAL_GPIO_Init+0x236>
        }
        else
        {
          CLEAR_BIT(EXTI->RTSR, iocurrent);
 8004360:	4b21      	ldr	r3, [pc, #132]	; (80043e8 <HAL_GPIO_Init+0x2b0>)
 8004362:	689a      	ldr	r2, [r3, #8]
 8004364:	69bb      	ldr	r3, [r7, #24]
 8004366:	43db      	mvns	r3, r3
 8004368:	491f      	ldr	r1, [pc, #124]	; (80043e8 <HAL_GPIO_Init+0x2b0>)
 800436a:	4013      	ands	r3, r2
 800436c:	608b      	str	r3, [r1, #8]
        }

        /* Enable or disable the falling trigger */
        if ((GPIO_Init->Mode & FALLING_EDGE) == FALLING_EDGE)
 800436e:	683b      	ldr	r3, [r7, #0]
 8004370:	685b      	ldr	r3, [r3, #4]
 8004372:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8004376:	2b00      	cmp	r3, #0
 8004378:	d006      	beq.n	8004388 <HAL_GPIO_Init+0x250>
        {
          SET_BIT(EXTI->FTSR, iocurrent);
 800437a:	4b1b      	ldr	r3, [pc, #108]	; (80043e8 <HAL_GPIO_Init+0x2b0>)
 800437c:	68da      	ldr	r2, [r3, #12]
 800437e:	491a      	ldr	r1, [pc, #104]	; (80043e8 <HAL_GPIO_Init+0x2b0>)
 8004380:	69bb      	ldr	r3, [r7, #24]
 8004382:	4313      	orrs	r3, r2
 8004384:	60cb      	str	r3, [r1, #12]
 8004386:	e006      	b.n	8004396 <HAL_GPIO_Init+0x25e>
        }
        else
        {
          CLEAR_BIT(EXTI->FTSR, iocurrent);
 8004388:	4b17      	ldr	r3, [pc, #92]	; (80043e8 <HAL_GPIO_Init+0x2b0>)
 800438a:	68da      	ldr	r2, [r3, #12]
 800438c:	69bb      	ldr	r3, [r7, #24]
 800438e:	43db      	mvns	r3, r3
 8004390:	4915      	ldr	r1, [pc, #84]	; (80043e8 <HAL_GPIO_Init+0x2b0>)
 8004392:	4013      	ands	r3, r2
 8004394:	60cb      	str	r3, [r1, #12]
        }
      }
    }

	position++;
 8004396:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004398:	3301      	adds	r3, #1
 800439a:	627b      	str	r3, [r7, #36]	; 0x24
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 800439c:	683b      	ldr	r3, [r7, #0]
 800439e:	681a      	ldr	r2, [r3, #0]
 80043a0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80043a2:	fa22 f303 	lsr.w	r3, r2, r3
 80043a6:	2b00      	cmp	r3, #0
 80043a8:	f47f aed0 	bne.w	800414c <HAL_GPIO_Init+0x14>
  }
}
 80043ac:	bf00      	nop
 80043ae:	372c      	adds	r7, #44	; 0x2c
 80043b0:	46bd      	mov	sp, r7
 80043b2:	bc80      	pop	{r7}
 80043b4:	4770      	bx	lr
 80043b6:	bf00      	nop
 80043b8:	10210000 	.word	0x10210000
 80043bc:	10110000 	.word	0x10110000
 80043c0:	10120000 	.word	0x10120000
 80043c4:	10310000 	.word	0x10310000
 80043c8:	10320000 	.word	0x10320000
 80043cc:	10220000 	.word	0x10220000
 80043d0:	40021000 	.word	0x40021000
 80043d4:	40010000 	.word	0x40010000
 80043d8:	40010800 	.word	0x40010800
 80043dc:	40010c00 	.word	0x40010c00
 80043e0:	40011000 	.word	0x40011000
 80043e4:	40011400 	.word	0x40011400
 80043e8:	40010400 	.word	0x40010400

080043ec <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 80043ec:	b480      	push	{r7}
 80043ee:	b083      	sub	sp, #12
 80043f0:	af00      	add	r7, sp, #0
 80043f2:	6078      	str	r0, [r7, #4]
 80043f4:	460b      	mov	r3, r1
 80043f6:	807b      	strh	r3, [r7, #2]
 80043f8:	4613      	mov	r3, r2
 80043fa:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if (PinState != GPIO_PIN_RESET)
 80043fc:	787b      	ldrb	r3, [r7, #1]
 80043fe:	2b00      	cmp	r3, #0
 8004400:	d003      	beq.n	800440a <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 8004402:	887a      	ldrh	r2, [r7, #2]
 8004404:	687b      	ldr	r3, [r7, #4]
 8004406:	611a      	str	r2, [r3, #16]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16u;
  }
}
 8004408:	e003      	b.n	8004412 <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16u;
 800440a:	887b      	ldrh	r3, [r7, #2]
 800440c:	041a      	lsls	r2, r3, #16
 800440e:	687b      	ldr	r3, [r7, #4]
 8004410:	611a      	str	r2, [r3, #16]
}
 8004412:	bf00      	nop
 8004414:	370c      	adds	r7, #12
 8004416:	46bd      	mov	sp, r7
 8004418:	bc80      	pop	{r7}
 800441a:	4770      	bx	lr

0800441c <HAL_GPIO_EXTI_IRQHandler>:
  * @brief  This function handles EXTI interrupt request.
  * @param  GPIO_Pin: Specifies the pins connected EXTI line
  * @retval None
  */
void HAL_GPIO_EXTI_IRQHandler(uint16_t GPIO_Pin)
{
 800441c:	b580      	push	{r7, lr}
 800441e:	b082      	sub	sp, #8
 8004420:	af00      	add	r7, sp, #0
 8004422:	4603      	mov	r3, r0
 8004424:	80fb      	strh	r3, [r7, #6]
  /* EXTI line interrupt detected */
  if (__HAL_GPIO_EXTI_GET_IT(GPIO_Pin) != 0x00u)
 8004426:	4b08      	ldr	r3, [pc, #32]	; (8004448 <HAL_GPIO_EXTI_IRQHandler+0x2c>)
 8004428:	695a      	ldr	r2, [r3, #20]
 800442a:	88fb      	ldrh	r3, [r7, #6]
 800442c:	4013      	ands	r3, r2
 800442e:	2b00      	cmp	r3, #0
 8004430:	d006      	beq.n	8004440 <HAL_GPIO_EXTI_IRQHandler+0x24>
  {
    __HAL_GPIO_EXTI_CLEAR_IT(GPIO_Pin);
 8004432:	4a05      	ldr	r2, [pc, #20]	; (8004448 <HAL_GPIO_EXTI_IRQHandler+0x2c>)
 8004434:	88fb      	ldrh	r3, [r7, #6]
 8004436:	6153      	str	r3, [r2, #20]
    HAL_GPIO_EXTI_Callback(GPIO_Pin);
 8004438:	88fb      	ldrh	r3, [r7, #6]
 800443a:	4618      	mov	r0, r3
 800443c:	f000 f806 	bl	800444c <HAL_GPIO_EXTI_Callback>
  }
}
 8004440:	bf00      	nop
 8004442:	3708      	adds	r7, #8
 8004444:	46bd      	mov	sp, r7
 8004446:	bd80      	pop	{r7, pc}
 8004448:	40010400 	.word	0x40010400

0800444c <HAL_GPIO_EXTI_Callback>:
  * @brief  EXTI line detection callbacks.
  * @param  GPIO_Pin: Specifies the pins connected EXTI line
  * @retval None
  */
__weak void HAL_GPIO_EXTI_Callback(uint16_t GPIO_Pin)
{
 800444c:	b480      	push	{r7}
 800444e:	b083      	sub	sp, #12
 8004450:	af00      	add	r7, sp, #0
 8004452:	4603      	mov	r3, r0
 8004454:	80fb      	strh	r3, [r7, #6]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(GPIO_Pin);
  /* NOTE: This function Should not be modified, when the callback is needed,
           the HAL_GPIO_EXTI_Callback could be implemented in the user file
   */
}
 8004456:	bf00      	nop
 8004458:	370c      	adds	r7, #12
 800445a:	46bd      	mov	sp, r7
 800445c:	bc80      	pop	{r7}
 800445e:	4770      	bx	lr

08004460 <HAL_I2C_Init>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Init(I2C_HandleTypeDef *hi2c)
{
 8004460:	b580      	push	{r7, lr}
 8004462:	b084      	sub	sp, #16
 8004464:	af00      	add	r7, sp, #0
 8004466:	6078      	str	r0, [r7, #4]
  uint32_t freqrange;
  uint32_t pclk1;

  /* Check the I2C handle allocation */
  if (hi2c == NULL)
 8004468:	687b      	ldr	r3, [r7, #4]
 800446a:	2b00      	cmp	r3, #0
 800446c:	d101      	bne.n	8004472 <HAL_I2C_Init+0x12>
  {
    return HAL_ERROR;
 800446e:	2301      	movs	r3, #1
 8004470:	e11f      	b.n	80046b2 <HAL_I2C_Init+0x252>
  assert_param(IS_I2C_DUAL_ADDRESS(hi2c->Init.DualAddressMode));
  assert_param(IS_I2C_OWN_ADDRESS2(hi2c->Init.OwnAddress2));
  assert_param(IS_I2C_GENERAL_CALL(hi2c->Init.GeneralCallMode));
  assert_param(IS_I2C_NO_STRETCH(hi2c->Init.NoStretchMode));

  if (hi2c->State == HAL_I2C_STATE_RESET)
 8004472:	687b      	ldr	r3, [r7, #4]
 8004474:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8004478:	b2db      	uxtb	r3, r3
 800447a:	2b00      	cmp	r3, #0
 800447c:	d106      	bne.n	800448c <HAL_I2C_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hi2c->Lock = HAL_UNLOCKED;
 800447e:	687b      	ldr	r3, [r7, #4]
 8004480:	2200      	movs	r2, #0
 8004482:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    hi2c->MspInitCallback(hi2c);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_I2C_MspInit(hi2c);
 8004486:	6878      	ldr	r0, [r7, #4]
 8004488:	f7ff fab8 	bl	80039fc <HAL_I2C_MspInit>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }

  hi2c->State = HAL_I2C_STATE_BUSY;
 800448c:	687b      	ldr	r3, [r7, #4]
 800448e:	2224      	movs	r2, #36	; 0x24
 8004490:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Disable the selected I2C peripheral */
  __HAL_I2C_DISABLE(hi2c);
 8004494:	687b      	ldr	r3, [r7, #4]
 8004496:	681b      	ldr	r3, [r3, #0]
 8004498:	681a      	ldr	r2, [r3, #0]
 800449a:	687b      	ldr	r3, [r7, #4]
 800449c:	681b      	ldr	r3, [r3, #0]
 800449e:	f022 0201 	bic.w	r2, r2, #1
 80044a2:	601a      	str	r2, [r3, #0]

  /*Reset I2C*/
  hi2c->Instance->CR1 |= I2C_CR1_SWRST;
 80044a4:	687b      	ldr	r3, [r7, #4]
 80044a6:	681b      	ldr	r3, [r3, #0]
 80044a8:	681a      	ldr	r2, [r3, #0]
 80044aa:	687b      	ldr	r3, [r7, #4]
 80044ac:	681b      	ldr	r3, [r3, #0]
 80044ae:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 80044b2:	601a      	str	r2, [r3, #0]
  hi2c->Instance->CR1 &= ~I2C_CR1_SWRST;
 80044b4:	687b      	ldr	r3, [r7, #4]
 80044b6:	681b      	ldr	r3, [r3, #0]
 80044b8:	681a      	ldr	r2, [r3, #0]
 80044ba:	687b      	ldr	r3, [r7, #4]
 80044bc:	681b      	ldr	r3, [r3, #0]
 80044be:	f422 4200 	bic.w	r2, r2, #32768	; 0x8000
 80044c2:	601a      	str	r2, [r3, #0]

  /* Get PCLK1 frequency */
  pclk1 = HAL_RCC_GetPCLK1Freq();
 80044c4:	f001 fb90 	bl	8005be8 <HAL_RCC_GetPCLK1Freq>
 80044c8:	60f8      	str	r0, [r7, #12]

  /* Check the minimum allowed PCLK1 frequency */
  if (I2C_MIN_PCLK_FREQ(pclk1, hi2c->Init.ClockSpeed) == 1U)
 80044ca:	687b      	ldr	r3, [r7, #4]
 80044cc:	685b      	ldr	r3, [r3, #4]
 80044ce:	4a7b      	ldr	r2, [pc, #492]	; (80046bc <HAL_I2C_Init+0x25c>)
 80044d0:	4293      	cmp	r3, r2
 80044d2:	d807      	bhi.n	80044e4 <HAL_I2C_Init+0x84>
 80044d4:	68fb      	ldr	r3, [r7, #12]
 80044d6:	4a7a      	ldr	r2, [pc, #488]	; (80046c0 <HAL_I2C_Init+0x260>)
 80044d8:	4293      	cmp	r3, r2
 80044da:	bf94      	ite	ls
 80044dc:	2301      	movls	r3, #1
 80044de:	2300      	movhi	r3, #0
 80044e0:	b2db      	uxtb	r3, r3
 80044e2:	e006      	b.n	80044f2 <HAL_I2C_Init+0x92>
 80044e4:	68fb      	ldr	r3, [r7, #12]
 80044e6:	4a77      	ldr	r2, [pc, #476]	; (80046c4 <HAL_I2C_Init+0x264>)
 80044e8:	4293      	cmp	r3, r2
 80044ea:	bf94      	ite	ls
 80044ec:	2301      	movls	r3, #1
 80044ee:	2300      	movhi	r3, #0
 80044f0:	b2db      	uxtb	r3, r3
 80044f2:	2b00      	cmp	r3, #0
 80044f4:	d001      	beq.n	80044fa <HAL_I2C_Init+0x9a>
  {
    return HAL_ERROR;
 80044f6:	2301      	movs	r3, #1
 80044f8:	e0db      	b.n	80046b2 <HAL_I2C_Init+0x252>
  }

  /* Calculate frequency range */
  freqrange = I2C_FREQRANGE(pclk1);
 80044fa:	68fb      	ldr	r3, [r7, #12]
 80044fc:	4a72      	ldr	r2, [pc, #456]	; (80046c8 <HAL_I2C_Init+0x268>)
 80044fe:	fba2 2303 	umull	r2, r3, r2, r3
 8004502:	0c9b      	lsrs	r3, r3, #18
 8004504:	60bb      	str	r3, [r7, #8]

  /*---------------------------- I2Cx CR2 Configuration ----------------------*/
  /* Configure I2Cx: Frequency range */
  MODIFY_REG(hi2c->Instance->CR2, I2C_CR2_FREQ, freqrange);
 8004506:	687b      	ldr	r3, [r7, #4]
 8004508:	681b      	ldr	r3, [r3, #0]
 800450a:	685b      	ldr	r3, [r3, #4]
 800450c:	f023 013f 	bic.w	r1, r3, #63	; 0x3f
 8004510:	687b      	ldr	r3, [r7, #4]
 8004512:	681b      	ldr	r3, [r3, #0]
 8004514:	68ba      	ldr	r2, [r7, #8]
 8004516:	430a      	orrs	r2, r1
 8004518:	605a      	str	r2, [r3, #4]

  /*---------------------------- I2Cx TRISE Configuration --------------------*/
  /* Configure I2Cx: Rise Time */
  MODIFY_REG(hi2c->Instance->TRISE, I2C_TRISE_TRISE, I2C_RISE_TIME(freqrange, hi2c->Init.ClockSpeed));
 800451a:	687b      	ldr	r3, [r7, #4]
 800451c:	681b      	ldr	r3, [r3, #0]
 800451e:	6a1b      	ldr	r3, [r3, #32]
 8004520:	f023 013f 	bic.w	r1, r3, #63	; 0x3f
 8004524:	687b      	ldr	r3, [r7, #4]
 8004526:	685b      	ldr	r3, [r3, #4]
 8004528:	4a64      	ldr	r2, [pc, #400]	; (80046bc <HAL_I2C_Init+0x25c>)
 800452a:	4293      	cmp	r3, r2
 800452c:	d802      	bhi.n	8004534 <HAL_I2C_Init+0xd4>
 800452e:	68bb      	ldr	r3, [r7, #8]
 8004530:	3301      	adds	r3, #1
 8004532:	e009      	b.n	8004548 <HAL_I2C_Init+0xe8>
 8004534:	68bb      	ldr	r3, [r7, #8]
 8004536:	f44f 7296 	mov.w	r2, #300	; 0x12c
 800453a:	fb02 f303 	mul.w	r3, r2, r3
 800453e:	4a63      	ldr	r2, [pc, #396]	; (80046cc <HAL_I2C_Init+0x26c>)
 8004540:	fba2 2303 	umull	r2, r3, r2, r3
 8004544:	099b      	lsrs	r3, r3, #6
 8004546:	3301      	adds	r3, #1
 8004548:	687a      	ldr	r2, [r7, #4]
 800454a:	6812      	ldr	r2, [r2, #0]
 800454c:	430b      	orrs	r3, r1
 800454e:	6213      	str	r3, [r2, #32]

  /*---------------------------- I2Cx CCR Configuration ----------------------*/
  /* Configure I2Cx: Speed */
  MODIFY_REG(hi2c->Instance->CCR, (I2C_CCR_FS | I2C_CCR_DUTY | I2C_CCR_CCR), I2C_SPEED(pclk1, hi2c->Init.ClockSpeed, hi2c->Init.DutyCycle));
 8004550:	687b      	ldr	r3, [r7, #4]
 8004552:	681b      	ldr	r3, [r3, #0]
 8004554:	69db      	ldr	r3, [r3, #28]
 8004556:	f423 424f 	bic.w	r2, r3, #52992	; 0xcf00
 800455a:	f022 02ff 	bic.w	r2, r2, #255	; 0xff
 800455e:	687b      	ldr	r3, [r7, #4]
 8004560:	685b      	ldr	r3, [r3, #4]
 8004562:	4956      	ldr	r1, [pc, #344]	; (80046bc <HAL_I2C_Init+0x25c>)
 8004564:	428b      	cmp	r3, r1
 8004566:	d80d      	bhi.n	8004584 <HAL_I2C_Init+0x124>
 8004568:	68fb      	ldr	r3, [r7, #12]
 800456a:	1e59      	subs	r1, r3, #1
 800456c:	687b      	ldr	r3, [r7, #4]
 800456e:	685b      	ldr	r3, [r3, #4]
 8004570:	005b      	lsls	r3, r3, #1
 8004572:	fbb1 f3f3 	udiv	r3, r1, r3
 8004576:	3301      	adds	r3, #1
 8004578:	f3c3 030b 	ubfx	r3, r3, #0, #12
 800457c:	2b04      	cmp	r3, #4
 800457e:	bf38      	it	cc
 8004580:	2304      	movcc	r3, #4
 8004582:	e04f      	b.n	8004624 <HAL_I2C_Init+0x1c4>
 8004584:	687b      	ldr	r3, [r7, #4]
 8004586:	689b      	ldr	r3, [r3, #8]
 8004588:	2b00      	cmp	r3, #0
 800458a:	d111      	bne.n	80045b0 <HAL_I2C_Init+0x150>
 800458c:	68fb      	ldr	r3, [r7, #12]
 800458e:	1e58      	subs	r0, r3, #1
 8004590:	687b      	ldr	r3, [r7, #4]
 8004592:	6859      	ldr	r1, [r3, #4]
 8004594:	460b      	mov	r3, r1
 8004596:	005b      	lsls	r3, r3, #1
 8004598:	440b      	add	r3, r1
 800459a:	fbb0 f3f3 	udiv	r3, r0, r3
 800459e:	3301      	adds	r3, #1
 80045a0:	f3c3 030b 	ubfx	r3, r3, #0, #12
 80045a4:	2b00      	cmp	r3, #0
 80045a6:	bf0c      	ite	eq
 80045a8:	2301      	moveq	r3, #1
 80045aa:	2300      	movne	r3, #0
 80045ac:	b2db      	uxtb	r3, r3
 80045ae:	e012      	b.n	80045d6 <HAL_I2C_Init+0x176>
 80045b0:	68fb      	ldr	r3, [r7, #12]
 80045b2:	1e58      	subs	r0, r3, #1
 80045b4:	687b      	ldr	r3, [r7, #4]
 80045b6:	6859      	ldr	r1, [r3, #4]
 80045b8:	460b      	mov	r3, r1
 80045ba:	009b      	lsls	r3, r3, #2
 80045bc:	440b      	add	r3, r1
 80045be:	0099      	lsls	r1, r3, #2
 80045c0:	440b      	add	r3, r1
 80045c2:	fbb0 f3f3 	udiv	r3, r0, r3
 80045c6:	3301      	adds	r3, #1
 80045c8:	f3c3 030b 	ubfx	r3, r3, #0, #12
 80045cc:	2b00      	cmp	r3, #0
 80045ce:	bf0c      	ite	eq
 80045d0:	2301      	moveq	r3, #1
 80045d2:	2300      	movne	r3, #0
 80045d4:	b2db      	uxtb	r3, r3
 80045d6:	2b00      	cmp	r3, #0
 80045d8:	d001      	beq.n	80045de <HAL_I2C_Init+0x17e>
 80045da:	2301      	movs	r3, #1
 80045dc:	e022      	b.n	8004624 <HAL_I2C_Init+0x1c4>
 80045de:	687b      	ldr	r3, [r7, #4]
 80045e0:	689b      	ldr	r3, [r3, #8]
 80045e2:	2b00      	cmp	r3, #0
 80045e4:	d10e      	bne.n	8004604 <HAL_I2C_Init+0x1a4>
 80045e6:	68fb      	ldr	r3, [r7, #12]
 80045e8:	1e58      	subs	r0, r3, #1
 80045ea:	687b      	ldr	r3, [r7, #4]
 80045ec:	6859      	ldr	r1, [r3, #4]
 80045ee:	460b      	mov	r3, r1
 80045f0:	005b      	lsls	r3, r3, #1
 80045f2:	440b      	add	r3, r1
 80045f4:	fbb0 f3f3 	udiv	r3, r0, r3
 80045f8:	3301      	adds	r3, #1
 80045fa:	f3c3 030b 	ubfx	r3, r3, #0, #12
 80045fe:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8004602:	e00f      	b.n	8004624 <HAL_I2C_Init+0x1c4>
 8004604:	68fb      	ldr	r3, [r7, #12]
 8004606:	1e58      	subs	r0, r3, #1
 8004608:	687b      	ldr	r3, [r7, #4]
 800460a:	6859      	ldr	r1, [r3, #4]
 800460c:	460b      	mov	r3, r1
 800460e:	009b      	lsls	r3, r3, #2
 8004610:	440b      	add	r3, r1
 8004612:	0099      	lsls	r1, r3, #2
 8004614:	440b      	add	r3, r1
 8004616:	fbb0 f3f3 	udiv	r3, r0, r3
 800461a:	3301      	adds	r3, #1
 800461c:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8004620:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 8004624:	6879      	ldr	r1, [r7, #4]
 8004626:	6809      	ldr	r1, [r1, #0]
 8004628:	4313      	orrs	r3, r2
 800462a:	61cb      	str	r3, [r1, #28]

  /*---------------------------- I2Cx CR1 Configuration ----------------------*/
  /* Configure I2Cx: Generalcall and NoStretch mode */
  MODIFY_REG(hi2c->Instance->CR1, (I2C_CR1_ENGC | I2C_CR1_NOSTRETCH), (hi2c->Init.GeneralCallMode | hi2c->Init.NoStretchMode));
 800462c:	687b      	ldr	r3, [r7, #4]
 800462e:	681b      	ldr	r3, [r3, #0]
 8004630:	681b      	ldr	r3, [r3, #0]
 8004632:	f023 01c0 	bic.w	r1, r3, #192	; 0xc0
 8004636:	687b      	ldr	r3, [r7, #4]
 8004638:	69da      	ldr	r2, [r3, #28]
 800463a:	687b      	ldr	r3, [r7, #4]
 800463c:	6a1b      	ldr	r3, [r3, #32]
 800463e:	431a      	orrs	r2, r3
 8004640:	687b      	ldr	r3, [r7, #4]
 8004642:	681b      	ldr	r3, [r3, #0]
 8004644:	430a      	orrs	r2, r1
 8004646:	601a      	str	r2, [r3, #0]

  /*---------------------------- I2Cx OAR1 Configuration ---------------------*/
  /* Configure I2Cx: Own Address1 and addressing mode */
  MODIFY_REG(hi2c->Instance->OAR1, (I2C_OAR1_ADDMODE | I2C_OAR1_ADD8_9 | I2C_OAR1_ADD1_7 | I2C_OAR1_ADD0), (hi2c->Init.AddressingMode | hi2c->Init.OwnAddress1));
 8004648:	687b      	ldr	r3, [r7, #4]
 800464a:	681b      	ldr	r3, [r3, #0]
 800464c:	689b      	ldr	r3, [r3, #8]
 800464e:	f423 4303 	bic.w	r3, r3, #33536	; 0x8300
 8004652:	f023 03ff 	bic.w	r3, r3, #255	; 0xff
 8004656:	687a      	ldr	r2, [r7, #4]
 8004658:	6911      	ldr	r1, [r2, #16]
 800465a:	687a      	ldr	r2, [r7, #4]
 800465c:	68d2      	ldr	r2, [r2, #12]
 800465e:	4311      	orrs	r1, r2
 8004660:	687a      	ldr	r2, [r7, #4]
 8004662:	6812      	ldr	r2, [r2, #0]
 8004664:	430b      	orrs	r3, r1
 8004666:	6093      	str	r3, [r2, #8]

  /*---------------------------- I2Cx OAR2 Configuration ---------------------*/
  /* Configure I2Cx: Dual mode and Own Address2 */
  MODIFY_REG(hi2c->Instance->OAR2, (I2C_OAR2_ENDUAL | I2C_OAR2_ADD2), (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2));
 8004668:	687b      	ldr	r3, [r7, #4]
 800466a:	681b      	ldr	r3, [r3, #0]
 800466c:	68db      	ldr	r3, [r3, #12]
 800466e:	f023 01ff 	bic.w	r1, r3, #255	; 0xff
 8004672:	687b      	ldr	r3, [r7, #4]
 8004674:	695a      	ldr	r2, [r3, #20]
 8004676:	687b      	ldr	r3, [r7, #4]
 8004678:	699b      	ldr	r3, [r3, #24]
 800467a:	431a      	orrs	r2, r3
 800467c:	687b      	ldr	r3, [r7, #4]
 800467e:	681b      	ldr	r3, [r3, #0]
 8004680:	430a      	orrs	r2, r1
 8004682:	60da      	str	r2, [r3, #12]

  /* Enable the selected I2C peripheral */
  __HAL_I2C_ENABLE(hi2c);
 8004684:	687b      	ldr	r3, [r7, #4]
 8004686:	681b      	ldr	r3, [r3, #0]
 8004688:	681a      	ldr	r2, [r3, #0]
 800468a:	687b      	ldr	r3, [r7, #4]
 800468c:	681b      	ldr	r3, [r3, #0]
 800468e:	f042 0201 	orr.w	r2, r2, #1
 8004692:	601a      	str	r2, [r3, #0]

  hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8004694:	687b      	ldr	r3, [r7, #4]
 8004696:	2200      	movs	r2, #0
 8004698:	641a      	str	r2, [r3, #64]	; 0x40
  hi2c->State = HAL_I2C_STATE_READY;
 800469a:	687b      	ldr	r3, [r7, #4]
 800469c:	2220      	movs	r2, #32
 800469e:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
  hi2c->PreviousState = I2C_STATE_NONE;
 80046a2:	687b      	ldr	r3, [r7, #4]
 80046a4:	2200      	movs	r2, #0
 80046a6:	631a      	str	r2, [r3, #48]	; 0x30
  hi2c->Mode = HAL_I2C_MODE_NONE;
 80046a8:	687b      	ldr	r3, [r7, #4]
 80046aa:	2200      	movs	r2, #0
 80046ac:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

  return HAL_OK;
 80046b0:	2300      	movs	r3, #0
}
 80046b2:	4618      	mov	r0, r3
 80046b4:	3710      	adds	r7, #16
 80046b6:	46bd      	mov	sp, r7
 80046b8:	bd80      	pop	{r7, pc}
 80046ba:	bf00      	nop
 80046bc:	000186a0 	.word	0x000186a0
 80046c0:	001e847f 	.word	0x001e847f
 80046c4:	003d08ff 	.word	0x003d08ff
 80046c8:	431bde83 	.word	0x431bde83
 80046cc:	10624dd3 	.word	0x10624dd3

080046d0 <HAL_I2C_Mem_Write>:
  * @param  Size Amount of data to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Mem_Write(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint16_t MemAddress, uint16_t MemAddSize, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 80046d0:	b580      	push	{r7, lr}
 80046d2:	b088      	sub	sp, #32
 80046d4:	af02      	add	r7, sp, #8
 80046d6:	60f8      	str	r0, [r7, #12]
 80046d8:	4608      	mov	r0, r1
 80046da:	4611      	mov	r1, r2
 80046dc:	461a      	mov	r2, r3
 80046de:	4603      	mov	r3, r0
 80046e0:	817b      	strh	r3, [r7, #10]
 80046e2:	460b      	mov	r3, r1
 80046e4:	813b      	strh	r3, [r7, #8]
 80046e6:	4613      	mov	r3, r2
 80046e8:	80fb      	strh	r3, [r7, #6]
  /* Init tickstart for timeout management*/
  uint32_t tickstart = HAL_GetTick();
 80046ea:	f7ff fb75 	bl	8003dd8 <HAL_GetTick>
 80046ee:	6178      	str	r0, [r7, #20]

  /* Check the parameters */
  assert_param(IS_I2C_MEMADD_SIZE(MemAddSize));

  if (hi2c->State == HAL_I2C_STATE_READY)
 80046f0:	68fb      	ldr	r3, [r7, #12]
 80046f2:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80046f6:	b2db      	uxtb	r3, r3
 80046f8:	2b20      	cmp	r3, #32
 80046fa:	f040 80d9 	bne.w	80048b0 <HAL_I2C_Mem_Write+0x1e0>
  {
    /* Wait until BUSY flag is reset */
    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY_FLAG, tickstart) != HAL_OK)
 80046fe:	697b      	ldr	r3, [r7, #20]
 8004700:	9300      	str	r3, [sp, #0]
 8004702:	2319      	movs	r3, #25
 8004704:	2201      	movs	r2, #1
 8004706:	496d      	ldr	r1, [pc, #436]	; (80048bc <HAL_I2C_Mem_Write+0x1ec>)
 8004708:	68f8      	ldr	r0, [r7, #12]
 800470a:	f000 fcbb 	bl	8005084 <I2C_WaitOnFlagUntilTimeout>
 800470e:	4603      	mov	r3, r0
 8004710:	2b00      	cmp	r3, #0
 8004712:	d001      	beq.n	8004718 <HAL_I2C_Mem_Write+0x48>
    {
      return HAL_BUSY;
 8004714:	2302      	movs	r3, #2
 8004716:	e0cc      	b.n	80048b2 <HAL_I2C_Mem_Write+0x1e2>
    }

    /* Process Locked */
    __HAL_LOCK(hi2c);
 8004718:	68fb      	ldr	r3, [r7, #12]
 800471a:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 800471e:	2b01      	cmp	r3, #1
 8004720:	d101      	bne.n	8004726 <HAL_I2C_Mem_Write+0x56>
 8004722:	2302      	movs	r3, #2
 8004724:	e0c5      	b.n	80048b2 <HAL_I2C_Mem_Write+0x1e2>
 8004726:	68fb      	ldr	r3, [r7, #12]
 8004728:	2201      	movs	r2, #1
 800472a:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Check if the I2C is already enabled */
    if ((hi2c->Instance->CR1 & I2C_CR1_PE) != I2C_CR1_PE)
 800472e:	68fb      	ldr	r3, [r7, #12]
 8004730:	681b      	ldr	r3, [r3, #0]
 8004732:	681b      	ldr	r3, [r3, #0]
 8004734:	f003 0301 	and.w	r3, r3, #1
 8004738:	2b01      	cmp	r3, #1
 800473a:	d007      	beq.n	800474c <HAL_I2C_Mem_Write+0x7c>
    {
      /* Enable I2C peripheral */
      __HAL_I2C_ENABLE(hi2c);
 800473c:	68fb      	ldr	r3, [r7, #12]
 800473e:	681b      	ldr	r3, [r3, #0]
 8004740:	681a      	ldr	r2, [r3, #0]
 8004742:	68fb      	ldr	r3, [r7, #12]
 8004744:	681b      	ldr	r3, [r3, #0]
 8004746:	f042 0201 	orr.w	r2, r2, #1
 800474a:	601a      	str	r2, [r3, #0]
    }

    /* Disable Pos */
    CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 800474c:	68fb      	ldr	r3, [r7, #12]
 800474e:	681b      	ldr	r3, [r3, #0]
 8004750:	681a      	ldr	r2, [r3, #0]
 8004752:	68fb      	ldr	r3, [r7, #12]
 8004754:	681b      	ldr	r3, [r3, #0]
 8004756:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 800475a:	601a      	str	r2, [r3, #0]

    hi2c->State     = HAL_I2C_STATE_BUSY_TX;
 800475c:	68fb      	ldr	r3, [r7, #12]
 800475e:	2221      	movs	r2, #33	; 0x21
 8004760:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode      = HAL_I2C_MODE_MEM;
 8004764:	68fb      	ldr	r3, [r7, #12]
 8004766:	2240      	movs	r2, #64	; 0x40
 8004768:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 800476c:	68fb      	ldr	r3, [r7, #12]
 800476e:	2200      	movs	r2, #0
 8004770:	641a      	str	r2, [r3, #64]	; 0x40

    /* Prepare transfer parameters */
    hi2c->pBuffPtr    = pData;
 8004772:	68fb      	ldr	r3, [r7, #12]
 8004774:	6a3a      	ldr	r2, [r7, #32]
 8004776:	625a      	str	r2, [r3, #36]	; 0x24
    hi2c->XferCount   = Size;
 8004778:	68fb      	ldr	r3, [r7, #12]
 800477a:	8cba      	ldrh	r2, [r7, #36]	; 0x24
 800477c:	855a      	strh	r2, [r3, #42]	; 0x2a
    hi2c->XferSize    = hi2c->XferCount;
 800477e:	68fb      	ldr	r3, [r7, #12]
 8004780:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8004782:	b29a      	uxth	r2, r3
 8004784:	68fb      	ldr	r3, [r7, #12]
 8004786:	851a      	strh	r2, [r3, #40]	; 0x28
    hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 8004788:	68fb      	ldr	r3, [r7, #12]
 800478a:	4a4d      	ldr	r2, [pc, #308]	; (80048c0 <HAL_I2C_Mem_Write+0x1f0>)
 800478c:	62da      	str	r2, [r3, #44]	; 0x2c

    /* Send Slave Address and Memory Address */
    if (I2C_RequestMemoryWrite(hi2c, DevAddress, MemAddress, MemAddSize, Timeout, tickstart) != HAL_OK)
 800478e:	88f8      	ldrh	r0, [r7, #6]
 8004790:	893a      	ldrh	r2, [r7, #8]
 8004792:	8979      	ldrh	r1, [r7, #10]
 8004794:	697b      	ldr	r3, [r7, #20]
 8004796:	9301      	str	r3, [sp, #4]
 8004798:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800479a:	9300      	str	r3, [sp, #0]
 800479c:	4603      	mov	r3, r0
 800479e:	68f8      	ldr	r0, [r7, #12]
 80047a0:	f000 faf2 	bl	8004d88 <I2C_RequestMemoryWrite>
 80047a4:	4603      	mov	r3, r0
 80047a6:	2b00      	cmp	r3, #0
 80047a8:	d052      	beq.n	8004850 <HAL_I2C_Mem_Write+0x180>
    {
      return HAL_ERROR;
 80047aa:	2301      	movs	r3, #1
 80047ac:	e081      	b.n	80048b2 <HAL_I2C_Mem_Write+0x1e2>
    }

    while (hi2c->XferSize > 0U)
    {
      /* Wait until TXE flag is set */
      if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 80047ae:	697a      	ldr	r2, [r7, #20]
 80047b0:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 80047b2:	68f8      	ldr	r0, [r7, #12]
 80047b4:	f000 fd3c 	bl	8005230 <I2C_WaitOnTXEFlagUntilTimeout>
 80047b8:	4603      	mov	r3, r0
 80047ba:	2b00      	cmp	r3, #0
 80047bc:	d00d      	beq.n	80047da <HAL_I2C_Mem_Write+0x10a>
      {
        if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 80047be:	68fb      	ldr	r3, [r7, #12]
 80047c0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80047c2:	2b04      	cmp	r3, #4
 80047c4:	d107      	bne.n	80047d6 <HAL_I2C_Mem_Write+0x106>
        {
          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 80047c6:	68fb      	ldr	r3, [r7, #12]
 80047c8:	681b      	ldr	r3, [r3, #0]
 80047ca:	681a      	ldr	r2, [r3, #0]
 80047cc:	68fb      	ldr	r3, [r7, #12]
 80047ce:	681b      	ldr	r3, [r3, #0]
 80047d0:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 80047d4:	601a      	str	r2, [r3, #0]
        }
        return HAL_ERROR;
 80047d6:	2301      	movs	r3, #1
 80047d8:	e06b      	b.n	80048b2 <HAL_I2C_Mem_Write+0x1e2>
      }

      /* Write data to DR */
      hi2c->Instance->DR = *hi2c->pBuffPtr;
 80047da:	68fb      	ldr	r3, [r7, #12]
 80047dc:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80047de:	781a      	ldrb	r2, [r3, #0]
 80047e0:	68fb      	ldr	r3, [r7, #12]
 80047e2:	681b      	ldr	r3, [r3, #0]
 80047e4:	611a      	str	r2, [r3, #16]

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 80047e6:	68fb      	ldr	r3, [r7, #12]
 80047e8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80047ea:	1c5a      	adds	r2, r3, #1
 80047ec:	68fb      	ldr	r3, [r7, #12]
 80047ee:	625a      	str	r2, [r3, #36]	; 0x24

      /* Update counter */
      hi2c->XferSize--;
 80047f0:	68fb      	ldr	r3, [r7, #12]
 80047f2:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80047f4:	3b01      	subs	r3, #1
 80047f6:	b29a      	uxth	r2, r3
 80047f8:	68fb      	ldr	r3, [r7, #12]
 80047fa:	851a      	strh	r2, [r3, #40]	; 0x28
      hi2c->XferCount--;
 80047fc:	68fb      	ldr	r3, [r7, #12]
 80047fe:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8004800:	b29b      	uxth	r3, r3
 8004802:	3b01      	subs	r3, #1
 8004804:	b29a      	uxth	r2, r3
 8004806:	68fb      	ldr	r3, [r7, #12]
 8004808:	855a      	strh	r2, [r3, #42]	; 0x2a

      if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == SET) && (hi2c->XferSize != 0U))
 800480a:	68fb      	ldr	r3, [r7, #12]
 800480c:	681b      	ldr	r3, [r3, #0]
 800480e:	695b      	ldr	r3, [r3, #20]
 8004810:	f003 0304 	and.w	r3, r3, #4
 8004814:	2b04      	cmp	r3, #4
 8004816:	d11b      	bne.n	8004850 <HAL_I2C_Mem_Write+0x180>
 8004818:	68fb      	ldr	r3, [r7, #12]
 800481a:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800481c:	2b00      	cmp	r3, #0
 800481e:	d017      	beq.n	8004850 <HAL_I2C_Mem_Write+0x180>
      {
        /* Write data to DR */
        hi2c->Instance->DR = *hi2c->pBuffPtr;
 8004820:	68fb      	ldr	r3, [r7, #12]
 8004822:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004824:	781a      	ldrb	r2, [r3, #0]
 8004826:	68fb      	ldr	r3, [r7, #12]
 8004828:	681b      	ldr	r3, [r3, #0]
 800482a:	611a      	str	r2, [r3, #16]

        /* Increment Buffer pointer */
        hi2c->pBuffPtr++;
 800482c:	68fb      	ldr	r3, [r7, #12]
 800482e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004830:	1c5a      	adds	r2, r3, #1
 8004832:	68fb      	ldr	r3, [r7, #12]
 8004834:	625a      	str	r2, [r3, #36]	; 0x24

        /* Update counter */
        hi2c->XferSize--;
 8004836:	68fb      	ldr	r3, [r7, #12]
 8004838:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800483a:	3b01      	subs	r3, #1
 800483c:	b29a      	uxth	r2, r3
 800483e:	68fb      	ldr	r3, [r7, #12]
 8004840:	851a      	strh	r2, [r3, #40]	; 0x28
        hi2c->XferCount--;
 8004842:	68fb      	ldr	r3, [r7, #12]
 8004844:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8004846:	b29b      	uxth	r3, r3
 8004848:	3b01      	subs	r3, #1
 800484a:	b29a      	uxth	r2, r3
 800484c:	68fb      	ldr	r3, [r7, #12]
 800484e:	855a      	strh	r2, [r3, #42]	; 0x2a
    while (hi2c->XferSize > 0U)
 8004850:	68fb      	ldr	r3, [r7, #12]
 8004852:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8004854:	2b00      	cmp	r3, #0
 8004856:	d1aa      	bne.n	80047ae <HAL_I2C_Mem_Write+0xde>
      }
    }

    /* Wait until BTF flag is set */
    if (I2C_WaitOnBTFFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8004858:	697a      	ldr	r2, [r7, #20]
 800485a:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 800485c:	68f8      	ldr	r0, [r7, #12]
 800485e:	f000 fd28 	bl	80052b2 <I2C_WaitOnBTFFlagUntilTimeout>
 8004862:	4603      	mov	r3, r0
 8004864:	2b00      	cmp	r3, #0
 8004866:	d00d      	beq.n	8004884 <HAL_I2C_Mem_Write+0x1b4>
    {
      if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 8004868:	68fb      	ldr	r3, [r7, #12]
 800486a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800486c:	2b04      	cmp	r3, #4
 800486e:	d107      	bne.n	8004880 <HAL_I2C_Mem_Write+0x1b0>
      {
        /* Generate Stop */
        SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8004870:	68fb      	ldr	r3, [r7, #12]
 8004872:	681b      	ldr	r3, [r3, #0]
 8004874:	681a      	ldr	r2, [r3, #0]
 8004876:	68fb      	ldr	r3, [r7, #12]
 8004878:	681b      	ldr	r3, [r3, #0]
 800487a:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 800487e:	601a      	str	r2, [r3, #0]
      }
      return HAL_ERROR;
 8004880:	2301      	movs	r3, #1
 8004882:	e016      	b.n	80048b2 <HAL_I2C_Mem_Write+0x1e2>
    }

    /* Generate Stop */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8004884:	68fb      	ldr	r3, [r7, #12]
 8004886:	681b      	ldr	r3, [r3, #0]
 8004888:	681a      	ldr	r2, [r3, #0]
 800488a:	68fb      	ldr	r3, [r7, #12]
 800488c:	681b      	ldr	r3, [r3, #0]
 800488e:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8004892:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 8004894:	68fb      	ldr	r3, [r7, #12]
 8004896:	2220      	movs	r2, #32
 8004898:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode = HAL_I2C_MODE_NONE;
 800489c:	68fb      	ldr	r3, [r7, #12]
 800489e:	2200      	movs	r2, #0
 80048a0:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 80048a4:	68fb      	ldr	r3, [r7, #12]
 80048a6:	2200      	movs	r2, #0
 80048a8:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    return HAL_OK;
 80048ac:	2300      	movs	r3, #0
 80048ae:	e000      	b.n	80048b2 <HAL_I2C_Mem_Write+0x1e2>
  }
  else
  {
    return HAL_BUSY;
 80048b0:	2302      	movs	r3, #2
  }
}
 80048b2:	4618      	mov	r0, r3
 80048b4:	3718      	adds	r7, #24
 80048b6:	46bd      	mov	sp, r7
 80048b8:	bd80      	pop	{r7, pc}
 80048ba:	bf00      	nop
 80048bc:	00100002 	.word	0x00100002
 80048c0:	ffff0000 	.word	0xffff0000

080048c4 <HAL_I2C_Mem_Read>:
  * @param  Size Amount of data to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Mem_Read(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint16_t MemAddress, uint16_t MemAddSize, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 80048c4:	b580      	push	{r7, lr}
 80048c6:	b08c      	sub	sp, #48	; 0x30
 80048c8:	af02      	add	r7, sp, #8
 80048ca:	60f8      	str	r0, [r7, #12]
 80048cc:	4608      	mov	r0, r1
 80048ce:	4611      	mov	r1, r2
 80048d0:	461a      	mov	r2, r3
 80048d2:	4603      	mov	r3, r0
 80048d4:	817b      	strh	r3, [r7, #10]
 80048d6:	460b      	mov	r3, r1
 80048d8:	813b      	strh	r3, [r7, #8]
 80048da:	4613      	mov	r3, r2
 80048dc:	80fb      	strh	r3, [r7, #6]
  __IO uint32_t count = 0U;
 80048de:	2300      	movs	r3, #0
 80048e0:	623b      	str	r3, [r7, #32]

  /* Init tickstart for timeout management*/
  uint32_t tickstart = HAL_GetTick();
 80048e2:	f7ff fa79 	bl	8003dd8 <HAL_GetTick>
 80048e6:	6278      	str	r0, [r7, #36]	; 0x24

  /* Check the parameters */
  assert_param(IS_I2C_MEMADD_SIZE(MemAddSize));

  if (hi2c->State == HAL_I2C_STATE_READY)
 80048e8:	68fb      	ldr	r3, [r7, #12]
 80048ea:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80048ee:	b2db      	uxtb	r3, r3
 80048f0:	2b20      	cmp	r3, #32
 80048f2:	f040 823d 	bne.w	8004d70 <HAL_I2C_Mem_Read+0x4ac>
  {
    /* Wait until BUSY flag is reset */
    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY_FLAG, tickstart) != HAL_OK)
 80048f6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80048f8:	9300      	str	r3, [sp, #0]
 80048fa:	2319      	movs	r3, #25
 80048fc:	2201      	movs	r2, #1
 80048fe:	4981      	ldr	r1, [pc, #516]	; (8004b04 <HAL_I2C_Mem_Read+0x240>)
 8004900:	68f8      	ldr	r0, [r7, #12]
 8004902:	f000 fbbf 	bl	8005084 <I2C_WaitOnFlagUntilTimeout>
 8004906:	4603      	mov	r3, r0
 8004908:	2b00      	cmp	r3, #0
 800490a:	d001      	beq.n	8004910 <HAL_I2C_Mem_Read+0x4c>
    {
      return HAL_BUSY;
 800490c:	2302      	movs	r3, #2
 800490e:	e230      	b.n	8004d72 <HAL_I2C_Mem_Read+0x4ae>
    }

    /* Process Locked */
    __HAL_LOCK(hi2c);
 8004910:	68fb      	ldr	r3, [r7, #12]
 8004912:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8004916:	2b01      	cmp	r3, #1
 8004918:	d101      	bne.n	800491e <HAL_I2C_Mem_Read+0x5a>
 800491a:	2302      	movs	r3, #2
 800491c:	e229      	b.n	8004d72 <HAL_I2C_Mem_Read+0x4ae>
 800491e:	68fb      	ldr	r3, [r7, #12]
 8004920:	2201      	movs	r2, #1
 8004922:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Check if the I2C is already enabled */
    if ((hi2c->Instance->CR1 & I2C_CR1_PE) != I2C_CR1_PE)
 8004926:	68fb      	ldr	r3, [r7, #12]
 8004928:	681b      	ldr	r3, [r3, #0]
 800492a:	681b      	ldr	r3, [r3, #0]
 800492c:	f003 0301 	and.w	r3, r3, #1
 8004930:	2b01      	cmp	r3, #1
 8004932:	d007      	beq.n	8004944 <HAL_I2C_Mem_Read+0x80>
    {
      /* Enable I2C peripheral */
      __HAL_I2C_ENABLE(hi2c);
 8004934:	68fb      	ldr	r3, [r7, #12]
 8004936:	681b      	ldr	r3, [r3, #0]
 8004938:	681a      	ldr	r2, [r3, #0]
 800493a:	68fb      	ldr	r3, [r7, #12]
 800493c:	681b      	ldr	r3, [r3, #0]
 800493e:	f042 0201 	orr.w	r2, r2, #1
 8004942:	601a      	str	r2, [r3, #0]
    }

    /* Disable Pos */
    CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 8004944:	68fb      	ldr	r3, [r7, #12]
 8004946:	681b      	ldr	r3, [r3, #0]
 8004948:	681a      	ldr	r2, [r3, #0]
 800494a:	68fb      	ldr	r3, [r7, #12]
 800494c:	681b      	ldr	r3, [r3, #0]
 800494e:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 8004952:	601a      	str	r2, [r3, #0]

    hi2c->State     = HAL_I2C_STATE_BUSY_RX;
 8004954:	68fb      	ldr	r3, [r7, #12]
 8004956:	2222      	movs	r2, #34	; 0x22
 8004958:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode      = HAL_I2C_MODE_MEM;
 800495c:	68fb      	ldr	r3, [r7, #12]
 800495e:	2240      	movs	r2, #64	; 0x40
 8004960:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8004964:	68fb      	ldr	r3, [r7, #12]
 8004966:	2200      	movs	r2, #0
 8004968:	641a      	str	r2, [r3, #64]	; 0x40

    /* Prepare transfer parameters */
    hi2c->pBuffPtr    = pData;
 800496a:	68fb      	ldr	r3, [r7, #12]
 800496c:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 800496e:	625a      	str	r2, [r3, #36]	; 0x24
    hi2c->XferCount   = Size;
 8004970:	68fb      	ldr	r3, [r7, #12]
 8004972:	8eba      	ldrh	r2, [r7, #52]	; 0x34
 8004974:	855a      	strh	r2, [r3, #42]	; 0x2a
    hi2c->XferSize    = hi2c->XferCount;
 8004976:	68fb      	ldr	r3, [r7, #12]
 8004978:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800497a:	b29a      	uxth	r2, r3
 800497c:	68fb      	ldr	r3, [r7, #12]
 800497e:	851a      	strh	r2, [r3, #40]	; 0x28
    hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 8004980:	68fb      	ldr	r3, [r7, #12]
 8004982:	4a61      	ldr	r2, [pc, #388]	; (8004b08 <HAL_I2C_Mem_Read+0x244>)
 8004984:	62da      	str	r2, [r3, #44]	; 0x2c

    /* Send Slave Address and Memory Address */
    if (I2C_RequestMemoryRead(hi2c, DevAddress, MemAddress, MemAddSize, Timeout, tickstart) != HAL_OK)
 8004986:	88f8      	ldrh	r0, [r7, #6]
 8004988:	893a      	ldrh	r2, [r7, #8]
 800498a:	8979      	ldrh	r1, [r7, #10]
 800498c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800498e:	9301      	str	r3, [sp, #4]
 8004990:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8004992:	9300      	str	r3, [sp, #0]
 8004994:	4603      	mov	r3, r0
 8004996:	68f8      	ldr	r0, [r7, #12]
 8004998:	f000 fa8c 	bl	8004eb4 <I2C_RequestMemoryRead>
 800499c:	4603      	mov	r3, r0
 800499e:	2b00      	cmp	r3, #0
 80049a0:	d001      	beq.n	80049a6 <HAL_I2C_Mem_Read+0xe2>
    {
      return HAL_ERROR;
 80049a2:	2301      	movs	r3, #1
 80049a4:	e1e5      	b.n	8004d72 <HAL_I2C_Mem_Read+0x4ae>
    }

    if (hi2c->XferSize == 0U)
 80049a6:	68fb      	ldr	r3, [r7, #12]
 80049a8:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80049aa:	2b00      	cmp	r3, #0
 80049ac:	d113      	bne.n	80049d6 <HAL_I2C_Mem_Read+0x112>
    {
      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 80049ae:	2300      	movs	r3, #0
 80049b0:	61fb      	str	r3, [r7, #28]
 80049b2:	68fb      	ldr	r3, [r7, #12]
 80049b4:	681b      	ldr	r3, [r3, #0]
 80049b6:	695b      	ldr	r3, [r3, #20]
 80049b8:	61fb      	str	r3, [r7, #28]
 80049ba:	68fb      	ldr	r3, [r7, #12]
 80049bc:	681b      	ldr	r3, [r3, #0]
 80049be:	699b      	ldr	r3, [r3, #24]
 80049c0:	61fb      	str	r3, [r7, #28]
 80049c2:	69fb      	ldr	r3, [r7, #28]

      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 80049c4:	68fb      	ldr	r3, [r7, #12]
 80049c6:	681b      	ldr	r3, [r3, #0]
 80049c8:	681a      	ldr	r2, [r3, #0]
 80049ca:	68fb      	ldr	r3, [r7, #12]
 80049cc:	681b      	ldr	r3, [r3, #0]
 80049ce:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 80049d2:	601a      	str	r2, [r3, #0]
 80049d4:	e1b9      	b.n	8004d4a <HAL_I2C_Mem_Read+0x486>
    }
    else if (hi2c->XferSize == 1U)
 80049d6:	68fb      	ldr	r3, [r7, #12]
 80049d8:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80049da:	2b01      	cmp	r3, #1
 80049dc:	d11d      	bne.n	8004a1a <HAL_I2C_Mem_Read+0x156>
    {
      /* Disable Acknowledge */
      CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 80049de:	68fb      	ldr	r3, [r7, #12]
 80049e0:	681b      	ldr	r3, [r3, #0]
 80049e2:	681a      	ldr	r2, [r3, #0]
 80049e4:	68fb      	ldr	r3, [r7, #12]
 80049e6:	681b      	ldr	r3, [r3, #0]
 80049e8:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 80049ec:	601a      	str	r2, [r3, #0]
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 80049ee:	b672      	cpsid	i
      /* Disable all active IRQs around ADDR clearing and STOP programming because the EV6_3
         software sequence must complete before the current byte end of transfer */
      __disable_irq();

      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 80049f0:	2300      	movs	r3, #0
 80049f2:	61bb      	str	r3, [r7, #24]
 80049f4:	68fb      	ldr	r3, [r7, #12]
 80049f6:	681b      	ldr	r3, [r3, #0]
 80049f8:	695b      	ldr	r3, [r3, #20]
 80049fa:	61bb      	str	r3, [r7, #24]
 80049fc:	68fb      	ldr	r3, [r7, #12]
 80049fe:	681b      	ldr	r3, [r3, #0]
 8004a00:	699b      	ldr	r3, [r3, #24]
 8004a02:	61bb      	str	r3, [r7, #24]
 8004a04:	69bb      	ldr	r3, [r7, #24]

      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8004a06:	68fb      	ldr	r3, [r7, #12]
 8004a08:	681b      	ldr	r3, [r3, #0]
 8004a0a:	681a      	ldr	r2, [r3, #0]
 8004a0c:	68fb      	ldr	r3, [r7, #12]
 8004a0e:	681b      	ldr	r3, [r3, #0]
 8004a10:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8004a14:	601a      	str	r2, [r3, #0]
  __ASM volatile ("cpsie i" : : : "memory");
 8004a16:	b662      	cpsie	i
 8004a18:	e197      	b.n	8004d4a <HAL_I2C_Mem_Read+0x486>

      /* Re-enable IRQs */
      __enable_irq();
    }
    else if (hi2c->XferSize == 2U)
 8004a1a:	68fb      	ldr	r3, [r7, #12]
 8004a1c:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8004a1e:	2b02      	cmp	r3, #2
 8004a20:	d11d      	bne.n	8004a5e <HAL_I2C_Mem_Read+0x19a>
    {
      /* Enable Pos */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 8004a22:	68fb      	ldr	r3, [r7, #12]
 8004a24:	681b      	ldr	r3, [r3, #0]
 8004a26:	681a      	ldr	r2, [r3, #0]
 8004a28:	68fb      	ldr	r3, [r7, #12]
 8004a2a:	681b      	ldr	r3, [r3, #0]
 8004a2c:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 8004a30:	601a      	str	r2, [r3, #0]
  __ASM volatile ("cpsid i" : : : "memory");
 8004a32:	b672      	cpsid	i
      /* Disable all active IRQs around ADDR clearing and STOP programming because the EV6_3
         software sequence must complete before the current byte end of transfer */
      __disable_irq();

      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8004a34:	2300      	movs	r3, #0
 8004a36:	617b      	str	r3, [r7, #20]
 8004a38:	68fb      	ldr	r3, [r7, #12]
 8004a3a:	681b      	ldr	r3, [r3, #0]
 8004a3c:	695b      	ldr	r3, [r3, #20]
 8004a3e:	617b      	str	r3, [r7, #20]
 8004a40:	68fb      	ldr	r3, [r7, #12]
 8004a42:	681b      	ldr	r3, [r3, #0]
 8004a44:	699b      	ldr	r3, [r3, #24]
 8004a46:	617b      	str	r3, [r7, #20]
 8004a48:	697b      	ldr	r3, [r7, #20]

      /* Disable Acknowledge */
      CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8004a4a:	68fb      	ldr	r3, [r7, #12]
 8004a4c:	681b      	ldr	r3, [r3, #0]
 8004a4e:	681a      	ldr	r2, [r3, #0]
 8004a50:	68fb      	ldr	r3, [r7, #12]
 8004a52:	681b      	ldr	r3, [r3, #0]
 8004a54:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8004a58:	601a      	str	r2, [r3, #0]
  __ASM volatile ("cpsie i" : : : "memory");
 8004a5a:	b662      	cpsie	i
 8004a5c:	e175      	b.n	8004d4a <HAL_I2C_Mem_Read+0x486>
      __enable_irq();
    }
    else
    {
      /* Enable Acknowledge */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8004a5e:	68fb      	ldr	r3, [r7, #12]
 8004a60:	681b      	ldr	r3, [r3, #0]
 8004a62:	681a      	ldr	r2, [r3, #0]
 8004a64:	68fb      	ldr	r3, [r7, #12]
 8004a66:	681b      	ldr	r3, [r3, #0]
 8004a68:	f442 6280 	orr.w	r2, r2, #1024	; 0x400
 8004a6c:	601a      	str	r2, [r3, #0]
      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8004a6e:	2300      	movs	r3, #0
 8004a70:	613b      	str	r3, [r7, #16]
 8004a72:	68fb      	ldr	r3, [r7, #12]
 8004a74:	681b      	ldr	r3, [r3, #0]
 8004a76:	695b      	ldr	r3, [r3, #20]
 8004a78:	613b      	str	r3, [r7, #16]
 8004a7a:	68fb      	ldr	r3, [r7, #12]
 8004a7c:	681b      	ldr	r3, [r3, #0]
 8004a7e:	699b      	ldr	r3, [r3, #24]
 8004a80:	613b      	str	r3, [r7, #16]
 8004a82:	693b      	ldr	r3, [r7, #16]
    }

    while (hi2c->XferSize > 0U)
 8004a84:	e161      	b.n	8004d4a <HAL_I2C_Mem_Read+0x486>
    {
      if (hi2c->XferSize <= 3U)
 8004a86:	68fb      	ldr	r3, [r7, #12]
 8004a88:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8004a8a:	2b03      	cmp	r3, #3
 8004a8c:	f200 811a 	bhi.w	8004cc4 <HAL_I2C_Mem_Read+0x400>
      {
        /* One byte */
        if (hi2c->XferSize == 1U)
 8004a90:	68fb      	ldr	r3, [r7, #12]
 8004a92:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8004a94:	2b01      	cmp	r3, #1
 8004a96:	d123      	bne.n	8004ae0 <HAL_I2C_Mem_Read+0x21c>
        {
          /* Wait until RXNE flag is set */
          if (I2C_WaitOnRXNEFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8004a98:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8004a9a:	6bb9      	ldr	r1, [r7, #56]	; 0x38
 8004a9c:	68f8      	ldr	r0, [r7, #12]
 8004a9e:	f000 fc49 	bl	8005334 <I2C_WaitOnRXNEFlagUntilTimeout>
 8004aa2:	4603      	mov	r3, r0
 8004aa4:	2b00      	cmp	r3, #0
 8004aa6:	d001      	beq.n	8004aac <HAL_I2C_Mem_Read+0x1e8>
          {
            return HAL_ERROR;
 8004aa8:	2301      	movs	r3, #1
 8004aaa:	e162      	b.n	8004d72 <HAL_I2C_Mem_Read+0x4ae>
          }

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8004aac:	68fb      	ldr	r3, [r7, #12]
 8004aae:	681b      	ldr	r3, [r3, #0]
 8004ab0:	691a      	ldr	r2, [r3, #16]
 8004ab2:	68fb      	ldr	r3, [r7, #12]
 8004ab4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004ab6:	b2d2      	uxtb	r2, r2
 8004ab8:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 8004aba:	68fb      	ldr	r3, [r7, #12]
 8004abc:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004abe:	1c5a      	adds	r2, r3, #1
 8004ac0:	68fb      	ldr	r3, [r7, #12]
 8004ac2:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 8004ac4:	68fb      	ldr	r3, [r7, #12]
 8004ac6:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8004ac8:	3b01      	subs	r3, #1
 8004aca:	b29a      	uxth	r2, r3
 8004acc:	68fb      	ldr	r3, [r7, #12]
 8004ace:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 8004ad0:	68fb      	ldr	r3, [r7, #12]
 8004ad2:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8004ad4:	b29b      	uxth	r3, r3
 8004ad6:	3b01      	subs	r3, #1
 8004ad8:	b29a      	uxth	r2, r3
 8004ada:	68fb      	ldr	r3, [r7, #12]
 8004adc:	855a      	strh	r2, [r3, #42]	; 0x2a
 8004ade:	e134      	b.n	8004d4a <HAL_I2C_Mem_Read+0x486>
        }
        /* Two bytes */
        else if (hi2c->XferSize == 2U)
 8004ae0:	68fb      	ldr	r3, [r7, #12]
 8004ae2:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8004ae4:	2b02      	cmp	r3, #2
 8004ae6:	d150      	bne.n	8004b8a <HAL_I2C_Mem_Read+0x2c6>
        {
          /* Wait until BTF flag is set */
          if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BTF, RESET, Timeout, tickstart) != HAL_OK)
 8004ae8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004aea:	9300      	str	r3, [sp, #0]
 8004aec:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8004aee:	2200      	movs	r2, #0
 8004af0:	4906      	ldr	r1, [pc, #24]	; (8004b0c <HAL_I2C_Mem_Read+0x248>)
 8004af2:	68f8      	ldr	r0, [r7, #12]
 8004af4:	f000 fac6 	bl	8005084 <I2C_WaitOnFlagUntilTimeout>
 8004af8:	4603      	mov	r3, r0
 8004afa:	2b00      	cmp	r3, #0
 8004afc:	d008      	beq.n	8004b10 <HAL_I2C_Mem_Read+0x24c>
          {
            return HAL_ERROR;
 8004afe:	2301      	movs	r3, #1
 8004b00:	e137      	b.n	8004d72 <HAL_I2C_Mem_Read+0x4ae>
 8004b02:	bf00      	nop
 8004b04:	00100002 	.word	0x00100002
 8004b08:	ffff0000 	.word	0xffff0000
 8004b0c:	00010004 	.word	0x00010004
  __ASM volatile ("cpsid i" : : : "memory");
 8004b10:	b672      	cpsid	i
          /* Disable all active IRQs around ADDR clearing and STOP programming because the EV6_3
             software sequence must complete before the current byte end of transfer */
          __disable_irq();

          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8004b12:	68fb      	ldr	r3, [r7, #12]
 8004b14:	681b      	ldr	r3, [r3, #0]
 8004b16:	681a      	ldr	r2, [r3, #0]
 8004b18:	68fb      	ldr	r3, [r7, #12]
 8004b1a:	681b      	ldr	r3, [r3, #0]
 8004b1c:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8004b20:	601a      	str	r2, [r3, #0]

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8004b22:	68fb      	ldr	r3, [r7, #12]
 8004b24:	681b      	ldr	r3, [r3, #0]
 8004b26:	691a      	ldr	r2, [r3, #16]
 8004b28:	68fb      	ldr	r3, [r7, #12]
 8004b2a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004b2c:	b2d2      	uxtb	r2, r2
 8004b2e:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 8004b30:	68fb      	ldr	r3, [r7, #12]
 8004b32:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004b34:	1c5a      	adds	r2, r3, #1
 8004b36:	68fb      	ldr	r3, [r7, #12]
 8004b38:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 8004b3a:	68fb      	ldr	r3, [r7, #12]
 8004b3c:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8004b3e:	3b01      	subs	r3, #1
 8004b40:	b29a      	uxth	r2, r3
 8004b42:	68fb      	ldr	r3, [r7, #12]
 8004b44:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 8004b46:	68fb      	ldr	r3, [r7, #12]
 8004b48:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8004b4a:	b29b      	uxth	r3, r3
 8004b4c:	3b01      	subs	r3, #1
 8004b4e:	b29a      	uxth	r2, r3
 8004b50:	68fb      	ldr	r3, [r7, #12]
 8004b52:	855a      	strh	r2, [r3, #42]	; 0x2a
  __ASM volatile ("cpsie i" : : : "memory");
 8004b54:	b662      	cpsie	i

          /* Re-enable IRQs */
          __enable_irq();

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8004b56:	68fb      	ldr	r3, [r7, #12]
 8004b58:	681b      	ldr	r3, [r3, #0]
 8004b5a:	691a      	ldr	r2, [r3, #16]
 8004b5c:	68fb      	ldr	r3, [r7, #12]
 8004b5e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004b60:	b2d2      	uxtb	r2, r2
 8004b62:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 8004b64:	68fb      	ldr	r3, [r7, #12]
 8004b66:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004b68:	1c5a      	adds	r2, r3, #1
 8004b6a:	68fb      	ldr	r3, [r7, #12]
 8004b6c:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 8004b6e:	68fb      	ldr	r3, [r7, #12]
 8004b70:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8004b72:	3b01      	subs	r3, #1
 8004b74:	b29a      	uxth	r2, r3
 8004b76:	68fb      	ldr	r3, [r7, #12]
 8004b78:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 8004b7a:	68fb      	ldr	r3, [r7, #12]
 8004b7c:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8004b7e:	b29b      	uxth	r3, r3
 8004b80:	3b01      	subs	r3, #1
 8004b82:	b29a      	uxth	r2, r3
 8004b84:	68fb      	ldr	r3, [r7, #12]
 8004b86:	855a      	strh	r2, [r3, #42]	; 0x2a
 8004b88:	e0df      	b.n	8004d4a <HAL_I2C_Mem_Read+0x486>
        }
        /* 3 Last bytes */
        else
        {
          /* Wait until BTF flag is set */
          if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BTF, RESET, Timeout, tickstart) != HAL_OK)
 8004b8a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004b8c:	9300      	str	r3, [sp, #0]
 8004b8e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8004b90:	2200      	movs	r2, #0
 8004b92:	497a      	ldr	r1, [pc, #488]	; (8004d7c <HAL_I2C_Mem_Read+0x4b8>)
 8004b94:	68f8      	ldr	r0, [r7, #12]
 8004b96:	f000 fa75 	bl	8005084 <I2C_WaitOnFlagUntilTimeout>
 8004b9a:	4603      	mov	r3, r0
 8004b9c:	2b00      	cmp	r3, #0
 8004b9e:	d001      	beq.n	8004ba4 <HAL_I2C_Mem_Read+0x2e0>
          {
            return HAL_ERROR;
 8004ba0:	2301      	movs	r3, #1
 8004ba2:	e0e6      	b.n	8004d72 <HAL_I2C_Mem_Read+0x4ae>
          }

          /* Disable Acknowledge */
          CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8004ba4:	68fb      	ldr	r3, [r7, #12]
 8004ba6:	681b      	ldr	r3, [r3, #0]
 8004ba8:	681a      	ldr	r2, [r3, #0]
 8004baa:	68fb      	ldr	r3, [r7, #12]
 8004bac:	681b      	ldr	r3, [r3, #0]
 8004bae:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8004bb2:	601a      	str	r2, [r3, #0]
  __ASM volatile ("cpsid i" : : : "memory");
 8004bb4:	b672      	cpsid	i
          /* Disable all active IRQs around ADDR clearing and STOP programming because the EV6_3
             software sequence must complete before the current byte end of transfer */
          __disable_irq();

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8004bb6:	68fb      	ldr	r3, [r7, #12]
 8004bb8:	681b      	ldr	r3, [r3, #0]
 8004bba:	691a      	ldr	r2, [r3, #16]
 8004bbc:	68fb      	ldr	r3, [r7, #12]
 8004bbe:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004bc0:	b2d2      	uxtb	r2, r2
 8004bc2:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 8004bc4:	68fb      	ldr	r3, [r7, #12]
 8004bc6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004bc8:	1c5a      	adds	r2, r3, #1
 8004bca:	68fb      	ldr	r3, [r7, #12]
 8004bcc:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 8004bce:	68fb      	ldr	r3, [r7, #12]
 8004bd0:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8004bd2:	3b01      	subs	r3, #1
 8004bd4:	b29a      	uxth	r2, r3
 8004bd6:	68fb      	ldr	r3, [r7, #12]
 8004bd8:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 8004bda:	68fb      	ldr	r3, [r7, #12]
 8004bdc:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8004bde:	b29b      	uxth	r3, r3
 8004be0:	3b01      	subs	r3, #1
 8004be2:	b29a      	uxth	r2, r3
 8004be4:	68fb      	ldr	r3, [r7, #12]
 8004be6:	855a      	strh	r2, [r3, #42]	; 0x2a

          /* Wait until BTF flag is set */
          count = I2C_TIMEOUT_FLAG * (SystemCoreClock / 25U / 1000U);
 8004be8:	4b65      	ldr	r3, [pc, #404]	; (8004d80 <HAL_I2C_Mem_Read+0x4bc>)
 8004bea:	681b      	ldr	r3, [r3, #0]
 8004bec:	08db      	lsrs	r3, r3, #3
 8004bee:	4a65      	ldr	r2, [pc, #404]	; (8004d84 <HAL_I2C_Mem_Read+0x4c0>)
 8004bf0:	fba2 2303 	umull	r2, r3, r2, r3
 8004bf4:	0a1a      	lsrs	r2, r3, #8
 8004bf6:	4613      	mov	r3, r2
 8004bf8:	009b      	lsls	r3, r3, #2
 8004bfa:	4413      	add	r3, r2
 8004bfc:	00da      	lsls	r2, r3, #3
 8004bfe:	1ad3      	subs	r3, r2, r3
 8004c00:	623b      	str	r3, [r7, #32]
          do
          {
            count--;
 8004c02:	6a3b      	ldr	r3, [r7, #32]
 8004c04:	3b01      	subs	r3, #1
 8004c06:	623b      	str	r3, [r7, #32]
            if (count == 0U)
 8004c08:	6a3b      	ldr	r3, [r7, #32]
 8004c0a:	2b00      	cmp	r3, #0
 8004c0c:	d117      	bne.n	8004c3e <HAL_I2C_Mem_Read+0x37a>
            {
              hi2c->PreviousState       = I2C_STATE_NONE;
 8004c0e:	68fb      	ldr	r3, [r7, #12]
 8004c10:	2200      	movs	r2, #0
 8004c12:	631a      	str	r2, [r3, #48]	; 0x30
              hi2c->State               = HAL_I2C_STATE_READY;
 8004c14:	68fb      	ldr	r3, [r7, #12]
 8004c16:	2220      	movs	r2, #32
 8004c18:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
              hi2c->Mode                = HAL_I2C_MODE_NONE;
 8004c1c:	68fb      	ldr	r3, [r7, #12]
 8004c1e:	2200      	movs	r2, #0
 8004c20:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
              hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 8004c24:	68fb      	ldr	r3, [r7, #12]
 8004c26:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004c28:	f043 0220 	orr.w	r2, r3, #32
 8004c2c:	68fb      	ldr	r3, [r7, #12]
 8004c2e:	641a      	str	r2, [r3, #64]	; 0x40
  __ASM volatile ("cpsie i" : : : "memory");
 8004c30:	b662      	cpsie	i

              /* Re-enable IRQs */
              __enable_irq();

              /* Process Unlocked */
              __HAL_UNLOCK(hi2c);
 8004c32:	68fb      	ldr	r3, [r7, #12]
 8004c34:	2200      	movs	r2, #0
 8004c36:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

              return HAL_ERROR;
 8004c3a:	2301      	movs	r3, #1
 8004c3c:	e099      	b.n	8004d72 <HAL_I2C_Mem_Read+0x4ae>
            }
          }
          while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == RESET);
 8004c3e:	68fb      	ldr	r3, [r7, #12]
 8004c40:	681b      	ldr	r3, [r3, #0]
 8004c42:	695b      	ldr	r3, [r3, #20]
 8004c44:	f003 0304 	and.w	r3, r3, #4
 8004c48:	2b04      	cmp	r3, #4
 8004c4a:	d1da      	bne.n	8004c02 <HAL_I2C_Mem_Read+0x33e>

          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8004c4c:	68fb      	ldr	r3, [r7, #12]
 8004c4e:	681b      	ldr	r3, [r3, #0]
 8004c50:	681a      	ldr	r2, [r3, #0]
 8004c52:	68fb      	ldr	r3, [r7, #12]
 8004c54:	681b      	ldr	r3, [r3, #0]
 8004c56:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8004c5a:	601a      	str	r2, [r3, #0]

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8004c5c:	68fb      	ldr	r3, [r7, #12]
 8004c5e:	681b      	ldr	r3, [r3, #0]
 8004c60:	691a      	ldr	r2, [r3, #16]
 8004c62:	68fb      	ldr	r3, [r7, #12]
 8004c64:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004c66:	b2d2      	uxtb	r2, r2
 8004c68:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 8004c6a:	68fb      	ldr	r3, [r7, #12]
 8004c6c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004c6e:	1c5a      	adds	r2, r3, #1
 8004c70:	68fb      	ldr	r3, [r7, #12]
 8004c72:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 8004c74:	68fb      	ldr	r3, [r7, #12]
 8004c76:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8004c78:	3b01      	subs	r3, #1
 8004c7a:	b29a      	uxth	r2, r3
 8004c7c:	68fb      	ldr	r3, [r7, #12]
 8004c7e:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 8004c80:	68fb      	ldr	r3, [r7, #12]
 8004c82:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8004c84:	b29b      	uxth	r3, r3
 8004c86:	3b01      	subs	r3, #1
 8004c88:	b29a      	uxth	r2, r3
 8004c8a:	68fb      	ldr	r3, [r7, #12]
 8004c8c:	855a      	strh	r2, [r3, #42]	; 0x2a
 8004c8e:	b662      	cpsie	i

          /* Re-enable IRQs */
          __enable_irq();

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8004c90:	68fb      	ldr	r3, [r7, #12]
 8004c92:	681b      	ldr	r3, [r3, #0]
 8004c94:	691a      	ldr	r2, [r3, #16]
 8004c96:	68fb      	ldr	r3, [r7, #12]
 8004c98:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004c9a:	b2d2      	uxtb	r2, r2
 8004c9c:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 8004c9e:	68fb      	ldr	r3, [r7, #12]
 8004ca0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004ca2:	1c5a      	adds	r2, r3, #1
 8004ca4:	68fb      	ldr	r3, [r7, #12]
 8004ca6:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 8004ca8:	68fb      	ldr	r3, [r7, #12]
 8004caa:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8004cac:	3b01      	subs	r3, #1
 8004cae:	b29a      	uxth	r2, r3
 8004cb0:	68fb      	ldr	r3, [r7, #12]
 8004cb2:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 8004cb4:	68fb      	ldr	r3, [r7, #12]
 8004cb6:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8004cb8:	b29b      	uxth	r3, r3
 8004cba:	3b01      	subs	r3, #1
 8004cbc:	b29a      	uxth	r2, r3
 8004cbe:	68fb      	ldr	r3, [r7, #12]
 8004cc0:	855a      	strh	r2, [r3, #42]	; 0x2a
 8004cc2:	e042      	b.n	8004d4a <HAL_I2C_Mem_Read+0x486>
        }
      }
      else
      {
        /* Wait until RXNE flag is set */
        if (I2C_WaitOnRXNEFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8004cc4:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8004cc6:	6bb9      	ldr	r1, [r7, #56]	; 0x38
 8004cc8:	68f8      	ldr	r0, [r7, #12]
 8004cca:	f000 fb33 	bl	8005334 <I2C_WaitOnRXNEFlagUntilTimeout>
 8004cce:	4603      	mov	r3, r0
 8004cd0:	2b00      	cmp	r3, #0
 8004cd2:	d001      	beq.n	8004cd8 <HAL_I2C_Mem_Read+0x414>
        {
          return HAL_ERROR;
 8004cd4:	2301      	movs	r3, #1
 8004cd6:	e04c      	b.n	8004d72 <HAL_I2C_Mem_Read+0x4ae>
        }

        /* Read data from DR */
        *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8004cd8:	68fb      	ldr	r3, [r7, #12]
 8004cda:	681b      	ldr	r3, [r3, #0]
 8004cdc:	691a      	ldr	r2, [r3, #16]
 8004cde:	68fb      	ldr	r3, [r7, #12]
 8004ce0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004ce2:	b2d2      	uxtb	r2, r2
 8004ce4:	701a      	strb	r2, [r3, #0]

        /* Increment Buffer pointer */
        hi2c->pBuffPtr++;
 8004ce6:	68fb      	ldr	r3, [r7, #12]
 8004ce8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004cea:	1c5a      	adds	r2, r3, #1
 8004cec:	68fb      	ldr	r3, [r7, #12]
 8004cee:	625a      	str	r2, [r3, #36]	; 0x24

        /* Update counter */
        hi2c->XferSize--;
 8004cf0:	68fb      	ldr	r3, [r7, #12]
 8004cf2:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8004cf4:	3b01      	subs	r3, #1
 8004cf6:	b29a      	uxth	r2, r3
 8004cf8:	68fb      	ldr	r3, [r7, #12]
 8004cfa:	851a      	strh	r2, [r3, #40]	; 0x28
        hi2c->XferCount--;
 8004cfc:	68fb      	ldr	r3, [r7, #12]
 8004cfe:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8004d00:	b29b      	uxth	r3, r3
 8004d02:	3b01      	subs	r3, #1
 8004d04:	b29a      	uxth	r2, r3
 8004d06:	68fb      	ldr	r3, [r7, #12]
 8004d08:	855a      	strh	r2, [r3, #42]	; 0x2a

        if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == SET)
 8004d0a:	68fb      	ldr	r3, [r7, #12]
 8004d0c:	681b      	ldr	r3, [r3, #0]
 8004d0e:	695b      	ldr	r3, [r3, #20]
 8004d10:	f003 0304 	and.w	r3, r3, #4
 8004d14:	2b04      	cmp	r3, #4
 8004d16:	d118      	bne.n	8004d4a <HAL_I2C_Mem_Read+0x486>
        {
          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8004d18:	68fb      	ldr	r3, [r7, #12]
 8004d1a:	681b      	ldr	r3, [r3, #0]
 8004d1c:	691a      	ldr	r2, [r3, #16]
 8004d1e:	68fb      	ldr	r3, [r7, #12]
 8004d20:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004d22:	b2d2      	uxtb	r2, r2
 8004d24:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 8004d26:	68fb      	ldr	r3, [r7, #12]
 8004d28:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004d2a:	1c5a      	adds	r2, r3, #1
 8004d2c:	68fb      	ldr	r3, [r7, #12]
 8004d2e:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 8004d30:	68fb      	ldr	r3, [r7, #12]
 8004d32:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8004d34:	3b01      	subs	r3, #1
 8004d36:	b29a      	uxth	r2, r3
 8004d38:	68fb      	ldr	r3, [r7, #12]
 8004d3a:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 8004d3c:	68fb      	ldr	r3, [r7, #12]
 8004d3e:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8004d40:	b29b      	uxth	r3, r3
 8004d42:	3b01      	subs	r3, #1
 8004d44:	b29a      	uxth	r2, r3
 8004d46:	68fb      	ldr	r3, [r7, #12]
 8004d48:	855a      	strh	r2, [r3, #42]	; 0x2a
    while (hi2c->XferSize > 0U)
 8004d4a:	68fb      	ldr	r3, [r7, #12]
 8004d4c:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8004d4e:	2b00      	cmp	r3, #0
 8004d50:	f47f ae99 	bne.w	8004a86 <HAL_I2C_Mem_Read+0x1c2>
        }
      }
    }

    hi2c->State = HAL_I2C_STATE_READY;
 8004d54:	68fb      	ldr	r3, [r7, #12]
 8004d56:	2220      	movs	r2, #32
 8004d58:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode = HAL_I2C_MODE_NONE;
 8004d5c:	68fb      	ldr	r3, [r7, #12]
 8004d5e:	2200      	movs	r2, #0
 8004d60:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8004d64:	68fb      	ldr	r3, [r7, #12]
 8004d66:	2200      	movs	r2, #0
 8004d68:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    return HAL_OK;
 8004d6c:	2300      	movs	r3, #0
 8004d6e:	e000      	b.n	8004d72 <HAL_I2C_Mem_Read+0x4ae>
  }
  else
  {
    return HAL_BUSY;
 8004d70:	2302      	movs	r3, #2
  }
}
 8004d72:	4618      	mov	r0, r3
 8004d74:	3728      	adds	r7, #40	; 0x28
 8004d76:	46bd      	mov	sp, r7
 8004d78:	bd80      	pop	{r7, pc}
 8004d7a:	bf00      	nop
 8004d7c:	00010004 	.word	0x00010004
 8004d80:	20000020 	.word	0x20000020
 8004d84:	14f8b589 	.word	0x14f8b589

08004d88 <I2C_RequestMemoryWrite>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_RequestMemoryWrite(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint16_t MemAddress, uint16_t MemAddSize, uint32_t Timeout, uint32_t Tickstart)
{
 8004d88:	b580      	push	{r7, lr}
 8004d8a:	b088      	sub	sp, #32
 8004d8c:	af02      	add	r7, sp, #8
 8004d8e:	60f8      	str	r0, [r7, #12]
 8004d90:	4608      	mov	r0, r1
 8004d92:	4611      	mov	r1, r2
 8004d94:	461a      	mov	r2, r3
 8004d96:	4603      	mov	r3, r0
 8004d98:	817b      	strh	r3, [r7, #10]
 8004d9a:	460b      	mov	r3, r1
 8004d9c:	813b      	strh	r3, [r7, #8]
 8004d9e:	4613      	mov	r3, r2
 8004da0:	80fb      	strh	r3, [r7, #6]
  /* Generate Start */
  SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 8004da2:	68fb      	ldr	r3, [r7, #12]
 8004da4:	681b      	ldr	r3, [r3, #0]
 8004da6:	681a      	ldr	r2, [r3, #0]
 8004da8:	68fb      	ldr	r3, [r7, #12]
 8004daa:	681b      	ldr	r3, [r3, #0]
 8004dac:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8004db0:	601a      	str	r2, [r3, #0]

  /* Wait until SB flag is set */
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_SB, RESET, Timeout, Tickstart) != HAL_OK)
 8004db2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004db4:	9300      	str	r3, [sp, #0]
 8004db6:	6a3b      	ldr	r3, [r7, #32]
 8004db8:	2200      	movs	r2, #0
 8004dba:	f04f 1101 	mov.w	r1, #65537	; 0x10001
 8004dbe:	68f8      	ldr	r0, [r7, #12]
 8004dc0:	f000 f960 	bl	8005084 <I2C_WaitOnFlagUntilTimeout>
 8004dc4:	4603      	mov	r3, r0
 8004dc6:	2b00      	cmp	r3, #0
 8004dc8:	d00d      	beq.n	8004de6 <I2C_RequestMemoryWrite+0x5e>
  {
    if (READ_BIT(hi2c->Instance->CR1, I2C_CR1_START) == I2C_CR1_START)
 8004dca:	68fb      	ldr	r3, [r7, #12]
 8004dcc:	681b      	ldr	r3, [r3, #0]
 8004dce:	681b      	ldr	r3, [r3, #0]
 8004dd0:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8004dd4:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8004dd8:	d103      	bne.n	8004de2 <I2C_RequestMemoryWrite+0x5a>
    {
      hi2c->ErrorCode = HAL_I2C_WRONG_START;
 8004dda:	68fb      	ldr	r3, [r7, #12]
 8004ddc:	f44f 7200 	mov.w	r2, #512	; 0x200
 8004de0:	641a      	str	r2, [r3, #64]	; 0x40
    }
    return HAL_TIMEOUT;
 8004de2:	2303      	movs	r3, #3
 8004de4:	e05f      	b.n	8004ea6 <I2C_RequestMemoryWrite+0x11e>
  }

  /* Send slave address */
  hi2c->Instance->DR = I2C_7BIT_ADD_WRITE(DevAddress);
 8004de6:	897b      	ldrh	r3, [r7, #10]
 8004de8:	b2db      	uxtb	r3, r3
 8004dea:	461a      	mov	r2, r3
 8004dec:	68fb      	ldr	r3, [r7, #12]
 8004dee:	681b      	ldr	r3, [r3, #0]
 8004df0:	f002 02fe 	and.w	r2, r2, #254	; 0xfe
 8004df4:	611a      	str	r2, [r3, #16]

  /* Wait until ADDR flag is set */
  if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADDR, Timeout, Tickstart) != HAL_OK)
 8004df6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004df8:	6a3a      	ldr	r2, [r7, #32]
 8004dfa:	492d      	ldr	r1, [pc, #180]	; (8004eb0 <I2C_RequestMemoryWrite+0x128>)
 8004dfc:	68f8      	ldr	r0, [r7, #12]
 8004dfe:	f000 f998 	bl	8005132 <I2C_WaitOnMasterAddressFlagUntilTimeout>
 8004e02:	4603      	mov	r3, r0
 8004e04:	2b00      	cmp	r3, #0
 8004e06:	d001      	beq.n	8004e0c <I2C_RequestMemoryWrite+0x84>
  {
    return HAL_ERROR;
 8004e08:	2301      	movs	r3, #1
 8004e0a:	e04c      	b.n	8004ea6 <I2C_RequestMemoryWrite+0x11e>
  }

  /* Clear ADDR flag */
  __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8004e0c:	2300      	movs	r3, #0
 8004e0e:	617b      	str	r3, [r7, #20]
 8004e10:	68fb      	ldr	r3, [r7, #12]
 8004e12:	681b      	ldr	r3, [r3, #0]
 8004e14:	695b      	ldr	r3, [r3, #20]
 8004e16:	617b      	str	r3, [r7, #20]
 8004e18:	68fb      	ldr	r3, [r7, #12]
 8004e1a:	681b      	ldr	r3, [r3, #0]
 8004e1c:	699b      	ldr	r3, [r3, #24]
 8004e1e:	617b      	str	r3, [r7, #20]
 8004e20:	697b      	ldr	r3, [r7, #20]

  /* Wait until TXE flag is set */
  if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 8004e22:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8004e24:	6a39      	ldr	r1, [r7, #32]
 8004e26:	68f8      	ldr	r0, [r7, #12]
 8004e28:	f000 fa02 	bl	8005230 <I2C_WaitOnTXEFlagUntilTimeout>
 8004e2c:	4603      	mov	r3, r0
 8004e2e:	2b00      	cmp	r3, #0
 8004e30:	d00d      	beq.n	8004e4e <I2C_RequestMemoryWrite+0xc6>
  {
    if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 8004e32:	68fb      	ldr	r3, [r7, #12]
 8004e34:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004e36:	2b04      	cmp	r3, #4
 8004e38:	d107      	bne.n	8004e4a <I2C_RequestMemoryWrite+0xc2>
    {
      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8004e3a:	68fb      	ldr	r3, [r7, #12]
 8004e3c:	681b      	ldr	r3, [r3, #0]
 8004e3e:	681a      	ldr	r2, [r3, #0]
 8004e40:	68fb      	ldr	r3, [r7, #12]
 8004e42:	681b      	ldr	r3, [r3, #0]
 8004e44:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8004e48:	601a      	str	r2, [r3, #0]
    }
    return HAL_ERROR;
 8004e4a:	2301      	movs	r3, #1
 8004e4c:	e02b      	b.n	8004ea6 <I2C_RequestMemoryWrite+0x11e>
  }

  /* If Memory address size is 8Bit */
  if (MemAddSize == I2C_MEMADD_SIZE_8BIT)
 8004e4e:	88fb      	ldrh	r3, [r7, #6]
 8004e50:	2b01      	cmp	r3, #1
 8004e52:	d105      	bne.n	8004e60 <I2C_RequestMemoryWrite+0xd8>
  {
    /* Send Memory Address */
    hi2c->Instance->DR = I2C_MEM_ADD_LSB(MemAddress);
 8004e54:	893b      	ldrh	r3, [r7, #8]
 8004e56:	b2da      	uxtb	r2, r3
 8004e58:	68fb      	ldr	r3, [r7, #12]
 8004e5a:	681b      	ldr	r3, [r3, #0]
 8004e5c:	611a      	str	r2, [r3, #16]
 8004e5e:	e021      	b.n	8004ea4 <I2C_RequestMemoryWrite+0x11c>
  }
  /* If Memory address size is 16Bit */
  else
  {
    /* Send MSB of Memory Address */
    hi2c->Instance->DR = I2C_MEM_ADD_MSB(MemAddress);
 8004e60:	893b      	ldrh	r3, [r7, #8]
 8004e62:	0a1b      	lsrs	r3, r3, #8
 8004e64:	b29b      	uxth	r3, r3
 8004e66:	b2da      	uxtb	r2, r3
 8004e68:	68fb      	ldr	r3, [r7, #12]
 8004e6a:	681b      	ldr	r3, [r3, #0]
 8004e6c:	611a      	str	r2, [r3, #16]

    /* Wait until TXE flag is set */
    if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 8004e6e:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8004e70:	6a39      	ldr	r1, [r7, #32]
 8004e72:	68f8      	ldr	r0, [r7, #12]
 8004e74:	f000 f9dc 	bl	8005230 <I2C_WaitOnTXEFlagUntilTimeout>
 8004e78:	4603      	mov	r3, r0
 8004e7a:	2b00      	cmp	r3, #0
 8004e7c:	d00d      	beq.n	8004e9a <I2C_RequestMemoryWrite+0x112>
    {
      if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 8004e7e:	68fb      	ldr	r3, [r7, #12]
 8004e80:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004e82:	2b04      	cmp	r3, #4
 8004e84:	d107      	bne.n	8004e96 <I2C_RequestMemoryWrite+0x10e>
      {
        /* Generate Stop */
        SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8004e86:	68fb      	ldr	r3, [r7, #12]
 8004e88:	681b      	ldr	r3, [r3, #0]
 8004e8a:	681a      	ldr	r2, [r3, #0]
 8004e8c:	68fb      	ldr	r3, [r7, #12]
 8004e8e:	681b      	ldr	r3, [r3, #0]
 8004e90:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8004e94:	601a      	str	r2, [r3, #0]
      }
      return HAL_ERROR;
 8004e96:	2301      	movs	r3, #1
 8004e98:	e005      	b.n	8004ea6 <I2C_RequestMemoryWrite+0x11e>
    }

    /* Send LSB of Memory Address */
    hi2c->Instance->DR = I2C_MEM_ADD_LSB(MemAddress);
 8004e9a:	893b      	ldrh	r3, [r7, #8]
 8004e9c:	b2da      	uxtb	r2, r3
 8004e9e:	68fb      	ldr	r3, [r7, #12]
 8004ea0:	681b      	ldr	r3, [r3, #0]
 8004ea2:	611a      	str	r2, [r3, #16]
  }

  return HAL_OK;
 8004ea4:	2300      	movs	r3, #0
}
 8004ea6:	4618      	mov	r0, r3
 8004ea8:	3718      	adds	r7, #24
 8004eaa:	46bd      	mov	sp, r7
 8004eac:	bd80      	pop	{r7, pc}
 8004eae:	bf00      	nop
 8004eb0:	00010002 	.word	0x00010002

08004eb4 <I2C_RequestMemoryRead>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_RequestMemoryRead(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint16_t MemAddress, uint16_t MemAddSize, uint32_t Timeout, uint32_t Tickstart)
{
 8004eb4:	b580      	push	{r7, lr}
 8004eb6:	b088      	sub	sp, #32
 8004eb8:	af02      	add	r7, sp, #8
 8004eba:	60f8      	str	r0, [r7, #12]
 8004ebc:	4608      	mov	r0, r1
 8004ebe:	4611      	mov	r1, r2
 8004ec0:	461a      	mov	r2, r3
 8004ec2:	4603      	mov	r3, r0
 8004ec4:	817b      	strh	r3, [r7, #10]
 8004ec6:	460b      	mov	r3, r1
 8004ec8:	813b      	strh	r3, [r7, #8]
 8004eca:	4613      	mov	r3, r2
 8004ecc:	80fb      	strh	r3, [r7, #6]
  /* Enable Acknowledge */
  SET_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8004ece:	68fb      	ldr	r3, [r7, #12]
 8004ed0:	681b      	ldr	r3, [r3, #0]
 8004ed2:	681a      	ldr	r2, [r3, #0]
 8004ed4:	68fb      	ldr	r3, [r7, #12]
 8004ed6:	681b      	ldr	r3, [r3, #0]
 8004ed8:	f442 6280 	orr.w	r2, r2, #1024	; 0x400
 8004edc:	601a      	str	r2, [r3, #0]

  /* Generate Start */
  SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 8004ede:	68fb      	ldr	r3, [r7, #12]
 8004ee0:	681b      	ldr	r3, [r3, #0]
 8004ee2:	681a      	ldr	r2, [r3, #0]
 8004ee4:	68fb      	ldr	r3, [r7, #12]
 8004ee6:	681b      	ldr	r3, [r3, #0]
 8004ee8:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8004eec:	601a      	str	r2, [r3, #0]

  /* Wait until SB flag is set */
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_SB, RESET, Timeout, Tickstart) != HAL_OK)
 8004eee:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004ef0:	9300      	str	r3, [sp, #0]
 8004ef2:	6a3b      	ldr	r3, [r7, #32]
 8004ef4:	2200      	movs	r2, #0
 8004ef6:	f04f 1101 	mov.w	r1, #65537	; 0x10001
 8004efa:	68f8      	ldr	r0, [r7, #12]
 8004efc:	f000 f8c2 	bl	8005084 <I2C_WaitOnFlagUntilTimeout>
 8004f00:	4603      	mov	r3, r0
 8004f02:	2b00      	cmp	r3, #0
 8004f04:	d00d      	beq.n	8004f22 <I2C_RequestMemoryRead+0x6e>
  {
    if (READ_BIT(hi2c->Instance->CR1, I2C_CR1_START) == I2C_CR1_START)
 8004f06:	68fb      	ldr	r3, [r7, #12]
 8004f08:	681b      	ldr	r3, [r3, #0]
 8004f0a:	681b      	ldr	r3, [r3, #0]
 8004f0c:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8004f10:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8004f14:	d103      	bne.n	8004f1e <I2C_RequestMemoryRead+0x6a>
    {
      hi2c->ErrorCode = HAL_I2C_WRONG_START;
 8004f16:	68fb      	ldr	r3, [r7, #12]
 8004f18:	f44f 7200 	mov.w	r2, #512	; 0x200
 8004f1c:	641a      	str	r2, [r3, #64]	; 0x40
    }
    return HAL_TIMEOUT;
 8004f1e:	2303      	movs	r3, #3
 8004f20:	e0aa      	b.n	8005078 <I2C_RequestMemoryRead+0x1c4>
  }

  /* Send slave address */
  hi2c->Instance->DR = I2C_7BIT_ADD_WRITE(DevAddress);
 8004f22:	897b      	ldrh	r3, [r7, #10]
 8004f24:	b2db      	uxtb	r3, r3
 8004f26:	461a      	mov	r2, r3
 8004f28:	68fb      	ldr	r3, [r7, #12]
 8004f2a:	681b      	ldr	r3, [r3, #0]
 8004f2c:	f002 02fe 	and.w	r2, r2, #254	; 0xfe
 8004f30:	611a      	str	r2, [r3, #16]

  /* Wait until ADDR flag is set */
  if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADDR, Timeout, Tickstart) != HAL_OK)
 8004f32:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004f34:	6a3a      	ldr	r2, [r7, #32]
 8004f36:	4952      	ldr	r1, [pc, #328]	; (8005080 <I2C_RequestMemoryRead+0x1cc>)
 8004f38:	68f8      	ldr	r0, [r7, #12]
 8004f3a:	f000 f8fa 	bl	8005132 <I2C_WaitOnMasterAddressFlagUntilTimeout>
 8004f3e:	4603      	mov	r3, r0
 8004f40:	2b00      	cmp	r3, #0
 8004f42:	d001      	beq.n	8004f48 <I2C_RequestMemoryRead+0x94>
  {
    return HAL_ERROR;
 8004f44:	2301      	movs	r3, #1
 8004f46:	e097      	b.n	8005078 <I2C_RequestMemoryRead+0x1c4>
  }

  /* Clear ADDR flag */
  __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8004f48:	2300      	movs	r3, #0
 8004f4a:	617b      	str	r3, [r7, #20]
 8004f4c:	68fb      	ldr	r3, [r7, #12]
 8004f4e:	681b      	ldr	r3, [r3, #0]
 8004f50:	695b      	ldr	r3, [r3, #20]
 8004f52:	617b      	str	r3, [r7, #20]
 8004f54:	68fb      	ldr	r3, [r7, #12]
 8004f56:	681b      	ldr	r3, [r3, #0]
 8004f58:	699b      	ldr	r3, [r3, #24]
 8004f5a:	617b      	str	r3, [r7, #20]
 8004f5c:	697b      	ldr	r3, [r7, #20]

  /* Wait until TXE flag is set */
  if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 8004f5e:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8004f60:	6a39      	ldr	r1, [r7, #32]
 8004f62:	68f8      	ldr	r0, [r7, #12]
 8004f64:	f000 f964 	bl	8005230 <I2C_WaitOnTXEFlagUntilTimeout>
 8004f68:	4603      	mov	r3, r0
 8004f6a:	2b00      	cmp	r3, #0
 8004f6c:	d00d      	beq.n	8004f8a <I2C_RequestMemoryRead+0xd6>
  {
    if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 8004f6e:	68fb      	ldr	r3, [r7, #12]
 8004f70:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004f72:	2b04      	cmp	r3, #4
 8004f74:	d107      	bne.n	8004f86 <I2C_RequestMemoryRead+0xd2>
    {
      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8004f76:	68fb      	ldr	r3, [r7, #12]
 8004f78:	681b      	ldr	r3, [r3, #0]
 8004f7a:	681a      	ldr	r2, [r3, #0]
 8004f7c:	68fb      	ldr	r3, [r7, #12]
 8004f7e:	681b      	ldr	r3, [r3, #0]
 8004f80:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8004f84:	601a      	str	r2, [r3, #0]
    }
    return HAL_ERROR;
 8004f86:	2301      	movs	r3, #1
 8004f88:	e076      	b.n	8005078 <I2C_RequestMemoryRead+0x1c4>
  }

  /* If Memory address size is 8Bit */
  if (MemAddSize == I2C_MEMADD_SIZE_8BIT)
 8004f8a:	88fb      	ldrh	r3, [r7, #6]
 8004f8c:	2b01      	cmp	r3, #1
 8004f8e:	d105      	bne.n	8004f9c <I2C_RequestMemoryRead+0xe8>
  {
    /* Send Memory Address */
    hi2c->Instance->DR = I2C_MEM_ADD_LSB(MemAddress);
 8004f90:	893b      	ldrh	r3, [r7, #8]
 8004f92:	b2da      	uxtb	r2, r3
 8004f94:	68fb      	ldr	r3, [r7, #12]
 8004f96:	681b      	ldr	r3, [r3, #0]
 8004f98:	611a      	str	r2, [r3, #16]
 8004f9a:	e021      	b.n	8004fe0 <I2C_RequestMemoryRead+0x12c>
  }
  /* If Memory address size is 16Bit */
  else
  {
    /* Send MSB of Memory Address */
    hi2c->Instance->DR = I2C_MEM_ADD_MSB(MemAddress);
 8004f9c:	893b      	ldrh	r3, [r7, #8]
 8004f9e:	0a1b      	lsrs	r3, r3, #8
 8004fa0:	b29b      	uxth	r3, r3
 8004fa2:	b2da      	uxtb	r2, r3
 8004fa4:	68fb      	ldr	r3, [r7, #12]
 8004fa6:	681b      	ldr	r3, [r3, #0]
 8004fa8:	611a      	str	r2, [r3, #16]

    /* Wait until TXE flag is set */
    if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 8004faa:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8004fac:	6a39      	ldr	r1, [r7, #32]
 8004fae:	68f8      	ldr	r0, [r7, #12]
 8004fb0:	f000 f93e 	bl	8005230 <I2C_WaitOnTXEFlagUntilTimeout>
 8004fb4:	4603      	mov	r3, r0
 8004fb6:	2b00      	cmp	r3, #0
 8004fb8:	d00d      	beq.n	8004fd6 <I2C_RequestMemoryRead+0x122>
    {
      if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 8004fba:	68fb      	ldr	r3, [r7, #12]
 8004fbc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004fbe:	2b04      	cmp	r3, #4
 8004fc0:	d107      	bne.n	8004fd2 <I2C_RequestMemoryRead+0x11e>
      {
        /* Generate Stop */
        SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8004fc2:	68fb      	ldr	r3, [r7, #12]
 8004fc4:	681b      	ldr	r3, [r3, #0]
 8004fc6:	681a      	ldr	r2, [r3, #0]
 8004fc8:	68fb      	ldr	r3, [r7, #12]
 8004fca:	681b      	ldr	r3, [r3, #0]
 8004fcc:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8004fd0:	601a      	str	r2, [r3, #0]
      }
      return HAL_ERROR;
 8004fd2:	2301      	movs	r3, #1
 8004fd4:	e050      	b.n	8005078 <I2C_RequestMemoryRead+0x1c4>
    }

    /* Send LSB of Memory Address */
    hi2c->Instance->DR = I2C_MEM_ADD_LSB(MemAddress);
 8004fd6:	893b      	ldrh	r3, [r7, #8]
 8004fd8:	b2da      	uxtb	r2, r3
 8004fda:	68fb      	ldr	r3, [r7, #12]
 8004fdc:	681b      	ldr	r3, [r3, #0]
 8004fde:	611a      	str	r2, [r3, #16]
  }

  /* Wait until TXE flag is set */
  if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 8004fe0:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8004fe2:	6a39      	ldr	r1, [r7, #32]
 8004fe4:	68f8      	ldr	r0, [r7, #12]
 8004fe6:	f000 f923 	bl	8005230 <I2C_WaitOnTXEFlagUntilTimeout>
 8004fea:	4603      	mov	r3, r0
 8004fec:	2b00      	cmp	r3, #0
 8004fee:	d00d      	beq.n	800500c <I2C_RequestMemoryRead+0x158>
  {
    if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 8004ff0:	68fb      	ldr	r3, [r7, #12]
 8004ff2:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004ff4:	2b04      	cmp	r3, #4
 8004ff6:	d107      	bne.n	8005008 <I2C_RequestMemoryRead+0x154>
    {
      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8004ff8:	68fb      	ldr	r3, [r7, #12]
 8004ffa:	681b      	ldr	r3, [r3, #0]
 8004ffc:	681a      	ldr	r2, [r3, #0]
 8004ffe:	68fb      	ldr	r3, [r7, #12]
 8005000:	681b      	ldr	r3, [r3, #0]
 8005002:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8005006:	601a      	str	r2, [r3, #0]
    }
    return HAL_ERROR;
 8005008:	2301      	movs	r3, #1
 800500a:	e035      	b.n	8005078 <I2C_RequestMemoryRead+0x1c4>
  }

  /* Generate Restart */
  SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 800500c:	68fb      	ldr	r3, [r7, #12]
 800500e:	681b      	ldr	r3, [r3, #0]
 8005010:	681a      	ldr	r2, [r3, #0]
 8005012:	68fb      	ldr	r3, [r7, #12]
 8005014:	681b      	ldr	r3, [r3, #0]
 8005016:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 800501a:	601a      	str	r2, [r3, #0]

  /* Wait until SB flag is set */
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_SB, RESET, Timeout, Tickstart) != HAL_OK)
 800501c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800501e:	9300      	str	r3, [sp, #0]
 8005020:	6a3b      	ldr	r3, [r7, #32]
 8005022:	2200      	movs	r2, #0
 8005024:	f04f 1101 	mov.w	r1, #65537	; 0x10001
 8005028:	68f8      	ldr	r0, [r7, #12]
 800502a:	f000 f82b 	bl	8005084 <I2C_WaitOnFlagUntilTimeout>
 800502e:	4603      	mov	r3, r0
 8005030:	2b00      	cmp	r3, #0
 8005032:	d00d      	beq.n	8005050 <I2C_RequestMemoryRead+0x19c>
  {
    if (READ_BIT(hi2c->Instance->CR1, I2C_CR1_START) == I2C_CR1_START)
 8005034:	68fb      	ldr	r3, [r7, #12]
 8005036:	681b      	ldr	r3, [r3, #0]
 8005038:	681b      	ldr	r3, [r3, #0]
 800503a:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800503e:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8005042:	d103      	bne.n	800504c <I2C_RequestMemoryRead+0x198>
    {
      hi2c->ErrorCode = HAL_I2C_WRONG_START;
 8005044:	68fb      	ldr	r3, [r7, #12]
 8005046:	f44f 7200 	mov.w	r2, #512	; 0x200
 800504a:	641a      	str	r2, [r3, #64]	; 0x40
    }
    return HAL_TIMEOUT;
 800504c:	2303      	movs	r3, #3
 800504e:	e013      	b.n	8005078 <I2C_RequestMemoryRead+0x1c4>
  }

  /* Send slave address */
  hi2c->Instance->DR = I2C_7BIT_ADD_READ(DevAddress);
 8005050:	897b      	ldrh	r3, [r7, #10]
 8005052:	b2db      	uxtb	r3, r3
 8005054:	f043 0301 	orr.w	r3, r3, #1
 8005058:	b2da      	uxtb	r2, r3
 800505a:	68fb      	ldr	r3, [r7, #12]
 800505c:	681b      	ldr	r3, [r3, #0]
 800505e:	611a      	str	r2, [r3, #16]

  /* Wait until ADDR flag is set */
  if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADDR, Timeout, Tickstart) != HAL_OK)
 8005060:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005062:	6a3a      	ldr	r2, [r7, #32]
 8005064:	4906      	ldr	r1, [pc, #24]	; (8005080 <I2C_RequestMemoryRead+0x1cc>)
 8005066:	68f8      	ldr	r0, [r7, #12]
 8005068:	f000 f863 	bl	8005132 <I2C_WaitOnMasterAddressFlagUntilTimeout>
 800506c:	4603      	mov	r3, r0
 800506e:	2b00      	cmp	r3, #0
 8005070:	d001      	beq.n	8005076 <I2C_RequestMemoryRead+0x1c2>
  {
    return HAL_ERROR;
 8005072:	2301      	movs	r3, #1
 8005074:	e000      	b.n	8005078 <I2C_RequestMemoryRead+0x1c4>
  }

  return HAL_OK;
 8005076:	2300      	movs	r3, #0
}
 8005078:	4618      	mov	r0, r3
 800507a:	3718      	adds	r7, #24
 800507c:	46bd      	mov	sp, r7
 800507e:	bd80      	pop	{r7, pc}
 8005080:	00010002 	.word	0x00010002

08005084 <I2C_WaitOnFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Flag, FlagStatus Status, uint32_t Timeout, uint32_t Tickstart)
{
 8005084:	b580      	push	{r7, lr}
 8005086:	b084      	sub	sp, #16
 8005088:	af00      	add	r7, sp, #0
 800508a:	60f8      	str	r0, [r7, #12]
 800508c:	60b9      	str	r1, [r7, #8]
 800508e:	603b      	str	r3, [r7, #0]
 8005090:	4613      	mov	r3, r2
 8005092:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 8005094:	e025      	b.n	80050e2 <I2C_WaitOnFlagUntilTimeout+0x5e>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8005096:	683b      	ldr	r3, [r7, #0]
 8005098:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 800509c:	d021      	beq.n	80050e2 <I2C_WaitOnFlagUntilTimeout+0x5e>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 800509e:	f7fe fe9b 	bl	8003dd8 <HAL_GetTick>
 80050a2:	4602      	mov	r2, r0
 80050a4:	69bb      	ldr	r3, [r7, #24]
 80050a6:	1ad3      	subs	r3, r2, r3
 80050a8:	683a      	ldr	r2, [r7, #0]
 80050aa:	429a      	cmp	r2, r3
 80050ac:	d302      	bcc.n	80050b4 <I2C_WaitOnFlagUntilTimeout+0x30>
 80050ae:	683b      	ldr	r3, [r7, #0]
 80050b0:	2b00      	cmp	r3, #0
 80050b2:	d116      	bne.n	80050e2 <I2C_WaitOnFlagUntilTimeout+0x5e>
      {
        hi2c->PreviousState     = I2C_STATE_NONE;
 80050b4:	68fb      	ldr	r3, [r7, #12]
 80050b6:	2200      	movs	r2, #0
 80050b8:	631a      	str	r2, [r3, #48]	; 0x30
        hi2c->State             = HAL_I2C_STATE_READY;
 80050ba:	68fb      	ldr	r3, [r7, #12]
 80050bc:	2220      	movs	r2, #32
 80050be:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        hi2c->Mode              = HAL_I2C_MODE_NONE;
 80050c2:	68fb      	ldr	r3, [r7, #12]
 80050c4:	2200      	movs	r2, #0
 80050c6:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        hi2c->ErrorCode         |= HAL_I2C_ERROR_TIMEOUT;
 80050ca:	68fb      	ldr	r3, [r7, #12]
 80050cc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80050ce:	f043 0220 	orr.w	r2, r3, #32
 80050d2:	68fb      	ldr	r3, [r7, #12]
 80050d4:	641a      	str	r2, [r3, #64]	; 0x40

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 80050d6:	68fb      	ldr	r3, [r7, #12]
 80050d8:	2200      	movs	r2, #0
 80050da:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_ERROR;
 80050de:	2301      	movs	r3, #1
 80050e0:	e023      	b.n	800512a <I2C_WaitOnFlagUntilTimeout+0xa6>
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 80050e2:	68bb      	ldr	r3, [r7, #8]
 80050e4:	0c1b      	lsrs	r3, r3, #16
 80050e6:	b2db      	uxtb	r3, r3
 80050e8:	2b01      	cmp	r3, #1
 80050ea:	d10d      	bne.n	8005108 <I2C_WaitOnFlagUntilTimeout+0x84>
 80050ec:	68fb      	ldr	r3, [r7, #12]
 80050ee:	681b      	ldr	r3, [r3, #0]
 80050f0:	695b      	ldr	r3, [r3, #20]
 80050f2:	43da      	mvns	r2, r3
 80050f4:	68bb      	ldr	r3, [r7, #8]
 80050f6:	4013      	ands	r3, r2
 80050f8:	b29b      	uxth	r3, r3
 80050fa:	2b00      	cmp	r3, #0
 80050fc:	bf0c      	ite	eq
 80050fe:	2301      	moveq	r3, #1
 8005100:	2300      	movne	r3, #0
 8005102:	b2db      	uxtb	r3, r3
 8005104:	461a      	mov	r2, r3
 8005106:	e00c      	b.n	8005122 <I2C_WaitOnFlagUntilTimeout+0x9e>
 8005108:	68fb      	ldr	r3, [r7, #12]
 800510a:	681b      	ldr	r3, [r3, #0]
 800510c:	699b      	ldr	r3, [r3, #24]
 800510e:	43da      	mvns	r2, r3
 8005110:	68bb      	ldr	r3, [r7, #8]
 8005112:	4013      	ands	r3, r2
 8005114:	b29b      	uxth	r3, r3
 8005116:	2b00      	cmp	r3, #0
 8005118:	bf0c      	ite	eq
 800511a:	2301      	moveq	r3, #1
 800511c:	2300      	movne	r3, #0
 800511e:	b2db      	uxtb	r3, r3
 8005120:	461a      	mov	r2, r3
 8005122:	79fb      	ldrb	r3, [r7, #7]
 8005124:	429a      	cmp	r2, r3
 8005126:	d0b6      	beq.n	8005096 <I2C_WaitOnFlagUntilTimeout+0x12>
      }
    }
  }
  return HAL_OK;
 8005128:	2300      	movs	r3, #0
}
 800512a:	4618      	mov	r0, r3
 800512c:	3710      	adds	r7, #16
 800512e:	46bd      	mov	sp, r7
 8005130:	bd80      	pop	{r7, pc}

08005132 <I2C_WaitOnMasterAddressFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnMasterAddressFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Flag, uint32_t Timeout, uint32_t Tickstart)
{
 8005132:	b580      	push	{r7, lr}
 8005134:	b084      	sub	sp, #16
 8005136:	af00      	add	r7, sp, #0
 8005138:	60f8      	str	r0, [r7, #12]
 800513a:	60b9      	str	r1, [r7, #8]
 800513c:	607a      	str	r2, [r7, #4]
 800513e:	603b      	str	r3, [r7, #0]
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == RESET)
 8005140:	e051      	b.n	80051e6 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xb4>
  {
    if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF) == SET)
 8005142:	68fb      	ldr	r3, [r7, #12]
 8005144:	681b      	ldr	r3, [r3, #0]
 8005146:	695b      	ldr	r3, [r3, #20]
 8005148:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 800514c:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8005150:	d123      	bne.n	800519a <I2C_WaitOnMasterAddressFlagUntilTimeout+0x68>
    {
      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8005152:	68fb      	ldr	r3, [r7, #12]
 8005154:	681b      	ldr	r3, [r3, #0]
 8005156:	681a      	ldr	r2, [r3, #0]
 8005158:	68fb      	ldr	r3, [r7, #12]
 800515a:	681b      	ldr	r3, [r3, #0]
 800515c:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8005160:	601a      	str	r2, [r3, #0]

      /* Clear AF Flag */
      __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8005162:	68fb      	ldr	r3, [r7, #12]
 8005164:	681b      	ldr	r3, [r3, #0]
 8005166:	f46f 6280 	mvn.w	r2, #1024	; 0x400
 800516a:	615a      	str	r2, [r3, #20]

      hi2c->PreviousState       = I2C_STATE_NONE;
 800516c:	68fb      	ldr	r3, [r7, #12]
 800516e:	2200      	movs	r2, #0
 8005170:	631a      	str	r2, [r3, #48]	; 0x30
      hi2c->State               = HAL_I2C_STATE_READY;
 8005172:	68fb      	ldr	r3, [r7, #12]
 8005174:	2220      	movs	r2, #32
 8005176:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
      hi2c->Mode                = HAL_I2C_MODE_NONE;
 800517a:	68fb      	ldr	r3, [r7, #12]
 800517c:	2200      	movs	r2, #0
 800517e:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
      hi2c->ErrorCode           |= HAL_I2C_ERROR_AF;
 8005182:	68fb      	ldr	r3, [r7, #12]
 8005184:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005186:	f043 0204 	orr.w	r2, r3, #4
 800518a:	68fb      	ldr	r3, [r7, #12]
 800518c:	641a      	str	r2, [r3, #64]	; 0x40

      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 800518e:	68fb      	ldr	r3, [r7, #12]
 8005190:	2200      	movs	r2, #0
 8005192:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

      return HAL_ERROR;
 8005196:	2301      	movs	r3, #1
 8005198:	e046      	b.n	8005228 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf6>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 800519a:	687b      	ldr	r3, [r7, #4]
 800519c:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 80051a0:	d021      	beq.n	80051e6 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xb4>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 80051a2:	f7fe fe19 	bl	8003dd8 <HAL_GetTick>
 80051a6:	4602      	mov	r2, r0
 80051a8:	683b      	ldr	r3, [r7, #0]
 80051aa:	1ad3      	subs	r3, r2, r3
 80051ac:	687a      	ldr	r2, [r7, #4]
 80051ae:	429a      	cmp	r2, r3
 80051b0:	d302      	bcc.n	80051b8 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x86>
 80051b2:	687b      	ldr	r3, [r7, #4]
 80051b4:	2b00      	cmp	r3, #0
 80051b6:	d116      	bne.n	80051e6 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xb4>
      {
        hi2c->PreviousState       = I2C_STATE_NONE;
 80051b8:	68fb      	ldr	r3, [r7, #12]
 80051ba:	2200      	movs	r2, #0
 80051bc:	631a      	str	r2, [r3, #48]	; 0x30
        hi2c->State               = HAL_I2C_STATE_READY;
 80051be:	68fb      	ldr	r3, [r7, #12]
 80051c0:	2220      	movs	r2, #32
 80051c2:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        hi2c->Mode                = HAL_I2C_MODE_NONE;
 80051c6:	68fb      	ldr	r3, [r7, #12]
 80051c8:	2200      	movs	r2, #0
 80051ca:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 80051ce:	68fb      	ldr	r3, [r7, #12]
 80051d0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80051d2:	f043 0220 	orr.w	r2, r3, #32
 80051d6:	68fb      	ldr	r3, [r7, #12]
 80051d8:	641a      	str	r2, [r3, #64]	; 0x40

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 80051da:	68fb      	ldr	r3, [r7, #12]
 80051dc:	2200      	movs	r2, #0
 80051de:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_ERROR;
 80051e2:	2301      	movs	r3, #1
 80051e4:	e020      	b.n	8005228 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf6>
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == RESET)
 80051e6:	68bb      	ldr	r3, [r7, #8]
 80051e8:	0c1b      	lsrs	r3, r3, #16
 80051ea:	b2db      	uxtb	r3, r3
 80051ec:	2b01      	cmp	r3, #1
 80051ee:	d10c      	bne.n	800520a <I2C_WaitOnMasterAddressFlagUntilTimeout+0xd8>
 80051f0:	68fb      	ldr	r3, [r7, #12]
 80051f2:	681b      	ldr	r3, [r3, #0]
 80051f4:	695b      	ldr	r3, [r3, #20]
 80051f6:	43da      	mvns	r2, r3
 80051f8:	68bb      	ldr	r3, [r7, #8]
 80051fa:	4013      	ands	r3, r2
 80051fc:	b29b      	uxth	r3, r3
 80051fe:	2b00      	cmp	r3, #0
 8005200:	bf14      	ite	ne
 8005202:	2301      	movne	r3, #1
 8005204:	2300      	moveq	r3, #0
 8005206:	b2db      	uxtb	r3, r3
 8005208:	e00b      	b.n	8005222 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf0>
 800520a:	68fb      	ldr	r3, [r7, #12]
 800520c:	681b      	ldr	r3, [r3, #0]
 800520e:	699b      	ldr	r3, [r3, #24]
 8005210:	43da      	mvns	r2, r3
 8005212:	68bb      	ldr	r3, [r7, #8]
 8005214:	4013      	ands	r3, r2
 8005216:	b29b      	uxth	r3, r3
 8005218:	2b00      	cmp	r3, #0
 800521a:	bf14      	ite	ne
 800521c:	2301      	movne	r3, #1
 800521e:	2300      	moveq	r3, #0
 8005220:	b2db      	uxtb	r3, r3
 8005222:	2b00      	cmp	r3, #0
 8005224:	d18d      	bne.n	8005142 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x10>
      }
    }
  }
  return HAL_OK;
 8005226:	2300      	movs	r3, #0
}
 8005228:	4618      	mov	r0, r3
 800522a:	3710      	adds	r7, #16
 800522c:	46bd      	mov	sp, r7
 800522e:	bd80      	pop	{r7, pc}

08005230 <I2C_WaitOnTXEFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnTXEFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 8005230:	b580      	push	{r7, lr}
 8005232:	b084      	sub	sp, #16
 8005234:	af00      	add	r7, sp, #0
 8005236:	60f8      	str	r0, [r7, #12]
 8005238:	60b9      	str	r1, [r7, #8]
 800523a:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET)
 800523c:	e02d      	b.n	800529a <I2C_WaitOnTXEFlagUntilTimeout+0x6a>
  {
    /* Check if a NACK is detected */
    if (I2C_IsAcknowledgeFailed(hi2c) != HAL_OK)
 800523e:	68f8      	ldr	r0, [r7, #12]
 8005240:	f000 f8ce 	bl	80053e0 <I2C_IsAcknowledgeFailed>
 8005244:	4603      	mov	r3, r0
 8005246:	2b00      	cmp	r3, #0
 8005248:	d001      	beq.n	800524e <I2C_WaitOnTXEFlagUntilTimeout+0x1e>
    {
      return HAL_ERROR;
 800524a:	2301      	movs	r3, #1
 800524c:	e02d      	b.n	80052aa <I2C_WaitOnTXEFlagUntilTimeout+0x7a>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 800524e:	68bb      	ldr	r3, [r7, #8]
 8005250:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8005254:	d021      	beq.n	800529a <I2C_WaitOnTXEFlagUntilTimeout+0x6a>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8005256:	f7fe fdbf 	bl	8003dd8 <HAL_GetTick>
 800525a:	4602      	mov	r2, r0
 800525c:	687b      	ldr	r3, [r7, #4]
 800525e:	1ad3      	subs	r3, r2, r3
 8005260:	68ba      	ldr	r2, [r7, #8]
 8005262:	429a      	cmp	r2, r3
 8005264:	d302      	bcc.n	800526c <I2C_WaitOnTXEFlagUntilTimeout+0x3c>
 8005266:	68bb      	ldr	r3, [r7, #8]
 8005268:	2b00      	cmp	r3, #0
 800526a:	d116      	bne.n	800529a <I2C_WaitOnTXEFlagUntilTimeout+0x6a>
      {
        hi2c->PreviousState       = I2C_STATE_NONE;
 800526c:	68fb      	ldr	r3, [r7, #12]
 800526e:	2200      	movs	r2, #0
 8005270:	631a      	str	r2, [r3, #48]	; 0x30
        hi2c->State               = HAL_I2C_STATE_READY;
 8005272:	68fb      	ldr	r3, [r7, #12]
 8005274:	2220      	movs	r2, #32
 8005276:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        hi2c->Mode                = HAL_I2C_MODE_NONE;
 800527a:	68fb      	ldr	r3, [r7, #12]
 800527c:	2200      	movs	r2, #0
 800527e:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 8005282:	68fb      	ldr	r3, [r7, #12]
 8005284:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005286:	f043 0220 	orr.w	r2, r3, #32
 800528a:	68fb      	ldr	r3, [r7, #12]
 800528c:	641a      	str	r2, [r3, #64]	; 0x40

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 800528e:	68fb      	ldr	r3, [r7, #12]
 8005290:	2200      	movs	r2, #0
 8005292:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_ERROR;
 8005296:	2301      	movs	r3, #1
 8005298:	e007      	b.n	80052aa <I2C_WaitOnTXEFlagUntilTimeout+0x7a>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET)
 800529a:	68fb      	ldr	r3, [r7, #12]
 800529c:	681b      	ldr	r3, [r3, #0]
 800529e:	695b      	ldr	r3, [r3, #20]
 80052a0:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80052a4:	2b80      	cmp	r3, #128	; 0x80
 80052a6:	d1ca      	bne.n	800523e <I2C_WaitOnTXEFlagUntilTimeout+0xe>
      }
    }
  }
  return HAL_OK;
 80052a8:	2300      	movs	r3, #0
}
 80052aa:	4618      	mov	r0, r3
 80052ac:	3710      	adds	r7, #16
 80052ae:	46bd      	mov	sp, r7
 80052b0:	bd80      	pop	{r7, pc}

080052b2 <I2C_WaitOnBTFFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnBTFFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 80052b2:	b580      	push	{r7, lr}
 80052b4:	b084      	sub	sp, #16
 80052b6:	af00      	add	r7, sp, #0
 80052b8:	60f8      	str	r0, [r7, #12]
 80052ba:	60b9      	str	r1, [r7, #8]
 80052bc:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == RESET)
 80052be:	e02d      	b.n	800531c <I2C_WaitOnBTFFlagUntilTimeout+0x6a>
  {
    /* Check if a NACK is detected */
    if (I2C_IsAcknowledgeFailed(hi2c) != HAL_OK)
 80052c0:	68f8      	ldr	r0, [r7, #12]
 80052c2:	f000 f88d 	bl	80053e0 <I2C_IsAcknowledgeFailed>
 80052c6:	4603      	mov	r3, r0
 80052c8:	2b00      	cmp	r3, #0
 80052ca:	d001      	beq.n	80052d0 <I2C_WaitOnBTFFlagUntilTimeout+0x1e>
    {
      return HAL_ERROR;
 80052cc:	2301      	movs	r3, #1
 80052ce:	e02d      	b.n	800532c <I2C_WaitOnBTFFlagUntilTimeout+0x7a>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 80052d0:	68bb      	ldr	r3, [r7, #8]
 80052d2:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 80052d6:	d021      	beq.n	800531c <I2C_WaitOnBTFFlagUntilTimeout+0x6a>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 80052d8:	f7fe fd7e 	bl	8003dd8 <HAL_GetTick>
 80052dc:	4602      	mov	r2, r0
 80052de:	687b      	ldr	r3, [r7, #4]
 80052e0:	1ad3      	subs	r3, r2, r3
 80052e2:	68ba      	ldr	r2, [r7, #8]
 80052e4:	429a      	cmp	r2, r3
 80052e6:	d302      	bcc.n	80052ee <I2C_WaitOnBTFFlagUntilTimeout+0x3c>
 80052e8:	68bb      	ldr	r3, [r7, #8]
 80052ea:	2b00      	cmp	r3, #0
 80052ec:	d116      	bne.n	800531c <I2C_WaitOnBTFFlagUntilTimeout+0x6a>
      {
        hi2c->PreviousState       = I2C_STATE_NONE;
 80052ee:	68fb      	ldr	r3, [r7, #12]
 80052f0:	2200      	movs	r2, #0
 80052f2:	631a      	str	r2, [r3, #48]	; 0x30
        hi2c->State               = HAL_I2C_STATE_READY;
 80052f4:	68fb      	ldr	r3, [r7, #12]
 80052f6:	2220      	movs	r2, #32
 80052f8:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        hi2c->Mode                = HAL_I2C_MODE_NONE;
 80052fc:	68fb      	ldr	r3, [r7, #12]
 80052fe:	2200      	movs	r2, #0
 8005300:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 8005304:	68fb      	ldr	r3, [r7, #12]
 8005306:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005308:	f043 0220 	orr.w	r2, r3, #32
 800530c:	68fb      	ldr	r3, [r7, #12]
 800530e:	641a      	str	r2, [r3, #64]	; 0x40

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 8005310:	68fb      	ldr	r3, [r7, #12]
 8005312:	2200      	movs	r2, #0
 8005314:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_ERROR;
 8005318:	2301      	movs	r3, #1
 800531a:	e007      	b.n	800532c <I2C_WaitOnBTFFlagUntilTimeout+0x7a>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == RESET)
 800531c:	68fb      	ldr	r3, [r7, #12]
 800531e:	681b      	ldr	r3, [r3, #0]
 8005320:	695b      	ldr	r3, [r3, #20]
 8005322:	f003 0304 	and.w	r3, r3, #4
 8005326:	2b04      	cmp	r3, #4
 8005328:	d1ca      	bne.n	80052c0 <I2C_WaitOnBTFFlagUntilTimeout+0xe>
      }
    }
  }
  return HAL_OK;
 800532a:	2300      	movs	r3, #0
}
 800532c:	4618      	mov	r0, r3
 800532e:	3710      	adds	r7, #16
 8005330:	46bd      	mov	sp, r7
 8005332:	bd80      	pop	{r7, pc}

08005334 <I2C_WaitOnRXNEFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnRXNEFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 8005334:	b580      	push	{r7, lr}
 8005336:	b084      	sub	sp, #16
 8005338:	af00      	add	r7, sp, #0
 800533a:	60f8      	str	r0, [r7, #12]
 800533c:	60b9      	str	r1, [r7, #8]
 800533e:	607a      	str	r2, [r7, #4]

  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == RESET)
 8005340:	e042      	b.n	80053c8 <I2C_WaitOnRXNEFlagUntilTimeout+0x94>
  {
    /* Check if a STOPF is detected */
    if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == SET)
 8005342:	68fb      	ldr	r3, [r7, #12]
 8005344:	681b      	ldr	r3, [r3, #0]
 8005346:	695b      	ldr	r3, [r3, #20]
 8005348:	f003 0310 	and.w	r3, r3, #16
 800534c:	2b10      	cmp	r3, #16
 800534e:	d119      	bne.n	8005384 <I2C_WaitOnRXNEFlagUntilTimeout+0x50>
    {
      /* Clear STOP Flag */
      __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 8005350:	68fb      	ldr	r3, [r7, #12]
 8005352:	681b      	ldr	r3, [r3, #0]
 8005354:	f06f 0210 	mvn.w	r2, #16
 8005358:	615a      	str	r2, [r3, #20]

      hi2c->PreviousState       = I2C_STATE_NONE;
 800535a:	68fb      	ldr	r3, [r7, #12]
 800535c:	2200      	movs	r2, #0
 800535e:	631a      	str	r2, [r3, #48]	; 0x30
      hi2c->State               = HAL_I2C_STATE_READY;
 8005360:	68fb      	ldr	r3, [r7, #12]
 8005362:	2220      	movs	r2, #32
 8005364:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
      hi2c->Mode                = HAL_I2C_MODE_NONE;
 8005368:	68fb      	ldr	r3, [r7, #12]
 800536a:	2200      	movs	r2, #0
 800536c:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
      hi2c->ErrorCode           |= HAL_I2C_ERROR_NONE;
 8005370:	68fb      	ldr	r3, [r7, #12]
 8005372:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8005374:	68fb      	ldr	r3, [r7, #12]
 8005376:	641a      	str	r2, [r3, #64]	; 0x40

      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 8005378:	68fb      	ldr	r3, [r7, #12]
 800537a:	2200      	movs	r2, #0
 800537c:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

      return HAL_ERROR;
 8005380:	2301      	movs	r3, #1
 8005382:	e029      	b.n	80053d8 <I2C_WaitOnRXNEFlagUntilTimeout+0xa4>
    }

    /* Check for the Timeout */
    if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8005384:	f7fe fd28 	bl	8003dd8 <HAL_GetTick>
 8005388:	4602      	mov	r2, r0
 800538a:	687b      	ldr	r3, [r7, #4]
 800538c:	1ad3      	subs	r3, r2, r3
 800538e:	68ba      	ldr	r2, [r7, #8]
 8005390:	429a      	cmp	r2, r3
 8005392:	d302      	bcc.n	800539a <I2C_WaitOnRXNEFlagUntilTimeout+0x66>
 8005394:	68bb      	ldr	r3, [r7, #8]
 8005396:	2b00      	cmp	r3, #0
 8005398:	d116      	bne.n	80053c8 <I2C_WaitOnRXNEFlagUntilTimeout+0x94>
    {
      hi2c->PreviousState       = I2C_STATE_NONE;
 800539a:	68fb      	ldr	r3, [r7, #12]
 800539c:	2200      	movs	r2, #0
 800539e:	631a      	str	r2, [r3, #48]	; 0x30
      hi2c->State               = HAL_I2C_STATE_READY;
 80053a0:	68fb      	ldr	r3, [r7, #12]
 80053a2:	2220      	movs	r2, #32
 80053a4:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
      hi2c->Mode                = HAL_I2C_MODE_NONE;
 80053a8:	68fb      	ldr	r3, [r7, #12]
 80053aa:	2200      	movs	r2, #0
 80053ac:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
      hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 80053b0:	68fb      	ldr	r3, [r7, #12]
 80053b2:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80053b4:	f043 0220 	orr.w	r2, r3, #32
 80053b8:	68fb      	ldr	r3, [r7, #12]
 80053ba:	641a      	str	r2, [r3, #64]	; 0x40

      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 80053bc:	68fb      	ldr	r3, [r7, #12]
 80053be:	2200      	movs	r2, #0
 80053c0:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

      return HAL_ERROR;
 80053c4:	2301      	movs	r3, #1
 80053c6:	e007      	b.n	80053d8 <I2C_WaitOnRXNEFlagUntilTimeout+0xa4>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == RESET)
 80053c8:	68fb      	ldr	r3, [r7, #12]
 80053ca:	681b      	ldr	r3, [r3, #0]
 80053cc:	695b      	ldr	r3, [r3, #20]
 80053ce:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80053d2:	2b40      	cmp	r3, #64	; 0x40
 80053d4:	d1b5      	bne.n	8005342 <I2C_WaitOnRXNEFlagUntilTimeout+0xe>
    }
  }
  return HAL_OK;
 80053d6:	2300      	movs	r3, #0
}
 80053d8:	4618      	mov	r0, r3
 80053da:	3710      	adds	r7, #16
 80053dc:	46bd      	mov	sp, r7
 80053de:	bd80      	pop	{r7, pc}

080053e0 <I2C_IsAcknowledgeFailed>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_IsAcknowledgeFailed(I2C_HandleTypeDef *hi2c)
{
 80053e0:	b480      	push	{r7}
 80053e2:	b083      	sub	sp, #12
 80053e4:	af00      	add	r7, sp, #0
 80053e6:	6078      	str	r0, [r7, #4]
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF) == SET)
 80053e8:	687b      	ldr	r3, [r7, #4]
 80053ea:	681b      	ldr	r3, [r3, #0]
 80053ec:	695b      	ldr	r3, [r3, #20]
 80053ee:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 80053f2:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 80053f6:	d11b      	bne.n	8005430 <I2C_IsAcknowledgeFailed+0x50>
  {
    /* Clear NACKF Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 80053f8:	687b      	ldr	r3, [r7, #4]
 80053fa:	681b      	ldr	r3, [r3, #0]
 80053fc:	f46f 6280 	mvn.w	r2, #1024	; 0x400
 8005400:	615a      	str	r2, [r3, #20]

    hi2c->PreviousState       = I2C_STATE_NONE;
 8005402:	687b      	ldr	r3, [r7, #4]
 8005404:	2200      	movs	r2, #0
 8005406:	631a      	str	r2, [r3, #48]	; 0x30
    hi2c->State               = HAL_I2C_STATE_READY;
 8005408:	687b      	ldr	r3, [r7, #4]
 800540a:	2220      	movs	r2, #32
 800540c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode                = HAL_I2C_MODE_NONE;
 8005410:	687b      	ldr	r3, [r7, #4]
 8005412:	2200      	movs	r2, #0
 8005414:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
    hi2c->ErrorCode           |= HAL_I2C_ERROR_AF;
 8005418:	687b      	ldr	r3, [r7, #4]
 800541a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800541c:	f043 0204 	orr.w	r2, r3, #4
 8005420:	687b      	ldr	r3, [r7, #4]
 8005422:	641a      	str	r2, [r3, #64]	; 0x40

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8005424:	687b      	ldr	r3, [r7, #4]
 8005426:	2200      	movs	r2, #0
 8005428:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    return HAL_ERROR;
 800542c:	2301      	movs	r3, #1
 800542e:	e000      	b.n	8005432 <I2C_IsAcknowledgeFailed+0x52>
  }
  return HAL_OK;
 8005430:	2300      	movs	r3, #0
}
 8005432:	4618      	mov	r0, r3
 8005434:	370c      	adds	r7, #12
 8005436:	46bd      	mov	sp, r7
 8005438:	bc80      	pop	{r7}
 800543a:	4770      	bx	lr

0800543c <HAL_RCC_OscConfig>:
  *         supported by this macro. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 800543c:	b580      	push	{r7, lr}
 800543e:	b086      	sub	sp, #24
 8005440:	af00      	add	r7, sp, #0
 8005442:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t pll_config;

  /* Check Null pointer */
  if (RCC_OscInitStruct == NULL)
 8005444:	687b      	ldr	r3, [r7, #4]
 8005446:	2b00      	cmp	r3, #0
 8005448:	d101      	bne.n	800544e <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 800544a:	2301      	movs	r3, #1
 800544c:	e26c      	b.n	8005928 <HAL_RCC_OscConfig+0x4ec>

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  /*------------------------------- HSE Configuration ------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 800544e:	687b      	ldr	r3, [r7, #4]
 8005450:	681b      	ldr	r3, [r3, #0]
 8005452:	f003 0301 	and.w	r3, r3, #1
 8005456:	2b00      	cmp	r3, #0
 8005458:	f000 8087 	beq.w	800556a <HAL_RCC_OscConfig+0x12e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSE)
 800545c:	4b92      	ldr	r3, [pc, #584]	; (80056a8 <HAL_RCC_OscConfig+0x26c>)
 800545e:	685b      	ldr	r3, [r3, #4]
 8005460:	f003 030c 	and.w	r3, r3, #12
 8005464:	2b04      	cmp	r3, #4
 8005466:	d00c      	beq.n	8005482 <HAL_RCC_OscConfig+0x46>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSE)))
 8005468:	4b8f      	ldr	r3, [pc, #572]	; (80056a8 <HAL_RCC_OscConfig+0x26c>)
 800546a:	685b      	ldr	r3, [r3, #4]
 800546c:	f003 030c 	and.w	r3, r3, #12
 8005470:	2b08      	cmp	r3, #8
 8005472:	d112      	bne.n	800549a <HAL_RCC_OscConfig+0x5e>
 8005474:	4b8c      	ldr	r3, [pc, #560]	; (80056a8 <HAL_RCC_OscConfig+0x26c>)
 8005476:	685b      	ldr	r3, [r3, #4]
 8005478:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 800547c:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8005480:	d10b      	bne.n	800549a <HAL_RCC_OscConfig+0x5e>
    {
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8005482:	4b89      	ldr	r3, [pc, #548]	; (80056a8 <HAL_RCC_OscConfig+0x26c>)
 8005484:	681b      	ldr	r3, [r3, #0]
 8005486:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800548a:	2b00      	cmp	r3, #0
 800548c:	d06c      	beq.n	8005568 <HAL_RCC_OscConfig+0x12c>
 800548e:	687b      	ldr	r3, [r7, #4]
 8005490:	685b      	ldr	r3, [r3, #4]
 8005492:	2b00      	cmp	r3, #0
 8005494:	d168      	bne.n	8005568 <HAL_RCC_OscConfig+0x12c>
      {
        return HAL_ERROR;
 8005496:	2301      	movs	r3, #1
 8005498:	e246      	b.n	8005928 <HAL_RCC_OscConfig+0x4ec>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 800549a:	687b      	ldr	r3, [r7, #4]
 800549c:	685b      	ldr	r3, [r3, #4]
 800549e:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 80054a2:	d106      	bne.n	80054b2 <HAL_RCC_OscConfig+0x76>
 80054a4:	4b80      	ldr	r3, [pc, #512]	; (80056a8 <HAL_RCC_OscConfig+0x26c>)
 80054a6:	681b      	ldr	r3, [r3, #0]
 80054a8:	4a7f      	ldr	r2, [pc, #508]	; (80056a8 <HAL_RCC_OscConfig+0x26c>)
 80054aa:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 80054ae:	6013      	str	r3, [r2, #0]
 80054b0:	e02e      	b.n	8005510 <HAL_RCC_OscConfig+0xd4>
 80054b2:	687b      	ldr	r3, [r7, #4]
 80054b4:	685b      	ldr	r3, [r3, #4]
 80054b6:	2b00      	cmp	r3, #0
 80054b8:	d10c      	bne.n	80054d4 <HAL_RCC_OscConfig+0x98>
 80054ba:	4b7b      	ldr	r3, [pc, #492]	; (80056a8 <HAL_RCC_OscConfig+0x26c>)
 80054bc:	681b      	ldr	r3, [r3, #0]
 80054be:	4a7a      	ldr	r2, [pc, #488]	; (80056a8 <HAL_RCC_OscConfig+0x26c>)
 80054c0:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 80054c4:	6013      	str	r3, [r2, #0]
 80054c6:	4b78      	ldr	r3, [pc, #480]	; (80056a8 <HAL_RCC_OscConfig+0x26c>)
 80054c8:	681b      	ldr	r3, [r3, #0]
 80054ca:	4a77      	ldr	r2, [pc, #476]	; (80056a8 <HAL_RCC_OscConfig+0x26c>)
 80054cc:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 80054d0:	6013      	str	r3, [r2, #0]
 80054d2:	e01d      	b.n	8005510 <HAL_RCC_OscConfig+0xd4>
 80054d4:	687b      	ldr	r3, [r7, #4]
 80054d6:	685b      	ldr	r3, [r3, #4]
 80054d8:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 80054dc:	d10c      	bne.n	80054f8 <HAL_RCC_OscConfig+0xbc>
 80054de:	4b72      	ldr	r3, [pc, #456]	; (80056a8 <HAL_RCC_OscConfig+0x26c>)
 80054e0:	681b      	ldr	r3, [r3, #0]
 80054e2:	4a71      	ldr	r2, [pc, #452]	; (80056a8 <HAL_RCC_OscConfig+0x26c>)
 80054e4:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 80054e8:	6013      	str	r3, [r2, #0]
 80054ea:	4b6f      	ldr	r3, [pc, #444]	; (80056a8 <HAL_RCC_OscConfig+0x26c>)
 80054ec:	681b      	ldr	r3, [r3, #0]
 80054ee:	4a6e      	ldr	r2, [pc, #440]	; (80056a8 <HAL_RCC_OscConfig+0x26c>)
 80054f0:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 80054f4:	6013      	str	r3, [r2, #0]
 80054f6:	e00b      	b.n	8005510 <HAL_RCC_OscConfig+0xd4>
 80054f8:	4b6b      	ldr	r3, [pc, #428]	; (80056a8 <HAL_RCC_OscConfig+0x26c>)
 80054fa:	681b      	ldr	r3, [r3, #0]
 80054fc:	4a6a      	ldr	r2, [pc, #424]	; (80056a8 <HAL_RCC_OscConfig+0x26c>)
 80054fe:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8005502:	6013      	str	r3, [r2, #0]
 8005504:	4b68      	ldr	r3, [pc, #416]	; (80056a8 <HAL_RCC_OscConfig+0x26c>)
 8005506:	681b      	ldr	r3, [r3, #0]
 8005508:	4a67      	ldr	r2, [pc, #412]	; (80056a8 <HAL_RCC_OscConfig+0x26c>)
 800550a:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 800550e:	6013      	str	r3, [r2, #0]


      /* Check the HSE State */
      if (RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 8005510:	687b      	ldr	r3, [r7, #4]
 8005512:	685b      	ldr	r3, [r3, #4]
 8005514:	2b00      	cmp	r3, #0
 8005516:	d013      	beq.n	8005540 <HAL_RCC_OscConfig+0x104>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8005518:	f7fe fc5e 	bl	8003dd8 <HAL_GetTick>
 800551c:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 800551e:	e008      	b.n	8005532 <HAL_RCC_OscConfig+0xf6>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8005520:	f7fe fc5a 	bl	8003dd8 <HAL_GetTick>
 8005524:	4602      	mov	r2, r0
 8005526:	693b      	ldr	r3, [r7, #16]
 8005528:	1ad3      	subs	r3, r2, r3
 800552a:	2b64      	cmp	r3, #100	; 0x64
 800552c:	d901      	bls.n	8005532 <HAL_RCC_OscConfig+0xf6>
          {
            return HAL_TIMEOUT;
 800552e:	2303      	movs	r3, #3
 8005530:	e1fa      	b.n	8005928 <HAL_RCC_OscConfig+0x4ec>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8005532:	4b5d      	ldr	r3, [pc, #372]	; (80056a8 <HAL_RCC_OscConfig+0x26c>)
 8005534:	681b      	ldr	r3, [r3, #0]
 8005536:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800553a:	2b00      	cmp	r3, #0
 800553c:	d0f0      	beq.n	8005520 <HAL_RCC_OscConfig+0xe4>
 800553e:	e014      	b.n	800556a <HAL_RCC_OscConfig+0x12e>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8005540:	f7fe fc4a 	bl	8003dd8 <HAL_GetTick>
 8005544:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8005546:	e008      	b.n	800555a <HAL_RCC_OscConfig+0x11e>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8005548:	f7fe fc46 	bl	8003dd8 <HAL_GetTick>
 800554c:	4602      	mov	r2, r0
 800554e:	693b      	ldr	r3, [r7, #16]
 8005550:	1ad3      	subs	r3, r2, r3
 8005552:	2b64      	cmp	r3, #100	; 0x64
 8005554:	d901      	bls.n	800555a <HAL_RCC_OscConfig+0x11e>
          {
            return HAL_TIMEOUT;
 8005556:	2303      	movs	r3, #3
 8005558:	e1e6      	b.n	8005928 <HAL_RCC_OscConfig+0x4ec>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 800555a:	4b53      	ldr	r3, [pc, #332]	; (80056a8 <HAL_RCC_OscConfig+0x26c>)
 800555c:	681b      	ldr	r3, [r3, #0]
 800555e:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8005562:	2b00      	cmp	r3, #0
 8005564:	d1f0      	bne.n	8005548 <HAL_RCC_OscConfig+0x10c>
 8005566:	e000      	b.n	800556a <HAL_RCC_OscConfig+0x12e>
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8005568:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 800556a:	687b      	ldr	r3, [r7, #4]
 800556c:	681b      	ldr	r3, [r3, #0]
 800556e:	f003 0302 	and.w	r3, r3, #2
 8005572:	2b00      	cmp	r3, #0
 8005574:	d063      	beq.n	800563e <HAL_RCC_OscConfig+0x202>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSI)
 8005576:	4b4c      	ldr	r3, [pc, #304]	; (80056a8 <HAL_RCC_OscConfig+0x26c>)
 8005578:	685b      	ldr	r3, [r3, #4]
 800557a:	f003 030c 	and.w	r3, r3, #12
 800557e:	2b00      	cmp	r3, #0
 8005580:	d00b      	beq.n	800559a <HAL_RCC_OscConfig+0x15e>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSI_DIV2)))
 8005582:	4b49      	ldr	r3, [pc, #292]	; (80056a8 <HAL_RCC_OscConfig+0x26c>)
 8005584:	685b      	ldr	r3, [r3, #4]
 8005586:	f003 030c 	and.w	r3, r3, #12
 800558a:	2b08      	cmp	r3, #8
 800558c:	d11c      	bne.n	80055c8 <HAL_RCC_OscConfig+0x18c>
 800558e:	4b46      	ldr	r3, [pc, #280]	; (80056a8 <HAL_RCC_OscConfig+0x26c>)
 8005590:	685b      	ldr	r3, [r3, #4]
 8005592:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8005596:	2b00      	cmp	r3, #0
 8005598:	d116      	bne.n	80055c8 <HAL_RCC_OscConfig+0x18c>
    {
      /* When HSI is used as system clock it will not disabled */
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 800559a:	4b43      	ldr	r3, [pc, #268]	; (80056a8 <HAL_RCC_OscConfig+0x26c>)
 800559c:	681b      	ldr	r3, [r3, #0]
 800559e:	f003 0302 	and.w	r3, r3, #2
 80055a2:	2b00      	cmp	r3, #0
 80055a4:	d005      	beq.n	80055b2 <HAL_RCC_OscConfig+0x176>
 80055a6:	687b      	ldr	r3, [r7, #4]
 80055a8:	691b      	ldr	r3, [r3, #16]
 80055aa:	2b01      	cmp	r3, #1
 80055ac:	d001      	beq.n	80055b2 <HAL_RCC_OscConfig+0x176>
      {
        return HAL_ERROR;
 80055ae:	2301      	movs	r3, #1
 80055b0:	e1ba      	b.n	8005928 <HAL_RCC_OscConfig+0x4ec>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80055b2:	4b3d      	ldr	r3, [pc, #244]	; (80056a8 <HAL_RCC_OscConfig+0x26c>)
 80055b4:	681b      	ldr	r3, [r3, #0]
 80055b6:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 80055ba:	687b      	ldr	r3, [r7, #4]
 80055bc:	695b      	ldr	r3, [r3, #20]
 80055be:	00db      	lsls	r3, r3, #3
 80055c0:	4939      	ldr	r1, [pc, #228]	; (80056a8 <HAL_RCC_OscConfig+0x26c>)
 80055c2:	4313      	orrs	r3, r2
 80055c4:	600b      	str	r3, [r1, #0]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 80055c6:	e03a      	b.n	800563e <HAL_RCC_OscConfig+0x202>
      }
    }
    else
    {
      /* Check the HSI State */
      if (RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 80055c8:	687b      	ldr	r3, [r7, #4]
 80055ca:	691b      	ldr	r3, [r3, #16]
 80055cc:	2b00      	cmp	r3, #0
 80055ce:	d020      	beq.n	8005612 <HAL_RCC_OscConfig+0x1d6>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 80055d0:	4b36      	ldr	r3, [pc, #216]	; (80056ac <HAL_RCC_OscConfig+0x270>)
 80055d2:	2201      	movs	r2, #1
 80055d4:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80055d6:	f7fe fbff 	bl	8003dd8 <HAL_GetTick>
 80055da:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80055dc:	e008      	b.n	80055f0 <HAL_RCC_OscConfig+0x1b4>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 80055de:	f7fe fbfb 	bl	8003dd8 <HAL_GetTick>
 80055e2:	4602      	mov	r2, r0
 80055e4:	693b      	ldr	r3, [r7, #16]
 80055e6:	1ad3      	subs	r3, r2, r3
 80055e8:	2b02      	cmp	r3, #2
 80055ea:	d901      	bls.n	80055f0 <HAL_RCC_OscConfig+0x1b4>
          {
            return HAL_TIMEOUT;
 80055ec:	2303      	movs	r3, #3
 80055ee:	e19b      	b.n	8005928 <HAL_RCC_OscConfig+0x4ec>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80055f0:	4b2d      	ldr	r3, [pc, #180]	; (80056a8 <HAL_RCC_OscConfig+0x26c>)
 80055f2:	681b      	ldr	r3, [r3, #0]
 80055f4:	f003 0302 	and.w	r3, r3, #2
 80055f8:	2b00      	cmp	r3, #0
 80055fa:	d0f0      	beq.n	80055de <HAL_RCC_OscConfig+0x1a2>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80055fc:	4b2a      	ldr	r3, [pc, #168]	; (80056a8 <HAL_RCC_OscConfig+0x26c>)
 80055fe:	681b      	ldr	r3, [r3, #0]
 8005600:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8005604:	687b      	ldr	r3, [r7, #4]
 8005606:	695b      	ldr	r3, [r3, #20]
 8005608:	00db      	lsls	r3, r3, #3
 800560a:	4927      	ldr	r1, [pc, #156]	; (80056a8 <HAL_RCC_OscConfig+0x26c>)
 800560c:	4313      	orrs	r3, r2
 800560e:	600b      	str	r3, [r1, #0]
 8005610:	e015      	b.n	800563e <HAL_RCC_OscConfig+0x202>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8005612:	4b26      	ldr	r3, [pc, #152]	; (80056ac <HAL_RCC_OscConfig+0x270>)
 8005614:	2200      	movs	r2, #0
 8005616:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8005618:	f7fe fbde 	bl	8003dd8 <HAL_GetTick>
 800561c:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 800561e:	e008      	b.n	8005632 <HAL_RCC_OscConfig+0x1f6>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8005620:	f7fe fbda 	bl	8003dd8 <HAL_GetTick>
 8005624:	4602      	mov	r2, r0
 8005626:	693b      	ldr	r3, [r7, #16]
 8005628:	1ad3      	subs	r3, r2, r3
 800562a:	2b02      	cmp	r3, #2
 800562c:	d901      	bls.n	8005632 <HAL_RCC_OscConfig+0x1f6>
          {
            return HAL_TIMEOUT;
 800562e:	2303      	movs	r3, #3
 8005630:	e17a      	b.n	8005928 <HAL_RCC_OscConfig+0x4ec>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8005632:	4b1d      	ldr	r3, [pc, #116]	; (80056a8 <HAL_RCC_OscConfig+0x26c>)
 8005634:	681b      	ldr	r3, [r3, #0]
 8005636:	f003 0302 	and.w	r3, r3, #2
 800563a:	2b00      	cmp	r3, #0
 800563c:	d1f0      	bne.n	8005620 <HAL_RCC_OscConfig+0x1e4>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 800563e:	687b      	ldr	r3, [r7, #4]
 8005640:	681b      	ldr	r3, [r3, #0]
 8005642:	f003 0308 	and.w	r3, r3, #8
 8005646:	2b00      	cmp	r3, #0
 8005648:	d03a      	beq.n	80056c0 <HAL_RCC_OscConfig+0x284>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if (RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 800564a:	687b      	ldr	r3, [r7, #4]
 800564c:	699b      	ldr	r3, [r3, #24]
 800564e:	2b00      	cmp	r3, #0
 8005650:	d019      	beq.n	8005686 <HAL_RCC_OscConfig+0x24a>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8005652:	4b17      	ldr	r3, [pc, #92]	; (80056b0 <HAL_RCC_OscConfig+0x274>)
 8005654:	2201      	movs	r2, #1
 8005656:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8005658:	f7fe fbbe 	bl	8003dd8 <HAL_GetTick>
 800565c:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 800565e:	e008      	b.n	8005672 <HAL_RCC_OscConfig+0x236>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8005660:	f7fe fbba 	bl	8003dd8 <HAL_GetTick>
 8005664:	4602      	mov	r2, r0
 8005666:	693b      	ldr	r3, [r7, #16]
 8005668:	1ad3      	subs	r3, r2, r3
 800566a:	2b02      	cmp	r3, #2
 800566c:	d901      	bls.n	8005672 <HAL_RCC_OscConfig+0x236>
        {
          return HAL_TIMEOUT;
 800566e:	2303      	movs	r3, #3
 8005670:	e15a      	b.n	8005928 <HAL_RCC_OscConfig+0x4ec>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8005672:	4b0d      	ldr	r3, [pc, #52]	; (80056a8 <HAL_RCC_OscConfig+0x26c>)
 8005674:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005676:	f003 0302 	and.w	r3, r3, #2
 800567a:	2b00      	cmp	r3, #0
 800567c:	d0f0      	beq.n	8005660 <HAL_RCC_OscConfig+0x224>
        }
      }
      /*  To have a fully stabilized clock in the specified range, a software delay of 1ms
          should be added.*/
      RCC_Delay(1);
 800567e:	2001      	movs	r0, #1
 8005680:	f000 fada 	bl	8005c38 <RCC_Delay>
 8005684:	e01c      	b.n	80056c0 <HAL_RCC_OscConfig+0x284>
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8005686:	4b0a      	ldr	r3, [pc, #40]	; (80056b0 <HAL_RCC_OscConfig+0x274>)
 8005688:	2200      	movs	r2, #0
 800568a:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 800568c:	f7fe fba4 	bl	8003dd8 <HAL_GetTick>
 8005690:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is disabled */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8005692:	e00f      	b.n	80056b4 <HAL_RCC_OscConfig+0x278>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8005694:	f7fe fba0 	bl	8003dd8 <HAL_GetTick>
 8005698:	4602      	mov	r2, r0
 800569a:	693b      	ldr	r3, [r7, #16]
 800569c:	1ad3      	subs	r3, r2, r3
 800569e:	2b02      	cmp	r3, #2
 80056a0:	d908      	bls.n	80056b4 <HAL_RCC_OscConfig+0x278>
        {
          return HAL_TIMEOUT;
 80056a2:	2303      	movs	r3, #3
 80056a4:	e140      	b.n	8005928 <HAL_RCC_OscConfig+0x4ec>
 80056a6:	bf00      	nop
 80056a8:	40021000 	.word	0x40021000
 80056ac:	42420000 	.word	0x42420000
 80056b0:	42420480 	.word	0x42420480
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 80056b4:	4b9e      	ldr	r3, [pc, #632]	; (8005930 <HAL_RCC_OscConfig+0x4f4>)
 80056b6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80056b8:	f003 0302 	and.w	r3, r3, #2
 80056bc:	2b00      	cmp	r3, #0
 80056be:	d1e9      	bne.n	8005694 <HAL_RCC_OscConfig+0x258>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 80056c0:	687b      	ldr	r3, [r7, #4]
 80056c2:	681b      	ldr	r3, [r3, #0]
 80056c4:	f003 0304 	and.w	r3, r3, #4
 80056c8:	2b00      	cmp	r3, #0
 80056ca:	f000 80a6 	beq.w	800581a <HAL_RCC_OscConfig+0x3de>
  {
    FlagStatus       pwrclkchanged = RESET;
 80056ce:	2300      	movs	r3, #0
 80056d0:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if (__HAL_RCC_PWR_IS_CLK_DISABLED())
 80056d2:	4b97      	ldr	r3, [pc, #604]	; (8005930 <HAL_RCC_OscConfig+0x4f4>)
 80056d4:	69db      	ldr	r3, [r3, #28]
 80056d6:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80056da:	2b00      	cmp	r3, #0
 80056dc:	d10d      	bne.n	80056fa <HAL_RCC_OscConfig+0x2be>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 80056de:	4b94      	ldr	r3, [pc, #592]	; (8005930 <HAL_RCC_OscConfig+0x4f4>)
 80056e0:	69db      	ldr	r3, [r3, #28]
 80056e2:	4a93      	ldr	r2, [pc, #588]	; (8005930 <HAL_RCC_OscConfig+0x4f4>)
 80056e4:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80056e8:	61d3      	str	r3, [r2, #28]
 80056ea:	4b91      	ldr	r3, [pc, #580]	; (8005930 <HAL_RCC_OscConfig+0x4f4>)
 80056ec:	69db      	ldr	r3, [r3, #28]
 80056ee:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80056f2:	60bb      	str	r3, [r7, #8]
 80056f4:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 80056f6:	2301      	movs	r3, #1
 80056f8:	75fb      	strb	r3, [r7, #23]
    }

    if (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80056fa:	4b8e      	ldr	r3, [pc, #568]	; (8005934 <HAL_RCC_OscConfig+0x4f8>)
 80056fc:	681b      	ldr	r3, [r3, #0]
 80056fe:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8005702:	2b00      	cmp	r3, #0
 8005704:	d118      	bne.n	8005738 <HAL_RCC_OscConfig+0x2fc>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 8005706:	4b8b      	ldr	r3, [pc, #556]	; (8005934 <HAL_RCC_OscConfig+0x4f8>)
 8005708:	681b      	ldr	r3, [r3, #0]
 800570a:	4a8a      	ldr	r2, [pc, #552]	; (8005934 <HAL_RCC_OscConfig+0x4f8>)
 800570c:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8005710:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8005712:	f7fe fb61 	bl	8003dd8 <HAL_GetTick>
 8005716:	6138      	str	r0, [r7, #16]

      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8005718:	e008      	b.n	800572c <HAL_RCC_OscConfig+0x2f0>
      {
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 800571a:	f7fe fb5d 	bl	8003dd8 <HAL_GetTick>
 800571e:	4602      	mov	r2, r0
 8005720:	693b      	ldr	r3, [r7, #16]
 8005722:	1ad3      	subs	r3, r2, r3
 8005724:	2b64      	cmp	r3, #100	; 0x64
 8005726:	d901      	bls.n	800572c <HAL_RCC_OscConfig+0x2f0>
        {
          return HAL_TIMEOUT;
 8005728:	2303      	movs	r3, #3
 800572a:	e0fd      	b.n	8005928 <HAL_RCC_OscConfig+0x4ec>
      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 800572c:	4b81      	ldr	r3, [pc, #516]	; (8005934 <HAL_RCC_OscConfig+0x4f8>)
 800572e:	681b      	ldr	r3, [r3, #0]
 8005730:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8005734:	2b00      	cmp	r3, #0
 8005736:	d0f0      	beq.n	800571a <HAL_RCC_OscConfig+0x2de>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8005738:	687b      	ldr	r3, [r7, #4]
 800573a:	68db      	ldr	r3, [r3, #12]
 800573c:	2b01      	cmp	r3, #1
 800573e:	d106      	bne.n	800574e <HAL_RCC_OscConfig+0x312>
 8005740:	4b7b      	ldr	r3, [pc, #492]	; (8005930 <HAL_RCC_OscConfig+0x4f4>)
 8005742:	6a1b      	ldr	r3, [r3, #32]
 8005744:	4a7a      	ldr	r2, [pc, #488]	; (8005930 <HAL_RCC_OscConfig+0x4f4>)
 8005746:	f043 0301 	orr.w	r3, r3, #1
 800574a:	6213      	str	r3, [r2, #32]
 800574c:	e02d      	b.n	80057aa <HAL_RCC_OscConfig+0x36e>
 800574e:	687b      	ldr	r3, [r7, #4]
 8005750:	68db      	ldr	r3, [r3, #12]
 8005752:	2b00      	cmp	r3, #0
 8005754:	d10c      	bne.n	8005770 <HAL_RCC_OscConfig+0x334>
 8005756:	4b76      	ldr	r3, [pc, #472]	; (8005930 <HAL_RCC_OscConfig+0x4f4>)
 8005758:	6a1b      	ldr	r3, [r3, #32]
 800575a:	4a75      	ldr	r2, [pc, #468]	; (8005930 <HAL_RCC_OscConfig+0x4f4>)
 800575c:	f023 0301 	bic.w	r3, r3, #1
 8005760:	6213      	str	r3, [r2, #32]
 8005762:	4b73      	ldr	r3, [pc, #460]	; (8005930 <HAL_RCC_OscConfig+0x4f4>)
 8005764:	6a1b      	ldr	r3, [r3, #32]
 8005766:	4a72      	ldr	r2, [pc, #456]	; (8005930 <HAL_RCC_OscConfig+0x4f4>)
 8005768:	f023 0304 	bic.w	r3, r3, #4
 800576c:	6213      	str	r3, [r2, #32]
 800576e:	e01c      	b.n	80057aa <HAL_RCC_OscConfig+0x36e>
 8005770:	687b      	ldr	r3, [r7, #4]
 8005772:	68db      	ldr	r3, [r3, #12]
 8005774:	2b05      	cmp	r3, #5
 8005776:	d10c      	bne.n	8005792 <HAL_RCC_OscConfig+0x356>
 8005778:	4b6d      	ldr	r3, [pc, #436]	; (8005930 <HAL_RCC_OscConfig+0x4f4>)
 800577a:	6a1b      	ldr	r3, [r3, #32]
 800577c:	4a6c      	ldr	r2, [pc, #432]	; (8005930 <HAL_RCC_OscConfig+0x4f4>)
 800577e:	f043 0304 	orr.w	r3, r3, #4
 8005782:	6213      	str	r3, [r2, #32]
 8005784:	4b6a      	ldr	r3, [pc, #424]	; (8005930 <HAL_RCC_OscConfig+0x4f4>)
 8005786:	6a1b      	ldr	r3, [r3, #32]
 8005788:	4a69      	ldr	r2, [pc, #420]	; (8005930 <HAL_RCC_OscConfig+0x4f4>)
 800578a:	f043 0301 	orr.w	r3, r3, #1
 800578e:	6213      	str	r3, [r2, #32]
 8005790:	e00b      	b.n	80057aa <HAL_RCC_OscConfig+0x36e>
 8005792:	4b67      	ldr	r3, [pc, #412]	; (8005930 <HAL_RCC_OscConfig+0x4f4>)
 8005794:	6a1b      	ldr	r3, [r3, #32]
 8005796:	4a66      	ldr	r2, [pc, #408]	; (8005930 <HAL_RCC_OscConfig+0x4f4>)
 8005798:	f023 0301 	bic.w	r3, r3, #1
 800579c:	6213      	str	r3, [r2, #32]
 800579e:	4b64      	ldr	r3, [pc, #400]	; (8005930 <HAL_RCC_OscConfig+0x4f4>)
 80057a0:	6a1b      	ldr	r3, [r3, #32]
 80057a2:	4a63      	ldr	r2, [pc, #396]	; (8005930 <HAL_RCC_OscConfig+0x4f4>)
 80057a4:	f023 0304 	bic.w	r3, r3, #4
 80057a8:	6213      	str	r3, [r2, #32]
    /* Check the LSE State */
    if (RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 80057aa:	687b      	ldr	r3, [r7, #4]
 80057ac:	68db      	ldr	r3, [r3, #12]
 80057ae:	2b00      	cmp	r3, #0
 80057b0:	d015      	beq.n	80057de <HAL_RCC_OscConfig+0x3a2>
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 80057b2:	f7fe fb11 	bl	8003dd8 <HAL_GetTick>
 80057b6:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 80057b8:	e00a      	b.n	80057d0 <HAL_RCC_OscConfig+0x394>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 80057ba:	f7fe fb0d 	bl	8003dd8 <HAL_GetTick>
 80057be:	4602      	mov	r2, r0
 80057c0:	693b      	ldr	r3, [r7, #16]
 80057c2:	1ad3      	subs	r3, r2, r3
 80057c4:	f241 3288 	movw	r2, #5000	; 0x1388
 80057c8:	4293      	cmp	r3, r2
 80057ca:	d901      	bls.n	80057d0 <HAL_RCC_OscConfig+0x394>
        {
          return HAL_TIMEOUT;
 80057cc:	2303      	movs	r3, #3
 80057ce:	e0ab      	b.n	8005928 <HAL_RCC_OscConfig+0x4ec>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 80057d0:	4b57      	ldr	r3, [pc, #348]	; (8005930 <HAL_RCC_OscConfig+0x4f4>)
 80057d2:	6a1b      	ldr	r3, [r3, #32]
 80057d4:	f003 0302 	and.w	r3, r3, #2
 80057d8:	2b00      	cmp	r3, #0
 80057da:	d0ee      	beq.n	80057ba <HAL_RCC_OscConfig+0x37e>
 80057dc:	e014      	b.n	8005808 <HAL_RCC_OscConfig+0x3cc>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 80057de:	f7fe fafb 	bl	8003dd8 <HAL_GetTick>
 80057e2:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is disabled */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 80057e4:	e00a      	b.n	80057fc <HAL_RCC_OscConfig+0x3c0>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 80057e6:	f7fe faf7 	bl	8003dd8 <HAL_GetTick>
 80057ea:	4602      	mov	r2, r0
 80057ec:	693b      	ldr	r3, [r7, #16]
 80057ee:	1ad3      	subs	r3, r2, r3
 80057f0:	f241 3288 	movw	r2, #5000	; 0x1388
 80057f4:	4293      	cmp	r3, r2
 80057f6:	d901      	bls.n	80057fc <HAL_RCC_OscConfig+0x3c0>
        {
          return HAL_TIMEOUT;
 80057f8:	2303      	movs	r3, #3
 80057fa:	e095      	b.n	8005928 <HAL_RCC_OscConfig+0x4ec>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 80057fc:	4b4c      	ldr	r3, [pc, #304]	; (8005930 <HAL_RCC_OscConfig+0x4f4>)
 80057fe:	6a1b      	ldr	r3, [r3, #32]
 8005800:	f003 0302 	and.w	r3, r3, #2
 8005804:	2b00      	cmp	r3, #0
 8005806:	d1ee      	bne.n	80057e6 <HAL_RCC_OscConfig+0x3aa>
        }
      }
    }

    /* Require to disable power clock if necessary */
    if (pwrclkchanged == SET)
 8005808:	7dfb      	ldrb	r3, [r7, #23]
 800580a:	2b01      	cmp	r3, #1
 800580c:	d105      	bne.n	800581a <HAL_RCC_OscConfig+0x3de>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 800580e:	4b48      	ldr	r3, [pc, #288]	; (8005930 <HAL_RCC_OscConfig+0x4f4>)
 8005810:	69db      	ldr	r3, [r3, #28]
 8005812:	4a47      	ldr	r2, [pc, #284]	; (8005930 <HAL_RCC_OscConfig+0x4f4>)
 8005814:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8005818:	61d3      	str	r3, [r2, #28]

#endif /* RCC_CR_PLL2ON */
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 800581a:	687b      	ldr	r3, [r7, #4]
 800581c:	69db      	ldr	r3, [r3, #28]
 800581e:	2b00      	cmp	r3, #0
 8005820:	f000 8081 	beq.w	8005926 <HAL_RCC_OscConfig+0x4ea>
  {
    /* Check if the PLL is used as system clock or not */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 8005824:	4b42      	ldr	r3, [pc, #264]	; (8005930 <HAL_RCC_OscConfig+0x4f4>)
 8005826:	685b      	ldr	r3, [r3, #4]
 8005828:	f003 030c 	and.w	r3, r3, #12
 800582c:	2b08      	cmp	r3, #8
 800582e:	d061      	beq.n	80058f4 <HAL_RCC_OscConfig+0x4b8>
    {
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8005830:	687b      	ldr	r3, [r7, #4]
 8005832:	69db      	ldr	r3, [r3, #28]
 8005834:	2b02      	cmp	r3, #2
 8005836:	d146      	bne.n	80058c6 <HAL_RCC_OscConfig+0x48a>
        /* Check the parameters */
        assert_param(IS_RCC_PLLSOURCE(RCC_OscInitStruct->PLL.PLLSource));
        assert_param(IS_RCC_PLL_MUL(RCC_OscInitStruct->PLL.PLLMUL));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8005838:	4b3f      	ldr	r3, [pc, #252]	; (8005938 <HAL_RCC_OscConfig+0x4fc>)
 800583a:	2200      	movs	r2, #0
 800583c:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800583e:	f7fe facb 	bl	8003dd8 <HAL_GetTick>
 8005842:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8005844:	e008      	b.n	8005858 <HAL_RCC_OscConfig+0x41c>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8005846:	f7fe fac7 	bl	8003dd8 <HAL_GetTick>
 800584a:	4602      	mov	r2, r0
 800584c:	693b      	ldr	r3, [r7, #16]
 800584e:	1ad3      	subs	r3, r2, r3
 8005850:	2b02      	cmp	r3, #2
 8005852:	d901      	bls.n	8005858 <HAL_RCC_OscConfig+0x41c>
          {
            return HAL_TIMEOUT;
 8005854:	2303      	movs	r3, #3
 8005856:	e067      	b.n	8005928 <HAL_RCC_OscConfig+0x4ec>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8005858:	4b35      	ldr	r3, [pc, #212]	; (8005930 <HAL_RCC_OscConfig+0x4f4>)
 800585a:	681b      	ldr	r3, [r3, #0]
 800585c:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8005860:	2b00      	cmp	r3, #0
 8005862:	d1f0      	bne.n	8005846 <HAL_RCC_OscConfig+0x40a>
          }
        }

        /* Configure the HSE prediv factor --------------------------------*/
        /* It can be written only when the PLL is disabled. Not used in PLL source is different than HSE */
        if (RCC_OscInitStruct->PLL.PLLSource == RCC_PLLSOURCE_HSE)
 8005864:	687b      	ldr	r3, [r7, #4]
 8005866:	6a1b      	ldr	r3, [r3, #32]
 8005868:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800586c:	d108      	bne.n	8005880 <HAL_RCC_OscConfig+0x444>
          /* Set PREDIV1 source */
          SET_BIT(RCC->CFGR2, RCC_OscInitStruct->Prediv1Source);
#endif /* RCC_CFGR2_PREDIV1SRC */

          /* Set PREDIV1 Value */
          __HAL_RCC_HSE_PREDIV_CONFIG(RCC_OscInitStruct->HSEPredivValue);
 800586e:	4b30      	ldr	r3, [pc, #192]	; (8005930 <HAL_RCC_OscConfig+0x4f4>)
 8005870:	685b      	ldr	r3, [r3, #4]
 8005872:	f423 3200 	bic.w	r2, r3, #131072	; 0x20000
 8005876:	687b      	ldr	r3, [r7, #4]
 8005878:	689b      	ldr	r3, [r3, #8]
 800587a:	492d      	ldr	r1, [pc, #180]	; (8005930 <HAL_RCC_OscConfig+0x4f4>)
 800587c:	4313      	orrs	r3, r2
 800587e:	604b      	str	r3, [r1, #4]
        }

        /* Configure the main PLL clock source and multiplication factors. */
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 8005880:	4b2b      	ldr	r3, [pc, #172]	; (8005930 <HAL_RCC_OscConfig+0x4f4>)
 8005882:	685b      	ldr	r3, [r3, #4]
 8005884:	f423 1274 	bic.w	r2, r3, #3997696	; 0x3d0000
 8005888:	687b      	ldr	r3, [r7, #4]
 800588a:	6a19      	ldr	r1, [r3, #32]
 800588c:	687b      	ldr	r3, [r7, #4]
 800588e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005890:	430b      	orrs	r3, r1
 8005892:	4927      	ldr	r1, [pc, #156]	; (8005930 <HAL_RCC_OscConfig+0x4f4>)
 8005894:	4313      	orrs	r3, r2
 8005896:	604b      	str	r3, [r1, #4]
                             RCC_OscInitStruct->PLL.PLLMUL);
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8005898:	4b27      	ldr	r3, [pc, #156]	; (8005938 <HAL_RCC_OscConfig+0x4fc>)
 800589a:	2201      	movs	r2, #1
 800589c:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800589e:	f7fe fa9b 	bl	8003dd8 <HAL_GetTick>
 80058a2:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 80058a4:	e008      	b.n	80058b8 <HAL_RCC_OscConfig+0x47c>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 80058a6:	f7fe fa97 	bl	8003dd8 <HAL_GetTick>
 80058aa:	4602      	mov	r2, r0
 80058ac:	693b      	ldr	r3, [r7, #16]
 80058ae:	1ad3      	subs	r3, r2, r3
 80058b0:	2b02      	cmp	r3, #2
 80058b2:	d901      	bls.n	80058b8 <HAL_RCC_OscConfig+0x47c>
          {
            return HAL_TIMEOUT;
 80058b4:	2303      	movs	r3, #3
 80058b6:	e037      	b.n	8005928 <HAL_RCC_OscConfig+0x4ec>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 80058b8:	4b1d      	ldr	r3, [pc, #116]	; (8005930 <HAL_RCC_OscConfig+0x4f4>)
 80058ba:	681b      	ldr	r3, [r3, #0]
 80058bc:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80058c0:	2b00      	cmp	r3, #0
 80058c2:	d0f0      	beq.n	80058a6 <HAL_RCC_OscConfig+0x46a>
 80058c4:	e02f      	b.n	8005926 <HAL_RCC_OscConfig+0x4ea>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 80058c6:	4b1c      	ldr	r3, [pc, #112]	; (8005938 <HAL_RCC_OscConfig+0x4fc>)
 80058c8:	2200      	movs	r2, #0
 80058ca:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80058cc:	f7fe fa84 	bl	8003dd8 <HAL_GetTick>
 80058d0:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 80058d2:	e008      	b.n	80058e6 <HAL_RCC_OscConfig+0x4aa>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 80058d4:	f7fe fa80 	bl	8003dd8 <HAL_GetTick>
 80058d8:	4602      	mov	r2, r0
 80058da:	693b      	ldr	r3, [r7, #16]
 80058dc:	1ad3      	subs	r3, r2, r3
 80058de:	2b02      	cmp	r3, #2
 80058e0:	d901      	bls.n	80058e6 <HAL_RCC_OscConfig+0x4aa>
          {
            return HAL_TIMEOUT;
 80058e2:	2303      	movs	r3, #3
 80058e4:	e020      	b.n	8005928 <HAL_RCC_OscConfig+0x4ec>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 80058e6:	4b12      	ldr	r3, [pc, #72]	; (8005930 <HAL_RCC_OscConfig+0x4f4>)
 80058e8:	681b      	ldr	r3, [r3, #0]
 80058ea:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80058ee:	2b00      	cmp	r3, #0
 80058f0:	d1f0      	bne.n	80058d4 <HAL_RCC_OscConfig+0x498>
 80058f2:	e018      	b.n	8005926 <HAL_RCC_OscConfig+0x4ea>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 80058f4:	687b      	ldr	r3, [r7, #4]
 80058f6:	69db      	ldr	r3, [r3, #28]
 80058f8:	2b01      	cmp	r3, #1
 80058fa:	d101      	bne.n	8005900 <HAL_RCC_OscConfig+0x4c4>
      {
        return HAL_ERROR;
 80058fc:	2301      	movs	r3, #1
 80058fe:	e013      	b.n	8005928 <HAL_RCC_OscConfig+0x4ec>
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->CFGR;
 8005900:	4b0b      	ldr	r3, [pc, #44]	; (8005930 <HAL_RCC_OscConfig+0x4f4>)
 8005902:	685b      	ldr	r3, [r3, #4]
 8005904:	60fb      	str	r3, [r7, #12]
        if ((READ_BIT(pll_config, RCC_CFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8005906:	68fb      	ldr	r3, [r7, #12]
 8005908:	f403 3280 	and.w	r2, r3, #65536	; 0x10000
 800590c:	687b      	ldr	r3, [r7, #4]
 800590e:	6a1b      	ldr	r3, [r3, #32]
 8005910:	429a      	cmp	r2, r3
 8005912:	d106      	bne.n	8005922 <HAL_RCC_OscConfig+0x4e6>
            (READ_BIT(pll_config, RCC_CFGR_PLLMULL) != RCC_OscInitStruct->PLL.PLLMUL))
 8005914:	68fb      	ldr	r3, [r7, #12]
 8005916:	f403 1270 	and.w	r2, r3, #3932160	; 0x3c0000
 800591a:	687b      	ldr	r3, [r7, #4]
 800591c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
        if ((READ_BIT(pll_config, RCC_CFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 800591e:	429a      	cmp	r2, r3
 8005920:	d001      	beq.n	8005926 <HAL_RCC_OscConfig+0x4ea>
        {
          return HAL_ERROR;
 8005922:	2301      	movs	r3, #1
 8005924:	e000      	b.n	8005928 <HAL_RCC_OscConfig+0x4ec>
        }
      }
    }
  }

  return HAL_OK;
 8005926:	2300      	movs	r3, #0
}
 8005928:	4618      	mov	r0, r3
 800592a:	3718      	adds	r7, #24
 800592c:	46bd      	mov	sp, r7
 800592e:	bd80      	pop	{r7, pc}
 8005930:	40021000 	.word	0x40021000
 8005934:	40007000 	.word	0x40007000
 8005938:	42420060 	.word	0x42420060

0800593c <HAL_RCC_ClockConfig>:
  *         You can use @ref HAL_RCC_GetClockConfig() function to know which clock is
  *         currently used as system clock source.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 800593c:	b580      	push	{r7, lr}
 800593e:	b084      	sub	sp, #16
 8005940:	af00      	add	r7, sp, #0
 8005942:	6078      	str	r0, [r7, #4]
 8005944:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if (RCC_ClkInitStruct == NULL)
 8005946:	687b      	ldr	r3, [r7, #4]
 8005948:	2b00      	cmp	r3, #0
 800594a:	d101      	bne.n	8005950 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 800594c:	2301      	movs	r3, #1
 800594e:	e0d0      	b.n	8005af2 <HAL_RCC_ClockConfig+0x1b6>
  must be correctly programmed according to the frequency of the CPU clock
    (HCLK) of the device. */

#if defined(FLASH_ACR_LATENCY)
  /* Increasing the number of wait states because of higher CPU frequency */
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 8005950:	4b6a      	ldr	r3, [pc, #424]	; (8005afc <HAL_RCC_ClockConfig+0x1c0>)
 8005952:	681b      	ldr	r3, [r3, #0]
 8005954:	f003 0307 	and.w	r3, r3, #7
 8005958:	683a      	ldr	r2, [r7, #0]
 800595a:	429a      	cmp	r2, r3
 800595c:	d910      	bls.n	8005980 <HAL_RCC_ClockConfig+0x44>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 800595e:	4b67      	ldr	r3, [pc, #412]	; (8005afc <HAL_RCC_ClockConfig+0x1c0>)
 8005960:	681b      	ldr	r3, [r3, #0]
 8005962:	f023 0207 	bic.w	r2, r3, #7
 8005966:	4965      	ldr	r1, [pc, #404]	; (8005afc <HAL_RCC_ClockConfig+0x1c0>)
 8005968:	683b      	ldr	r3, [r7, #0]
 800596a:	4313      	orrs	r3, r2
 800596c:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 800596e:	4b63      	ldr	r3, [pc, #396]	; (8005afc <HAL_RCC_ClockConfig+0x1c0>)
 8005970:	681b      	ldr	r3, [r3, #0]
 8005972:	f003 0307 	and.w	r3, r3, #7
 8005976:	683a      	ldr	r2, [r7, #0]
 8005978:	429a      	cmp	r2, r3
 800597a:	d001      	beq.n	8005980 <HAL_RCC_ClockConfig+0x44>
  {
    return HAL_ERROR;
 800597c:	2301      	movs	r3, #1
 800597e:	e0b8      	b.n	8005af2 <HAL_RCC_ClockConfig+0x1b6>
  }
}

#endif /* FLASH_ACR_LATENCY */
/*-------------------------- HCLK Configuration --------------------------*/
if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8005980:	687b      	ldr	r3, [r7, #4]
 8005982:	681b      	ldr	r3, [r3, #0]
 8005984:	f003 0302 	and.w	r3, r3, #2
 8005988:	2b00      	cmp	r3, #0
 800598a:	d020      	beq.n	80059ce <HAL_RCC_ClockConfig+0x92>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
    a non-spec phase whatever we decrease or increase HCLK. */
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 800598c:	687b      	ldr	r3, [r7, #4]
 800598e:	681b      	ldr	r3, [r3, #0]
 8005990:	f003 0304 	and.w	r3, r3, #4
 8005994:	2b00      	cmp	r3, #0
 8005996:	d005      	beq.n	80059a4 <HAL_RCC_ClockConfig+0x68>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 8005998:	4b59      	ldr	r3, [pc, #356]	; (8005b00 <HAL_RCC_ClockConfig+0x1c4>)
 800599a:	685b      	ldr	r3, [r3, #4]
 800599c:	4a58      	ldr	r2, [pc, #352]	; (8005b00 <HAL_RCC_ClockConfig+0x1c4>)
 800599e:	f443 63e0 	orr.w	r3, r3, #1792	; 0x700
 80059a2:	6053      	str	r3, [r2, #4]
    }

    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 80059a4:	687b      	ldr	r3, [r7, #4]
 80059a6:	681b      	ldr	r3, [r3, #0]
 80059a8:	f003 0308 	and.w	r3, r3, #8
 80059ac:	2b00      	cmp	r3, #0
 80059ae:	d005      	beq.n	80059bc <HAL_RCC_ClockConfig+0x80>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 80059b0:	4b53      	ldr	r3, [pc, #332]	; (8005b00 <HAL_RCC_ClockConfig+0x1c4>)
 80059b2:	685b      	ldr	r3, [r3, #4]
 80059b4:	4a52      	ldr	r2, [pc, #328]	; (8005b00 <HAL_RCC_ClockConfig+0x1c4>)
 80059b6:	f443 5360 	orr.w	r3, r3, #14336	; 0x3800
 80059ba:	6053      	str	r3, [r2, #4]
    }

    /* Set the new HCLK clock divider */
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 80059bc:	4b50      	ldr	r3, [pc, #320]	; (8005b00 <HAL_RCC_ClockConfig+0x1c4>)
 80059be:	685b      	ldr	r3, [r3, #4]
 80059c0:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 80059c4:	687b      	ldr	r3, [r7, #4]
 80059c6:	689b      	ldr	r3, [r3, #8]
 80059c8:	494d      	ldr	r1, [pc, #308]	; (8005b00 <HAL_RCC_ClockConfig+0x1c4>)
 80059ca:	4313      	orrs	r3, r2
 80059cc:	604b      	str	r3, [r1, #4]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 80059ce:	687b      	ldr	r3, [r7, #4]
 80059d0:	681b      	ldr	r3, [r3, #0]
 80059d2:	f003 0301 	and.w	r3, r3, #1
 80059d6:	2b00      	cmp	r3, #0
 80059d8:	d040      	beq.n	8005a5c <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 80059da:	687b      	ldr	r3, [r7, #4]
 80059dc:	685b      	ldr	r3, [r3, #4]
 80059de:	2b01      	cmp	r3, #1
 80059e0:	d107      	bne.n	80059f2 <HAL_RCC_ClockConfig+0xb6>
    {
      /* Check the HSE ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80059e2:	4b47      	ldr	r3, [pc, #284]	; (8005b00 <HAL_RCC_ClockConfig+0x1c4>)
 80059e4:	681b      	ldr	r3, [r3, #0]
 80059e6:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80059ea:	2b00      	cmp	r3, #0
 80059ec:	d115      	bne.n	8005a1a <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 80059ee:	2301      	movs	r3, #1
 80059f0:	e07f      	b.n	8005af2 <HAL_RCC_ClockConfig+0x1b6>
      }
    }
    /* PLL is selected as System Clock Source */
    else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 80059f2:	687b      	ldr	r3, [r7, #4]
 80059f4:	685b      	ldr	r3, [r3, #4]
 80059f6:	2b02      	cmp	r3, #2
 80059f8:	d107      	bne.n	8005a0a <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 80059fa:	4b41      	ldr	r3, [pc, #260]	; (8005b00 <HAL_RCC_ClockConfig+0x1c4>)
 80059fc:	681b      	ldr	r3, [r3, #0]
 80059fe:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8005a02:	2b00      	cmp	r3, #0
 8005a04:	d109      	bne.n	8005a1a <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8005a06:	2301      	movs	r3, #1
 8005a08:	e073      	b.n	8005af2 <HAL_RCC_ClockConfig+0x1b6>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8005a0a:	4b3d      	ldr	r3, [pc, #244]	; (8005b00 <HAL_RCC_ClockConfig+0x1c4>)
 8005a0c:	681b      	ldr	r3, [r3, #0]
 8005a0e:	f003 0302 	and.w	r3, r3, #2
 8005a12:	2b00      	cmp	r3, #0
 8005a14:	d101      	bne.n	8005a1a <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8005a16:	2301      	movs	r3, #1
 8005a18:	e06b      	b.n	8005af2 <HAL_RCC_ClockConfig+0x1b6>
      }
    }
    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 8005a1a:	4b39      	ldr	r3, [pc, #228]	; (8005b00 <HAL_RCC_ClockConfig+0x1c4>)
 8005a1c:	685b      	ldr	r3, [r3, #4]
 8005a1e:	f023 0203 	bic.w	r2, r3, #3
 8005a22:	687b      	ldr	r3, [r7, #4]
 8005a24:	685b      	ldr	r3, [r3, #4]
 8005a26:	4936      	ldr	r1, [pc, #216]	; (8005b00 <HAL_RCC_ClockConfig+0x1c4>)
 8005a28:	4313      	orrs	r3, r2
 8005a2a:	604b      	str	r3, [r1, #4]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 8005a2c:	f7fe f9d4 	bl	8003dd8 <HAL_GetTick>
 8005a30:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8005a32:	e00a      	b.n	8005a4a <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8005a34:	f7fe f9d0 	bl	8003dd8 <HAL_GetTick>
 8005a38:	4602      	mov	r2, r0
 8005a3a:	68fb      	ldr	r3, [r7, #12]
 8005a3c:	1ad3      	subs	r3, r2, r3
 8005a3e:	f241 3288 	movw	r2, #5000	; 0x1388
 8005a42:	4293      	cmp	r3, r2
 8005a44:	d901      	bls.n	8005a4a <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 8005a46:	2303      	movs	r3, #3
 8005a48:	e053      	b.n	8005af2 <HAL_RCC_ClockConfig+0x1b6>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8005a4a:	4b2d      	ldr	r3, [pc, #180]	; (8005b00 <HAL_RCC_ClockConfig+0x1c4>)
 8005a4c:	685b      	ldr	r3, [r3, #4]
 8005a4e:	f003 020c 	and.w	r2, r3, #12
 8005a52:	687b      	ldr	r3, [r7, #4]
 8005a54:	685b      	ldr	r3, [r3, #4]
 8005a56:	009b      	lsls	r3, r3, #2
 8005a58:	429a      	cmp	r2, r3
 8005a5a:	d1eb      	bne.n	8005a34 <HAL_RCC_ClockConfig+0xf8>
    }
  }

#if defined(FLASH_ACR_LATENCY)
  /* Decreasing the number of wait states because of lower CPU frequency */
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 8005a5c:	4b27      	ldr	r3, [pc, #156]	; (8005afc <HAL_RCC_ClockConfig+0x1c0>)
 8005a5e:	681b      	ldr	r3, [r3, #0]
 8005a60:	f003 0307 	and.w	r3, r3, #7
 8005a64:	683a      	ldr	r2, [r7, #0]
 8005a66:	429a      	cmp	r2, r3
 8005a68:	d210      	bcs.n	8005a8c <HAL_RCC_ClockConfig+0x150>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8005a6a:	4b24      	ldr	r3, [pc, #144]	; (8005afc <HAL_RCC_ClockConfig+0x1c0>)
 8005a6c:	681b      	ldr	r3, [r3, #0]
 8005a6e:	f023 0207 	bic.w	r2, r3, #7
 8005a72:	4922      	ldr	r1, [pc, #136]	; (8005afc <HAL_RCC_ClockConfig+0x1c0>)
 8005a74:	683b      	ldr	r3, [r7, #0]
 8005a76:	4313      	orrs	r3, r2
 8005a78:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 8005a7a:	4b20      	ldr	r3, [pc, #128]	; (8005afc <HAL_RCC_ClockConfig+0x1c0>)
 8005a7c:	681b      	ldr	r3, [r3, #0]
 8005a7e:	f003 0307 	and.w	r3, r3, #7
 8005a82:	683a      	ldr	r2, [r7, #0]
 8005a84:	429a      	cmp	r2, r3
 8005a86:	d001      	beq.n	8005a8c <HAL_RCC_ClockConfig+0x150>
  {
    return HAL_ERROR;
 8005a88:	2301      	movs	r3, #1
 8005a8a:	e032      	b.n	8005af2 <HAL_RCC_ClockConfig+0x1b6>
  }
}
#endif /* FLASH_ACR_LATENCY */

/*-------------------------- PCLK1 Configuration ---------------------------*/
if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8005a8c:	687b      	ldr	r3, [r7, #4]
 8005a8e:	681b      	ldr	r3, [r3, #0]
 8005a90:	f003 0304 	and.w	r3, r3, #4
 8005a94:	2b00      	cmp	r3, #0
 8005a96:	d008      	beq.n	8005aaa <HAL_RCC_ClockConfig+0x16e>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8005a98:	4b19      	ldr	r3, [pc, #100]	; (8005b00 <HAL_RCC_ClockConfig+0x1c4>)
 8005a9a:	685b      	ldr	r3, [r3, #4]
 8005a9c:	f423 62e0 	bic.w	r2, r3, #1792	; 0x700
 8005aa0:	687b      	ldr	r3, [r7, #4]
 8005aa2:	68db      	ldr	r3, [r3, #12]
 8005aa4:	4916      	ldr	r1, [pc, #88]	; (8005b00 <HAL_RCC_ClockConfig+0x1c4>)
 8005aa6:	4313      	orrs	r3, r2
 8005aa8:	604b      	str	r3, [r1, #4]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8005aaa:	687b      	ldr	r3, [r7, #4]
 8005aac:	681b      	ldr	r3, [r3, #0]
 8005aae:	f003 0308 	and.w	r3, r3, #8
 8005ab2:	2b00      	cmp	r3, #0
 8005ab4:	d009      	beq.n	8005aca <HAL_RCC_ClockConfig+0x18e>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3));
 8005ab6:	4b12      	ldr	r3, [pc, #72]	; (8005b00 <HAL_RCC_ClockConfig+0x1c4>)
 8005ab8:	685b      	ldr	r3, [r3, #4]
 8005aba:	f423 5260 	bic.w	r2, r3, #14336	; 0x3800
 8005abe:	687b      	ldr	r3, [r7, #4]
 8005ac0:	691b      	ldr	r3, [r3, #16]
 8005ac2:	00db      	lsls	r3, r3, #3
 8005ac4:	490e      	ldr	r1, [pc, #56]	; (8005b00 <HAL_RCC_ClockConfig+0x1c4>)
 8005ac6:	4313      	orrs	r3, r2
 8005ac8:	604b      	str	r3, [r1, #4]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos];
 8005aca:	f000 f821 	bl	8005b10 <HAL_RCC_GetSysClockFreq>
 8005ace:	4601      	mov	r1, r0
 8005ad0:	4b0b      	ldr	r3, [pc, #44]	; (8005b00 <HAL_RCC_ClockConfig+0x1c4>)
 8005ad2:	685b      	ldr	r3, [r3, #4]
 8005ad4:	091b      	lsrs	r3, r3, #4
 8005ad6:	f003 030f 	and.w	r3, r3, #15
 8005ada:	4a0a      	ldr	r2, [pc, #40]	; (8005b04 <HAL_RCC_ClockConfig+0x1c8>)
 8005adc:	5cd3      	ldrb	r3, [r2, r3]
 8005ade:	fa21 f303 	lsr.w	r3, r1, r3
 8005ae2:	4a09      	ldr	r2, [pc, #36]	; (8005b08 <HAL_RCC_ClockConfig+0x1cc>)
 8005ae4:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  HAL_InitTick(uwTickPrio);
 8005ae6:	4b09      	ldr	r3, [pc, #36]	; (8005b0c <HAL_RCC_ClockConfig+0x1d0>)
 8005ae8:	681b      	ldr	r3, [r3, #0]
 8005aea:	4618      	mov	r0, r3
 8005aec:	f7fe f932 	bl	8003d54 <HAL_InitTick>

  return HAL_OK;
 8005af0:	2300      	movs	r3, #0
}
 8005af2:	4618      	mov	r0, r3
 8005af4:	3710      	adds	r7, #16
 8005af6:	46bd      	mov	sp, r7
 8005af8:	bd80      	pop	{r7, pc}
 8005afa:	bf00      	nop
 8005afc:	40022000 	.word	0x40022000
 8005b00:	40021000 	.word	0x40021000
 8005b04:	0800b9a8 	.word	0x0800b9a8
 8005b08:	20000020 	.word	0x20000020
 8005b0c:	20000024 	.word	0x20000024

08005b10 <HAL_RCC_GetSysClockFreq>:
  *         right SYSCLK value. Otherwise, any configuration based on this function will be incorrect.
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8005b10:	b490      	push	{r4, r7}
 8005b12:	b08a      	sub	sp, #40	; 0x28
 8005b14:	af00      	add	r7, sp, #0
#if defined(RCC_CFGR2_PREDIV1SRC)
  const uint8_t aPLLMULFactorTable[14] = {0, 0, 4, 5, 6, 7, 8, 9, 0, 0, 0, 0, 0, 13};
  const uint8_t aPredivFactorTable[16] = {1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16};
#else
  const uint8_t aPLLMULFactorTable[16] = {2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 16};
 8005b16:	4b2a      	ldr	r3, [pc, #168]	; (8005bc0 <HAL_RCC_GetSysClockFreq+0xb0>)
 8005b18:	1d3c      	adds	r4, r7, #4
 8005b1a:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 8005b1c:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}
#if defined(RCC_CFGR2_PREDIV1)
  const uint8_t aPredivFactorTable[16] = {1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16};
#else
  const uint8_t aPredivFactorTable[2] = {1, 2};
 8005b20:	4b28      	ldr	r3, [pc, #160]	; (8005bc4 <HAL_RCC_GetSysClockFreq+0xb4>)
 8005b22:	881b      	ldrh	r3, [r3, #0]
 8005b24:	803b      	strh	r3, [r7, #0]
#endif /*RCC_CFGR2_PREDIV1*/

#endif
  uint32_t tmpreg = 0U, prediv = 0U, pllclk = 0U, pllmul = 0U;
 8005b26:	2300      	movs	r3, #0
 8005b28:	61fb      	str	r3, [r7, #28]
 8005b2a:	2300      	movs	r3, #0
 8005b2c:	61bb      	str	r3, [r7, #24]
 8005b2e:	2300      	movs	r3, #0
 8005b30:	627b      	str	r3, [r7, #36]	; 0x24
 8005b32:	2300      	movs	r3, #0
 8005b34:	617b      	str	r3, [r7, #20]
  uint32_t sysclockfreq = 0U;
 8005b36:	2300      	movs	r3, #0
 8005b38:	623b      	str	r3, [r7, #32]
#if defined(RCC_CFGR2_PREDIV1SRC)
  uint32_t prediv2 = 0U, pll2mul = 0U;
#endif /*RCC_CFGR2_PREDIV1SRC*/

  tmpreg = RCC->CFGR;
 8005b3a:	4b23      	ldr	r3, [pc, #140]	; (8005bc8 <HAL_RCC_GetSysClockFreq+0xb8>)
 8005b3c:	685b      	ldr	r3, [r3, #4]
 8005b3e:	61fb      	str	r3, [r7, #28]

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (tmpreg & RCC_CFGR_SWS)
 8005b40:	69fb      	ldr	r3, [r7, #28]
 8005b42:	f003 030c 	and.w	r3, r3, #12
 8005b46:	2b04      	cmp	r3, #4
 8005b48:	d002      	beq.n	8005b50 <HAL_RCC_GetSysClockFreq+0x40>
 8005b4a:	2b08      	cmp	r3, #8
 8005b4c:	d003      	beq.n	8005b56 <HAL_RCC_GetSysClockFreq+0x46>
 8005b4e:	e02d      	b.n	8005bac <HAL_RCC_GetSysClockFreq+0x9c>
  {
    case RCC_SYSCLKSOURCE_STATUS_HSE:  /* HSE used as system clock */
    {
      sysclockfreq = HSE_VALUE;
 8005b50:	4b1e      	ldr	r3, [pc, #120]	; (8005bcc <HAL_RCC_GetSysClockFreq+0xbc>)
 8005b52:	623b      	str	r3, [r7, #32]
      break;
 8005b54:	e02d      	b.n	8005bb2 <HAL_RCC_GetSysClockFreq+0xa2>
    }
    case RCC_SYSCLKSOURCE_STATUS_PLLCLK:  /* PLL used as system clock */
    {
      pllmul = aPLLMULFactorTable[(uint32_t)(tmpreg & RCC_CFGR_PLLMULL) >> RCC_CFGR_PLLMULL_Pos];
 8005b56:	69fb      	ldr	r3, [r7, #28]
 8005b58:	0c9b      	lsrs	r3, r3, #18
 8005b5a:	f003 030f 	and.w	r3, r3, #15
 8005b5e:	f107 0228 	add.w	r2, r7, #40	; 0x28
 8005b62:	4413      	add	r3, r2
 8005b64:	f813 3c24 	ldrb.w	r3, [r3, #-36]
 8005b68:	617b      	str	r3, [r7, #20]
      if ((tmpreg & RCC_CFGR_PLLSRC) != RCC_PLLSOURCE_HSI_DIV2)
 8005b6a:	69fb      	ldr	r3, [r7, #28]
 8005b6c:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8005b70:	2b00      	cmp	r3, #0
 8005b72:	d013      	beq.n	8005b9c <HAL_RCC_GetSysClockFreq+0x8c>
      {
#if defined(RCC_CFGR2_PREDIV1)
        prediv = aPredivFactorTable[(uint32_t)(RCC->CFGR2 & RCC_CFGR2_PREDIV1) >> RCC_CFGR2_PREDIV1_Pos];
#else
        prediv = aPredivFactorTable[(uint32_t)(RCC->CFGR & RCC_CFGR_PLLXTPRE) >> RCC_CFGR_PLLXTPRE_Pos];
 8005b74:	4b14      	ldr	r3, [pc, #80]	; (8005bc8 <HAL_RCC_GetSysClockFreq+0xb8>)
 8005b76:	685b      	ldr	r3, [r3, #4]
 8005b78:	0c5b      	lsrs	r3, r3, #17
 8005b7a:	f003 0301 	and.w	r3, r3, #1
 8005b7e:	f107 0228 	add.w	r2, r7, #40	; 0x28
 8005b82:	4413      	add	r3, r2
 8005b84:	f813 3c28 	ldrb.w	r3, [r3, #-40]
 8005b88:	61bb      	str	r3, [r7, #24]
        {
          pllclk = pllclk / 2;
        }
#else
        /* HSE used as PLL clock source : PLLCLK = HSE/PREDIV1 * PLLMUL */
        pllclk = (uint32_t)((HSE_VALUE  * pllmul) / prediv);
 8005b8a:	697b      	ldr	r3, [r7, #20]
 8005b8c:	4a0f      	ldr	r2, [pc, #60]	; (8005bcc <HAL_RCC_GetSysClockFreq+0xbc>)
 8005b8e:	fb02 f203 	mul.w	r2, r2, r3
 8005b92:	69bb      	ldr	r3, [r7, #24]
 8005b94:	fbb2 f3f3 	udiv	r3, r2, r3
 8005b98:	627b      	str	r3, [r7, #36]	; 0x24
 8005b9a:	e004      	b.n	8005ba6 <HAL_RCC_GetSysClockFreq+0x96>
#endif /*RCC_CFGR2_PREDIV1SRC*/
      }
      else
      {
        /* HSI used as PLL clock source : PLLCLK = HSI/2 * PLLMUL */
        pllclk = (uint32_t)((HSI_VALUE >> 1) * pllmul);
 8005b9c:	697b      	ldr	r3, [r7, #20]
 8005b9e:	4a0c      	ldr	r2, [pc, #48]	; (8005bd0 <HAL_RCC_GetSysClockFreq+0xc0>)
 8005ba0:	fb02 f303 	mul.w	r3, r2, r3
 8005ba4:	627b      	str	r3, [r7, #36]	; 0x24
      }
      sysclockfreq = pllclk;
 8005ba6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005ba8:	623b      	str	r3, [r7, #32]
      break;
 8005baa:	e002      	b.n	8005bb2 <HAL_RCC_GetSysClockFreq+0xa2>
    }
    case RCC_SYSCLKSOURCE_STATUS_HSI:  /* HSI used as system clock source */
    default: /* HSI used as system clock */
    {
      sysclockfreq = HSI_VALUE;
 8005bac:	4b07      	ldr	r3, [pc, #28]	; (8005bcc <HAL_RCC_GetSysClockFreq+0xbc>)
 8005bae:	623b      	str	r3, [r7, #32]
      break;
 8005bb0:	bf00      	nop
    }
  }
  return sysclockfreq;
 8005bb2:	6a3b      	ldr	r3, [r7, #32]
}
 8005bb4:	4618      	mov	r0, r3
 8005bb6:	3728      	adds	r7, #40	; 0x28
 8005bb8:	46bd      	mov	sp, r7
 8005bba:	bc90      	pop	{r4, r7}
 8005bbc:	4770      	bx	lr
 8005bbe:	bf00      	nop
 8005bc0:	0800b994 	.word	0x0800b994
 8005bc4:	0800b9a4 	.word	0x0800b9a4
 8005bc8:	40021000 	.word	0x40021000
 8005bcc:	007a1200 	.word	0x007a1200
 8005bd0:	003d0900 	.word	0x003d0900

08005bd4 <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8005bd4:	b480      	push	{r7}
 8005bd6:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8005bd8:	4b02      	ldr	r3, [pc, #8]	; (8005be4 <HAL_RCC_GetHCLKFreq+0x10>)
 8005bda:	681b      	ldr	r3, [r3, #0]
}
 8005bdc:	4618      	mov	r0, r3
 8005bde:	46bd      	mov	sp, r7
 8005be0:	bc80      	pop	{r7}
 8005be2:	4770      	bx	lr
 8005be4:	20000020 	.word	0x20000020

08005be8 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8005be8:	b580      	push	{r7, lr}
 8005bea:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1) >> RCC_CFGR_PPRE1_Pos]);
 8005bec:	f7ff fff2 	bl	8005bd4 <HAL_RCC_GetHCLKFreq>
 8005bf0:	4601      	mov	r1, r0
 8005bf2:	4b05      	ldr	r3, [pc, #20]	; (8005c08 <HAL_RCC_GetPCLK1Freq+0x20>)
 8005bf4:	685b      	ldr	r3, [r3, #4]
 8005bf6:	0a1b      	lsrs	r3, r3, #8
 8005bf8:	f003 0307 	and.w	r3, r3, #7
 8005bfc:	4a03      	ldr	r2, [pc, #12]	; (8005c0c <HAL_RCC_GetPCLK1Freq+0x24>)
 8005bfe:	5cd3      	ldrb	r3, [r2, r3]
 8005c00:	fa21 f303 	lsr.w	r3, r1, r3
}
 8005c04:	4618      	mov	r0, r3
 8005c06:	bd80      	pop	{r7, pc}
 8005c08:	40021000 	.word	0x40021000
 8005c0c:	0800b9b8 	.word	0x0800b9b8

08005c10 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 8005c10:	b580      	push	{r7, lr}
 8005c12:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2) >> RCC_CFGR_PPRE2_Pos]);
 8005c14:	f7ff ffde 	bl	8005bd4 <HAL_RCC_GetHCLKFreq>
 8005c18:	4601      	mov	r1, r0
 8005c1a:	4b05      	ldr	r3, [pc, #20]	; (8005c30 <HAL_RCC_GetPCLK2Freq+0x20>)
 8005c1c:	685b      	ldr	r3, [r3, #4]
 8005c1e:	0adb      	lsrs	r3, r3, #11
 8005c20:	f003 0307 	and.w	r3, r3, #7
 8005c24:	4a03      	ldr	r2, [pc, #12]	; (8005c34 <HAL_RCC_GetPCLK2Freq+0x24>)
 8005c26:	5cd3      	ldrb	r3, [r2, r3]
 8005c28:	fa21 f303 	lsr.w	r3, r1, r3
}
 8005c2c:	4618      	mov	r0, r3
 8005c2e:	bd80      	pop	{r7, pc}
 8005c30:	40021000 	.word	0x40021000
 8005c34:	0800b9b8 	.word	0x0800b9b8

08005c38 <RCC_Delay>:
  * @brief  This function provides delay (in milliseconds) based on CPU cycles method.
  * @param  mdelay: specifies the delay time length, in milliseconds.
  * @retval None
  */
static void RCC_Delay(uint32_t mdelay)
{
 8005c38:	b480      	push	{r7}
 8005c3a:	b085      	sub	sp, #20
 8005c3c:	af00      	add	r7, sp, #0
 8005c3e:	6078      	str	r0, [r7, #4]
  __IO uint32_t Delay = mdelay * (SystemCoreClock / 8U / 1000U);
 8005c40:	4b0a      	ldr	r3, [pc, #40]	; (8005c6c <RCC_Delay+0x34>)
 8005c42:	681b      	ldr	r3, [r3, #0]
 8005c44:	4a0a      	ldr	r2, [pc, #40]	; (8005c70 <RCC_Delay+0x38>)
 8005c46:	fba2 2303 	umull	r2, r3, r2, r3
 8005c4a:	0a5b      	lsrs	r3, r3, #9
 8005c4c:	687a      	ldr	r2, [r7, #4]
 8005c4e:	fb02 f303 	mul.w	r3, r2, r3
 8005c52:	60fb      	str	r3, [r7, #12]
  do
  {
    __NOP();
 8005c54:	bf00      	nop
  }
  while (Delay --);
 8005c56:	68fb      	ldr	r3, [r7, #12]
 8005c58:	1e5a      	subs	r2, r3, #1
 8005c5a:	60fa      	str	r2, [r7, #12]
 8005c5c:	2b00      	cmp	r3, #0
 8005c5e:	d1f9      	bne.n	8005c54 <RCC_Delay+0x1c>
}
 8005c60:	bf00      	nop
 8005c62:	3714      	adds	r7, #20
 8005c64:	46bd      	mov	sp, r7
 8005c66:	bc80      	pop	{r7}
 8005c68:	4770      	bx	lr
 8005c6a:	bf00      	nop
 8005c6c:	20000020 	.word	0x20000020
 8005c70:	10624dd3 	.word	0x10624dd3

08005c74 <HAL_SPI_Init>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Init(SPI_HandleTypeDef *hspi)
{
 8005c74:	b580      	push	{r7, lr}
 8005c76:	b082      	sub	sp, #8
 8005c78:	af00      	add	r7, sp, #0
 8005c7a:	6078      	str	r0, [r7, #4]
  /* Check the SPI handle allocation */
  if (hspi == NULL)
 8005c7c:	687b      	ldr	r3, [r7, #4]
 8005c7e:	2b00      	cmp	r3, #0
 8005c80:	d101      	bne.n	8005c86 <HAL_SPI_Init+0x12>
  {
    return HAL_ERROR;
 8005c82:	2301      	movs	r3, #1
 8005c84:	e076      	b.n	8005d74 <HAL_SPI_Init+0x100>
  assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
  assert_param(IS_SPI_FIRST_BIT(hspi->Init.FirstBit));
  /* TI mode is not supported on this device.
     TIMode parameter is mandatory equal to SPI_TIMODE_DISABLE */
  assert_param(IS_SPI_TIMODE(hspi->Init.TIMode));
  if (hspi->Init.TIMode == SPI_TIMODE_DISABLE)
 8005c86:	687b      	ldr	r3, [r7, #4]
 8005c88:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005c8a:	2b00      	cmp	r3, #0
 8005c8c:	d108      	bne.n	8005ca0 <HAL_SPI_Init+0x2c>
  {
    assert_param(IS_SPI_CPOL(hspi->Init.CLKPolarity));
    assert_param(IS_SPI_CPHA(hspi->Init.CLKPhase));

    if (hspi->Init.Mode == SPI_MODE_MASTER)
 8005c8e:	687b      	ldr	r3, [r7, #4]
 8005c90:	685b      	ldr	r3, [r3, #4]
 8005c92:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 8005c96:	d009      	beq.n	8005cac <HAL_SPI_Init+0x38>
      assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
    }
    else
    {
      /* Baudrate prescaler not use in Motoraola Slave mode. force to default value */
      hspi->Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_2;
 8005c98:	687b      	ldr	r3, [r7, #4]
 8005c9a:	2200      	movs	r2, #0
 8005c9c:	61da      	str	r2, [r3, #28]
 8005c9e:	e005      	b.n	8005cac <HAL_SPI_Init+0x38>
  else
  {
    assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));

    /* Force polarity and phase to TI protocaol requirements */
    hspi->Init.CLKPolarity = SPI_POLARITY_LOW;
 8005ca0:	687b      	ldr	r3, [r7, #4]
 8005ca2:	2200      	movs	r2, #0
 8005ca4:	611a      	str	r2, [r3, #16]
    hspi->Init.CLKPhase    = SPI_PHASE_1EDGE;
 8005ca6:	687b      	ldr	r3, [r7, #4]
 8005ca8:	2200      	movs	r2, #0
 8005caa:	615a      	str	r2, [r3, #20]
  if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
  {
    assert_param(IS_SPI_CRC_POLYNOMIAL(hspi->Init.CRCPolynomial));
  }
#else
  hspi->Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8005cac:	687b      	ldr	r3, [r7, #4]
 8005cae:	2200      	movs	r2, #0
 8005cb0:	629a      	str	r2, [r3, #40]	; 0x28
#endif /* USE_SPI_CRC */

  if (hspi->State == HAL_SPI_STATE_RESET)
 8005cb2:	687b      	ldr	r3, [r7, #4]
 8005cb4:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 8005cb8:	b2db      	uxtb	r3, r3
 8005cba:	2b00      	cmp	r3, #0
 8005cbc:	d106      	bne.n	8005ccc <HAL_SPI_Init+0x58>
  {
    /* Allocate lock resource and initialize it */
    hspi->Lock = HAL_UNLOCKED;
 8005cbe:	687b      	ldr	r3, [r7, #4]
 8005cc0:	2200      	movs	r2, #0
 8005cc2:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    hspi->MspInitCallback(hspi);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_SPI_MspInit(hspi);
 8005cc6:	6878      	ldr	r0, [r7, #4]
 8005cc8:	f7fd fed6 	bl	8003a78 <HAL_SPI_MspInit>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
  }

  hspi->State = HAL_SPI_STATE_BUSY;
 8005ccc:	687b      	ldr	r3, [r7, #4]
 8005cce:	2202      	movs	r2, #2
 8005cd0:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51

  /* Disable the selected SPI peripheral */
  __HAL_SPI_DISABLE(hspi);
 8005cd4:	687b      	ldr	r3, [r7, #4]
 8005cd6:	681b      	ldr	r3, [r3, #0]
 8005cd8:	681a      	ldr	r2, [r3, #0]
 8005cda:	687b      	ldr	r3, [r7, #4]
 8005cdc:	681b      	ldr	r3, [r3, #0]
 8005cde:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8005ce2:	601a      	str	r2, [r3, #0]

  /*----------------------- SPIx CR1 & CR2 Configuration ---------------------*/
  /* Configure : SPI Mode, Communication Mode, Data size, Clock polarity and phase, NSS management,
  Communication speed, First bit and CRC calculation state */
  WRITE_REG(hspi->Instance->CR1, ((hspi->Init.Mode & (SPI_CR1_MSTR | SPI_CR1_SSI)) |
 8005ce4:	687b      	ldr	r3, [r7, #4]
 8005ce6:	685b      	ldr	r3, [r3, #4]
 8005ce8:	f403 7282 	and.w	r2, r3, #260	; 0x104
 8005cec:	687b      	ldr	r3, [r7, #4]
 8005cee:	689b      	ldr	r3, [r3, #8]
 8005cf0:	f403 4304 	and.w	r3, r3, #33792	; 0x8400
 8005cf4:	431a      	orrs	r2, r3
 8005cf6:	687b      	ldr	r3, [r7, #4]
 8005cf8:	68db      	ldr	r3, [r3, #12]
 8005cfa:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8005cfe:	431a      	orrs	r2, r3
 8005d00:	687b      	ldr	r3, [r7, #4]
 8005d02:	691b      	ldr	r3, [r3, #16]
 8005d04:	f003 0302 	and.w	r3, r3, #2
 8005d08:	431a      	orrs	r2, r3
 8005d0a:	687b      	ldr	r3, [r7, #4]
 8005d0c:	695b      	ldr	r3, [r3, #20]
 8005d0e:	f003 0301 	and.w	r3, r3, #1
 8005d12:	431a      	orrs	r2, r3
 8005d14:	687b      	ldr	r3, [r7, #4]
 8005d16:	699b      	ldr	r3, [r3, #24]
 8005d18:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8005d1c:	431a      	orrs	r2, r3
 8005d1e:	687b      	ldr	r3, [r7, #4]
 8005d20:	69db      	ldr	r3, [r3, #28]
 8005d22:	f003 0338 	and.w	r3, r3, #56	; 0x38
 8005d26:	431a      	orrs	r2, r3
 8005d28:	687b      	ldr	r3, [r7, #4]
 8005d2a:	6a1b      	ldr	r3, [r3, #32]
 8005d2c:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8005d30:	ea42 0103 	orr.w	r1, r2, r3
 8005d34:	687b      	ldr	r3, [r7, #4]
 8005d36:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8005d38:	f403 5200 	and.w	r2, r3, #8192	; 0x2000
 8005d3c:	687b      	ldr	r3, [r7, #4]
 8005d3e:	681b      	ldr	r3, [r3, #0]
 8005d40:	430a      	orrs	r2, r1
 8005d42:	601a      	str	r2, [r3, #0]
                                  (hspi->Init.BaudRatePrescaler & SPI_CR1_BR_Msk) |
                                  (hspi->Init.FirstBit  & SPI_CR1_LSBFIRST) |
                                  (hspi->Init.CRCCalculation & SPI_CR1_CRCEN)));

  /* Configure : NSS management */
  WRITE_REG(hspi->Instance->CR2, ((hspi->Init.NSS >> 16U) & SPI_CR2_SSOE));
 8005d44:	687b      	ldr	r3, [r7, #4]
 8005d46:	699b      	ldr	r3, [r3, #24]
 8005d48:	0c1a      	lsrs	r2, r3, #16
 8005d4a:	687b      	ldr	r3, [r7, #4]
 8005d4c:	681b      	ldr	r3, [r3, #0]
 8005d4e:	f002 0204 	and.w	r2, r2, #4
 8005d52:	605a      	str	r2, [r3, #4]
  }
#endif /* USE_SPI_CRC */

#if defined(SPI_I2SCFGR_I2SMOD)
  /* Activate the SPI mode (Make sure that I2SMOD bit in I2SCFGR register is reset) */
  CLEAR_BIT(hspi->Instance->I2SCFGR, SPI_I2SCFGR_I2SMOD);
 8005d54:	687b      	ldr	r3, [r7, #4]
 8005d56:	681b      	ldr	r3, [r3, #0]
 8005d58:	69da      	ldr	r2, [r3, #28]
 8005d5a:	687b      	ldr	r3, [r7, #4]
 8005d5c:	681b      	ldr	r3, [r3, #0]
 8005d5e:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 8005d62:	61da      	str	r2, [r3, #28]
#endif /* SPI_I2SCFGR_I2SMOD */

  hspi->ErrorCode = HAL_SPI_ERROR_NONE;
 8005d64:	687b      	ldr	r3, [r7, #4]
 8005d66:	2200      	movs	r2, #0
 8005d68:	655a      	str	r2, [r3, #84]	; 0x54
  hspi->State     = HAL_SPI_STATE_READY;
 8005d6a:	687b      	ldr	r3, [r7, #4]
 8005d6c:	2201      	movs	r2, #1
 8005d6e:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51

  return HAL_OK;
 8005d72:	2300      	movs	r3, #0
}
 8005d74:	4618      	mov	r0, r3
 8005d76:	3708      	adds	r7, #8
 8005d78:	46bd      	mov	sp, r7
 8005d7a:	bd80      	pop	{r7, pc}

08005d7c <HAL_SPI_Transmit>:
  * @param  Size amount of data to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Transmit(SPI_HandleTypeDef *hspi, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8005d7c:	b580      	push	{r7, lr}
 8005d7e:	b088      	sub	sp, #32
 8005d80:	af00      	add	r7, sp, #0
 8005d82:	60f8      	str	r0, [r7, #12]
 8005d84:	60b9      	str	r1, [r7, #8]
 8005d86:	603b      	str	r3, [r7, #0]
 8005d88:	4613      	mov	r3, r2
 8005d8a:	80fb      	strh	r3, [r7, #6]
  uint32_t tickstart;
  HAL_StatusTypeDef errorcode = HAL_OK;
 8005d8c:	2300      	movs	r3, #0
 8005d8e:	77fb      	strb	r3, [r7, #31]

  /* Check Direction parameter */
  assert_param(IS_SPI_DIRECTION_2LINES_OR_1LINE(hspi->Init.Direction));

  /* Process Locked */
  __HAL_LOCK(hspi);
 8005d90:	68fb      	ldr	r3, [r7, #12]
 8005d92:	f893 3050 	ldrb.w	r3, [r3, #80]	; 0x50
 8005d96:	2b01      	cmp	r3, #1
 8005d98:	d101      	bne.n	8005d9e <HAL_SPI_Transmit+0x22>
 8005d9a:	2302      	movs	r3, #2
 8005d9c:	e126      	b.n	8005fec <HAL_SPI_Transmit+0x270>
 8005d9e:	68fb      	ldr	r3, [r7, #12]
 8005da0:	2201      	movs	r2, #1
 8005da2:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

  /* Init tickstart for timeout management*/
  tickstart = HAL_GetTick();
 8005da6:	f7fe f817 	bl	8003dd8 <HAL_GetTick>
 8005daa:	61b8      	str	r0, [r7, #24]
  initial_TxXferCount = Size;
 8005dac:	88fb      	ldrh	r3, [r7, #6]
 8005dae:	82fb      	strh	r3, [r7, #22]

  if (hspi->State != HAL_SPI_STATE_READY)
 8005db0:	68fb      	ldr	r3, [r7, #12]
 8005db2:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 8005db6:	b2db      	uxtb	r3, r3
 8005db8:	2b01      	cmp	r3, #1
 8005dba:	d002      	beq.n	8005dc2 <HAL_SPI_Transmit+0x46>
  {
    errorcode = HAL_BUSY;
 8005dbc:	2302      	movs	r3, #2
 8005dbe:	77fb      	strb	r3, [r7, #31]
    goto error;
 8005dc0:	e10b      	b.n	8005fda <HAL_SPI_Transmit+0x25e>
  }

  if ((pData == NULL) || (Size == 0U))
 8005dc2:	68bb      	ldr	r3, [r7, #8]
 8005dc4:	2b00      	cmp	r3, #0
 8005dc6:	d002      	beq.n	8005dce <HAL_SPI_Transmit+0x52>
 8005dc8:	88fb      	ldrh	r3, [r7, #6]
 8005dca:	2b00      	cmp	r3, #0
 8005dcc:	d102      	bne.n	8005dd4 <HAL_SPI_Transmit+0x58>
  {
    errorcode = HAL_ERROR;
 8005dce:	2301      	movs	r3, #1
 8005dd0:	77fb      	strb	r3, [r7, #31]
    goto error;
 8005dd2:	e102      	b.n	8005fda <HAL_SPI_Transmit+0x25e>
  }

  /* Set the transaction information */
  hspi->State       = HAL_SPI_STATE_BUSY_TX;
 8005dd4:	68fb      	ldr	r3, [r7, #12]
 8005dd6:	2203      	movs	r2, #3
 8005dd8:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 8005ddc:	68fb      	ldr	r3, [r7, #12]
 8005dde:	2200      	movs	r2, #0
 8005de0:	655a      	str	r2, [r3, #84]	; 0x54
  hspi->pTxBuffPtr  = (uint8_t *)pData;
 8005de2:	68fb      	ldr	r3, [r7, #12]
 8005de4:	68ba      	ldr	r2, [r7, #8]
 8005de6:	631a      	str	r2, [r3, #48]	; 0x30
  hspi->TxXferSize  = Size;
 8005de8:	68fb      	ldr	r3, [r7, #12]
 8005dea:	88fa      	ldrh	r2, [r7, #6]
 8005dec:	869a      	strh	r2, [r3, #52]	; 0x34
  hspi->TxXferCount = Size;
 8005dee:	68fb      	ldr	r3, [r7, #12]
 8005df0:	88fa      	ldrh	r2, [r7, #6]
 8005df2:	86da      	strh	r2, [r3, #54]	; 0x36

  /*Init field not used in handle to zero */
  hspi->pRxBuffPtr  = (uint8_t *)NULL;
 8005df4:	68fb      	ldr	r3, [r7, #12]
 8005df6:	2200      	movs	r2, #0
 8005df8:	639a      	str	r2, [r3, #56]	; 0x38
  hspi->RxXferSize  = 0U;
 8005dfa:	68fb      	ldr	r3, [r7, #12]
 8005dfc:	2200      	movs	r2, #0
 8005dfe:	879a      	strh	r2, [r3, #60]	; 0x3c
  hspi->RxXferCount = 0U;
 8005e00:	68fb      	ldr	r3, [r7, #12]
 8005e02:	2200      	movs	r2, #0
 8005e04:	87da      	strh	r2, [r3, #62]	; 0x3e
  hspi->TxISR       = NULL;
 8005e06:	68fb      	ldr	r3, [r7, #12]
 8005e08:	2200      	movs	r2, #0
 8005e0a:	645a      	str	r2, [r3, #68]	; 0x44
  hspi->RxISR       = NULL;
 8005e0c:	68fb      	ldr	r3, [r7, #12]
 8005e0e:	2200      	movs	r2, #0
 8005e10:	641a      	str	r2, [r3, #64]	; 0x40

  /* Configure communication direction : 1Line */
  if (hspi->Init.Direction == SPI_DIRECTION_1LINE)
 8005e12:	68fb      	ldr	r3, [r7, #12]
 8005e14:	689b      	ldr	r3, [r3, #8]
 8005e16:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8005e1a:	d10f      	bne.n	8005e3c <HAL_SPI_Transmit+0xc0>
  {
    /* Disable SPI Peripheral before set 1Line direction (BIDIOE bit) */
    __HAL_SPI_DISABLE(hspi);
 8005e1c:	68fb      	ldr	r3, [r7, #12]
 8005e1e:	681b      	ldr	r3, [r3, #0]
 8005e20:	681a      	ldr	r2, [r3, #0]
 8005e22:	68fb      	ldr	r3, [r7, #12]
 8005e24:	681b      	ldr	r3, [r3, #0]
 8005e26:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8005e2a:	601a      	str	r2, [r3, #0]
    SPI_1LINE_TX(hspi);
 8005e2c:	68fb      	ldr	r3, [r7, #12]
 8005e2e:	681b      	ldr	r3, [r3, #0]
 8005e30:	681a      	ldr	r2, [r3, #0]
 8005e32:	68fb      	ldr	r3, [r7, #12]
 8005e34:	681b      	ldr	r3, [r3, #0]
 8005e36:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 8005e3a:	601a      	str	r2, [r3, #0]
    SPI_RESET_CRC(hspi);
  }
#endif /* USE_SPI_CRC */

  /* Check if the SPI is already enabled */
  if ((hspi->Instance->CR1 & SPI_CR1_SPE) != SPI_CR1_SPE)
 8005e3c:	68fb      	ldr	r3, [r7, #12]
 8005e3e:	681b      	ldr	r3, [r3, #0]
 8005e40:	681b      	ldr	r3, [r3, #0]
 8005e42:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8005e46:	2b40      	cmp	r3, #64	; 0x40
 8005e48:	d007      	beq.n	8005e5a <HAL_SPI_Transmit+0xde>
  {
    /* Enable SPI peripheral */
    __HAL_SPI_ENABLE(hspi);
 8005e4a:	68fb      	ldr	r3, [r7, #12]
 8005e4c:	681b      	ldr	r3, [r3, #0]
 8005e4e:	681a      	ldr	r2, [r3, #0]
 8005e50:	68fb      	ldr	r3, [r7, #12]
 8005e52:	681b      	ldr	r3, [r3, #0]
 8005e54:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 8005e58:	601a      	str	r2, [r3, #0]
  }

  /* Transmit data in 16 Bit mode */
  if (hspi->Init.DataSize == SPI_DATASIZE_16BIT)
 8005e5a:	68fb      	ldr	r3, [r7, #12]
 8005e5c:	68db      	ldr	r3, [r3, #12]
 8005e5e:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8005e62:	d14b      	bne.n	8005efc <HAL_SPI_Transmit+0x180>
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 8005e64:	68fb      	ldr	r3, [r7, #12]
 8005e66:	685b      	ldr	r3, [r3, #4]
 8005e68:	2b00      	cmp	r3, #0
 8005e6a:	d002      	beq.n	8005e72 <HAL_SPI_Transmit+0xf6>
 8005e6c:	8afb      	ldrh	r3, [r7, #22]
 8005e6e:	2b01      	cmp	r3, #1
 8005e70:	d13e      	bne.n	8005ef0 <HAL_SPI_Transmit+0x174>
    {
      hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 8005e72:	68fb      	ldr	r3, [r7, #12]
 8005e74:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8005e76:	881a      	ldrh	r2, [r3, #0]
 8005e78:	68fb      	ldr	r3, [r7, #12]
 8005e7a:	681b      	ldr	r3, [r3, #0]
 8005e7c:	60da      	str	r2, [r3, #12]
      hspi->pTxBuffPtr += sizeof(uint16_t);
 8005e7e:	68fb      	ldr	r3, [r7, #12]
 8005e80:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8005e82:	1c9a      	adds	r2, r3, #2
 8005e84:	68fb      	ldr	r3, [r7, #12]
 8005e86:	631a      	str	r2, [r3, #48]	; 0x30
      hspi->TxXferCount--;
 8005e88:	68fb      	ldr	r3, [r7, #12]
 8005e8a:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8005e8c:	b29b      	uxth	r3, r3
 8005e8e:	3b01      	subs	r3, #1
 8005e90:	b29a      	uxth	r2, r3
 8005e92:	68fb      	ldr	r3, [r7, #12]
 8005e94:	86da      	strh	r2, [r3, #54]	; 0x36
    }
    /* Transmit data in 16 Bit mode */
    while (hspi->TxXferCount > 0U)
 8005e96:	e02b      	b.n	8005ef0 <HAL_SPI_Transmit+0x174>
    {
      /* Wait until TXE flag is set to send data */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE))
 8005e98:	68fb      	ldr	r3, [r7, #12]
 8005e9a:	681b      	ldr	r3, [r3, #0]
 8005e9c:	689b      	ldr	r3, [r3, #8]
 8005e9e:	f003 0302 	and.w	r3, r3, #2
 8005ea2:	2b02      	cmp	r3, #2
 8005ea4:	d112      	bne.n	8005ecc <HAL_SPI_Transmit+0x150>
      {
        hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 8005ea6:	68fb      	ldr	r3, [r7, #12]
 8005ea8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8005eaa:	881a      	ldrh	r2, [r3, #0]
 8005eac:	68fb      	ldr	r3, [r7, #12]
 8005eae:	681b      	ldr	r3, [r3, #0]
 8005eb0:	60da      	str	r2, [r3, #12]
        hspi->pTxBuffPtr += sizeof(uint16_t);
 8005eb2:	68fb      	ldr	r3, [r7, #12]
 8005eb4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8005eb6:	1c9a      	adds	r2, r3, #2
 8005eb8:	68fb      	ldr	r3, [r7, #12]
 8005eba:	631a      	str	r2, [r3, #48]	; 0x30
        hspi->TxXferCount--;
 8005ebc:	68fb      	ldr	r3, [r7, #12]
 8005ebe:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8005ec0:	b29b      	uxth	r3, r3
 8005ec2:	3b01      	subs	r3, #1
 8005ec4:	b29a      	uxth	r2, r3
 8005ec6:	68fb      	ldr	r3, [r7, #12]
 8005ec8:	86da      	strh	r2, [r3, #54]	; 0x36
 8005eca:	e011      	b.n	8005ef0 <HAL_SPI_Transmit+0x174>
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 8005ecc:	f7fd ff84 	bl	8003dd8 <HAL_GetTick>
 8005ed0:	4602      	mov	r2, r0
 8005ed2:	69bb      	ldr	r3, [r7, #24]
 8005ed4:	1ad3      	subs	r3, r2, r3
 8005ed6:	683a      	ldr	r2, [r7, #0]
 8005ed8:	429a      	cmp	r2, r3
 8005eda:	d803      	bhi.n	8005ee4 <HAL_SPI_Transmit+0x168>
 8005edc:	683b      	ldr	r3, [r7, #0]
 8005ede:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8005ee2:	d102      	bne.n	8005eea <HAL_SPI_Transmit+0x16e>
 8005ee4:	683b      	ldr	r3, [r7, #0]
 8005ee6:	2b00      	cmp	r3, #0
 8005ee8:	d102      	bne.n	8005ef0 <HAL_SPI_Transmit+0x174>
        {
          errorcode = HAL_TIMEOUT;
 8005eea:	2303      	movs	r3, #3
 8005eec:	77fb      	strb	r3, [r7, #31]
          goto error;
 8005eee:	e074      	b.n	8005fda <HAL_SPI_Transmit+0x25e>
    while (hspi->TxXferCount > 0U)
 8005ef0:	68fb      	ldr	r3, [r7, #12]
 8005ef2:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8005ef4:	b29b      	uxth	r3, r3
 8005ef6:	2b00      	cmp	r3, #0
 8005ef8:	d1ce      	bne.n	8005e98 <HAL_SPI_Transmit+0x11c>
 8005efa:	e04c      	b.n	8005f96 <HAL_SPI_Transmit+0x21a>
    }
  }
  /* Transmit data in 8 Bit mode */
  else
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 8005efc:	68fb      	ldr	r3, [r7, #12]
 8005efe:	685b      	ldr	r3, [r3, #4]
 8005f00:	2b00      	cmp	r3, #0
 8005f02:	d002      	beq.n	8005f0a <HAL_SPI_Transmit+0x18e>
 8005f04:	8afb      	ldrh	r3, [r7, #22]
 8005f06:	2b01      	cmp	r3, #1
 8005f08:	d140      	bne.n	8005f8c <HAL_SPI_Transmit+0x210>
    {
      *((__IO uint8_t *)&hspi->Instance->DR) = (*hspi->pTxBuffPtr);
 8005f0a:	68fb      	ldr	r3, [r7, #12]
 8005f0c:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8005f0e:	68fb      	ldr	r3, [r7, #12]
 8005f10:	681b      	ldr	r3, [r3, #0]
 8005f12:	330c      	adds	r3, #12
 8005f14:	7812      	ldrb	r2, [r2, #0]
 8005f16:	701a      	strb	r2, [r3, #0]
      hspi->pTxBuffPtr += sizeof(uint8_t);
 8005f18:	68fb      	ldr	r3, [r7, #12]
 8005f1a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8005f1c:	1c5a      	adds	r2, r3, #1
 8005f1e:	68fb      	ldr	r3, [r7, #12]
 8005f20:	631a      	str	r2, [r3, #48]	; 0x30
      hspi->TxXferCount--;
 8005f22:	68fb      	ldr	r3, [r7, #12]
 8005f24:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8005f26:	b29b      	uxth	r3, r3
 8005f28:	3b01      	subs	r3, #1
 8005f2a:	b29a      	uxth	r2, r3
 8005f2c:	68fb      	ldr	r3, [r7, #12]
 8005f2e:	86da      	strh	r2, [r3, #54]	; 0x36
    }
    while (hspi->TxXferCount > 0U)
 8005f30:	e02c      	b.n	8005f8c <HAL_SPI_Transmit+0x210>
    {
      /* Wait until TXE flag is set to send data */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE))
 8005f32:	68fb      	ldr	r3, [r7, #12]
 8005f34:	681b      	ldr	r3, [r3, #0]
 8005f36:	689b      	ldr	r3, [r3, #8]
 8005f38:	f003 0302 	and.w	r3, r3, #2
 8005f3c:	2b02      	cmp	r3, #2
 8005f3e:	d113      	bne.n	8005f68 <HAL_SPI_Transmit+0x1ec>
      {
        *((__IO uint8_t *)&hspi->Instance->DR) = (*hspi->pTxBuffPtr);
 8005f40:	68fb      	ldr	r3, [r7, #12]
 8005f42:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8005f44:	68fb      	ldr	r3, [r7, #12]
 8005f46:	681b      	ldr	r3, [r3, #0]
 8005f48:	330c      	adds	r3, #12
 8005f4a:	7812      	ldrb	r2, [r2, #0]
 8005f4c:	701a      	strb	r2, [r3, #0]
        hspi->pTxBuffPtr += sizeof(uint8_t);
 8005f4e:	68fb      	ldr	r3, [r7, #12]
 8005f50:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8005f52:	1c5a      	adds	r2, r3, #1
 8005f54:	68fb      	ldr	r3, [r7, #12]
 8005f56:	631a      	str	r2, [r3, #48]	; 0x30
        hspi->TxXferCount--;
 8005f58:	68fb      	ldr	r3, [r7, #12]
 8005f5a:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8005f5c:	b29b      	uxth	r3, r3
 8005f5e:	3b01      	subs	r3, #1
 8005f60:	b29a      	uxth	r2, r3
 8005f62:	68fb      	ldr	r3, [r7, #12]
 8005f64:	86da      	strh	r2, [r3, #54]	; 0x36
 8005f66:	e011      	b.n	8005f8c <HAL_SPI_Transmit+0x210>
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 8005f68:	f7fd ff36 	bl	8003dd8 <HAL_GetTick>
 8005f6c:	4602      	mov	r2, r0
 8005f6e:	69bb      	ldr	r3, [r7, #24]
 8005f70:	1ad3      	subs	r3, r2, r3
 8005f72:	683a      	ldr	r2, [r7, #0]
 8005f74:	429a      	cmp	r2, r3
 8005f76:	d803      	bhi.n	8005f80 <HAL_SPI_Transmit+0x204>
 8005f78:	683b      	ldr	r3, [r7, #0]
 8005f7a:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8005f7e:	d102      	bne.n	8005f86 <HAL_SPI_Transmit+0x20a>
 8005f80:	683b      	ldr	r3, [r7, #0]
 8005f82:	2b00      	cmp	r3, #0
 8005f84:	d102      	bne.n	8005f8c <HAL_SPI_Transmit+0x210>
        {
          errorcode = HAL_TIMEOUT;
 8005f86:	2303      	movs	r3, #3
 8005f88:	77fb      	strb	r3, [r7, #31]
          goto error;
 8005f8a:	e026      	b.n	8005fda <HAL_SPI_Transmit+0x25e>
    while (hspi->TxXferCount > 0U)
 8005f8c:	68fb      	ldr	r3, [r7, #12]
 8005f8e:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8005f90:	b29b      	uxth	r3, r3
 8005f92:	2b00      	cmp	r3, #0
 8005f94:	d1cd      	bne.n	8005f32 <HAL_SPI_Transmit+0x1b6>
    SET_BIT(hspi->Instance->CR1, SPI_CR1_CRCNEXT);
  }
#endif /* USE_SPI_CRC */

  /* Check the end of the transaction */
  if (SPI_EndRxTxTransaction(hspi, Timeout, tickstart) != HAL_OK)
 8005f96:	69ba      	ldr	r2, [r7, #24]
 8005f98:	6839      	ldr	r1, [r7, #0]
 8005f9a:	68f8      	ldr	r0, [r7, #12]
 8005f9c:	f000 fbb8 	bl	8006710 <SPI_EndRxTxTransaction>
 8005fa0:	4603      	mov	r3, r0
 8005fa2:	2b00      	cmp	r3, #0
 8005fa4:	d002      	beq.n	8005fac <HAL_SPI_Transmit+0x230>
  {
    hspi->ErrorCode = HAL_SPI_ERROR_FLAG;
 8005fa6:	68fb      	ldr	r3, [r7, #12]
 8005fa8:	2220      	movs	r2, #32
 8005faa:	655a      	str	r2, [r3, #84]	; 0x54
  }

  /* Clear overrun flag in 2 Lines communication mode because received is not read */
  if (hspi->Init.Direction == SPI_DIRECTION_2LINES)
 8005fac:	68fb      	ldr	r3, [r7, #12]
 8005fae:	689b      	ldr	r3, [r3, #8]
 8005fb0:	2b00      	cmp	r3, #0
 8005fb2:	d10a      	bne.n	8005fca <HAL_SPI_Transmit+0x24e>
  {
    __HAL_SPI_CLEAR_OVRFLAG(hspi);
 8005fb4:	2300      	movs	r3, #0
 8005fb6:	613b      	str	r3, [r7, #16]
 8005fb8:	68fb      	ldr	r3, [r7, #12]
 8005fba:	681b      	ldr	r3, [r3, #0]
 8005fbc:	68db      	ldr	r3, [r3, #12]
 8005fbe:	613b      	str	r3, [r7, #16]
 8005fc0:	68fb      	ldr	r3, [r7, #12]
 8005fc2:	681b      	ldr	r3, [r3, #0]
 8005fc4:	689b      	ldr	r3, [r3, #8]
 8005fc6:	613b      	str	r3, [r7, #16]
 8005fc8:	693b      	ldr	r3, [r7, #16]
  }

  if (hspi->ErrorCode != HAL_SPI_ERROR_NONE)
 8005fca:	68fb      	ldr	r3, [r7, #12]
 8005fcc:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8005fce:	2b00      	cmp	r3, #0
 8005fd0:	d002      	beq.n	8005fd8 <HAL_SPI_Transmit+0x25c>
  {
    errorcode = HAL_ERROR;
 8005fd2:	2301      	movs	r3, #1
 8005fd4:	77fb      	strb	r3, [r7, #31]
 8005fd6:	e000      	b.n	8005fda <HAL_SPI_Transmit+0x25e>
  }

error:
 8005fd8:	bf00      	nop
  hspi->State = HAL_SPI_STATE_READY;
 8005fda:	68fb      	ldr	r3, [r7, #12]
 8005fdc:	2201      	movs	r2, #1
 8005fde:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
  /* Process Unlocked */
  __HAL_UNLOCK(hspi);
 8005fe2:	68fb      	ldr	r3, [r7, #12]
 8005fe4:	2200      	movs	r2, #0
 8005fe6:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50
  return errorcode;
 8005fea:	7ffb      	ldrb	r3, [r7, #31]
}
 8005fec:	4618      	mov	r0, r3
 8005fee:	3720      	adds	r7, #32
 8005ff0:	46bd      	mov	sp, r7
 8005ff2:	bd80      	pop	{r7, pc}

08005ff4 <HAL_SPI_Receive>:
  * @param  Size amount of data to be received
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Receive(SPI_HandleTypeDef *hspi, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8005ff4:	b580      	push	{r7, lr}
 8005ff6:	b088      	sub	sp, #32
 8005ff8:	af02      	add	r7, sp, #8
 8005ffa:	60f8      	str	r0, [r7, #12]
 8005ffc:	60b9      	str	r1, [r7, #8]
 8005ffe:	603b      	str	r3, [r7, #0]
 8006000:	4613      	mov	r3, r2
 8006002:	80fb      	strh	r3, [r7, #6]
  uint32_t tickstart;
  HAL_StatusTypeDef errorcode = HAL_OK;
 8006004:	2300      	movs	r3, #0
 8006006:	75fb      	strb	r3, [r7, #23]

  if ((hspi->Init.Mode == SPI_MODE_MASTER) && (hspi->Init.Direction == SPI_DIRECTION_2LINES))
 8006008:	68fb      	ldr	r3, [r7, #12]
 800600a:	685b      	ldr	r3, [r3, #4]
 800600c:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 8006010:	d112      	bne.n	8006038 <HAL_SPI_Receive+0x44>
 8006012:	68fb      	ldr	r3, [r7, #12]
 8006014:	689b      	ldr	r3, [r3, #8]
 8006016:	2b00      	cmp	r3, #0
 8006018:	d10e      	bne.n	8006038 <HAL_SPI_Receive+0x44>
  {
    hspi->State = HAL_SPI_STATE_BUSY_RX;
 800601a:	68fb      	ldr	r3, [r7, #12]
 800601c:	2204      	movs	r2, #4
 800601e:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
    /* Call transmit-receive function to send Dummy data on Tx line and generate clock on CLK line */
    return HAL_SPI_TransmitReceive(hspi, pData, pData, Size, Timeout);
 8006022:	88fa      	ldrh	r2, [r7, #6]
 8006024:	683b      	ldr	r3, [r7, #0]
 8006026:	9300      	str	r3, [sp, #0]
 8006028:	4613      	mov	r3, r2
 800602a:	68ba      	ldr	r2, [r7, #8]
 800602c:	68b9      	ldr	r1, [r7, #8]
 800602e:	68f8      	ldr	r0, [r7, #12]
 8006030:	f000 f8f1 	bl	8006216 <HAL_SPI_TransmitReceive>
 8006034:	4603      	mov	r3, r0
 8006036:	e0ea      	b.n	800620e <HAL_SPI_Receive+0x21a>
  }

  /* Process Locked */
  __HAL_LOCK(hspi);
 8006038:	68fb      	ldr	r3, [r7, #12]
 800603a:	f893 3050 	ldrb.w	r3, [r3, #80]	; 0x50
 800603e:	2b01      	cmp	r3, #1
 8006040:	d101      	bne.n	8006046 <HAL_SPI_Receive+0x52>
 8006042:	2302      	movs	r3, #2
 8006044:	e0e3      	b.n	800620e <HAL_SPI_Receive+0x21a>
 8006046:	68fb      	ldr	r3, [r7, #12]
 8006048:	2201      	movs	r2, #1
 800604a:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

  /* Init tickstart for timeout management*/
  tickstart = HAL_GetTick();
 800604e:	f7fd fec3 	bl	8003dd8 <HAL_GetTick>
 8006052:	6138      	str	r0, [r7, #16]

  if (hspi->State != HAL_SPI_STATE_READY)
 8006054:	68fb      	ldr	r3, [r7, #12]
 8006056:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 800605a:	b2db      	uxtb	r3, r3
 800605c:	2b01      	cmp	r3, #1
 800605e:	d002      	beq.n	8006066 <HAL_SPI_Receive+0x72>
  {
    errorcode = HAL_BUSY;
 8006060:	2302      	movs	r3, #2
 8006062:	75fb      	strb	r3, [r7, #23]
    goto error;
 8006064:	e0ca      	b.n	80061fc <HAL_SPI_Receive+0x208>
  }

  if ((pData == NULL) || (Size == 0U))
 8006066:	68bb      	ldr	r3, [r7, #8]
 8006068:	2b00      	cmp	r3, #0
 800606a:	d002      	beq.n	8006072 <HAL_SPI_Receive+0x7e>
 800606c:	88fb      	ldrh	r3, [r7, #6]
 800606e:	2b00      	cmp	r3, #0
 8006070:	d102      	bne.n	8006078 <HAL_SPI_Receive+0x84>
  {
    errorcode = HAL_ERROR;
 8006072:	2301      	movs	r3, #1
 8006074:	75fb      	strb	r3, [r7, #23]
    goto error;
 8006076:	e0c1      	b.n	80061fc <HAL_SPI_Receive+0x208>
  }

  /* Set the transaction information */
  hspi->State       = HAL_SPI_STATE_BUSY_RX;
 8006078:	68fb      	ldr	r3, [r7, #12]
 800607a:	2204      	movs	r2, #4
 800607c:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 8006080:	68fb      	ldr	r3, [r7, #12]
 8006082:	2200      	movs	r2, #0
 8006084:	655a      	str	r2, [r3, #84]	; 0x54
  hspi->pRxBuffPtr  = (uint8_t *)pData;
 8006086:	68fb      	ldr	r3, [r7, #12]
 8006088:	68ba      	ldr	r2, [r7, #8]
 800608a:	639a      	str	r2, [r3, #56]	; 0x38
  hspi->RxXferSize  = Size;
 800608c:	68fb      	ldr	r3, [r7, #12]
 800608e:	88fa      	ldrh	r2, [r7, #6]
 8006090:	879a      	strh	r2, [r3, #60]	; 0x3c
  hspi->RxXferCount = Size;
 8006092:	68fb      	ldr	r3, [r7, #12]
 8006094:	88fa      	ldrh	r2, [r7, #6]
 8006096:	87da      	strh	r2, [r3, #62]	; 0x3e

  /*Init field not used in handle to zero */
  hspi->pTxBuffPtr  = (uint8_t *)NULL;
 8006098:	68fb      	ldr	r3, [r7, #12]
 800609a:	2200      	movs	r2, #0
 800609c:	631a      	str	r2, [r3, #48]	; 0x30
  hspi->TxXferSize  = 0U;
 800609e:	68fb      	ldr	r3, [r7, #12]
 80060a0:	2200      	movs	r2, #0
 80060a2:	869a      	strh	r2, [r3, #52]	; 0x34
  hspi->TxXferCount = 0U;
 80060a4:	68fb      	ldr	r3, [r7, #12]
 80060a6:	2200      	movs	r2, #0
 80060a8:	86da      	strh	r2, [r3, #54]	; 0x36
  hspi->RxISR       = NULL;
 80060aa:	68fb      	ldr	r3, [r7, #12]
 80060ac:	2200      	movs	r2, #0
 80060ae:	641a      	str	r2, [r3, #64]	; 0x40
  hspi->TxISR       = NULL;
 80060b0:	68fb      	ldr	r3, [r7, #12]
 80060b2:	2200      	movs	r2, #0
 80060b4:	645a      	str	r2, [r3, #68]	; 0x44
    hspi->RxXferCount--;
  }
#endif /* USE_SPI_CRC */

  /* Configure communication direction: 1Line */
  if (hspi->Init.Direction == SPI_DIRECTION_1LINE)
 80060b6:	68fb      	ldr	r3, [r7, #12]
 80060b8:	689b      	ldr	r3, [r3, #8]
 80060ba:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 80060be:	d10f      	bne.n	80060e0 <HAL_SPI_Receive+0xec>
  {
    /* Disable SPI Peripheral before set 1Line direction (BIDIOE bit) */
    __HAL_SPI_DISABLE(hspi);
 80060c0:	68fb      	ldr	r3, [r7, #12]
 80060c2:	681b      	ldr	r3, [r3, #0]
 80060c4:	681a      	ldr	r2, [r3, #0]
 80060c6:	68fb      	ldr	r3, [r7, #12]
 80060c8:	681b      	ldr	r3, [r3, #0]
 80060ca:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 80060ce:	601a      	str	r2, [r3, #0]
    SPI_1LINE_RX(hspi);
 80060d0:	68fb      	ldr	r3, [r7, #12]
 80060d2:	681b      	ldr	r3, [r3, #0]
 80060d4:	681a      	ldr	r2, [r3, #0]
 80060d6:	68fb      	ldr	r3, [r7, #12]
 80060d8:	681b      	ldr	r3, [r3, #0]
 80060da:	f422 4280 	bic.w	r2, r2, #16384	; 0x4000
 80060de:	601a      	str	r2, [r3, #0]
  }

  /* Check if the SPI is already enabled */
  if ((hspi->Instance->CR1 & SPI_CR1_SPE) != SPI_CR1_SPE)
 80060e0:	68fb      	ldr	r3, [r7, #12]
 80060e2:	681b      	ldr	r3, [r3, #0]
 80060e4:	681b      	ldr	r3, [r3, #0]
 80060e6:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80060ea:	2b40      	cmp	r3, #64	; 0x40
 80060ec:	d007      	beq.n	80060fe <HAL_SPI_Receive+0x10a>
  {
    /* Enable SPI peripheral */
    __HAL_SPI_ENABLE(hspi);
 80060ee:	68fb      	ldr	r3, [r7, #12]
 80060f0:	681b      	ldr	r3, [r3, #0]
 80060f2:	681a      	ldr	r2, [r3, #0]
 80060f4:	68fb      	ldr	r3, [r7, #12]
 80060f6:	681b      	ldr	r3, [r3, #0]
 80060f8:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 80060fc:	601a      	str	r2, [r3, #0]
  }

  /* Receive data in 8 Bit mode */
  if (hspi->Init.DataSize == SPI_DATASIZE_8BIT)
 80060fe:	68fb      	ldr	r3, [r7, #12]
 8006100:	68db      	ldr	r3, [r3, #12]
 8006102:	2b00      	cmp	r3, #0
 8006104:	d162      	bne.n	80061cc <HAL_SPI_Receive+0x1d8>
  {
    /* Transfer loop */
    while (hspi->RxXferCount > 0U)
 8006106:	e02e      	b.n	8006166 <HAL_SPI_Receive+0x172>
    {
      /* Check the RXNE flag */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXNE))
 8006108:	68fb      	ldr	r3, [r7, #12]
 800610a:	681b      	ldr	r3, [r3, #0]
 800610c:	689b      	ldr	r3, [r3, #8]
 800610e:	f003 0301 	and.w	r3, r3, #1
 8006112:	2b01      	cmp	r3, #1
 8006114:	d115      	bne.n	8006142 <HAL_SPI_Receive+0x14e>
      {
        /* read the received data */
        (* (uint8_t *)hspi->pRxBuffPtr) = *(__IO uint8_t *)&hspi->Instance->DR;
 8006116:	68fb      	ldr	r3, [r7, #12]
 8006118:	681b      	ldr	r3, [r3, #0]
 800611a:	f103 020c 	add.w	r2, r3, #12
 800611e:	68fb      	ldr	r3, [r7, #12]
 8006120:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8006122:	7812      	ldrb	r2, [r2, #0]
 8006124:	b2d2      	uxtb	r2, r2
 8006126:	701a      	strb	r2, [r3, #0]
        hspi->pRxBuffPtr += sizeof(uint8_t);
 8006128:	68fb      	ldr	r3, [r7, #12]
 800612a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800612c:	1c5a      	adds	r2, r3, #1
 800612e:	68fb      	ldr	r3, [r7, #12]
 8006130:	639a      	str	r2, [r3, #56]	; 0x38
        hspi->RxXferCount--;
 8006132:	68fb      	ldr	r3, [r7, #12]
 8006134:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8006136:	b29b      	uxth	r3, r3
 8006138:	3b01      	subs	r3, #1
 800613a:	b29a      	uxth	r2, r3
 800613c:	68fb      	ldr	r3, [r7, #12]
 800613e:	87da      	strh	r2, [r3, #62]	; 0x3e
 8006140:	e011      	b.n	8006166 <HAL_SPI_Receive+0x172>
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 8006142:	f7fd fe49 	bl	8003dd8 <HAL_GetTick>
 8006146:	4602      	mov	r2, r0
 8006148:	693b      	ldr	r3, [r7, #16]
 800614a:	1ad3      	subs	r3, r2, r3
 800614c:	683a      	ldr	r2, [r7, #0]
 800614e:	429a      	cmp	r2, r3
 8006150:	d803      	bhi.n	800615a <HAL_SPI_Receive+0x166>
 8006152:	683b      	ldr	r3, [r7, #0]
 8006154:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8006158:	d102      	bne.n	8006160 <HAL_SPI_Receive+0x16c>
 800615a:	683b      	ldr	r3, [r7, #0]
 800615c:	2b00      	cmp	r3, #0
 800615e:	d102      	bne.n	8006166 <HAL_SPI_Receive+0x172>
        {
          errorcode = HAL_TIMEOUT;
 8006160:	2303      	movs	r3, #3
 8006162:	75fb      	strb	r3, [r7, #23]
          goto error;
 8006164:	e04a      	b.n	80061fc <HAL_SPI_Receive+0x208>
    while (hspi->RxXferCount > 0U)
 8006166:	68fb      	ldr	r3, [r7, #12]
 8006168:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 800616a:	b29b      	uxth	r3, r3
 800616c:	2b00      	cmp	r3, #0
 800616e:	d1cb      	bne.n	8006108 <HAL_SPI_Receive+0x114>
 8006170:	e031      	b.n	80061d6 <HAL_SPI_Receive+0x1e2>
  {
    /* Transfer loop */
    while (hspi->RxXferCount > 0U)
    {
      /* Check the RXNE flag */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXNE))
 8006172:	68fb      	ldr	r3, [r7, #12]
 8006174:	681b      	ldr	r3, [r3, #0]
 8006176:	689b      	ldr	r3, [r3, #8]
 8006178:	f003 0301 	and.w	r3, r3, #1
 800617c:	2b01      	cmp	r3, #1
 800617e:	d113      	bne.n	80061a8 <HAL_SPI_Receive+0x1b4>
      {
        *((uint16_t *)hspi->pRxBuffPtr) = (uint16_t)hspi->Instance->DR;
 8006180:	68fb      	ldr	r3, [r7, #12]
 8006182:	681b      	ldr	r3, [r3, #0]
 8006184:	68da      	ldr	r2, [r3, #12]
 8006186:	68fb      	ldr	r3, [r7, #12]
 8006188:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800618a:	b292      	uxth	r2, r2
 800618c:	801a      	strh	r2, [r3, #0]
        hspi->pRxBuffPtr += sizeof(uint16_t);
 800618e:	68fb      	ldr	r3, [r7, #12]
 8006190:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8006192:	1c9a      	adds	r2, r3, #2
 8006194:	68fb      	ldr	r3, [r7, #12]
 8006196:	639a      	str	r2, [r3, #56]	; 0x38
        hspi->RxXferCount--;
 8006198:	68fb      	ldr	r3, [r7, #12]
 800619a:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 800619c:	b29b      	uxth	r3, r3
 800619e:	3b01      	subs	r3, #1
 80061a0:	b29a      	uxth	r2, r3
 80061a2:	68fb      	ldr	r3, [r7, #12]
 80061a4:	87da      	strh	r2, [r3, #62]	; 0x3e
 80061a6:	e011      	b.n	80061cc <HAL_SPI_Receive+0x1d8>
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 80061a8:	f7fd fe16 	bl	8003dd8 <HAL_GetTick>
 80061ac:	4602      	mov	r2, r0
 80061ae:	693b      	ldr	r3, [r7, #16]
 80061b0:	1ad3      	subs	r3, r2, r3
 80061b2:	683a      	ldr	r2, [r7, #0]
 80061b4:	429a      	cmp	r2, r3
 80061b6:	d803      	bhi.n	80061c0 <HAL_SPI_Receive+0x1cc>
 80061b8:	683b      	ldr	r3, [r7, #0]
 80061ba:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 80061be:	d102      	bne.n	80061c6 <HAL_SPI_Receive+0x1d2>
 80061c0:	683b      	ldr	r3, [r7, #0]
 80061c2:	2b00      	cmp	r3, #0
 80061c4:	d102      	bne.n	80061cc <HAL_SPI_Receive+0x1d8>
        {
          errorcode = HAL_TIMEOUT;
 80061c6:	2303      	movs	r3, #3
 80061c8:	75fb      	strb	r3, [r7, #23]
          goto error;
 80061ca:	e017      	b.n	80061fc <HAL_SPI_Receive+0x208>
    while (hspi->RxXferCount > 0U)
 80061cc:	68fb      	ldr	r3, [r7, #12]
 80061ce:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 80061d0:	b29b      	uxth	r3, r3
 80061d2:	2b00      	cmp	r3, #0
 80061d4:	d1cd      	bne.n	8006172 <HAL_SPI_Receive+0x17e>
    READ_REG(hspi->Instance->DR);
  }
#endif /* USE_SPI_CRC */

  /* Check the end of the transaction */
  if (SPI_EndRxTransaction(hspi, Timeout, tickstart) != HAL_OK)
 80061d6:	693a      	ldr	r2, [r7, #16]
 80061d8:	6839      	ldr	r1, [r7, #0]
 80061da:	68f8      	ldr	r0, [r7, #12]
 80061dc:	f000 fa46 	bl	800666c <SPI_EndRxTransaction>
 80061e0:	4603      	mov	r3, r0
 80061e2:	2b00      	cmp	r3, #0
 80061e4:	d002      	beq.n	80061ec <HAL_SPI_Receive+0x1f8>
  {
    hspi->ErrorCode = HAL_SPI_ERROR_FLAG;
 80061e6:	68fb      	ldr	r3, [r7, #12]
 80061e8:	2220      	movs	r2, #32
 80061ea:	655a      	str	r2, [r3, #84]	; 0x54
      __HAL_SPI_CLEAR_CRCERRFLAG(hspi);
    }
  }
#endif /* USE_SPI_CRC */

  if (hspi->ErrorCode != HAL_SPI_ERROR_NONE)
 80061ec:	68fb      	ldr	r3, [r7, #12]
 80061ee:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80061f0:	2b00      	cmp	r3, #0
 80061f2:	d002      	beq.n	80061fa <HAL_SPI_Receive+0x206>
  {
    errorcode = HAL_ERROR;
 80061f4:	2301      	movs	r3, #1
 80061f6:	75fb      	strb	r3, [r7, #23]
 80061f8:	e000      	b.n	80061fc <HAL_SPI_Receive+0x208>
  }

error :
 80061fa:	bf00      	nop
  hspi->State = HAL_SPI_STATE_READY;
 80061fc:	68fb      	ldr	r3, [r7, #12]
 80061fe:	2201      	movs	r2, #1
 8006200:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
  __HAL_UNLOCK(hspi);
 8006204:	68fb      	ldr	r3, [r7, #12]
 8006206:	2200      	movs	r2, #0
 8006208:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50
  return errorcode;
 800620c:	7dfb      	ldrb	r3, [r7, #23]
}
 800620e:	4618      	mov	r0, r3
 8006210:	3718      	adds	r7, #24
 8006212:	46bd      	mov	sp, r7
 8006214:	bd80      	pop	{r7, pc}

08006216 <HAL_SPI_TransmitReceive>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_TransmitReceive(SPI_HandleTypeDef *hspi, uint8_t *pTxData, uint8_t *pRxData, uint16_t Size,
                                          uint32_t Timeout)
{
 8006216:	b580      	push	{r7, lr}
 8006218:	b08c      	sub	sp, #48	; 0x30
 800621a:	af00      	add	r7, sp, #0
 800621c:	60f8      	str	r0, [r7, #12]
 800621e:	60b9      	str	r1, [r7, #8]
 8006220:	607a      	str	r2, [r7, #4]
 8006222:	807b      	strh	r3, [r7, #2]
  uint32_t             tmp_mode;
  HAL_SPI_StateTypeDef tmp_state;
  uint32_t             tickstart;

  /* Variable used to alternate Rx and Tx during transfer */
  uint32_t             txallowed = 1U;
 8006224:	2301      	movs	r3, #1
 8006226:	62fb      	str	r3, [r7, #44]	; 0x2c
  HAL_StatusTypeDef    errorcode = HAL_OK;
 8006228:	2300      	movs	r3, #0
 800622a:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b

  /* Check Direction parameter */
  assert_param(IS_SPI_DIRECTION_2LINES(hspi->Init.Direction));

  /* Process Locked */
  __HAL_LOCK(hspi);
 800622e:	68fb      	ldr	r3, [r7, #12]
 8006230:	f893 3050 	ldrb.w	r3, [r3, #80]	; 0x50
 8006234:	2b01      	cmp	r3, #1
 8006236:	d101      	bne.n	800623c <HAL_SPI_TransmitReceive+0x26>
 8006238:	2302      	movs	r3, #2
 800623a:	e18a      	b.n	8006552 <HAL_SPI_TransmitReceive+0x33c>
 800623c:	68fb      	ldr	r3, [r7, #12]
 800623e:	2201      	movs	r2, #1
 8006240:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

  /* Init tickstart for timeout management*/
  tickstart = HAL_GetTick();
 8006244:	f7fd fdc8 	bl	8003dd8 <HAL_GetTick>
 8006248:	6278      	str	r0, [r7, #36]	; 0x24

  /* Init temporary variables */
  tmp_state           = hspi->State;
 800624a:	68fb      	ldr	r3, [r7, #12]
 800624c:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 8006250:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
  tmp_mode            = hspi->Init.Mode;
 8006254:	68fb      	ldr	r3, [r7, #12]
 8006256:	685b      	ldr	r3, [r3, #4]
 8006258:	61fb      	str	r3, [r7, #28]
  initial_TxXferCount = Size;
 800625a:	887b      	ldrh	r3, [r7, #2]
 800625c:	837b      	strh	r3, [r7, #26]

  if (!((tmp_state == HAL_SPI_STATE_READY) || \
 800625e:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
 8006262:	2b01      	cmp	r3, #1
 8006264:	d00f      	beq.n	8006286 <HAL_SPI_TransmitReceive+0x70>
 8006266:	69fb      	ldr	r3, [r7, #28]
 8006268:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 800626c:	d107      	bne.n	800627e <HAL_SPI_TransmitReceive+0x68>
        ((tmp_mode == SPI_MODE_MASTER) && (hspi->Init.Direction == SPI_DIRECTION_2LINES) && (tmp_state == HAL_SPI_STATE_BUSY_RX))))
 800626e:	68fb      	ldr	r3, [r7, #12]
 8006270:	689b      	ldr	r3, [r3, #8]
 8006272:	2b00      	cmp	r3, #0
 8006274:	d103      	bne.n	800627e <HAL_SPI_TransmitReceive+0x68>
 8006276:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
 800627a:	2b04      	cmp	r3, #4
 800627c:	d003      	beq.n	8006286 <HAL_SPI_TransmitReceive+0x70>
  {
    errorcode = HAL_BUSY;
 800627e:	2302      	movs	r3, #2
 8006280:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
    goto error;
 8006284:	e15b      	b.n	800653e <HAL_SPI_TransmitReceive+0x328>
  }

  if ((pTxData == NULL) || (pRxData == NULL) || (Size == 0U))
 8006286:	68bb      	ldr	r3, [r7, #8]
 8006288:	2b00      	cmp	r3, #0
 800628a:	d005      	beq.n	8006298 <HAL_SPI_TransmitReceive+0x82>
 800628c:	687b      	ldr	r3, [r7, #4]
 800628e:	2b00      	cmp	r3, #0
 8006290:	d002      	beq.n	8006298 <HAL_SPI_TransmitReceive+0x82>
 8006292:	887b      	ldrh	r3, [r7, #2]
 8006294:	2b00      	cmp	r3, #0
 8006296:	d103      	bne.n	80062a0 <HAL_SPI_TransmitReceive+0x8a>
  {
    errorcode = HAL_ERROR;
 8006298:	2301      	movs	r3, #1
 800629a:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
    goto error;
 800629e:	e14e      	b.n	800653e <HAL_SPI_TransmitReceive+0x328>
  }

  /* Don't overwrite in case of HAL_SPI_STATE_BUSY_RX */
  if (hspi->State != HAL_SPI_STATE_BUSY_RX)
 80062a0:	68fb      	ldr	r3, [r7, #12]
 80062a2:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 80062a6:	b2db      	uxtb	r3, r3
 80062a8:	2b04      	cmp	r3, #4
 80062aa:	d003      	beq.n	80062b4 <HAL_SPI_TransmitReceive+0x9e>
  {
    hspi->State = HAL_SPI_STATE_BUSY_TX_RX;
 80062ac:	68fb      	ldr	r3, [r7, #12]
 80062ae:	2205      	movs	r2, #5
 80062b0:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
  }

  /* Set the transaction information */
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 80062b4:	68fb      	ldr	r3, [r7, #12]
 80062b6:	2200      	movs	r2, #0
 80062b8:	655a      	str	r2, [r3, #84]	; 0x54
  hspi->pRxBuffPtr  = (uint8_t *)pRxData;
 80062ba:	68fb      	ldr	r3, [r7, #12]
 80062bc:	687a      	ldr	r2, [r7, #4]
 80062be:	639a      	str	r2, [r3, #56]	; 0x38
  hspi->RxXferCount = Size;
 80062c0:	68fb      	ldr	r3, [r7, #12]
 80062c2:	887a      	ldrh	r2, [r7, #2]
 80062c4:	87da      	strh	r2, [r3, #62]	; 0x3e
  hspi->RxXferSize  = Size;
 80062c6:	68fb      	ldr	r3, [r7, #12]
 80062c8:	887a      	ldrh	r2, [r7, #2]
 80062ca:	879a      	strh	r2, [r3, #60]	; 0x3c
  hspi->pTxBuffPtr  = (uint8_t *)pTxData;
 80062cc:	68fb      	ldr	r3, [r7, #12]
 80062ce:	68ba      	ldr	r2, [r7, #8]
 80062d0:	631a      	str	r2, [r3, #48]	; 0x30
  hspi->TxXferCount = Size;
 80062d2:	68fb      	ldr	r3, [r7, #12]
 80062d4:	887a      	ldrh	r2, [r7, #2]
 80062d6:	86da      	strh	r2, [r3, #54]	; 0x36
  hspi->TxXferSize  = Size;
 80062d8:	68fb      	ldr	r3, [r7, #12]
 80062da:	887a      	ldrh	r2, [r7, #2]
 80062dc:	869a      	strh	r2, [r3, #52]	; 0x34

  /*Init field not used in handle to zero */
  hspi->RxISR       = NULL;
 80062de:	68fb      	ldr	r3, [r7, #12]
 80062e0:	2200      	movs	r2, #0
 80062e2:	641a      	str	r2, [r3, #64]	; 0x40
  hspi->TxISR       = NULL;
 80062e4:	68fb      	ldr	r3, [r7, #12]
 80062e6:	2200      	movs	r2, #0
 80062e8:	645a      	str	r2, [r3, #68]	; 0x44
    SPI_RESET_CRC(hspi);
  }
#endif /* USE_SPI_CRC */

  /* Check if the SPI is already enabled */
  if ((hspi->Instance->CR1 & SPI_CR1_SPE) != SPI_CR1_SPE)
 80062ea:	68fb      	ldr	r3, [r7, #12]
 80062ec:	681b      	ldr	r3, [r3, #0]
 80062ee:	681b      	ldr	r3, [r3, #0]
 80062f0:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80062f4:	2b40      	cmp	r3, #64	; 0x40
 80062f6:	d007      	beq.n	8006308 <HAL_SPI_TransmitReceive+0xf2>
  {
    /* Enable SPI peripheral */
    __HAL_SPI_ENABLE(hspi);
 80062f8:	68fb      	ldr	r3, [r7, #12]
 80062fa:	681b      	ldr	r3, [r3, #0]
 80062fc:	681a      	ldr	r2, [r3, #0]
 80062fe:	68fb      	ldr	r3, [r7, #12]
 8006300:	681b      	ldr	r3, [r3, #0]
 8006302:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 8006306:	601a      	str	r2, [r3, #0]
  }

  /* Transmit and Receive data in 16 Bit mode */
  if (hspi->Init.DataSize == SPI_DATASIZE_16BIT)
 8006308:	68fb      	ldr	r3, [r7, #12]
 800630a:	68db      	ldr	r3, [r3, #12]
 800630c:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8006310:	d178      	bne.n	8006404 <HAL_SPI_TransmitReceive+0x1ee>
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 8006312:	68fb      	ldr	r3, [r7, #12]
 8006314:	685b      	ldr	r3, [r3, #4]
 8006316:	2b00      	cmp	r3, #0
 8006318:	d002      	beq.n	8006320 <HAL_SPI_TransmitReceive+0x10a>
 800631a:	8b7b      	ldrh	r3, [r7, #26]
 800631c:	2b01      	cmp	r3, #1
 800631e:	d166      	bne.n	80063ee <HAL_SPI_TransmitReceive+0x1d8>
    {
      hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 8006320:	68fb      	ldr	r3, [r7, #12]
 8006322:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8006324:	881a      	ldrh	r2, [r3, #0]
 8006326:	68fb      	ldr	r3, [r7, #12]
 8006328:	681b      	ldr	r3, [r3, #0]
 800632a:	60da      	str	r2, [r3, #12]
      hspi->pTxBuffPtr += sizeof(uint16_t);
 800632c:	68fb      	ldr	r3, [r7, #12]
 800632e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8006330:	1c9a      	adds	r2, r3, #2
 8006332:	68fb      	ldr	r3, [r7, #12]
 8006334:	631a      	str	r2, [r3, #48]	; 0x30
      hspi->TxXferCount--;
 8006336:	68fb      	ldr	r3, [r7, #12]
 8006338:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 800633a:	b29b      	uxth	r3, r3
 800633c:	3b01      	subs	r3, #1
 800633e:	b29a      	uxth	r2, r3
 8006340:	68fb      	ldr	r3, [r7, #12]
 8006342:	86da      	strh	r2, [r3, #54]	; 0x36
    }
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 8006344:	e053      	b.n	80063ee <HAL_SPI_TransmitReceive+0x1d8>
    {
      /* Check TXE flag */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE)) && (hspi->TxXferCount > 0U) && (txallowed == 1U))
 8006346:	68fb      	ldr	r3, [r7, #12]
 8006348:	681b      	ldr	r3, [r3, #0]
 800634a:	689b      	ldr	r3, [r3, #8]
 800634c:	f003 0302 	and.w	r3, r3, #2
 8006350:	2b02      	cmp	r3, #2
 8006352:	d11b      	bne.n	800638c <HAL_SPI_TransmitReceive+0x176>
 8006354:	68fb      	ldr	r3, [r7, #12]
 8006356:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8006358:	b29b      	uxth	r3, r3
 800635a:	2b00      	cmp	r3, #0
 800635c:	d016      	beq.n	800638c <HAL_SPI_TransmitReceive+0x176>
 800635e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8006360:	2b01      	cmp	r3, #1
 8006362:	d113      	bne.n	800638c <HAL_SPI_TransmitReceive+0x176>
      {
        hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 8006364:	68fb      	ldr	r3, [r7, #12]
 8006366:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8006368:	881a      	ldrh	r2, [r3, #0]
 800636a:	68fb      	ldr	r3, [r7, #12]
 800636c:	681b      	ldr	r3, [r3, #0]
 800636e:	60da      	str	r2, [r3, #12]
        hspi->pTxBuffPtr += sizeof(uint16_t);
 8006370:	68fb      	ldr	r3, [r7, #12]
 8006372:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8006374:	1c9a      	adds	r2, r3, #2
 8006376:	68fb      	ldr	r3, [r7, #12]
 8006378:	631a      	str	r2, [r3, #48]	; 0x30
        hspi->TxXferCount--;
 800637a:	68fb      	ldr	r3, [r7, #12]
 800637c:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 800637e:	b29b      	uxth	r3, r3
 8006380:	3b01      	subs	r3, #1
 8006382:	b29a      	uxth	r2, r3
 8006384:	68fb      	ldr	r3, [r7, #12]
 8006386:	86da      	strh	r2, [r3, #54]	; 0x36
        /* Next Data is a reception (Rx). Tx not allowed */
        txallowed = 0U;
 8006388:	2300      	movs	r3, #0
 800638a:	62fb      	str	r3, [r7, #44]	; 0x2c
        }
#endif /* USE_SPI_CRC */
      }

      /* Check RXNE flag */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXNE)) && (hspi->RxXferCount > 0U))
 800638c:	68fb      	ldr	r3, [r7, #12]
 800638e:	681b      	ldr	r3, [r3, #0]
 8006390:	689b      	ldr	r3, [r3, #8]
 8006392:	f003 0301 	and.w	r3, r3, #1
 8006396:	2b01      	cmp	r3, #1
 8006398:	d119      	bne.n	80063ce <HAL_SPI_TransmitReceive+0x1b8>
 800639a:	68fb      	ldr	r3, [r7, #12]
 800639c:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 800639e:	b29b      	uxth	r3, r3
 80063a0:	2b00      	cmp	r3, #0
 80063a2:	d014      	beq.n	80063ce <HAL_SPI_TransmitReceive+0x1b8>
      {
        *((uint16_t *)hspi->pRxBuffPtr) = (uint16_t)hspi->Instance->DR;
 80063a4:	68fb      	ldr	r3, [r7, #12]
 80063a6:	681b      	ldr	r3, [r3, #0]
 80063a8:	68da      	ldr	r2, [r3, #12]
 80063aa:	68fb      	ldr	r3, [r7, #12]
 80063ac:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80063ae:	b292      	uxth	r2, r2
 80063b0:	801a      	strh	r2, [r3, #0]
        hspi->pRxBuffPtr += sizeof(uint16_t);
 80063b2:	68fb      	ldr	r3, [r7, #12]
 80063b4:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80063b6:	1c9a      	adds	r2, r3, #2
 80063b8:	68fb      	ldr	r3, [r7, #12]
 80063ba:	639a      	str	r2, [r3, #56]	; 0x38
        hspi->RxXferCount--;
 80063bc:	68fb      	ldr	r3, [r7, #12]
 80063be:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 80063c0:	b29b      	uxth	r3, r3
 80063c2:	3b01      	subs	r3, #1
 80063c4:	b29a      	uxth	r2, r3
 80063c6:	68fb      	ldr	r3, [r7, #12]
 80063c8:	87da      	strh	r2, [r3, #62]	; 0x3e
        /* Next Data is a Transmission (Tx). Tx is allowed */
        txallowed = 1U;
 80063ca:	2301      	movs	r3, #1
 80063cc:	62fb      	str	r3, [r7, #44]	; 0x2c
      }
      if (((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY))
 80063ce:	f7fd fd03 	bl	8003dd8 <HAL_GetTick>
 80063d2:	4602      	mov	r2, r0
 80063d4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80063d6:	1ad3      	subs	r3, r2, r3
 80063d8:	6bba      	ldr	r2, [r7, #56]	; 0x38
 80063da:	429a      	cmp	r2, r3
 80063dc:	d807      	bhi.n	80063ee <HAL_SPI_TransmitReceive+0x1d8>
 80063de:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80063e0:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 80063e4:	d003      	beq.n	80063ee <HAL_SPI_TransmitReceive+0x1d8>
      {
        errorcode = HAL_TIMEOUT;
 80063e6:	2303      	movs	r3, #3
 80063e8:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
        goto error;
 80063ec:	e0a7      	b.n	800653e <HAL_SPI_TransmitReceive+0x328>
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 80063ee:	68fb      	ldr	r3, [r7, #12]
 80063f0:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 80063f2:	b29b      	uxth	r3, r3
 80063f4:	2b00      	cmp	r3, #0
 80063f6:	d1a6      	bne.n	8006346 <HAL_SPI_TransmitReceive+0x130>
 80063f8:	68fb      	ldr	r3, [r7, #12]
 80063fa:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 80063fc:	b29b      	uxth	r3, r3
 80063fe:	2b00      	cmp	r3, #0
 8006400:	d1a1      	bne.n	8006346 <HAL_SPI_TransmitReceive+0x130>
 8006402:	e07c      	b.n	80064fe <HAL_SPI_TransmitReceive+0x2e8>
    }
  }
  /* Transmit and Receive data in 8 Bit mode */
  else
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 8006404:	68fb      	ldr	r3, [r7, #12]
 8006406:	685b      	ldr	r3, [r3, #4]
 8006408:	2b00      	cmp	r3, #0
 800640a:	d002      	beq.n	8006412 <HAL_SPI_TransmitReceive+0x1fc>
 800640c:	8b7b      	ldrh	r3, [r7, #26]
 800640e:	2b01      	cmp	r3, #1
 8006410:	d16b      	bne.n	80064ea <HAL_SPI_TransmitReceive+0x2d4>
    {
      *((__IO uint8_t *)&hspi->Instance->DR) = (*hspi->pTxBuffPtr);
 8006412:	68fb      	ldr	r3, [r7, #12]
 8006414:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8006416:	68fb      	ldr	r3, [r7, #12]
 8006418:	681b      	ldr	r3, [r3, #0]
 800641a:	330c      	adds	r3, #12
 800641c:	7812      	ldrb	r2, [r2, #0]
 800641e:	701a      	strb	r2, [r3, #0]
      hspi->pTxBuffPtr += sizeof(uint8_t);
 8006420:	68fb      	ldr	r3, [r7, #12]
 8006422:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8006424:	1c5a      	adds	r2, r3, #1
 8006426:	68fb      	ldr	r3, [r7, #12]
 8006428:	631a      	str	r2, [r3, #48]	; 0x30
      hspi->TxXferCount--;
 800642a:	68fb      	ldr	r3, [r7, #12]
 800642c:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 800642e:	b29b      	uxth	r3, r3
 8006430:	3b01      	subs	r3, #1
 8006432:	b29a      	uxth	r2, r3
 8006434:	68fb      	ldr	r3, [r7, #12]
 8006436:	86da      	strh	r2, [r3, #54]	; 0x36
    }
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 8006438:	e057      	b.n	80064ea <HAL_SPI_TransmitReceive+0x2d4>
    {
      /* Check TXE flag */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE)) && (hspi->TxXferCount > 0U) && (txallowed == 1U))
 800643a:	68fb      	ldr	r3, [r7, #12]
 800643c:	681b      	ldr	r3, [r3, #0]
 800643e:	689b      	ldr	r3, [r3, #8]
 8006440:	f003 0302 	and.w	r3, r3, #2
 8006444:	2b02      	cmp	r3, #2
 8006446:	d11c      	bne.n	8006482 <HAL_SPI_TransmitReceive+0x26c>
 8006448:	68fb      	ldr	r3, [r7, #12]
 800644a:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 800644c:	b29b      	uxth	r3, r3
 800644e:	2b00      	cmp	r3, #0
 8006450:	d017      	beq.n	8006482 <HAL_SPI_TransmitReceive+0x26c>
 8006452:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8006454:	2b01      	cmp	r3, #1
 8006456:	d114      	bne.n	8006482 <HAL_SPI_TransmitReceive+0x26c>
      {
        *(__IO uint8_t *)&hspi->Instance->DR = (*hspi->pTxBuffPtr);
 8006458:	68fb      	ldr	r3, [r7, #12]
 800645a:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 800645c:	68fb      	ldr	r3, [r7, #12]
 800645e:	681b      	ldr	r3, [r3, #0]
 8006460:	330c      	adds	r3, #12
 8006462:	7812      	ldrb	r2, [r2, #0]
 8006464:	701a      	strb	r2, [r3, #0]
        hspi->pTxBuffPtr++;
 8006466:	68fb      	ldr	r3, [r7, #12]
 8006468:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800646a:	1c5a      	adds	r2, r3, #1
 800646c:	68fb      	ldr	r3, [r7, #12]
 800646e:	631a      	str	r2, [r3, #48]	; 0x30
        hspi->TxXferCount--;
 8006470:	68fb      	ldr	r3, [r7, #12]
 8006472:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8006474:	b29b      	uxth	r3, r3
 8006476:	3b01      	subs	r3, #1
 8006478:	b29a      	uxth	r2, r3
 800647a:	68fb      	ldr	r3, [r7, #12]
 800647c:	86da      	strh	r2, [r3, #54]	; 0x36
        /* Next Data is a reception (Rx). Tx not allowed */
        txallowed = 0U;
 800647e:	2300      	movs	r3, #0
 8006480:	62fb      	str	r3, [r7, #44]	; 0x2c
        }
#endif /* USE_SPI_CRC */
      }

      /* Wait until RXNE flag is reset */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXNE)) && (hspi->RxXferCount > 0U))
 8006482:	68fb      	ldr	r3, [r7, #12]
 8006484:	681b      	ldr	r3, [r3, #0]
 8006486:	689b      	ldr	r3, [r3, #8]
 8006488:	f003 0301 	and.w	r3, r3, #1
 800648c:	2b01      	cmp	r3, #1
 800648e:	d119      	bne.n	80064c4 <HAL_SPI_TransmitReceive+0x2ae>
 8006490:	68fb      	ldr	r3, [r7, #12]
 8006492:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8006494:	b29b      	uxth	r3, r3
 8006496:	2b00      	cmp	r3, #0
 8006498:	d014      	beq.n	80064c4 <HAL_SPI_TransmitReceive+0x2ae>
      {
        (*(uint8_t *)hspi->pRxBuffPtr) = hspi->Instance->DR;
 800649a:	68fb      	ldr	r3, [r7, #12]
 800649c:	681b      	ldr	r3, [r3, #0]
 800649e:	68da      	ldr	r2, [r3, #12]
 80064a0:	68fb      	ldr	r3, [r7, #12]
 80064a2:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80064a4:	b2d2      	uxtb	r2, r2
 80064a6:	701a      	strb	r2, [r3, #0]
        hspi->pRxBuffPtr++;
 80064a8:	68fb      	ldr	r3, [r7, #12]
 80064aa:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80064ac:	1c5a      	adds	r2, r3, #1
 80064ae:	68fb      	ldr	r3, [r7, #12]
 80064b0:	639a      	str	r2, [r3, #56]	; 0x38
        hspi->RxXferCount--;
 80064b2:	68fb      	ldr	r3, [r7, #12]
 80064b4:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 80064b6:	b29b      	uxth	r3, r3
 80064b8:	3b01      	subs	r3, #1
 80064ba:	b29a      	uxth	r2, r3
 80064bc:	68fb      	ldr	r3, [r7, #12]
 80064be:	87da      	strh	r2, [r3, #62]	; 0x3e
        /* Next Data is a Transmission (Tx). Tx is allowed */
        txallowed = 1U;
 80064c0:	2301      	movs	r3, #1
 80064c2:	62fb      	str	r3, [r7, #44]	; 0x2c
      }
      if ((((HAL_GetTick() - tickstart) >=  Timeout) && ((Timeout != HAL_MAX_DELAY))) || (Timeout == 0U))
 80064c4:	f7fd fc88 	bl	8003dd8 <HAL_GetTick>
 80064c8:	4602      	mov	r2, r0
 80064ca:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80064cc:	1ad3      	subs	r3, r2, r3
 80064ce:	6bba      	ldr	r2, [r7, #56]	; 0x38
 80064d0:	429a      	cmp	r2, r3
 80064d2:	d803      	bhi.n	80064dc <HAL_SPI_TransmitReceive+0x2c6>
 80064d4:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80064d6:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 80064da:	d102      	bne.n	80064e2 <HAL_SPI_TransmitReceive+0x2cc>
 80064dc:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80064de:	2b00      	cmp	r3, #0
 80064e0:	d103      	bne.n	80064ea <HAL_SPI_TransmitReceive+0x2d4>
      {
        errorcode = HAL_TIMEOUT;
 80064e2:	2303      	movs	r3, #3
 80064e4:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
        goto error;
 80064e8:	e029      	b.n	800653e <HAL_SPI_TransmitReceive+0x328>
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 80064ea:	68fb      	ldr	r3, [r7, #12]
 80064ec:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 80064ee:	b29b      	uxth	r3, r3
 80064f0:	2b00      	cmp	r3, #0
 80064f2:	d1a2      	bne.n	800643a <HAL_SPI_TransmitReceive+0x224>
 80064f4:	68fb      	ldr	r3, [r7, #12]
 80064f6:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 80064f8:	b29b      	uxth	r3, r3
 80064fa:	2b00      	cmp	r3, #0
 80064fc:	d19d      	bne.n	800643a <HAL_SPI_TransmitReceive+0x224>
    }
  }
#endif /* USE_SPI_CRC */

  /* Check the end of the transaction */
  if (SPI_EndRxTxTransaction(hspi, Timeout, tickstart) != HAL_OK)
 80064fe:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8006500:	6bb9      	ldr	r1, [r7, #56]	; 0x38
 8006502:	68f8      	ldr	r0, [r7, #12]
 8006504:	f000 f904 	bl	8006710 <SPI_EndRxTxTransaction>
 8006508:	4603      	mov	r3, r0
 800650a:	2b00      	cmp	r3, #0
 800650c:	d006      	beq.n	800651c <HAL_SPI_TransmitReceive+0x306>
  {
    errorcode = HAL_ERROR;
 800650e:	2301      	movs	r3, #1
 8006510:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
    hspi->ErrorCode = HAL_SPI_ERROR_FLAG;
 8006514:	68fb      	ldr	r3, [r7, #12]
 8006516:	2220      	movs	r2, #32
 8006518:	655a      	str	r2, [r3, #84]	; 0x54
    goto error;
 800651a:	e010      	b.n	800653e <HAL_SPI_TransmitReceive+0x328>
  }

  /* Clear overrun flag in 2 Lines communication mode because received is not read */
  if (hspi->Init.Direction == SPI_DIRECTION_2LINES)
 800651c:	68fb      	ldr	r3, [r7, #12]
 800651e:	689b      	ldr	r3, [r3, #8]
 8006520:	2b00      	cmp	r3, #0
 8006522:	d10b      	bne.n	800653c <HAL_SPI_TransmitReceive+0x326>
  {
    __HAL_SPI_CLEAR_OVRFLAG(hspi);
 8006524:	2300      	movs	r3, #0
 8006526:	617b      	str	r3, [r7, #20]
 8006528:	68fb      	ldr	r3, [r7, #12]
 800652a:	681b      	ldr	r3, [r3, #0]
 800652c:	68db      	ldr	r3, [r3, #12]
 800652e:	617b      	str	r3, [r7, #20]
 8006530:	68fb      	ldr	r3, [r7, #12]
 8006532:	681b      	ldr	r3, [r3, #0]
 8006534:	689b      	ldr	r3, [r3, #8]
 8006536:	617b      	str	r3, [r7, #20]
 8006538:	697b      	ldr	r3, [r7, #20]
 800653a:	e000      	b.n	800653e <HAL_SPI_TransmitReceive+0x328>
  }

error :
 800653c:	bf00      	nop
  hspi->State = HAL_SPI_STATE_READY;
 800653e:	68fb      	ldr	r3, [r7, #12]
 8006540:	2201      	movs	r2, #1
 8006542:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
  __HAL_UNLOCK(hspi);
 8006546:	68fb      	ldr	r3, [r7, #12]
 8006548:	2200      	movs	r2, #0
 800654a:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50
  return errorcode;
 800654e:	f897 302b 	ldrb.w	r3, [r7, #43]	; 0x2b
}
 8006552:	4618      	mov	r0, r3
 8006554:	3730      	adds	r7, #48	; 0x30
 8006556:	46bd      	mov	sp, r7
 8006558:	bd80      	pop	{r7, pc}
	...

0800655c <SPI_WaitFlagStateUntilTimeout>:
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_WaitFlagStateUntilTimeout(SPI_HandleTypeDef *hspi, uint32_t Flag, FlagStatus State,
                                                       uint32_t Timeout, uint32_t Tickstart)
{
 800655c:	b580      	push	{r7, lr}
 800655e:	b088      	sub	sp, #32
 8006560:	af00      	add	r7, sp, #0
 8006562:	60f8      	str	r0, [r7, #12]
 8006564:	60b9      	str	r1, [r7, #8]
 8006566:	603b      	str	r3, [r7, #0]
 8006568:	4613      	mov	r3, r2
 800656a:	71fb      	strb	r3, [r7, #7]
  __IO uint32_t count;
  uint32_t tmp_timeout;
  uint32_t tmp_tickstart;

  /* Adjust Timeout value  in case of end of transfer */
  tmp_timeout   = Timeout - (HAL_GetTick() - Tickstart);
 800656c:	f7fd fc34 	bl	8003dd8 <HAL_GetTick>
 8006570:	4602      	mov	r2, r0
 8006572:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8006574:	1a9b      	subs	r3, r3, r2
 8006576:	683a      	ldr	r2, [r7, #0]
 8006578:	4413      	add	r3, r2
 800657a:	61fb      	str	r3, [r7, #28]
  tmp_tickstart = HAL_GetTick();
 800657c:	f7fd fc2c 	bl	8003dd8 <HAL_GetTick>
 8006580:	61b8      	str	r0, [r7, #24]

  /* Calculate Timeout based on a software loop to avoid blocking issue if Systick is disabled */
  count = tmp_timeout * ((SystemCoreClock * 32U) >> 20U);
 8006582:	4b39      	ldr	r3, [pc, #228]	; (8006668 <SPI_WaitFlagStateUntilTimeout+0x10c>)
 8006584:	681b      	ldr	r3, [r3, #0]
 8006586:	015b      	lsls	r3, r3, #5
 8006588:	0d1b      	lsrs	r3, r3, #20
 800658a:	69fa      	ldr	r2, [r7, #28]
 800658c:	fb02 f303 	mul.w	r3, r2, r3
 8006590:	617b      	str	r3, [r7, #20]

  while ((__HAL_SPI_GET_FLAG(hspi, Flag) ? SET : RESET) != State)
 8006592:	e054      	b.n	800663e <SPI_WaitFlagStateUntilTimeout+0xe2>
  {
    if (Timeout != HAL_MAX_DELAY)
 8006594:	683b      	ldr	r3, [r7, #0]
 8006596:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 800659a:	d050      	beq.n	800663e <SPI_WaitFlagStateUntilTimeout+0xe2>
    {
      if (((HAL_GetTick() - tmp_tickstart) >= tmp_timeout) || (tmp_timeout == 0U))
 800659c:	f7fd fc1c 	bl	8003dd8 <HAL_GetTick>
 80065a0:	4602      	mov	r2, r0
 80065a2:	69bb      	ldr	r3, [r7, #24]
 80065a4:	1ad3      	subs	r3, r2, r3
 80065a6:	69fa      	ldr	r2, [r7, #28]
 80065a8:	429a      	cmp	r2, r3
 80065aa:	d902      	bls.n	80065b2 <SPI_WaitFlagStateUntilTimeout+0x56>
 80065ac:	69fb      	ldr	r3, [r7, #28]
 80065ae:	2b00      	cmp	r3, #0
 80065b0:	d13d      	bne.n	800662e <SPI_WaitFlagStateUntilTimeout+0xd2>
        /* Disable the SPI and reset the CRC: the CRC value should be cleared
           on both master and slave sides in order to resynchronize the master
           and slave for their respective CRC calculation */

        /* Disable TXE, RXNE and ERR interrupts for the interrupt process */
        __HAL_SPI_DISABLE_IT(hspi, (SPI_IT_TXE | SPI_IT_RXNE | SPI_IT_ERR));
 80065b2:	68fb      	ldr	r3, [r7, #12]
 80065b4:	681b      	ldr	r3, [r3, #0]
 80065b6:	685a      	ldr	r2, [r3, #4]
 80065b8:	68fb      	ldr	r3, [r7, #12]
 80065ba:	681b      	ldr	r3, [r3, #0]
 80065bc:	f022 02e0 	bic.w	r2, r2, #224	; 0xe0
 80065c0:	605a      	str	r2, [r3, #4]

        if ((hspi->Init.Mode == SPI_MODE_MASTER) && ((hspi->Init.Direction == SPI_DIRECTION_1LINE)
 80065c2:	68fb      	ldr	r3, [r7, #12]
 80065c4:	685b      	ldr	r3, [r3, #4]
 80065c6:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 80065ca:	d111      	bne.n	80065f0 <SPI_WaitFlagStateUntilTimeout+0x94>
 80065cc:	68fb      	ldr	r3, [r7, #12]
 80065ce:	689b      	ldr	r3, [r3, #8]
 80065d0:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 80065d4:	d004      	beq.n	80065e0 <SPI_WaitFlagStateUntilTimeout+0x84>
                                                     || (hspi->Init.Direction == SPI_DIRECTION_2LINES_RXONLY)))
 80065d6:	68fb      	ldr	r3, [r7, #12]
 80065d8:	689b      	ldr	r3, [r3, #8]
 80065da:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 80065de:	d107      	bne.n	80065f0 <SPI_WaitFlagStateUntilTimeout+0x94>
        {
          /* Disable SPI peripheral */
          __HAL_SPI_DISABLE(hspi);
 80065e0:	68fb      	ldr	r3, [r7, #12]
 80065e2:	681b      	ldr	r3, [r3, #0]
 80065e4:	681a      	ldr	r2, [r3, #0]
 80065e6:	68fb      	ldr	r3, [r7, #12]
 80065e8:	681b      	ldr	r3, [r3, #0]
 80065ea:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 80065ee:	601a      	str	r2, [r3, #0]
        }

        /* Reset CRC Calculation */
        if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
 80065f0:	68fb      	ldr	r3, [r7, #12]
 80065f2:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80065f4:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 80065f8:	d10f      	bne.n	800661a <SPI_WaitFlagStateUntilTimeout+0xbe>
        {
          SPI_RESET_CRC(hspi);
 80065fa:	68fb      	ldr	r3, [r7, #12]
 80065fc:	681b      	ldr	r3, [r3, #0]
 80065fe:	681a      	ldr	r2, [r3, #0]
 8006600:	68fb      	ldr	r3, [r7, #12]
 8006602:	681b      	ldr	r3, [r3, #0]
 8006604:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 8006608:	601a      	str	r2, [r3, #0]
 800660a:	68fb      	ldr	r3, [r7, #12]
 800660c:	681b      	ldr	r3, [r3, #0]
 800660e:	681a      	ldr	r2, [r3, #0]
 8006610:	68fb      	ldr	r3, [r7, #12]
 8006612:	681b      	ldr	r3, [r3, #0]
 8006614:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 8006618:	601a      	str	r2, [r3, #0]
        }

        hspi->State = HAL_SPI_STATE_READY;
 800661a:	68fb      	ldr	r3, [r7, #12]
 800661c:	2201      	movs	r2, #1
 800661e:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51

        /* Process Unlocked */
        __HAL_UNLOCK(hspi);
 8006622:	68fb      	ldr	r3, [r7, #12]
 8006624:	2200      	movs	r2, #0
 8006626:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

        return HAL_TIMEOUT;
 800662a:	2303      	movs	r3, #3
 800662c:	e017      	b.n	800665e <SPI_WaitFlagStateUntilTimeout+0x102>
      }
      /* If Systick is disabled or not incremented, deactivate timeout to go in disable loop procedure */
      if(count == 0U)
 800662e:	697b      	ldr	r3, [r7, #20]
 8006630:	2b00      	cmp	r3, #0
 8006632:	d101      	bne.n	8006638 <SPI_WaitFlagStateUntilTimeout+0xdc>
      {
        tmp_timeout = 0U;
 8006634:	2300      	movs	r3, #0
 8006636:	61fb      	str	r3, [r7, #28]
      }
      count--;
 8006638:	697b      	ldr	r3, [r7, #20]
 800663a:	3b01      	subs	r3, #1
 800663c:	617b      	str	r3, [r7, #20]
  while ((__HAL_SPI_GET_FLAG(hspi, Flag) ? SET : RESET) != State)
 800663e:	68fb      	ldr	r3, [r7, #12]
 8006640:	681b      	ldr	r3, [r3, #0]
 8006642:	689a      	ldr	r2, [r3, #8]
 8006644:	68bb      	ldr	r3, [r7, #8]
 8006646:	4013      	ands	r3, r2
 8006648:	68ba      	ldr	r2, [r7, #8]
 800664a:	429a      	cmp	r2, r3
 800664c:	bf0c      	ite	eq
 800664e:	2301      	moveq	r3, #1
 8006650:	2300      	movne	r3, #0
 8006652:	b2db      	uxtb	r3, r3
 8006654:	461a      	mov	r2, r3
 8006656:	79fb      	ldrb	r3, [r7, #7]
 8006658:	429a      	cmp	r2, r3
 800665a:	d19b      	bne.n	8006594 <SPI_WaitFlagStateUntilTimeout+0x38>
    }
  }

  return HAL_OK;
 800665c:	2300      	movs	r3, #0
}
 800665e:	4618      	mov	r0, r3
 8006660:	3720      	adds	r7, #32
 8006662:	46bd      	mov	sp, r7
 8006664:	bd80      	pop	{r7, pc}
 8006666:	bf00      	nop
 8006668:	20000020 	.word	0x20000020

0800666c <SPI_EndRxTransaction>:
  * @param  Timeout Timeout duration
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_EndRxTransaction(SPI_HandleTypeDef *hspi,  uint32_t Timeout, uint32_t Tickstart)
{
 800666c:	b580      	push	{r7, lr}
 800666e:	b086      	sub	sp, #24
 8006670:	af02      	add	r7, sp, #8
 8006672:	60f8      	str	r0, [r7, #12]
 8006674:	60b9      	str	r1, [r7, #8]
 8006676:	607a      	str	r2, [r7, #4]
  if ((hspi->Init.Mode == SPI_MODE_MASTER) && ((hspi->Init.Direction == SPI_DIRECTION_1LINE)
 8006678:	68fb      	ldr	r3, [r7, #12]
 800667a:	685b      	ldr	r3, [r3, #4]
 800667c:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 8006680:	d111      	bne.n	80066a6 <SPI_EndRxTransaction+0x3a>
 8006682:	68fb      	ldr	r3, [r7, #12]
 8006684:	689b      	ldr	r3, [r3, #8]
 8006686:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 800668a:	d004      	beq.n	8006696 <SPI_EndRxTransaction+0x2a>
                                               || (hspi->Init.Direction == SPI_DIRECTION_2LINES_RXONLY)))
 800668c:	68fb      	ldr	r3, [r7, #12]
 800668e:	689b      	ldr	r3, [r3, #8]
 8006690:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8006694:	d107      	bne.n	80066a6 <SPI_EndRxTransaction+0x3a>
  {
    /* Disable SPI peripheral */
    __HAL_SPI_DISABLE(hspi);
 8006696:	68fb      	ldr	r3, [r7, #12]
 8006698:	681b      	ldr	r3, [r3, #0]
 800669a:	681a      	ldr	r2, [r3, #0]
 800669c:	68fb      	ldr	r3, [r7, #12]
 800669e:	681b      	ldr	r3, [r3, #0]
 80066a0:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 80066a4:	601a      	str	r2, [r3, #0]
  }

  if ((hspi->Init.Mode == SPI_MODE_MASTER) && (hspi->Init.Direction == SPI_DIRECTION_2LINES_RXONLY))
 80066a6:	68fb      	ldr	r3, [r7, #12]
 80066a8:	685b      	ldr	r3, [r3, #4]
 80066aa:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 80066ae:	d117      	bne.n	80066e0 <SPI_EndRxTransaction+0x74>
 80066b0:	68fb      	ldr	r3, [r7, #12]
 80066b2:	689b      	ldr	r3, [r3, #8]
 80066b4:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 80066b8:	d112      	bne.n	80066e0 <SPI_EndRxTransaction+0x74>
  {
    /* Wait the RXNE reset */
    if (SPI_WaitFlagStateUntilTimeout(hspi, SPI_FLAG_RXNE, RESET, Timeout, Tickstart) != HAL_OK)
 80066ba:	687b      	ldr	r3, [r7, #4]
 80066bc:	9300      	str	r3, [sp, #0]
 80066be:	68bb      	ldr	r3, [r7, #8]
 80066c0:	2200      	movs	r2, #0
 80066c2:	2101      	movs	r1, #1
 80066c4:	68f8      	ldr	r0, [r7, #12]
 80066c6:	f7ff ff49 	bl	800655c <SPI_WaitFlagStateUntilTimeout>
 80066ca:	4603      	mov	r3, r0
 80066cc:	2b00      	cmp	r3, #0
 80066ce:	d01a      	beq.n	8006706 <SPI_EndRxTransaction+0x9a>
    {
      SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 80066d0:	68fb      	ldr	r3, [r7, #12]
 80066d2:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80066d4:	f043 0220 	orr.w	r2, r3, #32
 80066d8:	68fb      	ldr	r3, [r7, #12]
 80066da:	655a      	str	r2, [r3, #84]	; 0x54
      return HAL_TIMEOUT;
 80066dc:	2303      	movs	r3, #3
 80066de:	e013      	b.n	8006708 <SPI_EndRxTransaction+0x9c>
    }
  }
  else
  {
    /* Control the BSY flag */
    if (SPI_WaitFlagStateUntilTimeout(hspi, SPI_FLAG_BSY, RESET, Timeout, Tickstart) != HAL_OK)
 80066e0:	687b      	ldr	r3, [r7, #4]
 80066e2:	9300      	str	r3, [sp, #0]
 80066e4:	68bb      	ldr	r3, [r7, #8]
 80066e6:	2200      	movs	r2, #0
 80066e8:	2180      	movs	r1, #128	; 0x80
 80066ea:	68f8      	ldr	r0, [r7, #12]
 80066ec:	f7ff ff36 	bl	800655c <SPI_WaitFlagStateUntilTimeout>
 80066f0:	4603      	mov	r3, r0
 80066f2:	2b00      	cmp	r3, #0
 80066f4:	d007      	beq.n	8006706 <SPI_EndRxTransaction+0x9a>
    {
      SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 80066f6:	68fb      	ldr	r3, [r7, #12]
 80066f8:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80066fa:	f043 0220 	orr.w	r2, r3, #32
 80066fe:	68fb      	ldr	r3, [r7, #12]
 8006700:	655a      	str	r2, [r3, #84]	; 0x54
      return HAL_TIMEOUT;
 8006702:	2303      	movs	r3, #3
 8006704:	e000      	b.n	8006708 <SPI_EndRxTransaction+0x9c>
    }
  }
  return HAL_OK;
 8006706:	2300      	movs	r3, #0
}
 8006708:	4618      	mov	r0, r3
 800670a:	3710      	adds	r7, #16
 800670c:	46bd      	mov	sp, r7
 800670e:	bd80      	pop	{r7, pc}

08006710 <SPI_EndRxTxTransaction>:
  * @param  Timeout Timeout duration
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_EndRxTxTransaction(SPI_HandleTypeDef *hspi, uint32_t Timeout, uint32_t Tickstart)
{
 8006710:	b580      	push	{r7, lr}
 8006712:	b086      	sub	sp, #24
 8006714:	af02      	add	r7, sp, #8
 8006716:	60f8      	str	r0, [r7, #12]
 8006718:	60b9      	str	r1, [r7, #8]
 800671a:	607a      	str	r2, [r7, #4]
  /* Control the BSY flag */
  if (SPI_WaitFlagStateUntilTimeout(hspi, SPI_FLAG_BSY, RESET, Timeout, Tickstart) != HAL_OK)
 800671c:	687b      	ldr	r3, [r7, #4]
 800671e:	9300      	str	r3, [sp, #0]
 8006720:	68bb      	ldr	r3, [r7, #8]
 8006722:	2200      	movs	r2, #0
 8006724:	2180      	movs	r1, #128	; 0x80
 8006726:	68f8      	ldr	r0, [r7, #12]
 8006728:	f7ff ff18 	bl	800655c <SPI_WaitFlagStateUntilTimeout>
 800672c:	4603      	mov	r3, r0
 800672e:	2b00      	cmp	r3, #0
 8006730:	d007      	beq.n	8006742 <SPI_EndRxTxTransaction+0x32>
  {
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 8006732:	68fb      	ldr	r3, [r7, #12]
 8006734:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8006736:	f043 0220 	orr.w	r2, r3, #32
 800673a:	68fb      	ldr	r3, [r7, #12]
 800673c:	655a      	str	r2, [r3, #84]	; 0x54
    return HAL_TIMEOUT;
 800673e:	2303      	movs	r3, #3
 8006740:	e000      	b.n	8006744 <SPI_EndRxTxTransaction+0x34>
  }
  return HAL_OK;
 8006742:	2300      	movs	r3, #0
}
 8006744:	4618      	mov	r0, r3
 8006746:	3710      	adds	r7, #16
 8006748:	46bd      	mov	sp, r7
 800674a:	bd80      	pop	{r7, pc}

0800674c <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 800674c:	b580      	push	{r7, lr}
 800674e:	b082      	sub	sp, #8
 8006750:	af00      	add	r7, sp, #0
 8006752:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8006754:	687b      	ldr	r3, [r7, #4]
 8006756:	2b00      	cmp	r3, #0
 8006758:	d101      	bne.n	800675e <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 800675a:	2301      	movs	r3, #1
 800675c:	e041      	b.n	80067e2 <HAL_TIM_Base_Init+0x96>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 800675e:	687b      	ldr	r3, [r7, #4]
 8006760:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8006764:	b2db      	uxtb	r3, r3
 8006766:	2b00      	cmp	r3, #0
 8006768:	d106      	bne.n	8006778 <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 800676a:	687b      	ldr	r3, [r7, #4]
 800676c:	2200      	movs	r2, #0
 800676e:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 8006772:	6878      	ldr	r0, [r7, #4]
 8006774:	f7fd f9cc 	bl	8003b10 <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8006778:	687b      	ldr	r3, [r7, #4]
 800677a:	2202      	movs	r2, #2
 800677c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8006780:	687b      	ldr	r3, [r7, #4]
 8006782:	681a      	ldr	r2, [r3, #0]
 8006784:	687b      	ldr	r3, [r7, #4]
 8006786:	3304      	adds	r3, #4
 8006788:	4619      	mov	r1, r3
 800678a:	4610      	mov	r0, r2
 800678c:	f000 f956 	bl	8006a3c <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8006790:	687b      	ldr	r3, [r7, #4]
 8006792:	2201      	movs	r2, #1
 8006794:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8006798:	687b      	ldr	r3, [r7, #4]
 800679a:	2201      	movs	r2, #1
 800679c:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 80067a0:	687b      	ldr	r3, [r7, #4]
 80067a2:	2201      	movs	r2, #1
 80067a4:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 80067a8:	687b      	ldr	r3, [r7, #4]
 80067aa:	2201      	movs	r2, #1
 80067ac:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 80067b0:	687b      	ldr	r3, [r7, #4]
 80067b2:	2201      	movs	r2, #1
 80067b4:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 80067b8:	687b      	ldr	r3, [r7, #4]
 80067ba:	2201      	movs	r2, #1
 80067bc:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 80067c0:	687b      	ldr	r3, [r7, #4]
 80067c2:	2201      	movs	r2, #1
 80067c4:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
 80067c8:	687b      	ldr	r3, [r7, #4]
 80067ca:	2201      	movs	r2, #1
 80067cc:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 80067d0:	687b      	ldr	r3, [r7, #4]
 80067d2:	2201      	movs	r2, #1
 80067d4:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 80067d8:	687b      	ldr	r3, [r7, #4]
 80067da:	2201      	movs	r2, #1
 80067dc:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 80067e0:	2300      	movs	r3, #0
}
 80067e2:	4618      	mov	r0, r3
 80067e4:	3708      	adds	r7, #8
 80067e6:	46bd      	mov	sp, r7
 80067e8:	bd80      	pop	{r7, pc}
	...

080067ec <HAL_TIM_Base_Start>:
  * @brief  Starts the TIM Base generation.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start(TIM_HandleTypeDef *htim)
{
 80067ec:	b480      	push	{r7}
 80067ee:	b085      	sub	sp, #20
 80067f0:	af00      	add	r7, sp, #0
 80067f2:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
 80067f4:	687b      	ldr	r3, [r7, #4]
 80067f6:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80067fa:	b2db      	uxtb	r3, r3
 80067fc:	2b01      	cmp	r3, #1
 80067fe:	d001      	beq.n	8006804 <HAL_TIM_Base_Start+0x18>
  {
    return HAL_ERROR;
 8006800:	2301      	movs	r3, #1
 8006802:	e032      	b.n	800686a <HAL_TIM_Base_Start+0x7e>
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8006804:	687b      	ldr	r3, [r7, #4]
 8006806:	2202      	movs	r2, #2
 8006808:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 800680c:	687b      	ldr	r3, [r7, #4]
 800680e:	681b      	ldr	r3, [r3, #0]
 8006810:	4a18      	ldr	r2, [pc, #96]	; (8006874 <HAL_TIM_Base_Start+0x88>)
 8006812:	4293      	cmp	r3, r2
 8006814:	d00e      	beq.n	8006834 <HAL_TIM_Base_Start+0x48>
 8006816:	687b      	ldr	r3, [r7, #4]
 8006818:	681b      	ldr	r3, [r3, #0]
 800681a:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800681e:	d009      	beq.n	8006834 <HAL_TIM_Base_Start+0x48>
 8006820:	687b      	ldr	r3, [r7, #4]
 8006822:	681b      	ldr	r3, [r3, #0]
 8006824:	4a14      	ldr	r2, [pc, #80]	; (8006878 <HAL_TIM_Base_Start+0x8c>)
 8006826:	4293      	cmp	r3, r2
 8006828:	d004      	beq.n	8006834 <HAL_TIM_Base_Start+0x48>
 800682a:	687b      	ldr	r3, [r7, #4]
 800682c:	681b      	ldr	r3, [r3, #0]
 800682e:	4a13      	ldr	r2, [pc, #76]	; (800687c <HAL_TIM_Base_Start+0x90>)
 8006830:	4293      	cmp	r3, r2
 8006832:	d111      	bne.n	8006858 <HAL_TIM_Base_Start+0x6c>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8006834:	687b      	ldr	r3, [r7, #4]
 8006836:	681b      	ldr	r3, [r3, #0]
 8006838:	689b      	ldr	r3, [r3, #8]
 800683a:	f003 0307 	and.w	r3, r3, #7
 800683e:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8006840:	68fb      	ldr	r3, [r7, #12]
 8006842:	2b06      	cmp	r3, #6
 8006844:	d010      	beq.n	8006868 <HAL_TIM_Base_Start+0x7c>
    {
      __HAL_TIM_ENABLE(htim);
 8006846:	687b      	ldr	r3, [r7, #4]
 8006848:	681b      	ldr	r3, [r3, #0]
 800684a:	681a      	ldr	r2, [r3, #0]
 800684c:	687b      	ldr	r3, [r7, #4]
 800684e:	681b      	ldr	r3, [r3, #0]
 8006850:	f042 0201 	orr.w	r2, r2, #1
 8006854:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8006856:	e007      	b.n	8006868 <HAL_TIM_Base_Start+0x7c>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 8006858:	687b      	ldr	r3, [r7, #4]
 800685a:	681b      	ldr	r3, [r3, #0]
 800685c:	681a      	ldr	r2, [r3, #0]
 800685e:	687b      	ldr	r3, [r7, #4]
 8006860:	681b      	ldr	r3, [r3, #0]
 8006862:	f042 0201 	orr.w	r2, r2, #1
 8006866:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 8006868:	2300      	movs	r3, #0
}
 800686a:	4618      	mov	r0, r3
 800686c:	3714      	adds	r7, #20
 800686e:	46bd      	mov	sp, r7
 8006870:	bc80      	pop	{r7}
 8006872:	4770      	bx	lr
 8006874:	40012c00 	.word	0x40012c00
 8006878:	40000400 	.word	0x40000400
 800687c:	40000800 	.word	0x40000800

08006880 <HAL_TIM_Base_Stop>:
  * @brief  Stops the TIM Base generation.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Stop(TIM_HandleTypeDef *htim)
{
 8006880:	b480      	push	{r7}
 8006882:	b083      	sub	sp, #12
 8006884:	af00      	add	r7, sp, #0
 8006886:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Disable the Peripheral */
  __HAL_TIM_DISABLE(htim);
 8006888:	687b      	ldr	r3, [r7, #4]
 800688a:	681b      	ldr	r3, [r3, #0]
 800688c:	6a1a      	ldr	r2, [r3, #32]
 800688e:	f241 1311 	movw	r3, #4369	; 0x1111
 8006892:	4013      	ands	r3, r2
 8006894:	2b00      	cmp	r3, #0
 8006896:	d10f      	bne.n	80068b8 <HAL_TIM_Base_Stop+0x38>
 8006898:	687b      	ldr	r3, [r7, #4]
 800689a:	681b      	ldr	r3, [r3, #0]
 800689c:	6a1a      	ldr	r2, [r3, #32]
 800689e:	f240 4344 	movw	r3, #1092	; 0x444
 80068a2:	4013      	ands	r3, r2
 80068a4:	2b00      	cmp	r3, #0
 80068a6:	d107      	bne.n	80068b8 <HAL_TIM_Base_Stop+0x38>
 80068a8:	687b      	ldr	r3, [r7, #4]
 80068aa:	681b      	ldr	r3, [r3, #0]
 80068ac:	681a      	ldr	r2, [r3, #0]
 80068ae:	687b      	ldr	r3, [r7, #4]
 80068b0:	681b      	ldr	r3, [r3, #0]
 80068b2:	f022 0201 	bic.w	r2, r2, #1
 80068b6:	601a      	str	r2, [r3, #0]

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_READY;
 80068b8:	687b      	ldr	r3, [r7, #4]
 80068ba:	2201      	movs	r2, #1
 80068bc:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Return function status */
  return HAL_OK;
 80068c0:	2300      	movs	r3, #0
}
 80068c2:	4618      	mov	r0, r3
 80068c4:	370c      	adds	r7, #12
 80068c6:	46bd      	mov	sp, r7
 80068c8:	bc80      	pop	{r7}
 80068ca:	4770      	bx	lr

080068cc <HAL_TIM_ConfigClockSource>:
  * @param  sClockSourceConfig pointer to a TIM_ClockConfigTypeDef structure that
  *         contains the clock source information for the TIM peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_ConfigClockSource(TIM_HandleTypeDef *htim, TIM_ClockConfigTypeDef *sClockSourceConfig)
{
 80068cc:	b580      	push	{r7, lr}
 80068ce:	b084      	sub	sp, #16
 80068d0:	af00      	add	r7, sp, #0
 80068d2:	6078      	str	r0, [r7, #4]
 80068d4:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Process Locked */
  __HAL_LOCK(htim);
 80068d6:	687b      	ldr	r3, [r7, #4]
 80068d8:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 80068dc:	2b01      	cmp	r3, #1
 80068de:	d101      	bne.n	80068e4 <HAL_TIM_ConfigClockSource+0x18>
 80068e0:	2302      	movs	r3, #2
 80068e2:	e0a6      	b.n	8006a32 <HAL_TIM_ConfigClockSource+0x166>
 80068e4:	687b      	ldr	r3, [r7, #4]
 80068e6:	2201      	movs	r2, #1
 80068e8:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  htim->State = HAL_TIM_STATE_BUSY;
 80068ec:	687b      	ldr	r3, [r7, #4]
 80068ee:	2202      	movs	r2, #2
 80068f0:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Check the parameters */
  assert_param(IS_TIM_CLOCKSOURCE(sClockSourceConfig->ClockSource));

  /* Reset the SMS, TS, ECE, ETPS and ETRF bits */
  tmpsmcr = htim->Instance->SMCR;
 80068f4:	687b      	ldr	r3, [r7, #4]
 80068f6:	681b      	ldr	r3, [r3, #0]
 80068f8:	689b      	ldr	r3, [r3, #8]
 80068fa:	60fb      	str	r3, [r7, #12]
  tmpsmcr &= ~(TIM_SMCR_SMS | TIM_SMCR_TS);
 80068fc:	68fb      	ldr	r3, [r7, #12]
 80068fe:	f023 0377 	bic.w	r3, r3, #119	; 0x77
 8006902:	60fb      	str	r3, [r7, #12]
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8006904:	68fb      	ldr	r3, [r7, #12]
 8006906:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 800690a:	60fb      	str	r3, [r7, #12]
  htim->Instance->SMCR = tmpsmcr;
 800690c:	687b      	ldr	r3, [r7, #4]
 800690e:	681b      	ldr	r3, [r3, #0]
 8006910:	68fa      	ldr	r2, [r7, #12]
 8006912:	609a      	str	r2, [r3, #8]

  switch (sClockSourceConfig->ClockSource)
 8006914:	683b      	ldr	r3, [r7, #0]
 8006916:	681b      	ldr	r3, [r3, #0]
 8006918:	2b40      	cmp	r3, #64	; 0x40
 800691a:	d067      	beq.n	80069ec <HAL_TIM_ConfigClockSource+0x120>
 800691c:	2b40      	cmp	r3, #64	; 0x40
 800691e:	d80b      	bhi.n	8006938 <HAL_TIM_ConfigClockSource+0x6c>
 8006920:	2b10      	cmp	r3, #16
 8006922:	d073      	beq.n	8006a0c <HAL_TIM_ConfigClockSource+0x140>
 8006924:	2b10      	cmp	r3, #16
 8006926:	d802      	bhi.n	800692e <HAL_TIM_ConfigClockSource+0x62>
 8006928:	2b00      	cmp	r3, #0
 800692a:	d06f      	beq.n	8006a0c <HAL_TIM_ConfigClockSource+0x140>
        TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
        break;
      }

    default:
      break;
 800692c:	e078      	b.n	8006a20 <HAL_TIM_ConfigClockSource+0x154>
  switch (sClockSourceConfig->ClockSource)
 800692e:	2b20      	cmp	r3, #32
 8006930:	d06c      	beq.n	8006a0c <HAL_TIM_ConfigClockSource+0x140>
 8006932:	2b30      	cmp	r3, #48	; 0x30
 8006934:	d06a      	beq.n	8006a0c <HAL_TIM_ConfigClockSource+0x140>
      break;
 8006936:	e073      	b.n	8006a20 <HAL_TIM_ConfigClockSource+0x154>
  switch (sClockSourceConfig->ClockSource)
 8006938:	2b70      	cmp	r3, #112	; 0x70
 800693a:	d00d      	beq.n	8006958 <HAL_TIM_ConfigClockSource+0x8c>
 800693c:	2b70      	cmp	r3, #112	; 0x70
 800693e:	d804      	bhi.n	800694a <HAL_TIM_ConfigClockSource+0x7e>
 8006940:	2b50      	cmp	r3, #80	; 0x50
 8006942:	d033      	beq.n	80069ac <HAL_TIM_ConfigClockSource+0xe0>
 8006944:	2b60      	cmp	r3, #96	; 0x60
 8006946:	d041      	beq.n	80069cc <HAL_TIM_ConfigClockSource+0x100>
      break;
 8006948:	e06a      	b.n	8006a20 <HAL_TIM_ConfigClockSource+0x154>
  switch (sClockSourceConfig->ClockSource)
 800694a:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800694e:	d066      	beq.n	8006a1e <HAL_TIM_ConfigClockSource+0x152>
 8006950:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8006954:	d017      	beq.n	8006986 <HAL_TIM_ConfigClockSource+0xba>
      break;
 8006956:	e063      	b.n	8006a20 <HAL_TIM_ConfigClockSource+0x154>
      TIM_ETR_SetConfig(htim->Instance,
 8006958:	687b      	ldr	r3, [r7, #4]
 800695a:	6818      	ldr	r0, [r3, #0]
 800695c:	683b      	ldr	r3, [r7, #0]
 800695e:	6899      	ldr	r1, [r3, #8]
 8006960:	683b      	ldr	r3, [r7, #0]
 8006962:	685a      	ldr	r2, [r3, #4]
 8006964:	683b      	ldr	r3, [r7, #0]
 8006966:	68db      	ldr	r3, [r3, #12]
 8006968:	f000 f941 	bl	8006bee <TIM_ETR_SetConfig>
      tmpsmcr = htim->Instance->SMCR;
 800696c:	687b      	ldr	r3, [r7, #4]
 800696e:	681b      	ldr	r3, [r3, #0]
 8006970:	689b      	ldr	r3, [r3, #8]
 8006972:	60fb      	str	r3, [r7, #12]
      tmpsmcr |= (TIM_SLAVEMODE_EXTERNAL1 | TIM_CLOCKSOURCE_ETRMODE1);
 8006974:	68fb      	ldr	r3, [r7, #12]
 8006976:	f043 0377 	orr.w	r3, r3, #119	; 0x77
 800697a:	60fb      	str	r3, [r7, #12]
      htim->Instance->SMCR = tmpsmcr;
 800697c:	687b      	ldr	r3, [r7, #4]
 800697e:	681b      	ldr	r3, [r3, #0]
 8006980:	68fa      	ldr	r2, [r7, #12]
 8006982:	609a      	str	r2, [r3, #8]
      break;
 8006984:	e04c      	b.n	8006a20 <HAL_TIM_ConfigClockSource+0x154>
      TIM_ETR_SetConfig(htim->Instance,
 8006986:	687b      	ldr	r3, [r7, #4]
 8006988:	6818      	ldr	r0, [r3, #0]
 800698a:	683b      	ldr	r3, [r7, #0]
 800698c:	6899      	ldr	r1, [r3, #8]
 800698e:	683b      	ldr	r3, [r7, #0]
 8006990:	685a      	ldr	r2, [r3, #4]
 8006992:	683b      	ldr	r3, [r7, #0]
 8006994:	68db      	ldr	r3, [r3, #12]
 8006996:	f000 f92a 	bl	8006bee <TIM_ETR_SetConfig>
      htim->Instance->SMCR |= TIM_SMCR_ECE;
 800699a:	687b      	ldr	r3, [r7, #4]
 800699c:	681b      	ldr	r3, [r3, #0]
 800699e:	689a      	ldr	r2, [r3, #8]
 80069a0:	687b      	ldr	r3, [r7, #4]
 80069a2:	681b      	ldr	r3, [r3, #0]
 80069a4:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 80069a8:	609a      	str	r2, [r3, #8]
      break;
 80069aa:	e039      	b.n	8006a20 <HAL_TIM_ConfigClockSource+0x154>
      TIM_TI1_ConfigInputStage(htim->Instance,
 80069ac:	687b      	ldr	r3, [r7, #4]
 80069ae:	6818      	ldr	r0, [r3, #0]
 80069b0:	683b      	ldr	r3, [r7, #0]
 80069b2:	6859      	ldr	r1, [r3, #4]
 80069b4:	683b      	ldr	r3, [r7, #0]
 80069b6:	68db      	ldr	r3, [r3, #12]
 80069b8:	461a      	mov	r2, r3
 80069ba:	f000 f8a1 	bl	8006b00 <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1);
 80069be:	687b      	ldr	r3, [r7, #4]
 80069c0:	681b      	ldr	r3, [r3, #0]
 80069c2:	2150      	movs	r1, #80	; 0x50
 80069c4:	4618      	mov	r0, r3
 80069c6:	f000 f8f8 	bl	8006bba <TIM_ITRx_SetConfig>
      break;
 80069ca:	e029      	b.n	8006a20 <HAL_TIM_ConfigClockSource+0x154>
      TIM_TI2_ConfigInputStage(htim->Instance,
 80069cc:	687b      	ldr	r3, [r7, #4]
 80069ce:	6818      	ldr	r0, [r3, #0]
 80069d0:	683b      	ldr	r3, [r7, #0]
 80069d2:	6859      	ldr	r1, [r3, #4]
 80069d4:	683b      	ldr	r3, [r7, #0]
 80069d6:	68db      	ldr	r3, [r3, #12]
 80069d8:	461a      	mov	r2, r3
 80069da:	f000 f8bf 	bl	8006b5c <TIM_TI2_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI2);
 80069de:	687b      	ldr	r3, [r7, #4]
 80069e0:	681b      	ldr	r3, [r3, #0]
 80069e2:	2160      	movs	r1, #96	; 0x60
 80069e4:	4618      	mov	r0, r3
 80069e6:	f000 f8e8 	bl	8006bba <TIM_ITRx_SetConfig>
      break;
 80069ea:	e019      	b.n	8006a20 <HAL_TIM_ConfigClockSource+0x154>
      TIM_TI1_ConfigInputStage(htim->Instance,
 80069ec:	687b      	ldr	r3, [r7, #4]
 80069ee:	6818      	ldr	r0, [r3, #0]
 80069f0:	683b      	ldr	r3, [r7, #0]
 80069f2:	6859      	ldr	r1, [r3, #4]
 80069f4:	683b      	ldr	r3, [r7, #0]
 80069f6:	68db      	ldr	r3, [r3, #12]
 80069f8:	461a      	mov	r2, r3
 80069fa:	f000 f881 	bl	8006b00 <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1ED);
 80069fe:	687b      	ldr	r3, [r7, #4]
 8006a00:	681b      	ldr	r3, [r3, #0]
 8006a02:	2140      	movs	r1, #64	; 0x40
 8006a04:	4618      	mov	r0, r3
 8006a06:	f000 f8d8 	bl	8006bba <TIM_ITRx_SetConfig>
      break;
 8006a0a:	e009      	b.n	8006a20 <HAL_TIM_ConfigClockSource+0x154>
        TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
 8006a0c:	687b      	ldr	r3, [r7, #4]
 8006a0e:	681a      	ldr	r2, [r3, #0]
 8006a10:	683b      	ldr	r3, [r7, #0]
 8006a12:	681b      	ldr	r3, [r3, #0]
 8006a14:	4619      	mov	r1, r3
 8006a16:	4610      	mov	r0, r2
 8006a18:	f000 f8cf 	bl	8006bba <TIM_ITRx_SetConfig>
        break;
 8006a1c:	e000      	b.n	8006a20 <HAL_TIM_ConfigClockSource+0x154>
      break;
 8006a1e:	bf00      	nop
  }
  htim->State = HAL_TIM_STATE_READY;
 8006a20:	687b      	ldr	r3, [r7, #4]
 8006a22:	2201      	movs	r2, #1
 8006a24:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 8006a28:	687b      	ldr	r3, [r7, #4]
 8006a2a:	2200      	movs	r2, #0
 8006a2c:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 8006a30:	2300      	movs	r3, #0
}
 8006a32:	4618      	mov	r0, r3
 8006a34:	3710      	adds	r7, #16
 8006a36:	46bd      	mov	sp, r7
 8006a38:	bd80      	pop	{r7, pc}
	...

08006a3c <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, TIM_Base_InitTypeDef *Structure)
{
 8006a3c:	b480      	push	{r7}
 8006a3e:	b085      	sub	sp, #20
 8006a40:	af00      	add	r7, sp, #0
 8006a42:	6078      	str	r0, [r7, #4]
 8006a44:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 8006a46:	687b      	ldr	r3, [r7, #4]
 8006a48:	681b      	ldr	r3, [r3, #0]
 8006a4a:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 8006a4c:	687b      	ldr	r3, [r7, #4]
 8006a4e:	4a29      	ldr	r2, [pc, #164]	; (8006af4 <TIM_Base_SetConfig+0xb8>)
 8006a50:	4293      	cmp	r3, r2
 8006a52:	d00b      	beq.n	8006a6c <TIM_Base_SetConfig+0x30>
 8006a54:	687b      	ldr	r3, [r7, #4]
 8006a56:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8006a5a:	d007      	beq.n	8006a6c <TIM_Base_SetConfig+0x30>
 8006a5c:	687b      	ldr	r3, [r7, #4]
 8006a5e:	4a26      	ldr	r2, [pc, #152]	; (8006af8 <TIM_Base_SetConfig+0xbc>)
 8006a60:	4293      	cmp	r3, r2
 8006a62:	d003      	beq.n	8006a6c <TIM_Base_SetConfig+0x30>
 8006a64:	687b      	ldr	r3, [r7, #4]
 8006a66:	4a25      	ldr	r2, [pc, #148]	; (8006afc <TIM_Base_SetConfig+0xc0>)
 8006a68:	4293      	cmp	r3, r2
 8006a6a:	d108      	bne.n	8006a7e <TIM_Base_SetConfig+0x42>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 8006a6c:	68fb      	ldr	r3, [r7, #12]
 8006a6e:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8006a72:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 8006a74:	683b      	ldr	r3, [r7, #0]
 8006a76:	685b      	ldr	r3, [r3, #4]
 8006a78:	68fa      	ldr	r2, [r7, #12]
 8006a7a:	4313      	orrs	r3, r2
 8006a7c:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 8006a7e:	687b      	ldr	r3, [r7, #4]
 8006a80:	4a1c      	ldr	r2, [pc, #112]	; (8006af4 <TIM_Base_SetConfig+0xb8>)
 8006a82:	4293      	cmp	r3, r2
 8006a84:	d00b      	beq.n	8006a9e <TIM_Base_SetConfig+0x62>
 8006a86:	687b      	ldr	r3, [r7, #4]
 8006a88:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8006a8c:	d007      	beq.n	8006a9e <TIM_Base_SetConfig+0x62>
 8006a8e:	687b      	ldr	r3, [r7, #4]
 8006a90:	4a19      	ldr	r2, [pc, #100]	; (8006af8 <TIM_Base_SetConfig+0xbc>)
 8006a92:	4293      	cmp	r3, r2
 8006a94:	d003      	beq.n	8006a9e <TIM_Base_SetConfig+0x62>
 8006a96:	687b      	ldr	r3, [r7, #4]
 8006a98:	4a18      	ldr	r2, [pc, #96]	; (8006afc <TIM_Base_SetConfig+0xc0>)
 8006a9a:	4293      	cmp	r3, r2
 8006a9c:	d108      	bne.n	8006ab0 <TIM_Base_SetConfig+0x74>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 8006a9e:	68fb      	ldr	r3, [r7, #12]
 8006aa0:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8006aa4:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 8006aa6:	683b      	ldr	r3, [r7, #0]
 8006aa8:	68db      	ldr	r3, [r3, #12]
 8006aaa:	68fa      	ldr	r2, [r7, #12]
 8006aac:	4313      	orrs	r3, r2
 8006aae:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 8006ab0:	68fb      	ldr	r3, [r7, #12]
 8006ab2:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 8006ab6:	683b      	ldr	r3, [r7, #0]
 8006ab8:	695b      	ldr	r3, [r3, #20]
 8006aba:	4313      	orrs	r3, r2
 8006abc:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 8006abe:	687b      	ldr	r3, [r7, #4]
 8006ac0:	68fa      	ldr	r2, [r7, #12]
 8006ac2:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 8006ac4:	683b      	ldr	r3, [r7, #0]
 8006ac6:	689a      	ldr	r2, [r3, #8]
 8006ac8:	687b      	ldr	r3, [r7, #4]
 8006aca:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 8006acc:	683b      	ldr	r3, [r7, #0]
 8006ace:	681a      	ldr	r2, [r3, #0]
 8006ad0:	687b      	ldr	r3, [r7, #4]
 8006ad2:	629a      	str	r2, [r3, #40]	; 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 8006ad4:	687b      	ldr	r3, [r7, #4]
 8006ad6:	4a07      	ldr	r2, [pc, #28]	; (8006af4 <TIM_Base_SetConfig+0xb8>)
 8006ad8:	4293      	cmp	r3, r2
 8006ada:	d103      	bne.n	8006ae4 <TIM_Base_SetConfig+0xa8>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 8006adc:	683b      	ldr	r3, [r7, #0]
 8006ade:	691a      	ldr	r2, [r3, #16]
 8006ae0:	687b      	ldr	r3, [r7, #4]
 8006ae2:	631a      	str	r2, [r3, #48]	; 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 8006ae4:	687b      	ldr	r3, [r7, #4]
 8006ae6:	2201      	movs	r2, #1
 8006ae8:	615a      	str	r2, [r3, #20]
}
 8006aea:	bf00      	nop
 8006aec:	3714      	adds	r7, #20
 8006aee:	46bd      	mov	sp, r7
 8006af0:	bc80      	pop	{r7}
 8006af2:	4770      	bx	lr
 8006af4:	40012c00 	.word	0x40012c00
 8006af8:	40000400 	.word	0x40000400
 8006afc:	40000800 	.word	0x40000800

08006b00 <TIM_TI1_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI1_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 8006b00:	b480      	push	{r7}
 8006b02:	b087      	sub	sp, #28
 8006b04:	af00      	add	r7, sp, #0
 8006b06:	60f8      	str	r0, [r7, #12]
 8006b08:	60b9      	str	r1, [r7, #8]
 8006b0a:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 1: Reset the CC1E Bit */
  tmpccer = TIMx->CCER;
 8006b0c:	68fb      	ldr	r3, [r7, #12]
 8006b0e:	6a1b      	ldr	r3, [r3, #32]
 8006b10:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC1E;
 8006b12:	68fb      	ldr	r3, [r7, #12]
 8006b14:	6a1b      	ldr	r3, [r3, #32]
 8006b16:	f023 0201 	bic.w	r2, r3, #1
 8006b1a:	68fb      	ldr	r3, [r7, #12]
 8006b1c:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8006b1e:	68fb      	ldr	r3, [r7, #12]
 8006b20:	699b      	ldr	r3, [r3, #24]
 8006b22:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 8006b24:	693b      	ldr	r3, [r7, #16]
 8006b26:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 8006b2a:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 4U);
 8006b2c:	687b      	ldr	r3, [r7, #4]
 8006b2e:	011b      	lsls	r3, r3, #4
 8006b30:	693a      	ldr	r2, [r7, #16]
 8006b32:	4313      	orrs	r3, r2
 8006b34:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC1E Bit */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 8006b36:	697b      	ldr	r3, [r7, #20]
 8006b38:	f023 030a 	bic.w	r3, r3, #10
 8006b3c:	617b      	str	r3, [r7, #20]
  tmpccer |= TIM_ICPolarity;
 8006b3e:	697a      	ldr	r2, [r7, #20]
 8006b40:	68bb      	ldr	r3, [r7, #8]
 8006b42:	4313      	orrs	r3, r2
 8006b44:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1;
 8006b46:	68fb      	ldr	r3, [r7, #12]
 8006b48:	693a      	ldr	r2, [r7, #16]
 8006b4a:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8006b4c:	68fb      	ldr	r3, [r7, #12]
 8006b4e:	697a      	ldr	r2, [r7, #20]
 8006b50:	621a      	str	r2, [r3, #32]
}
 8006b52:	bf00      	nop
 8006b54:	371c      	adds	r7, #28
 8006b56:	46bd      	mov	sp, r7
 8006b58:	bc80      	pop	{r7}
 8006b5a:	4770      	bx	lr

08006b5c <TIM_TI2_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI2_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 8006b5c:	b480      	push	{r7}
 8006b5e:	b087      	sub	sp, #28
 8006b60:	af00      	add	r7, sp, #0
 8006b62:	60f8      	str	r0, [r7, #12]
 8006b64:	60b9      	str	r1, [r7, #8]
 8006b66:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 8006b68:	68fb      	ldr	r3, [r7, #12]
 8006b6a:	6a1b      	ldr	r3, [r3, #32]
 8006b6c:	f023 0210 	bic.w	r2, r3, #16
 8006b70:	68fb      	ldr	r3, [r7, #12]
 8006b72:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8006b74:	68fb      	ldr	r3, [r7, #12]
 8006b76:	699b      	ldr	r3, [r3, #24]
 8006b78:	617b      	str	r3, [r7, #20]
  tmpccer = TIMx->CCER;
 8006b7a:	68fb      	ldr	r3, [r7, #12]
 8006b7c:	6a1b      	ldr	r3, [r3, #32]
 8006b7e:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 8006b80:	697b      	ldr	r3, [r7, #20]
 8006b82:	f423 4370 	bic.w	r3, r3, #61440	; 0xf000
 8006b86:	617b      	str	r3, [r7, #20]
  tmpccmr1 |= (TIM_ICFilter << 12U);
 8006b88:	687b      	ldr	r3, [r7, #4]
 8006b8a:	031b      	lsls	r3, r3, #12
 8006b8c:	697a      	ldr	r2, [r7, #20]
 8006b8e:	4313      	orrs	r3, r2
 8006b90:	617b      	str	r3, [r7, #20]

  /* Select the Polarity and set the CC2E Bit */
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 8006b92:	693b      	ldr	r3, [r7, #16]
 8006b94:	f023 03a0 	bic.w	r3, r3, #160	; 0xa0
 8006b98:	613b      	str	r3, [r7, #16]
  tmpccer |= (TIM_ICPolarity << 4U);
 8006b9a:	68bb      	ldr	r3, [r7, #8]
 8006b9c:	011b      	lsls	r3, r3, #4
 8006b9e:	693a      	ldr	r2, [r7, #16]
 8006ba0:	4313      	orrs	r3, r2
 8006ba2:	613b      	str	r3, [r7, #16]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1 ;
 8006ba4:	68fb      	ldr	r3, [r7, #12]
 8006ba6:	697a      	ldr	r2, [r7, #20]
 8006ba8:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8006baa:	68fb      	ldr	r3, [r7, #12]
 8006bac:	693a      	ldr	r2, [r7, #16]
 8006bae:	621a      	str	r2, [r3, #32]
}
 8006bb0:	bf00      	nop
 8006bb2:	371c      	adds	r7, #28
 8006bb4:	46bd      	mov	sp, r7
 8006bb6:	bc80      	pop	{r7}
 8006bb8:	4770      	bx	lr

08006bba <TIM_ITRx_SetConfig>:
  *            @arg TIM_TS_TI2FP2: Filtered Timer Input 2
  *            @arg TIM_TS_ETRF: External Trigger input
  * @retval None
  */
static void TIM_ITRx_SetConfig(TIM_TypeDef *TIMx, uint32_t InputTriggerSource)
{
 8006bba:	b480      	push	{r7}
 8006bbc:	b085      	sub	sp, #20
 8006bbe:	af00      	add	r7, sp, #0
 8006bc0:	6078      	str	r0, [r7, #4]
 8006bc2:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Get the TIMx SMCR register value */
  tmpsmcr = TIMx->SMCR;
 8006bc4:	687b      	ldr	r3, [r7, #4]
 8006bc6:	689b      	ldr	r3, [r3, #8]
 8006bc8:	60fb      	str	r3, [r7, #12]
  /* Reset the TS Bits */
  tmpsmcr &= ~TIM_SMCR_TS;
 8006bca:	68fb      	ldr	r3, [r7, #12]
 8006bcc:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8006bd0:	60fb      	str	r3, [r7, #12]
  /* Set the Input Trigger source and the slave mode*/
  tmpsmcr |= (InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1);
 8006bd2:	683a      	ldr	r2, [r7, #0]
 8006bd4:	68fb      	ldr	r3, [r7, #12]
 8006bd6:	4313      	orrs	r3, r2
 8006bd8:	f043 0307 	orr.w	r3, r3, #7
 8006bdc:	60fb      	str	r3, [r7, #12]
  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 8006bde:	687b      	ldr	r3, [r7, #4]
 8006be0:	68fa      	ldr	r2, [r7, #12]
 8006be2:	609a      	str	r2, [r3, #8]
}
 8006be4:	bf00      	nop
 8006be6:	3714      	adds	r7, #20
 8006be8:	46bd      	mov	sp, r7
 8006bea:	bc80      	pop	{r7}
 8006bec:	4770      	bx	lr

08006bee <TIM_ETR_SetConfig>:
  *          This parameter must be a value between 0x00 and 0x0F
  * @retval None
  */
void TIM_ETR_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ExtTRGPrescaler,
                       uint32_t TIM_ExtTRGPolarity, uint32_t ExtTRGFilter)
{
 8006bee:	b480      	push	{r7}
 8006bf0:	b087      	sub	sp, #28
 8006bf2:	af00      	add	r7, sp, #0
 8006bf4:	60f8      	str	r0, [r7, #12]
 8006bf6:	60b9      	str	r1, [r7, #8]
 8006bf8:	607a      	str	r2, [r7, #4]
 8006bfa:	603b      	str	r3, [r7, #0]
  uint32_t tmpsmcr;

  tmpsmcr = TIMx->SMCR;
 8006bfc:	68fb      	ldr	r3, [r7, #12]
 8006bfe:	689b      	ldr	r3, [r3, #8]
 8006c00:	617b      	str	r3, [r7, #20]

  /* Reset the ETR Bits */
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8006c02:	697b      	ldr	r3, [r7, #20]
 8006c04:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 8006c08:	617b      	str	r3, [r7, #20]

  /* Set the Prescaler, the Filter value and the Polarity */
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8U)));
 8006c0a:	683b      	ldr	r3, [r7, #0]
 8006c0c:	021a      	lsls	r2, r3, #8
 8006c0e:	687b      	ldr	r3, [r7, #4]
 8006c10:	431a      	orrs	r2, r3
 8006c12:	68bb      	ldr	r3, [r7, #8]
 8006c14:	4313      	orrs	r3, r2
 8006c16:	697a      	ldr	r2, [r7, #20]
 8006c18:	4313      	orrs	r3, r2
 8006c1a:	617b      	str	r3, [r7, #20]

  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 8006c1c:	68fb      	ldr	r3, [r7, #12]
 8006c1e:	697a      	ldr	r2, [r7, #20]
 8006c20:	609a      	str	r2, [r3, #8]
}
 8006c22:	bf00      	nop
 8006c24:	371c      	adds	r7, #28
 8006c26:	46bd      	mov	sp, r7
 8006c28:	bc80      	pop	{r7}
 8006c2a:	4770      	bx	lr

08006c2c <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        TIM_MasterConfigTypeDef *sMasterConfig)
{
 8006c2c:	b480      	push	{r7}
 8006c2e:	b085      	sub	sp, #20
 8006c30:	af00      	add	r7, sp, #0
 8006c32:	6078      	str	r0, [r7, #4]
 8006c34:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 8006c36:	687b      	ldr	r3, [r7, #4]
 8006c38:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8006c3c:	2b01      	cmp	r3, #1
 8006c3e:	d101      	bne.n	8006c44 <HAL_TIMEx_MasterConfigSynchronization+0x18>
 8006c40:	2302      	movs	r3, #2
 8006c42:	e046      	b.n	8006cd2 <HAL_TIMEx_MasterConfigSynchronization+0xa6>
 8006c44:	687b      	ldr	r3, [r7, #4]
 8006c46:	2201      	movs	r2, #1
 8006c48:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 8006c4c:	687b      	ldr	r3, [r7, #4]
 8006c4e:	2202      	movs	r2, #2
 8006c50:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 8006c54:	687b      	ldr	r3, [r7, #4]
 8006c56:	681b      	ldr	r3, [r3, #0]
 8006c58:	685b      	ldr	r3, [r3, #4]
 8006c5a:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 8006c5c:	687b      	ldr	r3, [r7, #4]
 8006c5e:	681b      	ldr	r3, [r3, #0]
 8006c60:	689b      	ldr	r3, [r3, #8]
 8006c62:	60bb      	str	r3, [r7, #8]

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 8006c64:	68fb      	ldr	r3, [r7, #12]
 8006c66:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8006c6a:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 8006c6c:	683b      	ldr	r3, [r7, #0]
 8006c6e:	681b      	ldr	r3, [r3, #0]
 8006c70:	68fa      	ldr	r2, [r7, #12]
 8006c72:	4313      	orrs	r3, r2
 8006c74:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 8006c76:	687b      	ldr	r3, [r7, #4]
 8006c78:	681b      	ldr	r3, [r3, #0]
 8006c7a:	68fa      	ldr	r2, [r7, #12]
 8006c7c:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8006c7e:	687b      	ldr	r3, [r7, #4]
 8006c80:	681b      	ldr	r3, [r3, #0]
 8006c82:	4a16      	ldr	r2, [pc, #88]	; (8006cdc <HAL_TIMEx_MasterConfigSynchronization+0xb0>)
 8006c84:	4293      	cmp	r3, r2
 8006c86:	d00e      	beq.n	8006ca6 <HAL_TIMEx_MasterConfigSynchronization+0x7a>
 8006c88:	687b      	ldr	r3, [r7, #4]
 8006c8a:	681b      	ldr	r3, [r3, #0]
 8006c8c:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8006c90:	d009      	beq.n	8006ca6 <HAL_TIMEx_MasterConfigSynchronization+0x7a>
 8006c92:	687b      	ldr	r3, [r7, #4]
 8006c94:	681b      	ldr	r3, [r3, #0]
 8006c96:	4a12      	ldr	r2, [pc, #72]	; (8006ce0 <HAL_TIMEx_MasterConfigSynchronization+0xb4>)
 8006c98:	4293      	cmp	r3, r2
 8006c9a:	d004      	beq.n	8006ca6 <HAL_TIMEx_MasterConfigSynchronization+0x7a>
 8006c9c:	687b      	ldr	r3, [r7, #4]
 8006c9e:	681b      	ldr	r3, [r3, #0]
 8006ca0:	4a10      	ldr	r2, [pc, #64]	; (8006ce4 <HAL_TIMEx_MasterConfigSynchronization+0xb8>)
 8006ca2:	4293      	cmp	r3, r2
 8006ca4:	d10c      	bne.n	8006cc0 <HAL_TIMEx_MasterConfigSynchronization+0x94>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 8006ca6:	68bb      	ldr	r3, [r7, #8]
 8006ca8:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8006cac:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 8006cae:	683b      	ldr	r3, [r7, #0]
 8006cb0:	685b      	ldr	r3, [r3, #4]
 8006cb2:	68ba      	ldr	r2, [r7, #8]
 8006cb4:	4313      	orrs	r3, r2
 8006cb6:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 8006cb8:	687b      	ldr	r3, [r7, #4]
 8006cba:	681b      	ldr	r3, [r3, #0]
 8006cbc:	68ba      	ldr	r2, [r7, #8]
 8006cbe:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 8006cc0:	687b      	ldr	r3, [r7, #4]
 8006cc2:	2201      	movs	r2, #1
 8006cc4:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 8006cc8:	687b      	ldr	r3, [r7, #4]
 8006cca:	2200      	movs	r2, #0
 8006ccc:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 8006cd0:	2300      	movs	r3, #0
}
 8006cd2:	4618      	mov	r0, r3
 8006cd4:	3714      	adds	r7, #20
 8006cd6:	46bd      	mov	sp, r7
 8006cd8:	bc80      	pop	{r7}
 8006cda:	4770      	bx	lr
 8006cdc:	40012c00 	.word	0x40012c00
 8006ce0:	40000400 	.word	0x40000400
 8006ce4:	40000800 	.word	0x40000800

08006ce8 <HAL_UART_Init>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 8006ce8:	b580      	push	{r7, lr}
 8006cea:	b082      	sub	sp, #8
 8006cec:	af00      	add	r7, sp, #0
 8006cee:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 8006cf0:	687b      	ldr	r3, [r7, #4]
 8006cf2:	2b00      	cmp	r3, #0
 8006cf4:	d101      	bne.n	8006cfa <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 8006cf6:	2301      	movs	r3, #1
 8006cf8:	e03f      	b.n	8006d7a <HAL_UART_Init+0x92>
  assert_param(IS_UART_WORD_LENGTH(huart->Init.WordLength));
#if defined(USART_CR1_OVER8)
  assert_param(IS_UART_OVERSAMPLING(huart->Init.OverSampling));
#endif /* USART_CR1_OVER8 */

  if (huart->gState == HAL_UART_STATE_RESET)
 8006cfa:	687b      	ldr	r3, [r7, #4]
 8006cfc:	f893 3039 	ldrb.w	r3, [r3, #57]	; 0x39
 8006d00:	b2db      	uxtb	r3, r3
 8006d02:	2b00      	cmp	r3, #0
 8006d04:	d106      	bne.n	8006d14 <HAL_UART_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 8006d06:	687b      	ldr	r3, [r7, #4]
 8006d08:	2200      	movs	r2, #0
 8006d0a:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 8006d0e:	6878      	ldr	r0, [r7, #4]
 8006d10:	f7fc ff1a 	bl	8003b48 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 8006d14:	687b      	ldr	r3, [r7, #4]
 8006d16:	2224      	movs	r2, #36	; 0x24
 8006d18:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39

  /* Disable the peripheral */
  __HAL_UART_DISABLE(huart);
 8006d1c:	687b      	ldr	r3, [r7, #4]
 8006d1e:	681b      	ldr	r3, [r3, #0]
 8006d20:	68da      	ldr	r2, [r3, #12]
 8006d22:	687b      	ldr	r3, [r7, #4]
 8006d24:	681b      	ldr	r3, [r3, #0]
 8006d26:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 8006d2a:	60da      	str	r2, [r3, #12]

  /* Set the UART Communication parameters */
  UART_SetConfig(huart);
 8006d2c:	6878      	ldr	r0, [r7, #4]
 8006d2e:	f000 fb39 	bl	80073a4 <UART_SetConfig>

  /* In asynchronous mode, the following bits must be kept cleared:
     - LINEN and CLKEN bits in the USART_CR2 register,
     - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 8006d32:	687b      	ldr	r3, [r7, #4]
 8006d34:	681b      	ldr	r3, [r3, #0]
 8006d36:	691a      	ldr	r2, [r3, #16]
 8006d38:	687b      	ldr	r3, [r7, #4]
 8006d3a:	681b      	ldr	r3, [r3, #0]
 8006d3c:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 8006d40:	611a      	str	r2, [r3, #16]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 8006d42:	687b      	ldr	r3, [r7, #4]
 8006d44:	681b      	ldr	r3, [r3, #0]
 8006d46:	695a      	ldr	r2, [r3, #20]
 8006d48:	687b      	ldr	r3, [r7, #4]
 8006d4a:	681b      	ldr	r3, [r3, #0]
 8006d4c:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 8006d50:	615a      	str	r2, [r3, #20]

  /* Enable the peripheral */
  __HAL_UART_ENABLE(huart);
 8006d52:	687b      	ldr	r3, [r7, #4]
 8006d54:	681b      	ldr	r3, [r3, #0]
 8006d56:	68da      	ldr	r2, [r3, #12]
 8006d58:	687b      	ldr	r3, [r7, #4]
 8006d5a:	681b      	ldr	r3, [r3, #0]
 8006d5c:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 8006d60:	60da      	str	r2, [r3, #12]

  /* Initialize the UART state */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8006d62:	687b      	ldr	r3, [r7, #4]
 8006d64:	2200      	movs	r2, #0
 8006d66:	63da      	str	r2, [r3, #60]	; 0x3c
  huart->gState = HAL_UART_STATE_READY;
 8006d68:	687b      	ldr	r3, [r7, #4]
 8006d6a:	2220      	movs	r2, #32
 8006d6c:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39
  huart->RxState = HAL_UART_STATE_READY;
 8006d70:	687b      	ldr	r3, [r7, #4]
 8006d72:	2220      	movs	r2, #32
 8006d74:	f883 203a 	strb.w	r2, [r3, #58]	; 0x3a

  return HAL_OK;
 8006d78:	2300      	movs	r3, #0
}
 8006d7a:	4618      	mov	r0, r3
 8006d7c:	3708      	adds	r7, #8
 8006d7e:	46bd      	mov	sp, r7
 8006d80:	bd80      	pop	{r7, pc}

08006d82 <HAL_UART_Transmit>:
  * @param  Size  Amount of data elements (u8 or u16) to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8006d82:	b580      	push	{r7, lr}
 8006d84:	b08a      	sub	sp, #40	; 0x28
 8006d86:	af02      	add	r7, sp, #8
 8006d88:	60f8      	str	r0, [r7, #12]
 8006d8a:	60b9      	str	r1, [r7, #8]
 8006d8c:	603b      	str	r3, [r7, #0]
 8006d8e:	4613      	mov	r3, r2
 8006d90:	80fb      	strh	r3, [r7, #6]
  uint8_t  *pdata8bits;
  uint16_t *pdata16bits;
  uint32_t tickstart = 0U;
 8006d92:	2300      	movs	r3, #0
 8006d94:	617b      	str	r3, [r7, #20]

  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 8006d96:	68fb      	ldr	r3, [r7, #12]
 8006d98:	f893 3039 	ldrb.w	r3, [r3, #57]	; 0x39
 8006d9c:	b2db      	uxtb	r3, r3
 8006d9e:	2b20      	cmp	r3, #32
 8006da0:	d17c      	bne.n	8006e9c <HAL_UART_Transmit+0x11a>
  {
    if ((pData == NULL) || (Size == 0U))
 8006da2:	68bb      	ldr	r3, [r7, #8]
 8006da4:	2b00      	cmp	r3, #0
 8006da6:	d002      	beq.n	8006dae <HAL_UART_Transmit+0x2c>
 8006da8:	88fb      	ldrh	r3, [r7, #6]
 8006daa:	2b00      	cmp	r3, #0
 8006dac:	d101      	bne.n	8006db2 <HAL_UART_Transmit+0x30>
    {
      return  HAL_ERROR;
 8006dae:	2301      	movs	r3, #1
 8006db0:	e075      	b.n	8006e9e <HAL_UART_Transmit+0x11c>
    }

    /* Process Locked */
    __HAL_LOCK(huart);
 8006db2:	68fb      	ldr	r3, [r7, #12]
 8006db4:	f893 3038 	ldrb.w	r3, [r3, #56]	; 0x38
 8006db8:	2b01      	cmp	r3, #1
 8006dba:	d101      	bne.n	8006dc0 <HAL_UART_Transmit+0x3e>
 8006dbc:	2302      	movs	r3, #2
 8006dbe:	e06e      	b.n	8006e9e <HAL_UART_Transmit+0x11c>
 8006dc0:	68fb      	ldr	r3, [r7, #12]
 8006dc2:	2201      	movs	r2, #1
 8006dc4:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 8006dc8:	68fb      	ldr	r3, [r7, #12]
 8006dca:	2200      	movs	r2, #0
 8006dcc:	63da      	str	r2, [r3, #60]	; 0x3c
    huart->gState = HAL_UART_STATE_BUSY_TX;
 8006dce:	68fb      	ldr	r3, [r7, #12]
 8006dd0:	2221      	movs	r2, #33	; 0x21
 8006dd2:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39

    /* Init tickstart for timeout managment */
    tickstart = HAL_GetTick();
 8006dd6:	f7fc ffff 	bl	8003dd8 <HAL_GetTick>
 8006dda:	6178      	str	r0, [r7, #20]

    huart->TxXferSize = Size;
 8006ddc:	68fb      	ldr	r3, [r7, #12]
 8006dde:	88fa      	ldrh	r2, [r7, #6]
 8006de0:	849a      	strh	r2, [r3, #36]	; 0x24
    huart->TxXferCount = Size;
 8006de2:	68fb      	ldr	r3, [r7, #12]
 8006de4:	88fa      	ldrh	r2, [r7, #6]
 8006de6:	84da      	strh	r2, [r3, #38]	; 0x26

    /* In case of 9bits/No Parity transfer, pData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8006de8:	68fb      	ldr	r3, [r7, #12]
 8006dea:	689b      	ldr	r3, [r3, #8]
 8006dec:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8006df0:	d108      	bne.n	8006e04 <HAL_UART_Transmit+0x82>
 8006df2:	68fb      	ldr	r3, [r7, #12]
 8006df4:	691b      	ldr	r3, [r3, #16]
 8006df6:	2b00      	cmp	r3, #0
 8006df8:	d104      	bne.n	8006e04 <HAL_UART_Transmit+0x82>
    {
      pdata8bits  = NULL;
 8006dfa:	2300      	movs	r3, #0
 8006dfc:	61fb      	str	r3, [r7, #28]
      pdata16bits = (uint16_t *) pData;
 8006dfe:	68bb      	ldr	r3, [r7, #8]
 8006e00:	61bb      	str	r3, [r7, #24]
 8006e02:	e003      	b.n	8006e0c <HAL_UART_Transmit+0x8a>
    }
    else
    {
      pdata8bits  = pData;
 8006e04:	68bb      	ldr	r3, [r7, #8]
 8006e06:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 8006e08:	2300      	movs	r3, #0
 8006e0a:	61bb      	str	r3, [r7, #24]
    }

    /* Process Unlocked */
    __HAL_UNLOCK(huart);
 8006e0c:	68fb      	ldr	r3, [r7, #12]
 8006e0e:	2200      	movs	r2, #0
 8006e10:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38

    while (huart->TxXferCount > 0U)
 8006e14:	e02a      	b.n	8006e6c <HAL_UART_Transmit+0xea>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 8006e16:	683b      	ldr	r3, [r7, #0]
 8006e18:	9300      	str	r3, [sp, #0]
 8006e1a:	697b      	ldr	r3, [r7, #20]
 8006e1c:	2200      	movs	r2, #0
 8006e1e:	2180      	movs	r1, #128	; 0x80
 8006e20:	68f8      	ldr	r0, [r7, #12]
 8006e22:	f000 f95c 	bl	80070de <UART_WaitOnFlagUntilTimeout>
 8006e26:	4603      	mov	r3, r0
 8006e28:	2b00      	cmp	r3, #0
 8006e2a:	d001      	beq.n	8006e30 <HAL_UART_Transmit+0xae>
      {
        return HAL_TIMEOUT;
 8006e2c:	2303      	movs	r3, #3
 8006e2e:	e036      	b.n	8006e9e <HAL_UART_Transmit+0x11c>
      }
      if (pdata8bits == NULL)
 8006e30:	69fb      	ldr	r3, [r7, #28]
 8006e32:	2b00      	cmp	r3, #0
 8006e34:	d10b      	bne.n	8006e4e <HAL_UART_Transmit+0xcc>
      {
        huart->Instance->DR = (uint16_t)(*pdata16bits & 0x01FFU);
 8006e36:	69bb      	ldr	r3, [r7, #24]
 8006e38:	881b      	ldrh	r3, [r3, #0]
 8006e3a:	461a      	mov	r2, r3
 8006e3c:	68fb      	ldr	r3, [r7, #12]
 8006e3e:	681b      	ldr	r3, [r3, #0]
 8006e40:	f3c2 0208 	ubfx	r2, r2, #0, #9
 8006e44:	605a      	str	r2, [r3, #4]
        pdata16bits++;
 8006e46:	69bb      	ldr	r3, [r7, #24]
 8006e48:	3302      	adds	r3, #2
 8006e4a:	61bb      	str	r3, [r7, #24]
 8006e4c:	e007      	b.n	8006e5e <HAL_UART_Transmit+0xdc>
      }
      else
      {
        huart->Instance->DR = (uint8_t)(*pdata8bits & 0xFFU);
 8006e4e:	69fb      	ldr	r3, [r7, #28]
 8006e50:	781a      	ldrb	r2, [r3, #0]
 8006e52:	68fb      	ldr	r3, [r7, #12]
 8006e54:	681b      	ldr	r3, [r3, #0]
 8006e56:	605a      	str	r2, [r3, #4]
        pdata8bits++;
 8006e58:	69fb      	ldr	r3, [r7, #28]
 8006e5a:	3301      	adds	r3, #1
 8006e5c:	61fb      	str	r3, [r7, #28]
      }
      huart->TxXferCount--;
 8006e5e:	68fb      	ldr	r3, [r7, #12]
 8006e60:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
 8006e62:	b29b      	uxth	r3, r3
 8006e64:	3b01      	subs	r3, #1
 8006e66:	b29a      	uxth	r2, r3
 8006e68:	68fb      	ldr	r3, [r7, #12]
 8006e6a:	84da      	strh	r2, [r3, #38]	; 0x26
    while (huart->TxXferCount > 0U)
 8006e6c:	68fb      	ldr	r3, [r7, #12]
 8006e6e:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
 8006e70:	b29b      	uxth	r3, r3
 8006e72:	2b00      	cmp	r3, #0
 8006e74:	d1cf      	bne.n	8006e16 <HAL_UART_Transmit+0x94>
    }

    if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TC, RESET, tickstart, Timeout) != HAL_OK)
 8006e76:	683b      	ldr	r3, [r7, #0]
 8006e78:	9300      	str	r3, [sp, #0]
 8006e7a:	697b      	ldr	r3, [r7, #20]
 8006e7c:	2200      	movs	r2, #0
 8006e7e:	2140      	movs	r1, #64	; 0x40
 8006e80:	68f8      	ldr	r0, [r7, #12]
 8006e82:	f000 f92c 	bl	80070de <UART_WaitOnFlagUntilTimeout>
 8006e86:	4603      	mov	r3, r0
 8006e88:	2b00      	cmp	r3, #0
 8006e8a:	d001      	beq.n	8006e90 <HAL_UART_Transmit+0x10e>
    {
      return HAL_TIMEOUT;
 8006e8c:	2303      	movs	r3, #3
 8006e8e:	e006      	b.n	8006e9e <HAL_UART_Transmit+0x11c>
    }

    /* At end of Tx process, restore huart->gState to Ready */
    huart->gState = HAL_UART_STATE_READY;
 8006e90:	68fb      	ldr	r3, [r7, #12]
 8006e92:	2220      	movs	r2, #32
 8006e94:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39

    return HAL_OK;
 8006e98:	2300      	movs	r3, #0
 8006e9a:	e000      	b.n	8006e9e <HAL_UART_Transmit+0x11c>
  }
  else
  {
    return HAL_BUSY;
 8006e9c:	2302      	movs	r3, #2
  }
}
 8006e9e:	4618      	mov	r0, r3
 8006ea0:	3720      	adds	r7, #32
 8006ea2:	46bd      	mov	sp, r7
 8006ea4:	bd80      	pop	{r7, pc}
	...

08006ea8 <HAL_UART_IRQHandler>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
void HAL_UART_IRQHandler(UART_HandleTypeDef *huart)
{
 8006ea8:	b580      	push	{r7, lr}
 8006eaa:	b088      	sub	sp, #32
 8006eac:	af00      	add	r7, sp, #0
 8006eae:	6078      	str	r0, [r7, #4]
  uint32_t isrflags   = READ_REG(huart->Instance->SR);
 8006eb0:	687b      	ldr	r3, [r7, #4]
 8006eb2:	681b      	ldr	r3, [r3, #0]
 8006eb4:	681b      	ldr	r3, [r3, #0]
 8006eb6:	61fb      	str	r3, [r7, #28]
  uint32_t cr1its     = READ_REG(huart->Instance->CR1);
 8006eb8:	687b      	ldr	r3, [r7, #4]
 8006eba:	681b      	ldr	r3, [r3, #0]
 8006ebc:	68db      	ldr	r3, [r3, #12]
 8006ebe:	61bb      	str	r3, [r7, #24]
  uint32_t cr3its     = READ_REG(huart->Instance->CR3);
 8006ec0:	687b      	ldr	r3, [r7, #4]
 8006ec2:	681b      	ldr	r3, [r3, #0]
 8006ec4:	695b      	ldr	r3, [r3, #20]
 8006ec6:	617b      	str	r3, [r7, #20]
  uint32_t errorflags = 0x00U;
 8006ec8:	2300      	movs	r3, #0
 8006eca:	613b      	str	r3, [r7, #16]
  uint32_t dmarequest = 0x00U;
 8006ecc:	2300      	movs	r3, #0
 8006ece:	60fb      	str	r3, [r7, #12]

  /* If no error occurs */
  errorflags = (isrflags & (uint32_t)(USART_SR_PE | USART_SR_FE | USART_SR_ORE | USART_SR_NE));
 8006ed0:	69fb      	ldr	r3, [r7, #28]
 8006ed2:	f003 030f 	and.w	r3, r3, #15
 8006ed6:	613b      	str	r3, [r7, #16]
  if (errorflags == RESET)
 8006ed8:	693b      	ldr	r3, [r7, #16]
 8006eda:	2b00      	cmp	r3, #0
 8006edc:	d10d      	bne.n	8006efa <HAL_UART_IRQHandler+0x52>
  {
    /* UART in mode Receiver -------------------------------------------------*/
    if (((isrflags & USART_SR_RXNE) != RESET) && ((cr1its & USART_CR1_RXNEIE) != RESET))
 8006ede:	69fb      	ldr	r3, [r7, #28]
 8006ee0:	f003 0320 	and.w	r3, r3, #32
 8006ee4:	2b00      	cmp	r3, #0
 8006ee6:	d008      	beq.n	8006efa <HAL_UART_IRQHandler+0x52>
 8006ee8:	69bb      	ldr	r3, [r7, #24]
 8006eea:	f003 0320 	and.w	r3, r3, #32
 8006eee:	2b00      	cmp	r3, #0
 8006ef0:	d003      	beq.n	8006efa <HAL_UART_IRQHandler+0x52>
    {
      UART_Receive_IT(huart);
 8006ef2:	6878      	ldr	r0, [r7, #4]
 8006ef4:	f000 f9d5 	bl	80072a2 <UART_Receive_IT>
      return;
 8006ef8:	e0d1      	b.n	800709e <HAL_UART_IRQHandler+0x1f6>
    }
  }

  /* If some errors occur */
  if ((errorflags != RESET) && (((cr3its & USART_CR3_EIE) != RESET) || ((cr1its & (USART_CR1_RXNEIE | USART_CR1_PEIE)) != RESET)))
 8006efa:	693b      	ldr	r3, [r7, #16]
 8006efc:	2b00      	cmp	r3, #0
 8006efe:	f000 80b0 	beq.w	8007062 <HAL_UART_IRQHandler+0x1ba>
 8006f02:	697b      	ldr	r3, [r7, #20]
 8006f04:	f003 0301 	and.w	r3, r3, #1
 8006f08:	2b00      	cmp	r3, #0
 8006f0a:	d105      	bne.n	8006f18 <HAL_UART_IRQHandler+0x70>
 8006f0c:	69bb      	ldr	r3, [r7, #24]
 8006f0e:	f403 7390 	and.w	r3, r3, #288	; 0x120
 8006f12:	2b00      	cmp	r3, #0
 8006f14:	f000 80a5 	beq.w	8007062 <HAL_UART_IRQHandler+0x1ba>
  {
    /* UART parity error interrupt occurred ----------------------------------*/
    if (((isrflags & USART_SR_PE) != RESET) && ((cr1its & USART_CR1_PEIE) != RESET))
 8006f18:	69fb      	ldr	r3, [r7, #28]
 8006f1a:	f003 0301 	and.w	r3, r3, #1
 8006f1e:	2b00      	cmp	r3, #0
 8006f20:	d00a      	beq.n	8006f38 <HAL_UART_IRQHandler+0x90>
 8006f22:	69bb      	ldr	r3, [r7, #24]
 8006f24:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8006f28:	2b00      	cmp	r3, #0
 8006f2a:	d005      	beq.n	8006f38 <HAL_UART_IRQHandler+0x90>
    {
      huart->ErrorCode |= HAL_UART_ERROR_PE;
 8006f2c:	687b      	ldr	r3, [r7, #4]
 8006f2e:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8006f30:	f043 0201 	orr.w	r2, r3, #1
 8006f34:	687b      	ldr	r3, [r7, #4]
 8006f36:	63da      	str	r2, [r3, #60]	; 0x3c
    }

    /* UART noise error interrupt occurred -----------------------------------*/
    if (((isrflags & USART_SR_NE) != RESET) && ((cr3its & USART_CR3_EIE) != RESET))
 8006f38:	69fb      	ldr	r3, [r7, #28]
 8006f3a:	f003 0304 	and.w	r3, r3, #4
 8006f3e:	2b00      	cmp	r3, #0
 8006f40:	d00a      	beq.n	8006f58 <HAL_UART_IRQHandler+0xb0>
 8006f42:	697b      	ldr	r3, [r7, #20]
 8006f44:	f003 0301 	and.w	r3, r3, #1
 8006f48:	2b00      	cmp	r3, #0
 8006f4a:	d005      	beq.n	8006f58 <HAL_UART_IRQHandler+0xb0>
    {
      huart->ErrorCode |= HAL_UART_ERROR_NE;
 8006f4c:	687b      	ldr	r3, [r7, #4]
 8006f4e:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8006f50:	f043 0202 	orr.w	r2, r3, #2
 8006f54:	687b      	ldr	r3, [r7, #4]
 8006f56:	63da      	str	r2, [r3, #60]	; 0x3c
    }

    /* UART frame error interrupt occurred -----------------------------------*/
    if (((isrflags & USART_SR_FE) != RESET) && ((cr3its & USART_CR3_EIE) != RESET))
 8006f58:	69fb      	ldr	r3, [r7, #28]
 8006f5a:	f003 0302 	and.w	r3, r3, #2
 8006f5e:	2b00      	cmp	r3, #0
 8006f60:	d00a      	beq.n	8006f78 <HAL_UART_IRQHandler+0xd0>
 8006f62:	697b      	ldr	r3, [r7, #20]
 8006f64:	f003 0301 	and.w	r3, r3, #1
 8006f68:	2b00      	cmp	r3, #0
 8006f6a:	d005      	beq.n	8006f78 <HAL_UART_IRQHandler+0xd0>
    {
      huart->ErrorCode |= HAL_UART_ERROR_FE;
 8006f6c:	687b      	ldr	r3, [r7, #4]
 8006f6e:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8006f70:	f043 0204 	orr.w	r2, r3, #4
 8006f74:	687b      	ldr	r3, [r7, #4]
 8006f76:	63da      	str	r2, [r3, #60]	; 0x3c
    }

    /* UART Over-Run interrupt occurred --------------------------------------*/
    if (((isrflags & USART_SR_ORE) != RESET) && (((cr1its & USART_CR1_RXNEIE) != RESET) || ((cr3its & USART_CR3_EIE) != RESET)))
 8006f78:	69fb      	ldr	r3, [r7, #28]
 8006f7a:	f003 0308 	and.w	r3, r3, #8
 8006f7e:	2b00      	cmp	r3, #0
 8006f80:	d00f      	beq.n	8006fa2 <HAL_UART_IRQHandler+0xfa>
 8006f82:	69bb      	ldr	r3, [r7, #24]
 8006f84:	f003 0320 	and.w	r3, r3, #32
 8006f88:	2b00      	cmp	r3, #0
 8006f8a:	d104      	bne.n	8006f96 <HAL_UART_IRQHandler+0xee>
 8006f8c:	697b      	ldr	r3, [r7, #20]
 8006f8e:	f003 0301 	and.w	r3, r3, #1
 8006f92:	2b00      	cmp	r3, #0
 8006f94:	d005      	beq.n	8006fa2 <HAL_UART_IRQHandler+0xfa>
    {
      huart->ErrorCode |= HAL_UART_ERROR_ORE;
 8006f96:	687b      	ldr	r3, [r7, #4]
 8006f98:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8006f9a:	f043 0208 	orr.w	r2, r3, #8
 8006f9e:	687b      	ldr	r3, [r7, #4]
 8006fa0:	63da      	str	r2, [r3, #60]	; 0x3c
    }

    /* Call UART Error Call back function if need be --------------------------*/
    if (huart->ErrorCode != HAL_UART_ERROR_NONE)
 8006fa2:	687b      	ldr	r3, [r7, #4]
 8006fa4:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8006fa6:	2b00      	cmp	r3, #0
 8006fa8:	d078      	beq.n	800709c <HAL_UART_IRQHandler+0x1f4>
    {
      /* UART in mode Receiver -----------------------------------------------*/
      if (((isrflags & USART_SR_RXNE) != RESET) && ((cr1its & USART_CR1_RXNEIE) != RESET))
 8006faa:	69fb      	ldr	r3, [r7, #28]
 8006fac:	f003 0320 	and.w	r3, r3, #32
 8006fb0:	2b00      	cmp	r3, #0
 8006fb2:	d007      	beq.n	8006fc4 <HAL_UART_IRQHandler+0x11c>
 8006fb4:	69bb      	ldr	r3, [r7, #24]
 8006fb6:	f003 0320 	and.w	r3, r3, #32
 8006fba:	2b00      	cmp	r3, #0
 8006fbc:	d002      	beq.n	8006fc4 <HAL_UART_IRQHandler+0x11c>
      {
        UART_Receive_IT(huart);
 8006fbe:	6878      	ldr	r0, [r7, #4]
 8006fc0:	f000 f96f 	bl	80072a2 <UART_Receive_IT>
      }

      /* If Overrun error occurs, or if any error occurs in DMA mode reception,
         consider error as blocking */
      dmarequest = HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR);
 8006fc4:	687b      	ldr	r3, [r7, #4]
 8006fc6:	681b      	ldr	r3, [r3, #0]
 8006fc8:	695b      	ldr	r3, [r3, #20]
 8006fca:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8006fce:	2b00      	cmp	r3, #0
 8006fd0:	bf14      	ite	ne
 8006fd2:	2301      	movne	r3, #1
 8006fd4:	2300      	moveq	r3, #0
 8006fd6:	b2db      	uxtb	r3, r3
 8006fd8:	60fb      	str	r3, [r7, #12]
      if (((huart->ErrorCode & HAL_UART_ERROR_ORE) != RESET) || dmarequest)
 8006fda:	687b      	ldr	r3, [r7, #4]
 8006fdc:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8006fde:	f003 0308 	and.w	r3, r3, #8
 8006fe2:	2b00      	cmp	r3, #0
 8006fe4:	d102      	bne.n	8006fec <HAL_UART_IRQHandler+0x144>
 8006fe6:	68fb      	ldr	r3, [r7, #12]
 8006fe8:	2b00      	cmp	r3, #0
 8006fea:	d031      	beq.n	8007050 <HAL_UART_IRQHandler+0x1a8>
      {
        /* Blocking error : transfer is aborted
           Set the UART state ready to be able to start again the process,
           Disable Rx Interrupts, and disable Rx DMA request, if ongoing */
        UART_EndRxTransfer(huart);
 8006fec:	6878      	ldr	r0, [r7, #4]
 8006fee:	f000 f8c0 	bl	8007172 <UART_EndRxTransfer>

        /* Disable the UART DMA Rx request if enabled */
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8006ff2:	687b      	ldr	r3, [r7, #4]
 8006ff4:	681b      	ldr	r3, [r3, #0]
 8006ff6:	695b      	ldr	r3, [r3, #20]
 8006ff8:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8006ffc:	2b00      	cmp	r3, #0
 8006ffe:	d023      	beq.n	8007048 <HAL_UART_IRQHandler+0x1a0>
        {
          CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 8007000:	687b      	ldr	r3, [r7, #4]
 8007002:	681b      	ldr	r3, [r3, #0]
 8007004:	695a      	ldr	r2, [r3, #20]
 8007006:	687b      	ldr	r3, [r7, #4]
 8007008:	681b      	ldr	r3, [r3, #0]
 800700a:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 800700e:	615a      	str	r2, [r3, #20]

          /* Abort the UART DMA Rx channel */
          if (huart->hdmarx != NULL)
 8007010:	687b      	ldr	r3, [r7, #4]
 8007012:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8007014:	2b00      	cmp	r3, #0
 8007016:	d013      	beq.n	8007040 <HAL_UART_IRQHandler+0x198>
          {
            /* Set the UART DMA Abort callback :
               will lead to call HAL_UART_ErrorCallback() at end of DMA abort procedure */
            huart->hdmarx->XferAbortCallback = UART_DMAAbortOnError;
 8007018:	687b      	ldr	r3, [r7, #4]
 800701a:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800701c:	4a21      	ldr	r2, [pc, #132]	; (80070a4 <HAL_UART_IRQHandler+0x1fc>)
 800701e:	635a      	str	r2, [r3, #52]	; 0x34
            if (HAL_DMA_Abort_IT(huart->hdmarx) != HAL_OK)
 8007020:	687b      	ldr	r3, [r7, #4]
 8007022:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8007024:	4618      	mov	r0, r3
 8007026:	f7fd f811 	bl	800404c <HAL_DMA_Abort_IT>
 800702a:	4603      	mov	r3, r0
 800702c:	2b00      	cmp	r3, #0
 800702e:	d016      	beq.n	800705e <HAL_UART_IRQHandler+0x1b6>
            {
              /* Call Directly XferAbortCallback function in case of error */
              huart->hdmarx->XferAbortCallback(huart->hdmarx);
 8007030:	687b      	ldr	r3, [r7, #4]
 8007032:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8007034:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8007036:	687a      	ldr	r2, [r7, #4]
 8007038:	6b52      	ldr	r2, [r2, #52]	; 0x34
 800703a:	4610      	mov	r0, r2
 800703c:	4798      	blx	r3
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 800703e:	e00e      	b.n	800705e <HAL_UART_IRQHandler+0x1b6>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
            /*Call registered error callback*/
            huart->ErrorCallback(huart);
#else
            /*Call legacy weak error callback*/
            HAL_UART_ErrorCallback(huart);
 8007040:	6878      	ldr	r0, [r7, #4]
 8007042:	f000 f843 	bl	80070cc <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8007046:	e00a      	b.n	800705e <HAL_UART_IRQHandler+0x1b6>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered error callback*/
          huart->ErrorCallback(huart);
#else
          /*Call legacy weak error callback*/
          HAL_UART_ErrorCallback(huart);
 8007048:	6878      	ldr	r0, [r7, #4]
 800704a:	f000 f83f 	bl	80070cc <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 800704e:	e006      	b.n	800705e <HAL_UART_IRQHandler+0x1b6>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered error callback*/
        huart->ErrorCallback(huart);
#else
        /*Call legacy weak error callback*/
        HAL_UART_ErrorCallback(huart);
 8007050:	6878      	ldr	r0, [r7, #4]
 8007052:	f000 f83b 	bl	80070cc <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */

        huart->ErrorCode = HAL_UART_ERROR_NONE;
 8007056:	687b      	ldr	r3, [r7, #4]
 8007058:	2200      	movs	r2, #0
 800705a:	63da      	str	r2, [r3, #60]	; 0x3c
      }
    }
    return;
 800705c:	e01e      	b.n	800709c <HAL_UART_IRQHandler+0x1f4>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 800705e:	bf00      	nop
    return;
 8007060:	e01c      	b.n	800709c <HAL_UART_IRQHandler+0x1f4>
  } /* End if some error occurs */

  /* UART in mode Transmitter ------------------------------------------------*/
  if (((isrflags & USART_SR_TXE) != RESET) && ((cr1its & USART_CR1_TXEIE) != RESET))
 8007062:	69fb      	ldr	r3, [r7, #28]
 8007064:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8007068:	2b00      	cmp	r3, #0
 800706a:	d008      	beq.n	800707e <HAL_UART_IRQHandler+0x1d6>
 800706c:	69bb      	ldr	r3, [r7, #24]
 800706e:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8007072:	2b00      	cmp	r3, #0
 8007074:	d003      	beq.n	800707e <HAL_UART_IRQHandler+0x1d6>
  {
    UART_Transmit_IT(huart);
 8007076:	6878      	ldr	r0, [r7, #4]
 8007078:	f000 f8ac 	bl	80071d4 <UART_Transmit_IT>
    return;
 800707c:	e00f      	b.n	800709e <HAL_UART_IRQHandler+0x1f6>
  }

  /* UART in mode Transmitter end --------------------------------------------*/
  if (((isrflags & USART_SR_TC) != RESET) && ((cr1its & USART_CR1_TCIE) != RESET))
 800707e:	69fb      	ldr	r3, [r7, #28]
 8007080:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8007084:	2b00      	cmp	r3, #0
 8007086:	d00a      	beq.n	800709e <HAL_UART_IRQHandler+0x1f6>
 8007088:	69bb      	ldr	r3, [r7, #24]
 800708a:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800708e:	2b00      	cmp	r3, #0
 8007090:	d005      	beq.n	800709e <HAL_UART_IRQHandler+0x1f6>
  {
    UART_EndTransmit_IT(huart);
 8007092:	6878      	ldr	r0, [r7, #4]
 8007094:	f000 f8ed 	bl	8007272 <UART_EndTransmit_IT>
    return;
 8007098:	bf00      	nop
 800709a:	e000      	b.n	800709e <HAL_UART_IRQHandler+0x1f6>
    return;
 800709c:	bf00      	nop
  }
}
 800709e:	3720      	adds	r7, #32
 80070a0:	46bd      	mov	sp, r7
 80070a2:	bd80      	pop	{r7, pc}
 80070a4:	080071ad 	.word	0x080071ad

080070a8 <HAL_UART_TxCpltCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_TxCpltCallback(UART_HandleTypeDef *huart)
{
 80070a8:	b480      	push	{r7}
 80070aa:	b083      	sub	sp, #12
 80070ac:	af00      	add	r7, sp, #0
 80070ae:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_TxCpltCallback could be implemented in the user file
   */
}
 80070b0:	bf00      	nop
 80070b2:	370c      	adds	r7, #12
 80070b4:	46bd      	mov	sp, r7
 80070b6:	bc80      	pop	{r7}
 80070b8:	4770      	bx	lr

080070ba <HAL_UART_RxCpltCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_RxCpltCallback(UART_HandleTypeDef *huart)
{
 80070ba:	b480      	push	{r7}
 80070bc:	b083      	sub	sp, #12
 80070be:	af00      	add	r7, sp, #0
 80070c0:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_RxCpltCallback could be implemented in the user file
   */
}
 80070c2:	bf00      	nop
 80070c4:	370c      	adds	r7, #12
 80070c6:	46bd      	mov	sp, r7
 80070c8:	bc80      	pop	{r7}
 80070ca:	4770      	bx	lr

080070cc <HAL_UART_ErrorCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_ErrorCallback(UART_HandleTypeDef *huart)
{
 80070cc:	b480      	push	{r7}
 80070ce:	b083      	sub	sp, #12
 80070d0:	af00      	add	r7, sp, #0
 80070d2:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_ErrorCallback could be implemented in the user file
   */
}
 80070d4:	bf00      	nop
 80070d6:	370c      	adds	r7, #12
 80070d8:	46bd      	mov	sp, r7
 80070da:	bc80      	pop	{r7}
 80070dc:	4770      	bx	lr

080070de <UART_WaitOnFlagUntilTimeout>:
  * @param  Tickstart Tick start value
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status, uint32_t Tickstart, uint32_t Timeout)
{
 80070de:	b580      	push	{r7, lr}
 80070e0:	b084      	sub	sp, #16
 80070e2:	af00      	add	r7, sp, #0
 80070e4:	60f8      	str	r0, [r7, #12]
 80070e6:	60b9      	str	r1, [r7, #8]
 80070e8:	603b      	str	r3, [r7, #0]
 80070ea:	4613      	mov	r3, r2
 80070ec:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 80070ee:	e02c      	b.n	800714a <UART_WaitOnFlagUntilTimeout+0x6c>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 80070f0:	69bb      	ldr	r3, [r7, #24]
 80070f2:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 80070f6:	d028      	beq.n	800714a <UART_WaitOnFlagUntilTimeout+0x6c>
    {
      if ((Timeout == 0U) || ((HAL_GetTick() - Tickstart) > Timeout))
 80070f8:	69bb      	ldr	r3, [r7, #24]
 80070fa:	2b00      	cmp	r3, #0
 80070fc:	d007      	beq.n	800710e <UART_WaitOnFlagUntilTimeout+0x30>
 80070fe:	f7fc fe6b 	bl	8003dd8 <HAL_GetTick>
 8007102:	4602      	mov	r2, r0
 8007104:	683b      	ldr	r3, [r7, #0]
 8007106:	1ad3      	subs	r3, r2, r3
 8007108:	69ba      	ldr	r2, [r7, #24]
 800710a:	429a      	cmp	r2, r3
 800710c:	d21d      	bcs.n	800714a <UART_WaitOnFlagUntilTimeout+0x6c>
      {
        /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts for the interrupt process */
        CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_TXEIE));
 800710e:	68fb      	ldr	r3, [r7, #12]
 8007110:	681b      	ldr	r3, [r3, #0]
 8007112:	68da      	ldr	r2, [r3, #12]
 8007114:	68fb      	ldr	r3, [r7, #12]
 8007116:	681b      	ldr	r3, [r3, #0]
 8007118:	f422 72d0 	bic.w	r2, r2, #416	; 0x1a0
 800711c:	60da      	str	r2, [r3, #12]
        CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800711e:	68fb      	ldr	r3, [r7, #12]
 8007120:	681b      	ldr	r3, [r3, #0]
 8007122:	695a      	ldr	r2, [r3, #20]
 8007124:	68fb      	ldr	r3, [r7, #12]
 8007126:	681b      	ldr	r3, [r3, #0]
 8007128:	f022 0201 	bic.w	r2, r2, #1
 800712c:	615a      	str	r2, [r3, #20]

        huart->gState  = HAL_UART_STATE_READY;
 800712e:	68fb      	ldr	r3, [r7, #12]
 8007130:	2220      	movs	r2, #32
 8007132:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39
        huart->RxState = HAL_UART_STATE_READY;
 8007136:	68fb      	ldr	r3, [r7, #12]
 8007138:	2220      	movs	r2, #32
 800713a:	f883 203a 	strb.w	r2, [r3, #58]	; 0x3a

        /* Process Unlocked */
        __HAL_UNLOCK(huart);
 800713e:	68fb      	ldr	r3, [r7, #12]
 8007140:	2200      	movs	r2, #0
 8007142:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38

        return HAL_TIMEOUT;
 8007146:	2303      	movs	r3, #3
 8007148:	e00f      	b.n	800716a <UART_WaitOnFlagUntilTimeout+0x8c>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 800714a:	68fb      	ldr	r3, [r7, #12]
 800714c:	681b      	ldr	r3, [r3, #0]
 800714e:	681a      	ldr	r2, [r3, #0]
 8007150:	68bb      	ldr	r3, [r7, #8]
 8007152:	4013      	ands	r3, r2
 8007154:	68ba      	ldr	r2, [r7, #8]
 8007156:	429a      	cmp	r2, r3
 8007158:	bf0c      	ite	eq
 800715a:	2301      	moveq	r3, #1
 800715c:	2300      	movne	r3, #0
 800715e:	b2db      	uxtb	r3, r3
 8007160:	461a      	mov	r2, r3
 8007162:	79fb      	ldrb	r3, [r7, #7]
 8007164:	429a      	cmp	r2, r3
 8007166:	d0c3      	beq.n	80070f0 <UART_WaitOnFlagUntilTimeout+0x12>
      }
    }
  }
  return HAL_OK;
 8007168:	2300      	movs	r3, #0
}
 800716a:	4618      	mov	r0, r3
 800716c:	3710      	adds	r7, #16
 800716e:	46bd      	mov	sp, r7
 8007170:	bd80      	pop	{r7, pc}

08007172 <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 8007172:	b480      	push	{r7}
 8007174:	b083      	sub	sp, #12
 8007176:	af00      	add	r7, sp, #0
 8007178:	6078      	str	r0, [r7, #4]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
  CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 800717a:	687b      	ldr	r3, [r7, #4]
 800717c:	681b      	ldr	r3, [r3, #0]
 800717e:	68da      	ldr	r2, [r3, #12]
 8007180:	687b      	ldr	r3, [r7, #4]
 8007182:	681b      	ldr	r3, [r3, #0]
 8007184:	f422 7290 	bic.w	r2, r2, #288	; 0x120
 8007188:	60da      	str	r2, [r3, #12]
  CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800718a:	687b      	ldr	r3, [r7, #4]
 800718c:	681b      	ldr	r3, [r3, #0]
 800718e:	695a      	ldr	r2, [r3, #20]
 8007190:	687b      	ldr	r3, [r7, #4]
 8007192:	681b      	ldr	r3, [r3, #0]
 8007194:	f022 0201 	bic.w	r2, r2, #1
 8007198:	615a      	str	r2, [r3, #20]

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 800719a:	687b      	ldr	r3, [r7, #4]
 800719c:	2220      	movs	r2, #32
 800719e:	f883 203a 	strb.w	r2, [r3, #58]	; 0x3a
}
 80071a2:	bf00      	nop
 80071a4:	370c      	adds	r7, #12
 80071a6:	46bd      	mov	sp, r7
 80071a8:	bc80      	pop	{r7}
 80071aa:	4770      	bx	lr

080071ac <UART_DMAAbortOnError>:
  * @param  hdma  Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void UART_DMAAbortOnError(DMA_HandleTypeDef *hdma)
{
 80071ac:	b580      	push	{r7, lr}
 80071ae:	b084      	sub	sp, #16
 80071b0:	af00      	add	r7, sp, #0
 80071b2:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 80071b4:	687b      	ldr	r3, [r7, #4]
 80071b6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80071b8:	60fb      	str	r3, [r7, #12]
  huart->RxXferCount = 0x00U;
 80071ba:	68fb      	ldr	r3, [r7, #12]
 80071bc:	2200      	movs	r2, #0
 80071be:	85da      	strh	r2, [r3, #46]	; 0x2e
  huart->TxXferCount = 0x00U;
 80071c0:	68fb      	ldr	r3, [r7, #12]
 80071c2:	2200      	movs	r2, #0
 80071c4:	84da      	strh	r2, [r3, #38]	; 0x26
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered error callback*/
  huart->ErrorCallback(huart);
#else
  /*Call legacy weak error callback*/
  HAL_UART_ErrorCallback(huart);
 80071c6:	68f8      	ldr	r0, [r7, #12]
 80071c8:	f7ff ff80 	bl	80070cc <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 80071cc:	bf00      	nop
 80071ce:	3710      	adds	r7, #16
 80071d0:	46bd      	mov	sp, r7
 80071d2:	bd80      	pop	{r7, pc}

080071d4 <UART_Transmit_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_Transmit_IT(UART_HandleTypeDef *huart)
{
 80071d4:	b480      	push	{r7}
 80071d6:	b085      	sub	sp, #20
 80071d8:	af00      	add	r7, sp, #0
 80071da:	6078      	str	r0, [r7, #4]
  uint16_t *tmp;

  /* Check that a Tx process is ongoing */
  if (huart->gState == HAL_UART_STATE_BUSY_TX)
 80071dc:	687b      	ldr	r3, [r7, #4]
 80071de:	f893 3039 	ldrb.w	r3, [r3, #57]	; 0x39
 80071e2:	b2db      	uxtb	r3, r3
 80071e4:	2b21      	cmp	r3, #33	; 0x21
 80071e6:	d13e      	bne.n	8007266 <UART_Transmit_IT+0x92>
  {
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 80071e8:	687b      	ldr	r3, [r7, #4]
 80071ea:	689b      	ldr	r3, [r3, #8]
 80071ec:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 80071f0:	d114      	bne.n	800721c <UART_Transmit_IT+0x48>
 80071f2:	687b      	ldr	r3, [r7, #4]
 80071f4:	691b      	ldr	r3, [r3, #16]
 80071f6:	2b00      	cmp	r3, #0
 80071f8:	d110      	bne.n	800721c <UART_Transmit_IT+0x48>
    {
      tmp = (uint16_t *) huart->pTxBuffPtr;
 80071fa:	687b      	ldr	r3, [r7, #4]
 80071fc:	6a1b      	ldr	r3, [r3, #32]
 80071fe:	60fb      	str	r3, [r7, #12]
      huart->Instance->DR = (uint16_t)(*tmp & (uint16_t)0x01FF);
 8007200:	68fb      	ldr	r3, [r7, #12]
 8007202:	881b      	ldrh	r3, [r3, #0]
 8007204:	461a      	mov	r2, r3
 8007206:	687b      	ldr	r3, [r7, #4]
 8007208:	681b      	ldr	r3, [r3, #0]
 800720a:	f3c2 0208 	ubfx	r2, r2, #0, #9
 800720e:	605a      	str	r2, [r3, #4]
      huart->pTxBuffPtr += 2U;
 8007210:	687b      	ldr	r3, [r7, #4]
 8007212:	6a1b      	ldr	r3, [r3, #32]
 8007214:	1c9a      	adds	r2, r3, #2
 8007216:	687b      	ldr	r3, [r7, #4]
 8007218:	621a      	str	r2, [r3, #32]
 800721a:	e008      	b.n	800722e <UART_Transmit_IT+0x5a>
    }
    else
    {
      huart->Instance->DR = (uint8_t)(*huart->pTxBuffPtr++ & (uint8_t)0x00FF);
 800721c:	687b      	ldr	r3, [r7, #4]
 800721e:	6a1b      	ldr	r3, [r3, #32]
 8007220:	1c59      	adds	r1, r3, #1
 8007222:	687a      	ldr	r2, [r7, #4]
 8007224:	6211      	str	r1, [r2, #32]
 8007226:	781a      	ldrb	r2, [r3, #0]
 8007228:	687b      	ldr	r3, [r7, #4]
 800722a:	681b      	ldr	r3, [r3, #0]
 800722c:	605a      	str	r2, [r3, #4]
    }

    if (--huart->TxXferCount == 0U)
 800722e:	687b      	ldr	r3, [r7, #4]
 8007230:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
 8007232:	b29b      	uxth	r3, r3
 8007234:	3b01      	subs	r3, #1
 8007236:	b29b      	uxth	r3, r3
 8007238:	687a      	ldr	r2, [r7, #4]
 800723a:	4619      	mov	r1, r3
 800723c:	84d1      	strh	r1, [r2, #38]	; 0x26
 800723e:	2b00      	cmp	r3, #0
 8007240:	d10f      	bne.n	8007262 <UART_Transmit_IT+0x8e>
    {
      /* Disable the UART Transmit Complete Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_TXE);
 8007242:	687b      	ldr	r3, [r7, #4]
 8007244:	681b      	ldr	r3, [r3, #0]
 8007246:	68da      	ldr	r2, [r3, #12]
 8007248:	687b      	ldr	r3, [r7, #4]
 800724a:	681b      	ldr	r3, [r3, #0]
 800724c:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 8007250:	60da      	str	r2, [r3, #12]

      /* Enable the UART Transmit Complete Interrupt */
      __HAL_UART_ENABLE_IT(huart, UART_IT_TC);
 8007252:	687b      	ldr	r3, [r7, #4]
 8007254:	681b      	ldr	r3, [r3, #0]
 8007256:	68da      	ldr	r2, [r3, #12]
 8007258:	687b      	ldr	r3, [r7, #4]
 800725a:	681b      	ldr	r3, [r3, #0]
 800725c:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 8007260:	60da      	str	r2, [r3, #12]
    }
    return HAL_OK;
 8007262:	2300      	movs	r3, #0
 8007264:	e000      	b.n	8007268 <UART_Transmit_IT+0x94>
  }
  else
  {
    return HAL_BUSY;
 8007266:	2302      	movs	r3, #2
  }
}
 8007268:	4618      	mov	r0, r3
 800726a:	3714      	adds	r7, #20
 800726c:	46bd      	mov	sp, r7
 800726e:	bc80      	pop	{r7}
 8007270:	4770      	bx	lr

08007272 <UART_EndTransmit_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_EndTransmit_IT(UART_HandleTypeDef *huart)
{
 8007272:	b580      	push	{r7, lr}
 8007274:	b082      	sub	sp, #8
 8007276:	af00      	add	r7, sp, #0
 8007278:	6078      	str	r0, [r7, #4]
  /* Disable the UART Transmit Complete Interrupt */
  __HAL_UART_DISABLE_IT(huart, UART_IT_TC);
 800727a:	687b      	ldr	r3, [r7, #4]
 800727c:	681b      	ldr	r3, [r3, #0]
 800727e:	68da      	ldr	r2, [r3, #12]
 8007280:	687b      	ldr	r3, [r7, #4]
 8007282:	681b      	ldr	r3, [r3, #0]
 8007284:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8007288:	60da      	str	r2, [r3, #12]

  /* Tx process is ended, restore huart->gState to Ready */
  huart->gState = HAL_UART_STATE_READY;
 800728a:	687b      	ldr	r3, [r7, #4]
 800728c:	2220      	movs	r2, #32
 800728e:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered Tx complete callback*/
  huart->TxCpltCallback(huart);
#else
  /*Call legacy weak Tx complete callback*/
  HAL_UART_TxCpltCallback(huart);
 8007292:	6878      	ldr	r0, [r7, #4]
 8007294:	f7ff ff08 	bl	80070a8 <HAL_UART_TxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */

  return HAL_OK;
 8007298:	2300      	movs	r3, #0
}
 800729a:	4618      	mov	r0, r3
 800729c:	3708      	adds	r7, #8
 800729e:	46bd      	mov	sp, r7
 80072a0:	bd80      	pop	{r7, pc}

080072a2 <UART_Receive_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_Receive_IT(UART_HandleTypeDef *huart)
{
 80072a2:	b580      	push	{r7, lr}
 80072a4:	b084      	sub	sp, #16
 80072a6:	af00      	add	r7, sp, #0
 80072a8:	6078      	str	r0, [r7, #4]
  uint8_t  *pdata8bits;
  uint16_t *pdata16bits;

  /* Check that a Rx process is ongoing */
  if (huart->RxState == HAL_UART_STATE_BUSY_RX)
 80072aa:	687b      	ldr	r3, [r7, #4]
 80072ac:	f893 303a 	ldrb.w	r3, [r3, #58]	; 0x3a
 80072b0:	b2db      	uxtb	r3, r3
 80072b2:	2b22      	cmp	r3, #34	; 0x22
 80072b4:	d170      	bne.n	8007398 <UART_Receive_IT+0xf6>
  {
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 80072b6:	687b      	ldr	r3, [r7, #4]
 80072b8:	689b      	ldr	r3, [r3, #8]
 80072ba:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 80072be:	d117      	bne.n	80072f0 <UART_Receive_IT+0x4e>
 80072c0:	687b      	ldr	r3, [r7, #4]
 80072c2:	691b      	ldr	r3, [r3, #16]
 80072c4:	2b00      	cmp	r3, #0
 80072c6:	d113      	bne.n	80072f0 <UART_Receive_IT+0x4e>
    {
      pdata8bits  = NULL;
 80072c8:	2300      	movs	r3, #0
 80072ca:	60fb      	str	r3, [r7, #12]
      pdata16bits = (uint16_t *) huart->pRxBuffPtr;
 80072cc:	687b      	ldr	r3, [r7, #4]
 80072ce:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80072d0:	60bb      	str	r3, [r7, #8]
      *pdata16bits = (uint16_t)(huart->Instance->DR & (uint16_t)0x01FF);
 80072d2:	687b      	ldr	r3, [r7, #4]
 80072d4:	681b      	ldr	r3, [r3, #0]
 80072d6:	685b      	ldr	r3, [r3, #4]
 80072d8:	b29b      	uxth	r3, r3
 80072da:	f3c3 0308 	ubfx	r3, r3, #0, #9
 80072de:	b29a      	uxth	r2, r3
 80072e0:	68bb      	ldr	r3, [r7, #8]
 80072e2:	801a      	strh	r2, [r3, #0]
      huart->pRxBuffPtr += 2U;
 80072e4:	687b      	ldr	r3, [r7, #4]
 80072e6:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80072e8:	1c9a      	adds	r2, r3, #2
 80072ea:	687b      	ldr	r3, [r7, #4]
 80072ec:	629a      	str	r2, [r3, #40]	; 0x28
 80072ee:	e026      	b.n	800733e <UART_Receive_IT+0x9c>
    }
    else
    {
      pdata8bits = (uint8_t *) huart->pRxBuffPtr;
 80072f0:	687b      	ldr	r3, [r7, #4]
 80072f2:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80072f4:	60fb      	str	r3, [r7, #12]
      pdata16bits  = NULL;
 80072f6:	2300      	movs	r3, #0
 80072f8:	60bb      	str	r3, [r7, #8]

      if ((huart->Init.WordLength == UART_WORDLENGTH_9B) || ((huart->Init.WordLength == UART_WORDLENGTH_8B) && (huart->Init.Parity == UART_PARITY_NONE)))
 80072fa:	687b      	ldr	r3, [r7, #4]
 80072fc:	689b      	ldr	r3, [r3, #8]
 80072fe:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8007302:	d007      	beq.n	8007314 <UART_Receive_IT+0x72>
 8007304:	687b      	ldr	r3, [r7, #4]
 8007306:	689b      	ldr	r3, [r3, #8]
 8007308:	2b00      	cmp	r3, #0
 800730a:	d10a      	bne.n	8007322 <UART_Receive_IT+0x80>
 800730c:	687b      	ldr	r3, [r7, #4]
 800730e:	691b      	ldr	r3, [r3, #16]
 8007310:	2b00      	cmp	r3, #0
 8007312:	d106      	bne.n	8007322 <UART_Receive_IT+0x80>
      {
        *pdata8bits = (uint8_t)(huart->Instance->DR & (uint8_t)0x00FF);
 8007314:	687b      	ldr	r3, [r7, #4]
 8007316:	681b      	ldr	r3, [r3, #0]
 8007318:	685b      	ldr	r3, [r3, #4]
 800731a:	b2da      	uxtb	r2, r3
 800731c:	68fb      	ldr	r3, [r7, #12]
 800731e:	701a      	strb	r2, [r3, #0]
 8007320:	e008      	b.n	8007334 <UART_Receive_IT+0x92>
      }
      else
      {
        *pdata8bits = (uint8_t)(huart->Instance->DR & (uint8_t)0x007F);
 8007322:	687b      	ldr	r3, [r7, #4]
 8007324:	681b      	ldr	r3, [r3, #0]
 8007326:	685b      	ldr	r3, [r3, #4]
 8007328:	b2db      	uxtb	r3, r3
 800732a:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 800732e:	b2da      	uxtb	r2, r3
 8007330:	68fb      	ldr	r3, [r7, #12]
 8007332:	701a      	strb	r2, [r3, #0]
      }
      huart->pRxBuffPtr += 1U;
 8007334:	687b      	ldr	r3, [r7, #4]
 8007336:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8007338:	1c5a      	adds	r2, r3, #1
 800733a:	687b      	ldr	r3, [r7, #4]
 800733c:	629a      	str	r2, [r3, #40]	; 0x28
    }

    if (--huart->RxXferCount == 0U)
 800733e:	687b      	ldr	r3, [r7, #4]
 8007340:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 8007342:	b29b      	uxth	r3, r3
 8007344:	3b01      	subs	r3, #1
 8007346:	b29b      	uxth	r3, r3
 8007348:	687a      	ldr	r2, [r7, #4]
 800734a:	4619      	mov	r1, r3
 800734c:	85d1      	strh	r1, [r2, #46]	; 0x2e
 800734e:	2b00      	cmp	r3, #0
 8007350:	d120      	bne.n	8007394 <UART_Receive_IT+0xf2>
    {
      /* Disable the UART Data Register not empty Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_RXNE);
 8007352:	687b      	ldr	r3, [r7, #4]
 8007354:	681b      	ldr	r3, [r3, #0]
 8007356:	68da      	ldr	r2, [r3, #12]
 8007358:	687b      	ldr	r3, [r7, #4]
 800735a:	681b      	ldr	r3, [r3, #0]
 800735c:	f022 0220 	bic.w	r2, r2, #32
 8007360:	60da      	str	r2, [r3, #12]

      /* Disable the UART Parity Error Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_PE);
 8007362:	687b      	ldr	r3, [r7, #4]
 8007364:	681b      	ldr	r3, [r3, #0]
 8007366:	68da      	ldr	r2, [r3, #12]
 8007368:	687b      	ldr	r3, [r7, #4]
 800736a:	681b      	ldr	r3, [r3, #0]
 800736c:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 8007370:	60da      	str	r2, [r3, #12]

      /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
      __HAL_UART_DISABLE_IT(huart, UART_IT_ERR);
 8007372:	687b      	ldr	r3, [r7, #4]
 8007374:	681b      	ldr	r3, [r3, #0]
 8007376:	695a      	ldr	r2, [r3, #20]
 8007378:	687b      	ldr	r3, [r7, #4]
 800737a:	681b      	ldr	r3, [r3, #0]
 800737c:	f022 0201 	bic.w	r2, r2, #1
 8007380:	615a      	str	r2, [r3, #20]

      /* Rx process is completed, restore huart->RxState to Ready */
      huart->RxState = HAL_UART_STATE_READY;
 8007382:	687b      	ldr	r3, [r7, #4]
 8007384:	2220      	movs	r2, #32
 8007386:	f883 203a 	strb.w	r2, [r3, #58]	; 0x3a
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
      /*Call registered Rx complete callback*/
      huart->RxCpltCallback(huart);
#else
      /*Call legacy weak Rx complete callback*/
      HAL_UART_RxCpltCallback(huart);
 800738a:	6878      	ldr	r0, [r7, #4]
 800738c:	f7ff fe95 	bl	80070ba <HAL_UART_RxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */

      return HAL_OK;
 8007390:	2300      	movs	r3, #0
 8007392:	e002      	b.n	800739a <UART_Receive_IT+0xf8>
    }
    return HAL_OK;
 8007394:	2300      	movs	r3, #0
 8007396:	e000      	b.n	800739a <UART_Receive_IT+0xf8>
  }
  else
  {
    return HAL_BUSY;
 8007398:	2302      	movs	r3, #2
  }
}
 800739a:	4618      	mov	r0, r3
 800739c:	3710      	adds	r7, #16
 800739e:	46bd      	mov	sp, r7
 80073a0:	bd80      	pop	{r7, pc}
	...

080073a4 <UART_SetConfig>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_SetConfig(UART_HandleTypeDef *huart)
{
 80073a4:	b580      	push	{r7, lr}
 80073a6:	b084      	sub	sp, #16
 80073a8:	af00      	add	r7, sp, #0
 80073aa:	6078      	str	r0, [r7, #4]
  assert_param(IS_UART_MODE(huart->Init.Mode));

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits
     according to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 80073ac:	687b      	ldr	r3, [r7, #4]
 80073ae:	681b      	ldr	r3, [r3, #0]
 80073b0:	691b      	ldr	r3, [r3, #16]
 80073b2:	f423 5140 	bic.w	r1, r3, #12288	; 0x3000
 80073b6:	687b      	ldr	r3, [r7, #4]
 80073b8:	68da      	ldr	r2, [r3, #12]
 80073ba:	687b      	ldr	r3, [r7, #4]
 80073bc:	681b      	ldr	r3, [r3, #0]
 80073be:	430a      	orrs	r2, r1
 80073c0:	611a      	str	r2, [r3, #16]
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling;
  MODIFY_REG(huart->Instance->CR1,
             (uint32_t)(USART_CR1_M | USART_CR1_PCE | USART_CR1_PS | USART_CR1_TE | USART_CR1_RE | USART_CR1_OVER8),
             tmpreg);
#else
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode;
 80073c2:	687b      	ldr	r3, [r7, #4]
 80073c4:	689a      	ldr	r2, [r3, #8]
 80073c6:	687b      	ldr	r3, [r7, #4]
 80073c8:	691b      	ldr	r3, [r3, #16]
 80073ca:	431a      	orrs	r2, r3
 80073cc:	687b      	ldr	r3, [r7, #4]
 80073ce:	695b      	ldr	r3, [r3, #20]
 80073d0:	4313      	orrs	r3, r2
 80073d2:	60bb      	str	r3, [r7, #8]
  MODIFY_REG(huart->Instance->CR1,
 80073d4:	687b      	ldr	r3, [r7, #4]
 80073d6:	681b      	ldr	r3, [r3, #0]
 80073d8:	68db      	ldr	r3, [r3, #12]
 80073da:	f423 53b0 	bic.w	r3, r3, #5632	; 0x1600
 80073de:	f023 030c 	bic.w	r3, r3, #12
 80073e2:	687a      	ldr	r2, [r7, #4]
 80073e4:	6812      	ldr	r2, [r2, #0]
 80073e6:	68b9      	ldr	r1, [r7, #8]
 80073e8:	430b      	orrs	r3, r1
 80073ea:	60d3      	str	r3, [r2, #12]
             tmpreg);
#endif /* USART_CR1_OVER8 */

  /*-------------------------- USART CR3 Configuration -----------------------*/
  /* Configure the UART HFC: Set CTSE and RTSE bits according to huart->Init.HwFlowCtl value */
  MODIFY_REG(huart->Instance->CR3, (USART_CR3_RTSE | USART_CR3_CTSE), huart->Init.HwFlowCtl);
 80073ec:	687b      	ldr	r3, [r7, #4]
 80073ee:	681b      	ldr	r3, [r3, #0]
 80073f0:	695b      	ldr	r3, [r3, #20]
 80073f2:	f423 7140 	bic.w	r1, r3, #768	; 0x300
 80073f6:	687b      	ldr	r3, [r7, #4]
 80073f8:	699a      	ldr	r2, [r3, #24]
 80073fa:	687b      	ldr	r3, [r7, #4]
 80073fc:	681b      	ldr	r3, [r3, #0]
 80073fe:	430a      	orrs	r2, r1
 8007400:	615a      	str	r2, [r3, #20]


  if(huart->Instance == USART1)
 8007402:	687b      	ldr	r3, [r7, #4]
 8007404:	681b      	ldr	r3, [r3, #0]
 8007406:	4a2c      	ldr	r2, [pc, #176]	; (80074b8 <UART_SetConfig+0x114>)
 8007408:	4293      	cmp	r3, r2
 800740a:	d103      	bne.n	8007414 <UART_SetConfig+0x70>
  {
    pclk = HAL_RCC_GetPCLK2Freq();
 800740c:	f7fe fc00 	bl	8005c10 <HAL_RCC_GetPCLK2Freq>
 8007410:	60f8      	str	r0, [r7, #12]
 8007412:	e002      	b.n	800741a <UART_SetConfig+0x76>
  }
  else
  {
    pclk = HAL_RCC_GetPCLK1Freq();
 8007414:	f7fe fbe8 	bl	8005be8 <HAL_RCC_GetPCLK1Freq>
 8007418:	60f8      	str	r0, [r7, #12]
  else
  {
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
  }
#else
  huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
 800741a:	68fa      	ldr	r2, [r7, #12]
 800741c:	4613      	mov	r3, r2
 800741e:	009b      	lsls	r3, r3, #2
 8007420:	4413      	add	r3, r2
 8007422:	009a      	lsls	r2, r3, #2
 8007424:	441a      	add	r2, r3
 8007426:	687b      	ldr	r3, [r7, #4]
 8007428:	685b      	ldr	r3, [r3, #4]
 800742a:	009b      	lsls	r3, r3, #2
 800742c:	fbb2 f3f3 	udiv	r3, r2, r3
 8007430:	4a22      	ldr	r2, [pc, #136]	; (80074bc <UART_SetConfig+0x118>)
 8007432:	fba2 2303 	umull	r2, r3, r2, r3
 8007436:	095b      	lsrs	r3, r3, #5
 8007438:	0119      	lsls	r1, r3, #4
 800743a:	68fa      	ldr	r2, [r7, #12]
 800743c:	4613      	mov	r3, r2
 800743e:	009b      	lsls	r3, r3, #2
 8007440:	4413      	add	r3, r2
 8007442:	009a      	lsls	r2, r3, #2
 8007444:	441a      	add	r2, r3
 8007446:	687b      	ldr	r3, [r7, #4]
 8007448:	685b      	ldr	r3, [r3, #4]
 800744a:	009b      	lsls	r3, r3, #2
 800744c:	fbb2 f2f3 	udiv	r2, r2, r3
 8007450:	4b1a      	ldr	r3, [pc, #104]	; (80074bc <UART_SetConfig+0x118>)
 8007452:	fba3 0302 	umull	r0, r3, r3, r2
 8007456:	095b      	lsrs	r3, r3, #5
 8007458:	2064      	movs	r0, #100	; 0x64
 800745a:	fb00 f303 	mul.w	r3, r0, r3
 800745e:	1ad3      	subs	r3, r2, r3
 8007460:	011b      	lsls	r3, r3, #4
 8007462:	3332      	adds	r3, #50	; 0x32
 8007464:	4a15      	ldr	r2, [pc, #84]	; (80074bc <UART_SetConfig+0x118>)
 8007466:	fba2 2303 	umull	r2, r3, r2, r3
 800746a:	095b      	lsrs	r3, r3, #5
 800746c:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8007470:	4419      	add	r1, r3
 8007472:	68fa      	ldr	r2, [r7, #12]
 8007474:	4613      	mov	r3, r2
 8007476:	009b      	lsls	r3, r3, #2
 8007478:	4413      	add	r3, r2
 800747a:	009a      	lsls	r2, r3, #2
 800747c:	441a      	add	r2, r3
 800747e:	687b      	ldr	r3, [r7, #4]
 8007480:	685b      	ldr	r3, [r3, #4]
 8007482:	009b      	lsls	r3, r3, #2
 8007484:	fbb2 f2f3 	udiv	r2, r2, r3
 8007488:	4b0c      	ldr	r3, [pc, #48]	; (80074bc <UART_SetConfig+0x118>)
 800748a:	fba3 0302 	umull	r0, r3, r3, r2
 800748e:	095b      	lsrs	r3, r3, #5
 8007490:	2064      	movs	r0, #100	; 0x64
 8007492:	fb00 f303 	mul.w	r3, r0, r3
 8007496:	1ad3      	subs	r3, r2, r3
 8007498:	011b      	lsls	r3, r3, #4
 800749a:	3332      	adds	r3, #50	; 0x32
 800749c:	4a07      	ldr	r2, [pc, #28]	; (80074bc <UART_SetConfig+0x118>)
 800749e:	fba2 2303 	umull	r2, r3, r2, r3
 80074a2:	095b      	lsrs	r3, r3, #5
 80074a4:	f003 020f 	and.w	r2, r3, #15
 80074a8:	687b      	ldr	r3, [r7, #4]
 80074aa:	681b      	ldr	r3, [r3, #0]
 80074ac:	440a      	add	r2, r1
 80074ae:	609a      	str	r2, [r3, #8]
#endif /* USART_CR1_OVER8 */
}
 80074b0:	bf00      	nop
 80074b2:	3710      	adds	r7, #16
 80074b4:	46bd      	mov	sp, r7
 80074b6:	bd80      	pop	{r7, pc}
 80074b8:	40013800 	.word	0x40013800
 80074bc:	51eb851f 	.word	0x51eb851f

080074c0 <__errno>:
 80074c0:	4b01      	ldr	r3, [pc, #4]	; (80074c8 <__errno+0x8>)
 80074c2:	6818      	ldr	r0, [r3, #0]
 80074c4:	4770      	bx	lr
 80074c6:	bf00      	nop
 80074c8:	2000002c 	.word	0x2000002c

080074cc <__libc_init_array>:
 80074cc:	b570      	push	{r4, r5, r6, lr}
 80074ce:	2500      	movs	r5, #0
 80074d0:	4e0c      	ldr	r6, [pc, #48]	; (8007504 <__libc_init_array+0x38>)
 80074d2:	4c0d      	ldr	r4, [pc, #52]	; (8007508 <__libc_init_array+0x3c>)
 80074d4:	1ba4      	subs	r4, r4, r6
 80074d6:	10a4      	asrs	r4, r4, #2
 80074d8:	42a5      	cmp	r5, r4
 80074da:	d109      	bne.n	80074f0 <__libc_init_array+0x24>
 80074dc:	f004 f9ee 	bl	800b8bc <_init>
 80074e0:	2500      	movs	r5, #0
 80074e2:	4e0a      	ldr	r6, [pc, #40]	; (800750c <__libc_init_array+0x40>)
 80074e4:	4c0a      	ldr	r4, [pc, #40]	; (8007510 <__libc_init_array+0x44>)
 80074e6:	1ba4      	subs	r4, r4, r6
 80074e8:	10a4      	asrs	r4, r4, #2
 80074ea:	42a5      	cmp	r5, r4
 80074ec:	d105      	bne.n	80074fa <__libc_init_array+0x2e>
 80074ee:	bd70      	pop	{r4, r5, r6, pc}
 80074f0:	f856 3025 	ldr.w	r3, [r6, r5, lsl #2]
 80074f4:	4798      	blx	r3
 80074f6:	3501      	adds	r5, #1
 80074f8:	e7ee      	b.n	80074d8 <__libc_init_array+0xc>
 80074fa:	f856 3025 	ldr.w	r3, [r6, r5, lsl #2]
 80074fe:	4798      	blx	r3
 8007500:	3501      	adds	r5, #1
 8007502:	e7f2      	b.n	80074ea <__libc_init_array+0x1e>
 8007504:	0800bc9c 	.word	0x0800bc9c
 8007508:	0800bc9c 	.word	0x0800bc9c
 800750c:	0800bc9c 	.word	0x0800bc9c
 8007510:	0800bca0 	.word	0x0800bca0

08007514 <malloc>:
 8007514:	4b02      	ldr	r3, [pc, #8]	; (8007520 <malloc+0xc>)
 8007516:	4601      	mov	r1, r0
 8007518:	6818      	ldr	r0, [r3, #0]
 800751a:	f000 b857 	b.w	80075cc <_malloc_r>
 800751e:	bf00      	nop
 8007520:	2000002c 	.word	0x2000002c

08007524 <memset>:
 8007524:	4603      	mov	r3, r0
 8007526:	4402      	add	r2, r0
 8007528:	4293      	cmp	r3, r2
 800752a:	d100      	bne.n	800752e <memset+0xa>
 800752c:	4770      	bx	lr
 800752e:	f803 1b01 	strb.w	r1, [r3], #1
 8007532:	e7f9      	b.n	8007528 <memset+0x4>

08007534 <_free_r>:
 8007534:	b538      	push	{r3, r4, r5, lr}
 8007536:	4605      	mov	r5, r0
 8007538:	2900      	cmp	r1, #0
 800753a:	d043      	beq.n	80075c4 <_free_r+0x90>
 800753c:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8007540:	1f0c      	subs	r4, r1, #4
 8007542:	2b00      	cmp	r3, #0
 8007544:	bfb8      	it	lt
 8007546:	18e4      	addlt	r4, r4, r3
 8007548:	f002 ff69 	bl	800a41e <__malloc_lock>
 800754c:	4a1e      	ldr	r2, [pc, #120]	; (80075c8 <_free_r+0x94>)
 800754e:	6813      	ldr	r3, [r2, #0]
 8007550:	4610      	mov	r0, r2
 8007552:	b933      	cbnz	r3, 8007562 <_free_r+0x2e>
 8007554:	6063      	str	r3, [r4, #4]
 8007556:	6014      	str	r4, [r2, #0]
 8007558:	4628      	mov	r0, r5
 800755a:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 800755e:	f002 bf5f 	b.w	800a420 <__malloc_unlock>
 8007562:	42a3      	cmp	r3, r4
 8007564:	d90b      	bls.n	800757e <_free_r+0x4a>
 8007566:	6821      	ldr	r1, [r4, #0]
 8007568:	1862      	adds	r2, r4, r1
 800756a:	4293      	cmp	r3, r2
 800756c:	bf01      	itttt	eq
 800756e:	681a      	ldreq	r2, [r3, #0]
 8007570:	685b      	ldreq	r3, [r3, #4]
 8007572:	1852      	addeq	r2, r2, r1
 8007574:	6022      	streq	r2, [r4, #0]
 8007576:	6063      	str	r3, [r4, #4]
 8007578:	6004      	str	r4, [r0, #0]
 800757a:	e7ed      	b.n	8007558 <_free_r+0x24>
 800757c:	4613      	mov	r3, r2
 800757e:	685a      	ldr	r2, [r3, #4]
 8007580:	b10a      	cbz	r2, 8007586 <_free_r+0x52>
 8007582:	42a2      	cmp	r2, r4
 8007584:	d9fa      	bls.n	800757c <_free_r+0x48>
 8007586:	6819      	ldr	r1, [r3, #0]
 8007588:	1858      	adds	r0, r3, r1
 800758a:	42a0      	cmp	r0, r4
 800758c:	d10b      	bne.n	80075a6 <_free_r+0x72>
 800758e:	6820      	ldr	r0, [r4, #0]
 8007590:	4401      	add	r1, r0
 8007592:	1858      	adds	r0, r3, r1
 8007594:	4282      	cmp	r2, r0
 8007596:	6019      	str	r1, [r3, #0]
 8007598:	d1de      	bne.n	8007558 <_free_r+0x24>
 800759a:	6810      	ldr	r0, [r2, #0]
 800759c:	6852      	ldr	r2, [r2, #4]
 800759e:	4401      	add	r1, r0
 80075a0:	6019      	str	r1, [r3, #0]
 80075a2:	605a      	str	r2, [r3, #4]
 80075a4:	e7d8      	b.n	8007558 <_free_r+0x24>
 80075a6:	d902      	bls.n	80075ae <_free_r+0x7a>
 80075a8:	230c      	movs	r3, #12
 80075aa:	602b      	str	r3, [r5, #0]
 80075ac:	e7d4      	b.n	8007558 <_free_r+0x24>
 80075ae:	6820      	ldr	r0, [r4, #0]
 80075b0:	1821      	adds	r1, r4, r0
 80075b2:	428a      	cmp	r2, r1
 80075b4:	bf01      	itttt	eq
 80075b6:	6811      	ldreq	r1, [r2, #0]
 80075b8:	6852      	ldreq	r2, [r2, #4]
 80075ba:	1809      	addeq	r1, r1, r0
 80075bc:	6021      	streq	r1, [r4, #0]
 80075be:	6062      	str	r2, [r4, #4]
 80075c0:	605c      	str	r4, [r3, #4]
 80075c2:	e7c9      	b.n	8007558 <_free_r+0x24>
 80075c4:	bd38      	pop	{r3, r4, r5, pc}
 80075c6:	bf00      	nop
 80075c8:	2000029c 	.word	0x2000029c

080075cc <_malloc_r>:
 80075cc:	b570      	push	{r4, r5, r6, lr}
 80075ce:	1ccd      	adds	r5, r1, #3
 80075d0:	f025 0503 	bic.w	r5, r5, #3
 80075d4:	3508      	adds	r5, #8
 80075d6:	2d0c      	cmp	r5, #12
 80075d8:	bf38      	it	cc
 80075da:	250c      	movcc	r5, #12
 80075dc:	2d00      	cmp	r5, #0
 80075de:	4606      	mov	r6, r0
 80075e0:	db01      	blt.n	80075e6 <_malloc_r+0x1a>
 80075e2:	42a9      	cmp	r1, r5
 80075e4:	d903      	bls.n	80075ee <_malloc_r+0x22>
 80075e6:	230c      	movs	r3, #12
 80075e8:	6033      	str	r3, [r6, #0]
 80075ea:	2000      	movs	r0, #0
 80075ec:	bd70      	pop	{r4, r5, r6, pc}
 80075ee:	f002 ff16 	bl	800a41e <__malloc_lock>
 80075f2:	4a21      	ldr	r2, [pc, #132]	; (8007678 <_malloc_r+0xac>)
 80075f4:	6814      	ldr	r4, [r2, #0]
 80075f6:	4621      	mov	r1, r4
 80075f8:	b991      	cbnz	r1, 8007620 <_malloc_r+0x54>
 80075fa:	4c20      	ldr	r4, [pc, #128]	; (800767c <_malloc_r+0xb0>)
 80075fc:	6823      	ldr	r3, [r4, #0]
 80075fe:	b91b      	cbnz	r3, 8007608 <_malloc_r+0x3c>
 8007600:	4630      	mov	r0, r6
 8007602:	f000 fe6d 	bl	80082e0 <_sbrk_r>
 8007606:	6020      	str	r0, [r4, #0]
 8007608:	4629      	mov	r1, r5
 800760a:	4630      	mov	r0, r6
 800760c:	f000 fe68 	bl	80082e0 <_sbrk_r>
 8007610:	1c43      	adds	r3, r0, #1
 8007612:	d124      	bne.n	800765e <_malloc_r+0x92>
 8007614:	230c      	movs	r3, #12
 8007616:	4630      	mov	r0, r6
 8007618:	6033      	str	r3, [r6, #0]
 800761a:	f002 ff01 	bl	800a420 <__malloc_unlock>
 800761e:	e7e4      	b.n	80075ea <_malloc_r+0x1e>
 8007620:	680b      	ldr	r3, [r1, #0]
 8007622:	1b5b      	subs	r3, r3, r5
 8007624:	d418      	bmi.n	8007658 <_malloc_r+0x8c>
 8007626:	2b0b      	cmp	r3, #11
 8007628:	d90f      	bls.n	800764a <_malloc_r+0x7e>
 800762a:	600b      	str	r3, [r1, #0]
 800762c:	18cc      	adds	r4, r1, r3
 800762e:	50cd      	str	r5, [r1, r3]
 8007630:	4630      	mov	r0, r6
 8007632:	f002 fef5 	bl	800a420 <__malloc_unlock>
 8007636:	f104 000b 	add.w	r0, r4, #11
 800763a:	1d23      	adds	r3, r4, #4
 800763c:	f020 0007 	bic.w	r0, r0, #7
 8007640:	1ac3      	subs	r3, r0, r3
 8007642:	d0d3      	beq.n	80075ec <_malloc_r+0x20>
 8007644:	425a      	negs	r2, r3
 8007646:	50e2      	str	r2, [r4, r3]
 8007648:	e7d0      	b.n	80075ec <_malloc_r+0x20>
 800764a:	684b      	ldr	r3, [r1, #4]
 800764c:	428c      	cmp	r4, r1
 800764e:	bf16      	itet	ne
 8007650:	6063      	strne	r3, [r4, #4]
 8007652:	6013      	streq	r3, [r2, #0]
 8007654:	460c      	movne	r4, r1
 8007656:	e7eb      	b.n	8007630 <_malloc_r+0x64>
 8007658:	460c      	mov	r4, r1
 800765a:	6849      	ldr	r1, [r1, #4]
 800765c:	e7cc      	b.n	80075f8 <_malloc_r+0x2c>
 800765e:	1cc4      	adds	r4, r0, #3
 8007660:	f024 0403 	bic.w	r4, r4, #3
 8007664:	42a0      	cmp	r0, r4
 8007666:	d005      	beq.n	8007674 <_malloc_r+0xa8>
 8007668:	1a21      	subs	r1, r4, r0
 800766a:	4630      	mov	r0, r6
 800766c:	f000 fe38 	bl	80082e0 <_sbrk_r>
 8007670:	3001      	adds	r0, #1
 8007672:	d0cf      	beq.n	8007614 <_malloc_r+0x48>
 8007674:	6025      	str	r5, [r4, #0]
 8007676:	e7db      	b.n	8007630 <_malloc_r+0x64>
 8007678:	2000029c 	.word	0x2000029c
 800767c:	200002a0 	.word	0x200002a0

08007680 <__cvt>:
 8007680:	2b00      	cmp	r3, #0
 8007682:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8007686:	461e      	mov	r6, r3
 8007688:	bfbb      	ittet	lt
 800768a:	f103 4300 	addlt.w	r3, r3, #2147483648	; 0x80000000
 800768e:	461e      	movlt	r6, r3
 8007690:	2300      	movge	r3, #0
 8007692:	232d      	movlt	r3, #45	; 0x2d
 8007694:	b088      	sub	sp, #32
 8007696:	9f14      	ldr	r7, [sp, #80]	; 0x50
 8007698:	e9dd 1a12 	ldrd	r1, sl, [sp, #72]	; 0x48
 800769c:	f027 0720 	bic.w	r7, r7, #32
 80076a0:	2f46      	cmp	r7, #70	; 0x46
 80076a2:	4614      	mov	r4, r2
 80076a4:	9d10      	ldr	r5, [sp, #64]	; 0x40
 80076a6:	700b      	strb	r3, [r1, #0]
 80076a8:	d004      	beq.n	80076b4 <__cvt+0x34>
 80076aa:	2f45      	cmp	r7, #69	; 0x45
 80076ac:	d100      	bne.n	80076b0 <__cvt+0x30>
 80076ae:	3501      	adds	r5, #1
 80076b0:	2302      	movs	r3, #2
 80076b2:	e000      	b.n	80076b6 <__cvt+0x36>
 80076b4:	2303      	movs	r3, #3
 80076b6:	aa07      	add	r2, sp, #28
 80076b8:	9204      	str	r2, [sp, #16]
 80076ba:	aa06      	add	r2, sp, #24
 80076bc:	e9cd a202 	strd	sl, r2, [sp, #8]
 80076c0:	e9cd 3500 	strd	r3, r5, [sp]
 80076c4:	4622      	mov	r2, r4
 80076c6:	4633      	mov	r3, r6
 80076c8:	f001 fd8e 	bl	80091e8 <_dtoa_r>
 80076cc:	2f47      	cmp	r7, #71	; 0x47
 80076ce:	4680      	mov	r8, r0
 80076d0:	d102      	bne.n	80076d8 <__cvt+0x58>
 80076d2:	9b11      	ldr	r3, [sp, #68]	; 0x44
 80076d4:	07db      	lsls	r3, r3, #31
 80076d6:	d526      	bpl.n	8007726 <__cvt+0xa6>
 80076d8:	2f46      	cmp	r7, #70	; 0x46
 80076da:	eb08 0905 	add.w	r9, r8, r5
 80076de:	d111      	bne.n	8007704 <__cvt+0x84>
 80076e0:	f898 3000 	ldrb.w	r3, [r8]
 80076e4:	2b30      	cmp	r3, #48	; 0x30
 80076e6:	d10a      	bne.n	80076fe <__cvt+0x7e>
 80076e8:	2200      	movs	r2, #0
 80076ea:	2300      	movs	r3, #0
 80076ec:	4620      	mov	r0, r4
 80076ee:	4631      	mov	r1, r6
 80076f0:	f7f9 f95a 	bl	80009a8 <__aeabi_dcmpeq>
 80076f4:	b918      	cbnz	r0, 80076fe <__cvt+0x7e>
 80076f6:	f1c5 0501 	rsb	r5, r5, #1
 80076fa:	f8ca 5000 	str.w	r5, [sl]
 80076fe:	f8da 3000 	ldr.w	r3, [sl]
 8007702:	4499      	add	r9, r3
 8007704:	2200      	movs	r2, #0
 8007706:	2300      	movs	r3, #0
 8007708:	4620      	mov	r0, r4
 800770a:	4631      	mov	r1, r6
 800770c:	f7f9 f94c 	bl	80009a8 <__aeabi_dcmpeq>
 8007710:	b938      	cbnz	r0, 8007722 <__cvt+0xa2>
 8007712:	2230      	movs	r2, #48	; 0x30
 8007714:	9b07      	ldr	r3, [sp, #28]
 8007716:	454b      	cmp	r3, r9
 8007718:	d205      	bcs.n	8007726 <__cvt+0xa6>
 800771a:	1c59      	adds	r1, r3, #1
 800771c:	9107      	str	r1, [sp, #28]
 800771e:	701a      	strb	r2, [r3, #0]
 8007720:	e7f8      	b.n	8007714 <__cvt+0x94>
 8007722:	f8cd 901c 	str.w	r9, [sp, #28]
 8007726:	4640      	mov	r0, r8
 8007728:	9b07      	ldr	r3, [sp, #28]
 800772a:	9a15      	ldr	r2, [sp, #84]	; 0x54
 800772c:	eba3 0308 	sub.w	r3, r3, r8
 8007730:	6013      	str	r3, [r2, #0]
 8007732:	b008      	add	sp, #32
 8007734:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}

08007738 <__exponent>:
 8007738:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 800773a:	2900      	cmp	r1, #0
 800773c:	bfb4      	ite	lt
 800773e:	232d      	movlt	r3, #45	; 0x2d
 8007740:	232b      	movge	r3, #43	; 0x2b
 8007742:	4604      	mov	r4, r0
 8007744:	bfb8      	it	lt
 8007746:	4249      	neglt	r1, r1
 8007748:	2909      	cmp	r1, #9
 800774a:	f804 2b02 	strb.w	r2, [r4], #2
 800774e:	7043      	strb	r3, [r0, #1]
 8007750:	dd21      	ble.n	8007796 <__exponent+0x5e>
 8007752:	f10d 0307 	add.w	r3, sp, #7
 8007756:	461f      	mov	r7, r3
 8007758:	260a      	movs	r6, #10
 800775a:	fb91 f5f6 	sdiv	r5, r1, r6
 800775e:	fb06 1115 	mls	r1, r6, r5, r1
 8007762:	2d09      	cmp	r5, #9
 8007764:	f101 0130 	add.w	r1, r1, #48	; 0x30
 8007768:	f803 1c01 	strb.w	r1, [r3, #-1]
 800776c:	f103 32ff 	add.w	r2, r3, #4294967295	; 0xffffffff
 8007770:	4629      	mov	r1, r5
 8007772:	dc09      	bgt.n	8007788 <__exponent+0x50>
 8007774:	3130      	adds	r1, #48	; 0x30
 8007776:	3b02      	subs	r3, #2
 8007778:	f802 1c01 	strb.w	r1, [r2, #-1]
 800777c:	42bb      	cmp	r3, r7
 800777e:	4622      	mov	r2, r4
 8007780:	d304      	bcc.n	800778c <__exponent+0x54>
 8007782:	1a10      	subs	r0, r2, r0
 8007784:	b003      	add	sp, #12
 8007786:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8007788:	4613      	mov	r3, r2
 800778a:	e7e6      	b.n	800775a <__exponent+0x22>
 800778c:	f813 2b01 	ldrb.w	r2, [r3], #1
 8007790:	f804 2b01 	strb.w	r2, [r4], #1
 8007794:	e7f2      	b.n	800777c <__exponent+0x44>
 8007796:	2330      	movs	r3, #48	; 0x30
 8007798:	4419      	add	r1, r3
 800779a:	7083      	strb	r3, [r0, #2]
 800779c:	1d02      	adds	r2, r0, #4
 800779e:	70c1      	strb	r1, [r0, #3]
 80077a0:	e7ef      	b.n	8007782 <__exponent+0x4a>
	...

080077a4 <_printf_float>:
 80077a4:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80077a8:	b091      	sub	sp, #68	; 0x44
 80077aa:	460c      	mov	r4, r1
 80077ac:	9f1a      	ldr	r7, [sp, #104]	; 0x68
 80077ae:	4693      	mov	fp, r2
 80077b0:	461e      	mov	r6, r3
 80077b2:	4605      	mov	r5, r0
 80077b4:	f002 fdfa 	bl	800a3ac <_localeconv_r>
 80077b8:	6803      	ldr	r3, [r0, #0]
 80077ba:	4618      	mov	r0, r3
 80077bc:	9309      	str	r3, [sp, #36]	; 0x24
 80077be:	f7f8 fcc7 	bl	8000150 <strlen>
 80077c2:	2300      	movs	r3, #0
 80077c4:	930e      	str	r3, [sp, #56]	; 0x38
 80077c6:	683b      	ldr	r3, [r7, #0]
 80077c8:	900a      	str	r0, [sp, #40]	; 0x28
 80077ca:	3307      	adds	r3, #7
 80077cc:	f023 0307 	bic.w	r3, r3, #7
 80077d0:	f103 0208 	add.w	r2, r3, #8
 80077d4:	f894 8018 	ldrb.w	r8, [r4, #24]
 80077d8:	f8d4 a000 	ldr.w	sl, [r4]
 80077dc:	603a      	str	r2, [r7, #0]
 80077de:	e9d3 2300 	ldrd	r2, r3, [r3]
 80077e2:	e9c4 2312 	strd	r2, r3, [r4, #72]	; 0x48
 80077e6:	e9d4 7912 	ldrd	r7, r9, [r4, #72]	; 0x48
 80077ea:	f029 4300 	bic.w	r3, r9, #2147483648	; 0x80000000
 80077ee:	930b      	str	r3, [sp, #44]	; 0x2c
 80077f0:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 80077f4:	4ba6      	ldr	r3, [pc, #664]	; (8007a90 <_printf_float+0x2ec>)
 80077f6:	4638      	mov	r0, r7
 80077f8:	990b      	ldr	r1, [sp, #44]	; 0x2c
 80077fa:	f7f9 f907 	bl	8000a0c <__aeabi_dcmpun>
 80077fe:	bb68      	cbnz	r0, 800785c <_printf_float+0xb8>
 8007800:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 8007804:	4ba2      	ldr	r3, [pc, #648]	; (8007a90 <_printf_float+0x2ec>)
 8007806:	4638      	mov	r0, r7
 8007808:	990b      	ldr	r1, [sp, #44]	; 0x2c
 800780a:	f7f9 f8e1 	bl	80009d0 <__aeabi_dcmple>
 800780e:	bb28      	cbnz	r0, 800785c <_printf_float+0xb8>
 8007810:	2200      	movs	r2, #0
 8007812:	2300      	movs	r3, #0
 8007814:	4638      	mov	r0, r7
 8007816:	4649      	mov	r1, r9
 8007818:	f7f9 f8d0 	bl	80009bc <__aeabi_dcmplt>
 800781c:	b110      	cbz	r0, 8007824 <_printf_float+0x80>
 800781e:	232d      	movs	r3, #45	; 0x2d
 8007820:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8007824:	4f9b      	ldr	r7, [pc, #620]	; (8007a94 <_printf_float+0x2f0>)
 8007826:	4b9c      	ldr	r3, [pc, #624]	; (8007a98 <_printf_float+0x2f4>)
 8007828:	f1b8 0f47 	cmp.w	r8, #71	; 0x47
 800782c:	bf98      	it	ls
 800782e:	461f      	movls	r7, r3
 8007830:	2303      	movs	r3, #3
 8007832:	f04f 0900 	mov.w	r9, #0
 8007836:	6123      	str	r3, [r4, #16]
 8007838:	f02a 0304 	bic.w	r3, sl, #4
 800783c:	6023      	str	r3, [r4, #0]
 800783e:	9600      	str	r6, [sp, #0]
 8007840:	465b      	mov	r3, fp
 8007842:	aa0f      	add	r2, sp, #60	; 0x3c
 8007844:	4621      	mov	r1, r4
 8007846:	4628      	mov	r0, r5
 8007848:	f000 f9e2 	bl	8007c10 <_printf_common>
 800784c:	3001      	adds	r0, #1
 800784e:	f040 8090 	bne.w	8007972 <_printf_float+0x1ce>
 8007852:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8007856:	b011      	add	sp, #68	; 0x44
 8007858:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800785c:	463a      	mov	r2, r7
 800785e:	464b      	mov	r3, r9
 8007860:	4638      	mov	r0, r7
 8007862:	4649      	mov	r1, r9
 8007864:	f7f9 f8d2 	bl	8000a0c <__aeabi_dcmpun>
 8007868:	b110      	cbz	r0, 8007870 <_printf_float+0xcc>
 800786a:	4f8c      	ldr	r7, [pc, #560]	; (8007a9c <_printf_float+0x2f8>)
 800786c:	4b8c      	ldr	r3, [pc, #560]	; (8007aa0 <_printf_float+0x2fc>)
 800786e:	e7db      	b.n	8007828 <_printf_float+0x84>
 8007870:	6863      	ldr	r3, [r4, #4]
 8007872:	f44a 6280 	orr.w	r2, sl, #1024	; 0x400
 8007876:	1c59      	adds	r1, r3, #1
 8007878:	a80d      	add	r0, sp, #52	; 0x34
 800787a:	a90e      	add	r1, sp, #56	; 0x38
 800787c:	d140      	bne.n	8007900 <_printf_float+0x15c>
 800787e:	2306      	movs	r3, #6
 8007880:	6063      	str	r3, [r4, #4]
 8007882:	f04f 0c00 	mov.w	ip, #0
 8007886:	f10d 0333 	add.w	r3, sp, #51	; 0x33
 800788a:	e9cd 2301 	strd	r2, r3, [sp, #4]
 800788e:	6863      	ldr	r3, [r4, #4]
 8007890:	6022      	str	r2, [r4, #0]
 8007892:	e9cd 0803 	strd	r0, r8, [sp, #12]
 8007896:	9300      	str	r3, [sp, #0]
 8007898:	463a      	mov	r2, r7
 800789a:	464b      	mov	r3, r9
 800789c:	e9cd 1c05 	strd	r1, ip, [sp, #20]
 80078a0:	4628      	mov	r0, r5
 80078a2:	f7ff feed 	bl	8007680 <__cvt>
 80078a6:	f008 03df 	and.w	r3, r8, #223	; 0xdf
 80078aa:	2b47      	cmp	r3, #71	; 0x47
 80078ac:	4607      	mov	r7, r0
 80078ae:	d109      	bne.n	80078c4 <_printf_float+0x120>
 80078b0:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 80078b2:	1cd8      	adds	r0, r3, #3
 80078b4:	db02      	blt.n	80078bc <_printf_float+0x118>
 80078b6:	6862      	ldr	r2, [r4, #4]
 80078b8:	4293      	cmp	r3, r2
 80078ba:	dd47      	ble.n	800794c <_printf_float+0x1a8>
 80078bc:	f1a8 0802 	sub.w	r8, r8, #2
 80078c0:	fa5f f888 	uxtb.w	r8, r8
 80078c4:	f1b8 0f65 	cmp.w	r8, #101	; 0x65
 80078c8:	990d      	ldr	r1, [sp, #52]	; 0x34
 80078ca:	d824      	bhi.n	8007916 <_printf_float+0x172>
 80078cc:	3901      	subs	r1, #1
 80078ce:	4642      	mov	r2, r8
 80078d0:	f104 0050 	add.w	r0, r4, #80	; 0x50
 80078d4:	910d      	str	r1, [sp, #52]	; 0x34
 80078d6:	f7ff ff2f 	bl	8007738 <__exponent>
 80078da:	9a0e      	ldr	r2, [sp, #56]	; 0x38
 80078dc:	4681      	mov	r9, r0
 80078de:	1813      	adds	r3, r2, r0
 80078e0:	2a01      	cmp	r2, #1
 80078e2:	6123      	str	r3, [r4, #16]
 80078e4:	dc02      	bgt.n	80078ec <_printf_float+0x148>
 80078e6:	6822      	ldr	r2, [r4, #0]
 80078e8:	07d1      	lsls	r1, r2, #31
 80078ea:	d501      	bpl.n	80078f0 <_printf_float+0x14c>
 80078ec:	3301      	adds	r3, #1
 80078ee:	6123      	str	r3, [r4, #16]
 80078f0:	f89d 3033 	ldrb.w	r3, [sp, #51]	; 0x33
 80078f4:	2b00      	cmp	r3, #0
 80078f6:	d0a2      	beq.n	800783e <_printf_float+0x9a>
 80078f8:	232d      	movs	r3, #45	; 0x2d
 80078fa:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 80078fe:	e79e      	b.n	800783e <_printf_float+0x9a>
 8007900:	f1b8 0f67 	cmp.w	r8, #103	; 0x67
 8007904:	f000 816e 	beq.w	8007be4 <_printf_float+0x440>
 8007908:	f1b8 0f47 	cmp.w	r8, #71	; 0x47
 800790c:	d1b9      	bne.n	8007882 <_printf_float+0xde>
 800790e:	2b00      	cmp	r3, #0
 8007910:	d1b7      	bne.n	8007882 <_printf_float+0xde>
 8007912:	2301      	movs	r3, #1
 8007914:	e7b4      	b.n	8007880 <_printf_float+0xdc>
 8007916:	f1b8 0f66 	cmp.w	r8, #102	; 0x66
 800791a:	d119      	bne.n	8007950 <_printf_float+0x1ac>
 800791c:	2900      	cmp	r1, #0
 800791e:	6863      	ldr	r3, [r4, #4]
 8007920:	dd0c      	ble.n	800793c <_printf_float+0x198>
 8007922:	6121      	str	r1, [r4, #16]
 8007924:	b913      	cbnz	r3, 800792c <_printf_float+0x188>
 8007926:	6822      	ldr	r2, [r4, #0]
 8007928:	07d2      	lsls	r2, r2, #31
 800792a:	d502      	bpl.n	8007932 <_printf_float+0x18e>
 800792c:	3301      	adds	r3, #1
 800792e:	440b      	add	r3, r1
 8007930:	6123      	str	r3, [r4, #16]
 8007932:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 8007934:	f04f 0900 	mov.w	r9, #0
 8007938:	65a3      	str	r3, [r4, #88]	; 0x58
 800793a:	e7d9      	b.n	80078f0 <_printf_float+0x14c>
 800793c:	b913      	cbnz	r3, 8007944 <_printf_float+0x1a0>
 800793e:	6822      	ldr	r2, [r4, #0]
 8007940:	07d0      	lsls	r0, r2, #31
 8007942:	d501      	bpl.n	8007948 <_printf_float+0x1a4>
 8007944:	3302      	adds	r3, #2
 8007946:	e7f3      	b.n	8007930 <_printf_float+0x18c>
 8007948:	2301      	movs	r3, #1
 800794a:	e7f1      	b.n	8007930 <_printf_float+0x18c>
 800794c:	f04f 0867 	mov.w	r8, #103	; 0x67
 8007950:	e9dd 320d 	ldrd	r3, r2, [sp, #52]	; 0x34
 8007954:	4293      	cmp	r3, r2
 8007956:	db05      	blt.n	8007964 <_printf_float+0x1c0>
 8007958:	6822      	ldr	r2, [r4, #0]
 800795a:	6123      	str	r3, [r4, #16]
 800795c:	07d1      	lsls	r1, r2, #31
 800795e:	d5e8      	bpl.n	8007932 <_printf_float+0x18e>
 8007960:	3301      	adds	r3, #1
 8007962:	e7e5      	b.n	8007930 <_printf_float+0x18c>
 8007964:	2b00      	cmp	r3, #0
 8007966:	bfcc      	ite	gt
 8007968:	2301      	movgt	r3, #1
 800796a:	f1c3 0302 	rsble	r3, r3, #2
 800796e:	4413      	add	r3, r2
 8007970:	e7de      	b.n	8007930 <_printf_float+0x18c>
 8007972:	6823      	ldr	r3, [r4, #0]
 8007974:	055a      	lsls	r2, r3, #21
 8007976:	d407      	bmi.n	8007988 <_printf_float+0x1e4>
 8007978:	6923      	ldr	r3, [r4, #16]
 800797a:	463a      	mov	r2, r7
 800797c:	4659      	mov	r1, fp
 800797e:	4628      	mov	r0, r5
 8007980:	47b0      	blx	r6
 8007982:	3001      	adds	r0, #1
 8007984:	d129      	bne.n	80079da <_printf_float+0x236>
 8007986:	e764      	b.n	8007852 <_printf_float+0xae>
 8007988:	f1b8 0f65 	cmp.w	r8, #101	; 0x65
 800798c:	f240 80d7 	bls.w	8007b3e <_printf_float+0x39a>
 8007990:	e9d4 0112 	ldrd	r0, r1, [r4, #72]	; 0x48
 8007994:	2200      	movs	r2, #0
 8007996:	2300      	movs	r3, #0
 8007998:	f7f9 f806 	bl	80009a8 <__aeabi_dcmpeq>
 800799c:	b388      	cbz	r0, 8007a02 <_printf_float+0x25e>
 800799e:	2301      	movs	r3, #1
 80079a0:	4a40      	ldr	r2, [pc, #256]	; (8007aa4 <_printf_float+0x300>)
 80079a2:	4659      	mov	r1, fp
 80079a4:	4628      	mov	r0, r5
 80079a6:	47b0      	blx	r6
 80079a8:	3001      	adds	r0, #1
 80079aa:	f43f af52 	beq.w	8007852 <_printf_float+0xae>
 80079ae:	e9dd 230d 	ldrd	r2, r3, [sp, #52]	; 0x34
 80079b2:	429a      	cmp	r2, r3
 80079b4:	db02      	blt.n	80079bc <_printf_float+0x218>
 80079b6:	6823      	ldr	r3, [r4, #0]
 80079b8:	07d8      	lsls	r0, r3, #31
 80079ba:	d50e      	bpl.n	80079da <_printf_float+0x236>
 80079bc:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	; 0x24
 80079c0:	4659      	mov	r1, fp
 80079c2:	4628      	mov	r0, r5
 80079c4:	47b0      	blx	r6
 80079c6:	3001      	adds	r0, #1
 80079c8:	f43f af43 	beq.w	8007852 <_printf_float+0xae>
 80079cc:	2700      	movs	r7, #0
 80079ce:	f104 081a 	add.w	r8, r4, #26
 80079d2:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 80079d4:	3b01      	subs	r3, #1
 80079d6:	42bb      	cmp	r3, r7
 80079d8:	dc09      	bgt.n	80079ee <_printf_float+0x24a>
 80079da:	6823      	ldr	r3, [r4, #0]
 80079dc:	079f      	lsls	r7, r3, #30
 80079de:	f100 80fd 	bmi.w	8007bdc <_printf_float+0x438>
 80079e2:	68e0      	ldr	r0, [r4, #12]
 80079e4:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 80079e6:	4298      	cmp	r0, r3
 80079e8:	bfb8      	it	lt
 80079ea:	4618      	movlt	r0, r3
 80079ec:	e733      	b.n	8007856 <_printf_float+0xb2>
 80079ee:	2301      	movs	r3, #1
 80079f0:	4642      	mov	r2, r8
 80079f2:	4659      	mov	r1, fp
 80079f4:	4628      	mov	r0, r5
 80079f6:	47b0      	blx	r6
 80079f8:	3001      	adds	r0, #1
 80079fa:	f43f af2a 	beq.w	8007852 <_printf_float+0xae>
 80079fe:	3701      	adds	r7, #1
 8007a00:	e7e7      	b.n	80079d2 <_printf_float+0x22e>
 8007a02:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 8007a04:	2b00      	cmp	r3, #0
 8007a06:	dc2b      	bgt.n	8007a60 <_printf_float+0x2bc>
 8007a08:	2301      	movs	r3, #1
 8007a0a:	4a26      	ldr	r2, [pc, #152]	; (8007aa4 <_printf_float+0x300>)
 8007a0c:	4659      	mov	r1, fp
 8007a0e:	4628      	mov	r0, r5
 8007a10:	47b0      	blx	r6
 8007a12:	3001      	adds	r0, #1
 8007a14:	f43f af1d 	beq.w	8007852 <_printf_float+0xae>
 8007a18:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 8007a1a:	b923      	cbnz	r3, 8007a26 <_printf_float+0x282>
 8007a1c:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 8007a1e:	b913      	cbnz	r3, 8007a26 <_printf_float+0x282>
 8007a20:	6823      	ldr	r3, [r4, #0]
 8007a22:	07d9      	lsls	r1, r3, #31
 8007a24:	d5d9      	bpl.n	80079da <_printf_float+0x236>
 8007a26:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	; 0x24
 8007a2a:	4659      	mov	r1, fp
 8007a2c:	4628      	mov	r0, r5
 8007a2e:	47b0      	blx	r6
 8007a30:	3001      	adds	r0, #1
 8007a32:	f43f af0e 	beq.w	8007852 <_printf_float+0xae>
 8007a36:	f04f 0800 	mov.w	r8, #0
 8007a3a:	f104 091a 	add.w	r9, r4, #26
 8007a3e:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 8007a40:	425b      	negs	r3, r3
 8007a42:	4543      	cmp	r3, r8
 8007a44:	dc01      	bgt.n	8007a4a <_printf_float+0x2a6>
 8007a46:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 8007a48:	e797      	b.n	800797a <_printf_float+0x1d6>
 8007a4a:	2301      	movs	r3, #1
 8007a4c:	464a      	mov	r2, r9
 8007a4e:	4659      	mov	r1, fp
 8007a50:	4628      	mov	r0, r5
 8007a52:	47b0      	blx	r6
 8007a54:	3001      	adds	r0, #1
 8007a56:	f43f aefc 	beq.w	8007852 <_printf_float+0xae>
 8007a5a:	f108 0801 	add.w	r8, r8, #1
 8007a5e:	e7ee      	b.n	8007a3e <_printf_float+0x29a>
 8007a60:	9a0e      	ldr	r2, [sp, #56]	; 0x38
 8007a62:	6da3      	ldr	r3, [r4, #88]	; 0x58
 8007a64:	429a      	cmp	r2, r3
 8007a66:	bfa8      	it	ge
 8007a68:	461a      	movge	r2, r3
 8007a6a:	2a00      	cmp	r2, #0
 8007a6c:	4690      	mov	r8, r2
 8007a6e:	dd07      	ble.n	8007a80 <_printf_float+0x2dc>
 8007a70:	4613      	mov	r3, r2
 8007a72:	4659      	mov	r1, fp
 8007a74:	463a      	mov	r2, r7
 8007a76:	4628      	mov	r0, r5
 8007a78:	47b0      	blx	r6
 8007a7a:	3001      	adds	r0, #1
 8007a7c:	f43f aee9 	beq.w	8007852 <_printf_float+0xae>
 8007a80:	f104 031a 	add.w	r3, r4, #26
 8007a84:	f04f 0a00 	mov.w	sl, #0
 8007a88:	ea28 78e8 	bic.w	r8, r8, r8, asr #31
 8007a8c:	930b      	str	r3, [sp, #44]	; 0x2c
 8007a8e:	e015      	b.n	8007abc <_printf_float+0x318>
 8007a90:	7fefffff 	.word	0x7fefffff
 8007a94:	0800bc75 	.word	0x0800bc75
 8007a98:	0800b9c0 	.word	0x0800b9c0
 8007a9c:	0800b9c8 	.word	0x0800b9c8
 8007aa0:	0800b9c4 	.word	0x0800b9c4
 8007aa4:	0800b9cc 	.word	0x0800b9cc
 8007aa8:	2301      	movs	r3, #1
 8007aaa:	9a0b      	ldr	r2, [sp, #44]	; 0x2c
 8007aac:	4659      	mov	r1, fp
 8007aae:	4628      	mov	r0, r5
 8007ab0:	47b0      	blx	r6
 8007ab2:	3001      	adds	r0, #1
 8007ab4:	f43f aecd 	beq.w	8007852 <_printf_float+0xae>
 8007ab8:	f10a 0a01 	add.w	sl, sl, #1
 8007abc:	f8d4 9058 	ldr.w	r9, [r4, #88]	; 0x58
 8007ac0:	eba9 0308 	sub.w	r3, r9, r8
 8007ac4:	4553      	cmp	r3, sl
 8007ac6:	dcef      	bgt.n	8007aa8 <_printf_float+0x304>
 8007ac8:	e9dd 230d 	ldrd	r2, r3, [sp, #52]	; 0x34
 8007acc:	429a      	cmp	r2, r3
 8007ace:	444f      	add	r7, r9
 8007ad0:	db14      	blt.n	8007afc <_printf_float+0x358>
 8007ad2:	6823      	ldr	r3, [r4, #0]
 8007ad4:	07da      	lsls	r2, r3, #31
 8007ad6:	d411      	bmi.n	8007afc <_printf_float+0x358>
 8007ad8:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 8007ada:	990d      	ldr	r1, [sp, #52]	; 0x34
 8007adc:	eba3 0209 	sub.w	r2, r3, r9
 8007ae0:	eba3 0901 	sub.w	r9, r3, r1
 8007ae4:	4591      	cmp	r9, r2
 8007ae6:	bfa8      	it	ge
 8007ae8:	4691      	movge	r9, r2
 8007aea:	f1b9 0f00 	cmp.w	r9, #0
 8007aee:	dc0d      	bgt.n	8007b0c <_printf_float+0x368>
 8007af0:	2700      	movs	r7, #0
 8007af2:	ea29 79e9 	bic.w	r9, r9, r9, asr #31
 8007af6:	f104 081a 	add.w	r8, r4, #26
 8007afa:	e018      	b.n	8007b2e <_printf_float+0x38a>
 8007afc:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	; 0x24
 8007b00:	4659      	mov	r1, fp
 8007b02:	4628      	mov	r0, r5
 8007b04:	47b0      	blx	r6
 8007b06:	3001      	adds	r0, #1
 8007b08:	d1e6      	bne.n	8007ad8 <_printf_float+0x334>
 8007b0a:	e6a2      	b.n	8007852 <_printf_float+0xae>
 8007b0c:	464b      	mov	r3, r9
 8007b0e:	463a      	mov	r2, r7
 8007b10:	4659      	mov	r1, fp
 8007b12:	4628      	mov	r0, r5
 8007b14:	47b0      	blx	r6
 8007b16:	3001      	adds	r0, #1
 8007b18:	d1ea      	bne.n	8007af0 <_printf_float+0x34c>
 8007b1a:	e69a      	b.n	8007852 <_printf_float+0xae>
 8007b1c:	2301      	movs	r3, #1
 8007b1e:	4642      	mov	r2, r8
 8007b20:	4659      	mov	r1, fp
 8007b22:	4628      	mov	r0, r5
 8007b24:	47b0      	blx	r6
 8007b26:	3001      	adds	r0, #1
 8007b28:	f43f ae93 	beq.w	8007852 <_printf_float+0xae>
 8007b2c:	3701      	adds	r7, #1
 8007b2e:	e9dd 230d 	ldrd	r2, r3, [sp, #52]	; 0x34
 8007b32:	1a9b      	subs	r3, r3, r2
 8007b34:	eba3 0309 	sub.w	r3, r3, r9
 8007b38:	42bb      	cmp	r3, r7
 8007b3a:	dcef      	bgt.n	8007b1c <_printf_float+0x378>
 8007b3c:	e74d      	b.n	80079da <_printf_float+0x236>
 8007b3e:	9a0e      	ldr	r2, [sp, #56]	; 0x38
 8007b40:	2a01      	cmp	r2, #1
 8007b42:	dc01      	bgt.n	8007b48 <_printf_float+0x3a4>
 8007b44:	07db      	lsls	r3, r3, #31
 8007b46:	d538      	bpl.n	8007bba <_printf_float+0x416>
 8007b48:	2301      	movs	r3, #1
 8007b4a:	463a      	mov	r2, r7
 8007b4c:	4659      	mov	r1, fp
 8007b4e:	4628      	mov	r0, r5
 8007b50:	47b0      	blx	r6
 8007b52:	3001      	adds	r0, #1
 8007b54:	f43f ae7d 	beq.w	8007852 <_printf_float+0xae>
 8007b58:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	; 0x24
 8007b5c:	4659      	mov	r1, fp
 8007b5e:	4628      	mov	r0, r5
 8007b60:	47b0      	blx	r6
 8007b62:	3001      	adds	r0, #1
 8007b64:	f107 0701 	add.w	r7, r7, #1
 8007b68:	f43f ae73 	beq.w	8007852 <_printf_float+0xae>
 8007b6c:	e9d4 0112 	ldrd	r0, r1, [r4, #72]	; 0x48
 8007b70:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 8007b72:	2200      	movs	r2, #0
 8007b74:	f103 38ff 	add.w	r8, r3, #4294967295	; 0xffffffff
 8007b78:	2300      	movs	r3, #0
 8007b7a:	f7f8 ff15 	bl	80009a8 <__aeabi_dcmpeq>
 8007b7e:	b9c0      	cbnz	r0, 8007bb2 <_printf_float+0x40e>
 8007b80:	4643      	mov	r3, r8
 8007b82:	463a      	mov	r2, r7
 8007b84:	4659      	mov	r1, fp
 8007b86:	4628      	mov	r0, r5
 8007b88:	47b0      	blx	r6
 8007b8a:	3001      	adds	r0, #1
 8007b8c:	d10d      	bne.n	8007baa <_printf_float+0x406>
 8007b8e:	e660      	b.n	8007852 <_printf_float+0xae>
 8007b90:	2301      	movs	r3, #1
 8007b92:	4642      	mov	r2, r8
 8007b94:	4659      	mov	r1, fp
 8007b96:	4628      	mov	r0, r5
 8007b98:	47b0      	blx	r6
 8007b9a:	3001      	adds	r0, #1
 8007b9c:	f43f ae59 	beq.w	8007852 <_printf_float+0xae>
 8007ba0:	3701      	adds	r7, #1
 8007ba2:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 8007ba4:	3b01      	subs	r3, #1
 8007ba6:	42bb      	cmp	r3, r7
 8007ba8:	dcf2      	bgt.n	8007b90 <_printf_float+0x3ec>
 8007baa:	464b      	mov	r3, r9
 8007bac:	f104 0250 	add.w	r2, r4, #80	; 0x50
 8007bb0:	e6e4      	b.n	800797c <_printf_float+0x1d8>
 8007bb2:	2700      	movs	r7, #0
 8007bb4:	f104 081a 	add.w	r8, r4, #26
 8007bb8:	e7f3      	b.n	8007ba2 <_printf_float+0x3fe>
 8007bba:	2301      	movs	r3, #1
 8007bbc:	e7e1      	b.n	8007b82 <_printf_float+0x3de>
 8007bbe:	2301      	movs	r3, #1
 8007bc0:	4642      	mov	r2, r8
 8007bc2:	4659      	mov	r1, fp
 8007bc4:	4628      	mov	r0, r5
 8007bc6:	47b0      	blx	r6
 8007bc8:	3001      	adds	r0, #1
 8007bca:	f43f ae42 	beq.w	8007852 <_printf_float+0xae>
 8007bce:	3701      	adds	r7, #1
 8007bd0:	68e3      	ldr	r3, [r4, #12]
 8007bd2:	9a0f      	ldr	r2, [sp, #60]	; 0x3c
 8007bd4:	1a9b      	subs	r3, r3, r2
 8007bd6:	42bb      	cmp	r3, r7
 8007bd8:	dcf1      	bgt.n	8007bbe <_printf_float+0x41a>
 8007bda:	e702      	b.n	80079e2 <_printf_float+0x23e>
 8007bdc:	2700      	movs	r7, #0
 8007bde:	f104 0819 	add.w	r8, r4, #25
 8007be2:	e7f5      	b.n	8007bd0 <_printf_float+0x42c>
 8007be4:	2b00      	cmp	r3, #0
 8007be6:	f43f ae94 	beq.w	8007912 <_printf_float+0x16e>
 8007bea:	f04f 0c00 	mov.w	ip, #0
 8007bee:	e9cd 1c05 	strd	r1, ip, [sp, #20]
 8007bf2:	f10d 0133 	add.w	r1, sp, #51	; 0x33
 8007bf6:	6022      	str	r2, [r4, #0]
 8007bf8:	e9cd 0803 	strd	r0, r8, [sp, #12]
 8007bfc:	e9cd 2101 	strd	r2, r1, [sp, #4]
 8007c00:	9300      	str	r3, [sp, #0]
 8007c02:	463a      	mov	r2, r7
 8007c04:	464b      	mov	r3, r9
 8007c06:	4628      	mov	r0, r5
 8007c08:	f7ff fd3a 	bl	8007680 <__cvt>
 8007c0c:	4607      	mov	r7, r0
 8007c0e:	e64f      	b.n	80078b0 <_printf_float+0x10c>

08007c10 <_printf_common>:
 8007c10:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8007c14:	4691      	mov	r9, r2
 8007c16:	461f      	mov	r7, r3
 8007c18:	688a      	ldr	r2, [r1, #8]
 8007c1a:	690b      	ldr	r3, [r1, #16]
 8007c1c:	4606      	mov	r6, r0
 8007c1e:	4293      	cmp	r3, r2
 8007c20:	bfb8      	it	lt
 8007c22:	4613      	movlt	r3, r2
 8007c24:	f8c9 3000 	str.w	r3, [r9]
 8007c28:	f891 2043 	ldrb.w	r2, [r1, #67]	; 0x43
 8007c2c:	460c      	mov	r4, r1
 8007c2e:	f8dd 8020 	ldr.w	r8, [sp, #32]
 8007c32:	b112      	cbz	r2, 8007c3a <_printf_common+0x2a>
 8007c34:	3301      	adds	r3, #1
 8007c36:	f8c9 3000 	str.w	r3, [r9]
 8007c3a:	6823      	ldr	r3, [r4, #0]
 8007c3c:	0699      	lsls	r1, r3, #26
 8007c3e:	bf42      	ittt	mi
 8007c40:	f8d9 3000 	ldrmi.w	r3, [r9]
 8007c44:	3302      	addmi	r3, #2
 8007c46:	f8c9 3000 	strmi.w	r3, [r9]
 8007c4a:	6825      	ldr	r5, [r4, #0]
 8007c4c:	f015 0506 	ands.w	r5, r5, #6
 8007c50:	d107      	bne.n	8007c62 <_printf_common+0x52>
 8007c52:	f104 0a19 	add.w	sl, r4, #25
 8007c56:	68e3      	ldr	r3, [r4, #12]
 8007c58:	f8d9 2000 	ldr.w	r2, [r9]
 8007c5c:	1a9b      	subs	r3, r3, r2
 8007c5e:	42ab      	cmp	r3, r5
 8007c60:	dc29      	bgt.n	8007cb6 <_printf_common+0xa6>
 8007c62:	f894 3043 	ldrb.w	r3, [r4, #67]	; 0x43
 8007c66:	6822      	ldr	r2, [r4, #0]
 8007c68:	3300      	adds	r3, #0
 8007c6a:	bf18      	it	ne
 8007c6c:	2301      	movne	r3, #1
 8007c6e:	0692      	lsls	r2, r2, #26
 8007c70:	d42e      	bmi.n	8007cd0 <_printf_common+0xc0>
 8007c72:	f104 0243 	add.w	r2, r4, #67	; 0x43
 8007c76:	4639      	mov	r1, r7
 8007c78:	4630      	mov	r0, r6
 8007c7a:	47c0      	blx	r8
 8007c7c:	3001      	adds	r0, #1
 8007c7e:	d021      	beq.n	8007cc4 <_printf_common+0xb4>
 8007c80:	6823      	ldr	r3, [r4, #0]
 8007c82:	68e5      	ldr	r5, [r4, #12]
 8007c84:	f003 0306 	and.w	r3, r3, #6
 8007c88:	2b04      	cmp	r3, #4
 8007c8a:	bf18      	it	ne
 8007c8c:	2500      	movne	r5, #0
 8007c8e:	f8d9 2000 	ldr.w	r2, [r9]
 8007c92:	f04f 0900 	mov.w	r9, #0
 8007c96:	bf08      	it	eq
 8007c98:	1aad      	subeq	r5, r5, r2
 8007c9a:	68a3      	ldr	r3, [r4, #8]
 8007c9c:	6922      	ldr	r2, [r4, #16]
 8007c9e:	bf08      	it	eq
 8007ca0:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 8007ca4:	4293      	cmp	r3, r2
 8007ca6:	bfc4      	itt	gt
 8007ca8:	1a9b      	subgt	r3, r3, r2
 8007caa:	18ed      	addgt	r5, r5, r3
 8007cac:	341a      	adds	r4, #26
 8007cae:	454d      	cmp	r5, r9
 8007cb0:	d11a      	bne.n	8007ce8 <_printf_common+0xd8>
 8007cb2:	2000      	movs	r0, #0
 8007cb4:	e008      	b.n	8007cc8 <_printf_common+0xb8>
 8007cb6:	2301      	movs	r3, #1
 8007cb8:	4652      	mov	r2, sl
 8007cba:	4639      	mov	r1, r7
 8007cbc:	4630      	mov	r0, r6
 8007cbe:	47c0      	blx	r8
 8007cc0:	3001      	adds	r0, #1
 8007cc2:	d103      	bne.n	8007ccc <_printf_common+0xbc>
 8007cc4:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8007cc8:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8007ccc:	3501      	adds	r5, #1
 8007cce:	e7c2      	b.n	8007c56 <_printf_common+0x46>
 8007cd0:	2030      	movs	r0, #48	; 0x30
 8007cd2:	18e1      	adds	r1, r4, r3
 8007cd4:	f881 0043 	strb.w	r0, [r1, #67]	; 0x43
 8007cd8:	1c5a      	adds	r2, r3, #1
 8007cda:	f894 1045 	ldrb.w	r1, [r4, #69]	; 0x45
 8007cde:	4422      	add	r2, r4
 8007ce0:	3302      	adds	r3, #2
 8007ce2:	f882 1043 	strb.w	r1, [r2, #67]	; 0x43
 8007ce6:	e7c4      	b.n	8007c72 <_printf_common+0x62>
 8007ce8:	2301      	movs	r3, #1
 8007cea:	4622      	mov	r2, r4
 8007cec:	4639      	mov	r1, r7
 8007cee:	4630      	mov	r0, r6
 8007cf0:	47c0      	blx	r8
 8007cf2:	3001      	adds	r0, #1
 8007cf4:	d0e6      	beq.n	8007cc4 <_printf_common+0xb4>
 8007cf6:	f109 0901 	add.w	r9, r9, #1
 8007cfa:	e7d8      	b.n	8007cae <_printf_common+0x9e>

08007cfc <_printf_i>:
 8007cfc:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 8007d00:	f101 0c43 	add.w	ip, r1, #67	; 0x43
 8007d04:	460c      	mov	r4, r1
 8007d06:	7e09      	ldrb	r1, [r1, #24]
 8007d08:	b085      	sub	sp, #20
 8007d0a:	296e      	cmp	r1, #110	; 0x6e
 8007d0c:	4617      	mov	r7, r2
 8007d0e:	4606      	mov	r6, r0
 8007d10:	4698      	mov	r8, r3
 8007d12:	9a0c      	ldr	r2, [sp, #48]	; 0x30
 8007d14:	f000 80b3 	beq.w	8007e7e <_printf_i+0x182>
 8007d18:	d822      	bhi.n	8007d60 <_printf_i+0x64>
 8007d1a:	2963      	cmp	r1, #99	; 0x63
 8007d1c:	d036      	beq.n	8007d8c <_printf_i+0x90>
 8007d1e:	d80a      	bhi.n	8007d36 <_printf_i+0x3a>
 8007d20:	2900      	cmp	r1, #0
 8007d22:	f000 80b9 	beq.w	8007e98 <_printf_i+0x19c>
 8007d26:	2958      	cmp	r1, #88	; 0x58
 8007d28:	f000 8083 	beq.w	8007e32 <_printf_i+0x136>
 8007d2c:	f104 0542 	add.w	r5, r4, #66	; 0x42
 8007d30:	f884 1042 	strb.w	r1, [r4, #66]	; 0x42
 8007d34:	e032      	b.n	8007d9c <_printf_i+0xa0>
 8007d36:	2964      	cmp	r1, #100	; 0x64
 8007d38:	d001      	beq.n	8007d3e <_printf_i+0x42>
 8007d3a:	2969      	cmp	r1, #105	; 0x69
 8007d3c:	d1f6      	bne.n	8007d2c <_printf_i+0x30>
 8007d3e:	6820      	ldr	r0, [r4, #0]
 8007d40:	6813      	ldr	r3, [r2, #0]
 8007d42:	0605      	lsls	r5, r0, #24
 8007d44:	f103 0104 	add.w	r1, r3, #4
 8007d48:	d52a      	bpl.n	8007da0 <_printf_i+0xa4>
 8007d4a:	681b      	ldr	r3, [r3, #0]
 8007d4c:	6011      	str	r1, [r2, #0]
 8007d4e:	2b00      	cmp	r3, #0
 8007d50:	da03      	bge.n	8007d5a <_printf_i+0x5e>
 8007d52:	222d      	movs	r2, #45	; 0x2d
 8007d54:	425b      	negs	r3, r3
 8007d56:	f884 2043 	strb.w	r2, [r4, #67]	; 0x43
 8007d5a:	486f      	ldr	r0, [pc, #444]	; (8007f18 <_printf_i+0x21c>)
 8007d5c:	220a      	movs	r2, #10
 8007d5e:	e039      	b.n	8007dd4 <_printf_i+0xd8>
 8007d60:	2973      	cmp	r1, #115	; 0x73
 8007d62:	f000 809d 	beq.w	8007ea0 <_printf_i+0x1a4>
 8007d66:	d808      	bhi.n	8007d7a <_printf_i+0x7e>
 8007d68:	296f      	cmp	r1, #111	; 0x6f
 8007d6a:	d020      	beq.n	8007dae <_printf_i+0xb2>
 8007d6c:	2970      	cmp	r1, #112	; 0x70
 8007d6e:	d1dd      	bne.n	8007d2c <_printf_i+0x30>
 8007d70:	6823      	ldr	r3, [r4, #0]
 8007d72:	f043 0320 	orr.w	r3, r3, #32
 8007d76:	6023      	str	r3, [r4, #0]
 8007d78:	e003      	b.n	8007d82 <_printf_i+0x86>
 8007d7a:	2975      	cmp	r1, #117	; 0x75
 8007d7c:	d017      	beq.n	8007dae <_printf_i+0xb2>
 8007d7e:	2978      	cmp	r1, #120	; 0x78
 8007d80:	d1d4      	bne.n	8007d2c <_printf_i+0x30>
 8007d82:	2378      	movs	r3, #120	; 0x78
 8007d84:	4865      	ldr	r0, [pc, #404]	; (8007f1c <_printf_i+0x220>)
 8007d86:	f884 3045 	strb.w	r3, [r4, #69]	; 0x45
 8007d8a:	e055      	b.n	8007e38 <_printf_i+0x13c>
 8007d8c:	6813      	ldr	r3, [r2, #0]
 8007d8e:	f104 0542 	add.w	r5, r4, #66	; 0x42
 8007d92:	1d19      	adds	r1, r3, #4
 8007d94:	681b      	ldr	r3, [r3, #0]
 8007d96:	6011      	str	r1, [r2, #0]
 8007d98:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 8007d9c:	2301      	movs	r3, #1
 8007d9e:	e08c      	b.n	8007eba <_printf_i+0x1be>
 8007da0:	681b      	ldr	r3, [r3, #0]
 8007da2:	f010 0f40 	tst.w	r0, #64	; 0x40
 8007da6:	6011      	str	r1, [r2, #0]
 8007da8:	bf18      	it	ne
 8007daa:	b21b      	sxthne	r3, r3
 8007dac:	e7cf      	b.n	8007d4e <_printf_i+0x52>
 8007dae:	6813      	ldr	r3, [r2, #0]
 8007db0:	6825      	ldr	r5, [r4, #0]
 8007db2:	1d18      	adds	r0, r3, #4
 8007db4:	6010      	str	r0, [r2, #0]
 8007db6:	0628      	lsls	r0, r5, #24
 8007db8:	d501      	bpl.n	8007dbe <_printf_i+0xc2>
 8007dba:	681b      	ldr	r3, [r3, #0]
 8007dbc:	e002      	b.n	8007dc4 <_printf_i+0xc8>
 8007dbe:	0668      	lsls	r0, r5, #25
 8007dc0:	d5fb      	bpl.n	8007dba <_printf_i+0xbe>
 8007dc2:	881b      	ldrh	r3, [r3, #0]
 8007dc4:	296f      	cmp	r1, #111	; 0x6f
 8007dc6:	bf14      	ite	ne
 8007dc8:	220a      	movne	r2, #10
 8007dca:	2208      	moveq	r2, #8
 8007dcc:	4852      	ldr	r0, [pc, #328]	; (8007f18 <_printf_i+0x21c>)
 8007dce:	2100      	movs	r1, #0
 8007dd0:	f884 1043 	strb.w	r1, [r4, #67]	; 0x43
 8007dd4:	6865      	ldr	r5, [r4, #4]
 8007dd6:	2d00      	cmp	r5, #0
 8007dd8:	60a5      	str	r5, [r4, #8]
 8007dda:	f2c0 8095 	blt.w	8007f08 <_printf_i+0x20c>
 8007dde:	6821      	ldr	r1, [r4, #0]
 8007de0:	f021 0104 	bic.w	r1, r1, #4
 8007de4:	6021      	str	r1, [r4, #0]
 8007de6:	2b00      	cmp	r3, #0
 8007de8:	d13d      	bne.n	8007e66 <_printf_i+0x16a>
 8007dea:	2d00      	cmp	r5, #0
 8007dec:	f040 808e 	bne.w	8007f0c <_printf_i+0x210>
 8007df0:	4665      	mov	r5, ip
 8007df2:	2a08      	cmp	r2, #8
 8007df4:	d10b      	bne.n	8007e0e <_printf_i+0x112>
 8007df6:	6823      	ldr	r3, [r4, #0]
 8007df8:	07db      	lsls	r3, r3, #31
 8007dfa:	d508      	bpl.n	8007e0e <_printf_i+0x112>
 8007dfc:	6923      	ldr	r3, [r4, #16]
 8007dfe:	6862      	ldr	r2, [r4, #4]
 8007e00:	429a      	cmp	r2, r3
 8007e02:	bfde      	ittt	le
 8007e04:	2330      	movle	r3, #48	; 0x30
 8007e06:	f805 3c01 	strble.w	r3, [r5, #-1]
 8007e0a:	f105 35ff 	addle.w	r5, r5, #4294967295	; 0xffffffff
 8007e0e:	ebac 0305 	sub.w	r3, ip, r5
 8007e12:	6123      	str	r3, [r4, #16]
 8007e14:	f8cd 8000 	str.w	r8, [sp]
 8007e18:	463b      	mov	r3, r7
 8007e1a:	aa03      	add	r2, sp, #12
 8007e1c:	4621      	mov	r1, r4
 8007e1e:	4630      	mov	r0, r6
 8007e20:	f7ff fef6 	bl	8007c10 <_printf_common>
 8007e24:	3001      	adds	r0, #1
 8007e26:	d14d      	bne.n	8007ec4 <_printf_i+0x1c8>
 8007e28:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8007e2c:	b005      	add	sp, #20
 8007e2e:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 8007e32:	4839      	ldr	r0, [pc, #228]	; (8007f18 <_printf_i+0x21c>)
 8007e34:	f884 1045 	strb.w	r1, [r4, #69]	; 0x45
 8007e38:	6813      	ldr	r3, [r2, #0]
 8007e3a:	6821      	ldr	r1, [r4, #0]
 8007e3c:	1d1d      	adds	r5, r3, #4
 8007e3e:	681b      	ldr	r3, [r3, #0]
 8007e40:	6015      	str	r5, [r2, #0]
 8007e42:	060a      	lsls	r2, r1, #24
 8007e44:	d50b      	bpl.n	8007e5e <_printf_i+0x162>
 8007e46:	07ca      	lsls	r2, r1, #31
 8007e48:	bf44      	itt	mi
 8007e4a:	f041 0120 	orrmi.w	r1, r1, #32
 8007e4e:	6021      	strmi	r1, [r4, #0]
 8007e50:	b91b      	cbnz	r3, 8007e5a <_printf_i+0x15e>
 8007e52:	6822      	ldr	r2, [r4, #0]
 8007e54:	f022 0220 	bic.w	r2, r2, #32
 8007e58:	6022      	str	r2, [r4, #0]
 8007e5a:	2210      	movs	r2, #16
 8007e5c:	e7b7      	b.n	8007dce <_printf_i+0xd2>
 8007e5e:	064d      	lsls	r5, r1, #25
 8007e60:	bf48      	it	mi
 8007e62:	b29b      	uxthmi	r3, r3
 8007e64:	e7ef      	b.n	8007e46 <_printf_i+0x14a>
 8007e66:	4665      	mov	r5, ip
 8007e68:	fbb3 f1f2 	udiv	r1, r3, r2
 8007e6c:	fb02 3311 	mls	r3, r2, r1, r3
 8007e70:	5cc3      	ldrb	r3, [r0, r3]
 8007e72:	f805 3d01 	strb.w	r3, [r5, #-1]!
 8007e76:	460b      	mov	r3, r1
 8007e78:	2900      	cmp	r1, #0
 8007e7a:	d1f5      	bne.n	8007e68 <_printf_i+0x16c>
 8007e7c:	e7b9      	b.n	8007df2 <_printf_i+0xf6>
 8007e7e:	6813      	ldr	r3, [r2, #0]
 8007e80:	6825      	ldr	r5, [r4, #0]
 8007e82:	1d18      	adds	r0, r3, #4
 8007e84:	6961      	ldr	r1, [r4, #20]
 8007e86:	6010      	str	r0, [r2, #0]
 8007e88:	0628      	lsls	r0, r5, #24
 8007e8a:	681b      	ldr	r3, [r3, #0]
 8007e8c:	d501      	bpl.n	8007e92 <_printf_i+0x196>
 8007e8e:	6019      	str	r1, [r3, #0]
 8007e90:	e002      	b.n	8007e98 <_printf_i+0x19c>
 8007e92:	066a      	lsls	r2, r5, #25
 8007e94:	d5fb      	bpl.n	8007e8e <_printf_i+0x192>
 8007e96:	8019      	strh	r1, [r3, #0]
 8007e98:	2300      	movs	r3, #0
 8007e9a:	4665      	mov	r5, ip
 8007e9c:	6123      	str	r3, [r4, #16]
 8007e9e:	e7b9      	b.n	8007e14 <_printf_i+0x118>
 8007ea0:	6813      	ldr	r3, [r2, #0]
 8007ea2:	1d19      	adds	r1, r3, #4
 8007ea4:	6011      	str	r1, [r2, #0]
 8007ea6:	681d      	ldr	r5, [r3, #0]
 8007ea8:	6862      	ldr	r2, [r4, #4]
 8007eaa:	2100      	movs	r1, #0
 8007eac:	4628      	mov	r0, r5
 8007eae:	f002 fa9d 	bl	800a3ec <memchr>
 8007eb2:	b108      	cbz	r0, 8007eb8 <_printf_i+0x1bc>
 8007eb4:	1b40      	subs	r0, r0, r5
 8007eb6:	6060      	str	r0, [r4, #4]
 8007eb8:	6863      	ldr	r3, [r4, #4]
 8007eba:	6123      	str	r3, [r4, #16]
 8007ebc:	2300      	movs	r3, #0
 8007ebe:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8007ec2:	e7a7      	b.n	8007e14 <_printf_i+0x118>
 8007ec4:	6923      	ldr	r3, [r4, #16]
 8007ec6:	462a      	mov	r2, r5
 8007ec8:	4639      	mov	r1, r7
 8007eca:	4630      	mov	r0, r6
 8007ecc:	47c0      	blx	r8
 8007ece:	3001      	adds	r0, #1
 8007ed0:	d0aa      	beq.n	8007e28 <_printf_i+0x12c>
 8007ed2:	6823      	ldr	r3, [r4, #0]
 8007ed4:	079b      	lsls	r3, r3, #30
 8007ed6:	d413      	bmi.n	8007f00 <_printf_i+0x204>
 8007ed8:	68e0      	ldr	r0, [r4, #12]
 8007eda:	9b03      	ldr	r3, [sp, #12]
 8007edc:	4298      	cmp	r0, r3
 8007ede:	bfb8      	it	lt
 8007ee0:	4618      	movlt	r0, r3
 8007ee2:	e7a3      	b.n	8007e2c <_printf_i+0x130>
 8007ee4:	2301      	movs	r3, #1
 8007ee6:	464a      	mov	r2, r9
 8007ee8:	4639      	mov	r1, r7
 8007eea:	4630      	mov	r0, r6
 8007eec:	47c0      	blx	r8
 8007eee:	3001      	adds	r0, #1
 8007ef0:	d09a      	beq.n	8007e28 <_printf_i+0x12c>
 8007ef2:	3501      	adds	r5, #1
 8007ef4:	68e3      	ldr	r3, [r4, #12]
 8007ef6:	9a03      	ldr	r2, [sp, #12]
 8007ef8:	1a9b      	subs	r3, r3, r2
 8007efa:	42ab      	cmp	r3, r5
 8007efc:	dcf2      	bgt.n	8007ee4 <_printf_i+0x1e8>
 8007efe:	e7eb      	b.n	8007ed8 <_printf_i+0x1dc>
 8007f00:	2500      	movs	r5, #0
 8007f02:	f104 0919 	add.w	r9, r4, #25
 8007f06:	e7f5      	b.n	8007ef4 <_printf_i+0x1f8>
 8007f08:	2b00      	cmp	r3, #0
 8007f0a:	d1ac      	bne.n	8007e66 <_printf_i+0x16a>
 8007f0c:	7803      	ldrb	r3, [r0, #0]
 8007f0e:	f104 0542 	add.w	r5, r4, #66	; 0x42
 8007f12:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 8007f16:	e76c      	b.n	8007df2 <_printf_i+0xf6>
 8007f18:	0800b9ce 	.word	0x0800b9ce
 8007f1c:	0800b9df 	.word	0x0800b9df

08007f20 <_scanf_float>:
 8007f20:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8007f24:	469a      	mov	sl, r3
 8007f26:	688b      	ldr	r3, [r1, #8]
 8007f28:	4616      	mov	r6, r2
 8007f2a:	1e5a      	subs	r2, r3, #1
 8007f2c:	f5b2 7fae 	cmp.w	r2, #348	; 0x15c
 8007f30:	bf88      	it	hi
 8007f32:	f46f 72ae 	mvnhi.w	r2, #348	; 0x15c
 8007f36:	b087      	sub	sp, #28
 8007f38:	bf85      	ittet	hi
 8007f3a:	189b      	addhi	r3, r3, r2
 8007f3c:	9301      	strhi	r3, [sp, #4]
 8007f3e:	2300      	movls	r3, #0
 8007f40:	f240 135d 	movwhi	r3, #349	; 0x15d
 8007f44:	4688      	mov	r8, r1
 8007f46:	f04f 0b00 	mov.w	fp, #0
 8007f4a:	bf8c      	ite	hi
 8007f4c:	608b      	strhi	r3, [r1, #8]
 8007f4e:	9301      	strls	r3, [sp, #4]
 8007f50:	680b      	ldr	r3, [r1, #0]
 8007f52:	4607      	mov	r7, r0
 8007f54:	f443 63f0 	orr.w	r3, r3, #1920	; 0x780
 8007f58:	f848 3b1c 	str.w	r3, [r8], #28
 8007f5c:	460c      	mov	r4, r1
 8007f5e:	4645      	mov	r5, r8
 8007f60:	465a      	mov	r2, fp
 8007f62:	46d9      	mov	r9, fp
 8007f64:	e9cd bb03 	strd	fp, fp, [sp, #12]
 8007f68:	f8cd b008 	str.w	fp, [sp, #8]
 8007f6c:	68a1      	ldr	r1, [r4, #8]
 8007f6e:	b181      	cbz	r1, 8007f92 <_scanf_float+0x72>
 8007f70:	6833      	ldr	r3, [r6, #0]
 8007f72:	781b      	ldrb	r3, [r3, #0]
 8007f74:	2b49      	cmp	r3, #73	; 0x49
 8007f76:	d071      	beq.n	800805c <_scanf_float+0x13c>
 8007f78:	d84d      	bhi.n	8008016 <_scanf_float+0xf6>
 8007f7a:	2b39      	cmp	r3, #57	; 0x39
 8007f7c:	d840      	bhi.n	8008000 <_scanf_float+0xe0>
 8007f7e:	2b31      	cmp	r3, #49	; 0x31
 8007f80:	f080 8088 	bcs.w	8008094 <_scanf_float+0x174>
 8007f84:	2b2d      	cmp	r3, #45	; 0x2d
 8007f86:	f000 8090 	beq.w	80080aa <_scanf_float+0x18a>
 8007f8a:	d815      	bhi.n	8007fb8 <_scanf_float+0x98>
 8007f8c:	2b2b      	cmp	r3, #43	; 0x2b
 8007f8e:	f000 808c 	beq.w	80080aa <_scanf_float+0x18a>
 8007f92:	f1b9 0f00 	cmp.w	r9, #0
 8007f96:	d003      	beq.n	8007fa0 <_scanf_float+0x80>
 8007f98:	6823      	ldr	r3, [r4, #0]
 8007f9a:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8007f9e:	6023      	str	r3, [r4, #0]
 8007fa0:	3a01      	subs	r2, #1
 8007fa2:	2a01      	cmp	r2, #1
 8007fa4:	f200 80ea 	bhi.w	800817c <_scanf_float+0x25c>
 8007fa8:	4545      	cmp	r5, r8
 8007faa:	f200 80dc 	bhi.w	8008166 <_scanf_float+0x246>
 8007fae:	2601      	movs	r6, #1
 8007fb0:	4630      	mov	r0, r6
 8007fb2:	b007      	add	sp, #28
 8007fb4:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8007fb8:	2b2e      	cmp	r3, #46	; 0x2e
 8007fba:	f000 809f 	beq.w	80080fc <_scanf_float+0x1dc>
 8007fbe:	2b30      	cmp	r3, #48	; 0x30
 8007fc0:	d1e7      	bne.n	8007f92 <_scanf_float+0x72>
 8007fc2:	6820      	ldr	r0, [r4, #0]
 8007fc4:	f410 7f80 	tst.w	r0, #256	; 0x100
 8007fc8:	d064      	beq.n	8008094 <_scanf_float+0x174>
 8007fca:	9b01      	ldr	r3, [sp, #4]
 8007fcc:	f020 0080 	bic.w	r0, r0, #128	; 0x80
 8007fd0:	6020      	str	r0, [r4, #0]
 8007fd2:	f109 0901 	add.w	r9, r9, #1
 8007fd6:	b11b      	cbz	r3, 8007fe0 <_scanf_float+0xc0>
 8007fd8:	3b01      	subs	r3, #1
 8007fda:	3101      	adds	r1, #1
 8007fdc:	9301      	str	r3, [sp, #4]
 8007fde:	60a1      	str	r1, [r4, #8]
 8007fe0:	68a3      	ldr	r3, [r4, #8]
 8007fe2:	3b01      	subs	r3, #1
 8007fe4:	60a3      	str	r3, [r4, #8]
 8007fe6:	6923      	ldr	r3, [r4, #16]
 8007fe8:	3301      	adds	r3, #1
 8007fea:	6123      	str	r3, [r4, #16]
 8007fec:	6873      	ldr	r3, [r6, #4]
 8007fee:	3b01      	subs	r3, #1
 8007ff0:	2b00      	cmp	r3, #0
 8007ff2:	6073      	str	r3, [r6, #4]
 8007ff4:	f340 80ac 	ble.w	8008150 <_scanf_float+0x230>
 8007ff8:	6833      	ldr	r3, [r6, #0]
 8007ffa:	3301      	adds	r3, #1
 8007ffc:	6033      	str	r3, [r6, #0]
 8007ffe:	e7b5      	b.n	8007f6c <_scanf_float+0x4c>
 8008000:	2b45      	cmp	r3, #69	; 0x45
 8008002:	f000 8085 	beq.w	8008110 <_scanf_float+0x1f0>
 8008006:	2b46      	cmp	r3, #70	; 0x46
 8008008:	d06a      	beq.n	80080e0 <_scanf_float+0x1c0>
 800800a:	2b41      	cmp	r3, #65	; 0x41
 800800c:	d1c1      	bne.n	8007f92 <_scanf_float+0x72>
 800800e:	2a01      	cmp	r2, #1
 8008010:	d1bf      	bne.n	8007f92 <_scanf_float+0x72>
 8008012:	2202      	movs	r2, #2
 8008014:	e046      	b.n	80080a4 <_scanf_float+0x184>
 8008016:	2b65      	cmp	r3, #101	; 0x65
 8008018:	d07a      	beq.n	8008110 <_scanf_float+0x1f0>
 800801a:	d818      	bhi.n	800804e <_scanf_float+0x12e>
 800801c:	2b54      	cmp	r3, #84	; 0x54
 800801e:	d066      	beq.n	80080ee <_scanf_float+0x1ce>
 8008020:	d811      	bhi.n	8008046 <_scanf_float+0x126>
 8008022:	2b4e      	cmp	r3, #78	; 0x4e
 8008024:	d1b5      	bne.n	8007f92 <_scanf_float+0x72>
 8008026:	2a00      	cmp	r2, #0
 8008028:	d146      	bne.n	80080b8 <_scanf_float+0x198>
 800802a:	f1b9 0f00 	cmp.w	r9, #0
 800802e:	d145      	bne.n	80080bc <_scanf_float+0x19c>
 8008030:	6821      	ldr	r1, [r4, #0]
 8008032:	f401 60e0 	and.w	r0, r1, #1792	; 0x700
 8008036:	f5b0 6fe0 	cmp.w	r0, #1792	; 0x700
 800803a:	d13f      	bne.n	80080bc <_scanf_float+0x19c>
 800803c:	f421 61f0 	bic.w	r1, r1, #1920	; 0x780
 8008040:	6021      	str	r1, [r4, #0]
 8008042:	2201      	movs	r2, #1
 8008044:	e02e      	b.n	80080a4 <_scanf_float+0x184>
 8008046:	2b59      	cmp	r3, #89	; 0x59
 8008048:	d01e      	beq.n	8008088 <_scanf_float+0x168>
 800804a:	2b61      	cmp	r3, #97	; 0x61
 800804c:	e7de      	b.n	800800c <_scanf_float+0xec>
 800804e:	2b6e      	cmp	r3, #110	; 0x6e
 8008050:	d0e9      	beq.n	8008026 <_scanf_float+0x106>
 8008052:	d815      	bhi.n	8008080 <_scanf_float+0x160>
 8008054:	2b66      	cmp	r3, #102	; 0x66
 8008056:	d043      	beq.n	80080e0 <_scanf_float+0x1c0>
 8008058:	2b69      	cmp	r3, #105	; 0x69
 800805a:	d19a      	bne.n	8007f92 <_scanf_float+0x72>
 800805c:	f1bb 0f00 	cmp.w	fp, #0
 8008060:	d138      	bne.n	80080d4 <_scanf_float+0x1b4>
 8008062:	f1b9 0f00 	cmp.w	r9, #0
 8008066:	d197      	bne.n	8007f98 <_scanf_float+0x78>
 8008068:	6821      	ldr	r1, [r4, #0]
 800806a:	f401 60e0 	and.w	r0, r1, #1792	; 0x700
 800806e:	f5b0 6fe0 	cmp.w	r0, #1792	; 0x700
 8008072:	d195      	bne.n	8007fa0 <_scanf_float+0x80>
 8008074:	f421 61f0 	bic.w	r1, r1, #1920	; 0x780
 8008078:	6021      	str	r1, [r4, #0]
 800807a:	f04f 0b01 	mov.w	fp, #1
 800807e:	e011      	b.n	80080a4 <_scanf_float+0x184>
 8008080:	2b74      	cmp	r3, #116	; 0x74
 8008082:	d034      	beq.n	80080ee <_scanf_float+0x1ce>
 8008084:	2b79      	cmp	r3, #121	; 0x79
 8008086:	d184      	bne.n	8007f92 <_scanf_float+0x72>
 8008088:	f1bb 0f07 	cmp.w	fp, #7
 800808c:	d181      	bne.n	8007f92 <_scanf_float+0x72>
 800808e:	f04f 0b08 	mov.w	fp, #8
 8008092:	e007      	b.n	80080a4 <_scanf_float+0x184>
 8008094:	eb12 0f0b 	cmn.w	r2, fp
 8008098:	f47f af7b 	bne.w	8007f92 <_scanf_float+0x72>
 800809c:	6821      	ldr	r1, [r4, #0]
 800809e:	f421 71c0 	bic.w	r1, r1, #384	; 0x180
 80080a2:	6021      	str	r1, [r4, #0]
 80080a4:	702b      	strb	r3, [r5, #0]
 80080a6:	3501      	adds	r5, #1
 80080a8:	e79a      	b.n	8007fe0 <_scanf_float+0xc0>
 80080aa:	6821      	ldr	r1, [r4, #0]
 80080ac:	0608      	lsls	r0, r1, #24
 80080ae:	f57f af70 	bpl.w	8007f92 <_scanf_float+0x72>
 80080b2:	f021 0180 	bic.w	r1, r1, #128	; 0x80
 80080b6:	e7f4      	b.n	80080a2 <_scanf_float+0x182>
 80080b8:	2a02      	cmp	r2, #2
 80080ba:	d047      	beq.n	800814c <_scanf_float+0x22c>
 80080bc:	f1bb 0f01 	cmp.w	fp, #1
 80080c0:	d003      	beq.n	80080ca <_scanf_float+0x1aa>
 80080c2:	f1bb 0f04 	cmp.w	fp, #4
 80080c6:	f47f af64 	bne.w	8007f92 <_scanf_float+0x72>
 80080ca:	f10b 0b01 	add.w	fp, fp, #1
 80080ce:	fa5f fb8b 	uxtb.w	fp, fp
 80080d2:	e7e7      	b.n	80080a4 <_scanf_float+0x184>
 80080d4:	f1bb 0f03 	cmp.w	fp, #3
 80080d8:	d0f7      	beq.n	80080ca <_scanf_float+0x1aa>
 80080da:	f1bb 0f05 	cmp.w	fp, #5
 80080de:	e7f2      	b.n	80080c6 <_scanf_float+0x1a6>
 80080e0:	f1bb 0f02 	cmp.w	fp, #2
 80080e4:	f47f af55 	bne.w	8007f92 <_scanf_float+0x72>
 80080e8:	f04f 0b03 	mov.w	fp, #3
 80080ec:	e7da      	b.n	80080a4 <_scanf_float+0x184>
 80080ee:	f1bb 0f06 	cmp.w	fp, #6
 80080f2:	f47f af4e 	bne.w	8007f92 <_scanf_float+0x72>
 80080f6:	f04f 0b07 	mov.w	fp, #7
 80080fa:	e7d3      	b.n	80080a4 <_scanf_float+0x184>
 80080fc:	6821      	ldr	r1, [r4, #0]
 80080fe:	0588      	lsls	r0, r1, #22
 8008100:	f57f af47 	bpl.w	8007f92 <_scanf_float+0x72>
 8008104:	f421 7120 	bic.w	r1, r1, #640	; 0x280
 8008108:	6021      	str	r1, [r4, #0]
 800810a:	f8cd 9008 	str.w	r9, [sp, #8]
 800810e:	e7c9      	b.n	80080a4 <_scanf_float+0x184>
 8008110:	6821      	ldr	r1, [r4, #0]
 8008112:	f401 60a0 	and.w	r0, r1, #1280	; 0x500
 8008116:	f5b0 6f80 	cmp.w	r0, #1024	; 0x400
 800811a:	d006      	beq.n	800812a <_scanf_float+0x20a>
 800811c:	0548      	lsls	r0, r1, #21
 800811e:	f57f af38 	bpl.w	8007f92 <_scanf_float+0x72>
 8008122:	f1b9 0f00 	cmp.w	r9, #0
 8008126:	f43f af3b 	beq.w	8007fa0 <_scanf_float+0x80>
 800812a:	0588      	lsls	r0, r1, #22
 800812c:	bf58      	it	pl
 800812e:	9802      	ldrpl	r0, [sp, #8]
 8008130:	f421 61f0 	bic.w	r1, r1, #1920	; 0x780
 8008134:	bf58      	it	pl
 8008136:	eba9 0000 	subpl.w	r0, r9, r0
 800813a:	f441 71c0 	orr.w	r1, r1, #384	; 0x180
 800813e:	bf58      	it	pl
 8008140:	e9cd 0503 	strdpl	r0, r5, [sp, #12]
 8008144:	6021      	str	r1, [r4, #0]
 8008146:	f04f 0900 	mov.w	r9, #0
 800814a:	e7ab      	b.n	80080a4 <_scanf_float+0x184>
 800814c:	2203      	movs	r2, #3
 800814e:	e7a9      	b.n	80080a4 <_scanf_float+0x184>
 8008150:	f8d4 3180 	ldr.w	r3, [r4, #384]	; 0x180
 8008154:	4631      	mov	r1, r6
 8008156:	4638      	mov	r0, r7
 8008158:	9205      	str	r2, [sp, #20]
 800815a:	4798      	blx	r3
 800815c:	9a05      	ldr	r2, [sp, #20]
 800815e:	2800      	cmp	r0, #0
 8008160:	f43f af04 	beq.w	8007f6c <_scanf_float+0x4c>
 8008164:	e715      	b.n	8007f92 <_scanf_float+0x72>
 8008166:	f8d4 317c 	ldr.w	r3, [r4, #380]	; 0x17c
 800816a:	4632      	mov	r2, r6
 800816c:	f815 1d01 	ldrb.w	r1, [r5, #-1]!
 8008170:	4638      	mov	r0, r7
 8008172:	4798      	blx	r3
 8008174:	6923      	ldr	r3, [r4, #16]
 8008176:	3b01      	subs	r3, #1
 8008178:	6123      	str	r3, [r4, #16]
 800817a:	e715      	b.n	8007fa8 <_scanf_float+0x88>
 800817c:	f10b 33ff 	add.w	r3, fp, #4294967295	; 0xffffffff
 8008180:	2b06      	cmp	r3, #6
 8008182:	d80a      	bhi.n	800819a <_scanf_float+0x27a>
 8008184:	f1bb 0f02 	cmp.w	fp, #2
 8008188:	d967      	bls.n	800825a <_scanf_float+0x33a>
 800818a:	f1ab 0b03 	sub.w	fp, fp, #3
 800818e:	fa5f fb8b 	uxtb.w	fp, fp
 8008192:	eba5 0b0b 	sub.w	fp, r5, fp
 8008196:	455d      	cmp	r5, fp
 8008198:	d14a      	bne.n	8008230 <_scanf_float+0x310>
 800819a:	6823      	ldr	r3, [r4, #0]
 800819c:	05da      	lsls	r2, r3, #23
 800819e:	d51f      	bpl.n	80081e0 <_scanf_float+0x2c0>
 80081a0:	055b      	lsls	r3, r3, #21
 80081a2:	d467      	bmi.n	8008274 <_scanf_float+0x354>
 80081a4:	f815 1c01 	ldrb.w	r1, [r5, #-1]
 80081a8:	6923      	ldr	r3, [r4, #16]
 80081aa:	2965      	cmp	r1, #101	; 0x65
 80081ac:	f103 33ff 	add.w	r3, r3, #4294967295	; 0xffffffff
 80081b0:	f105 3bff 	add.w	fp, r5, #4294967295	; 0xffffffff
 80081b4:	6123      	str	r3, [r4, #16]
 80081b6:	d00d      	beq.n	80081d4 <_scanf_float+0x2b4>
 80081b8:	2945      	cmp	r1, #69	; 0x45
 80081ba:	d00b      	beq.n	80081d4 <_scanf_float+0x2b4>
 80081bc:	f8d4 317c 	ldr.w	r3, [r4, #380]	; 0x17c
 80081c0:	4632      	mov	r2, r6
 80081c2:	4638      	mov	r0, r7
 80081c4:	4798      	blx	r3
 80081c6:	6923      	ldr	r3, [r4, #16]
 80081c8:	f815 1c02 	ldrb.w	r1, [r5, #-2]
 80081cc:	3b01      	subs	r3, #1
 80081ce:	f1a5 0b02 	sub.w	fp, r5, #2
 80081d2:	6123      	str	r3, [r4, #16]
 80081d4:	f8d4 317c 	ldr.w	r3, [r4, #380]	; 0x17c
 80081d8:	4632      	mov	r2, r6
 80081da:	4638      	mov	r0, r7
 80081dc:	4798      	blx	r3
 80081de:	465d      	mov	r5, fp
 80081e0:	6826      	ldr	r6, [r4, #0]
 80081e2:	f016 0610 	ands.w	r6, r6, #16
 80081e6:	d176      	bne.n	80082d6 <_scanf_float+0x3b6>
 80081e8:	702e      	strb	r6, [r5, #0]
 80081ea:	6823      	ldr	r3, [r4, #0]
 80081ec:	f403 63c0 	and.w	r3, r3, #1536	; 0x600
 80081f0:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 80081f4:	d141      	bne.n	800827a <_scanf_float+0x35a>
 80081f6:	9b02      	ldr	r3, [sp, #8]
 80081f8:	eba9 0303 	sub.w	r3, r9, r3
 80081fc:	425a      	negs	r2, r3
 80081fe:	2b00      	cmp	r3, #0
 8008200:	d148      	bne.n	8008294 <_scanf_float+0x374>
 8008202:	4641      	mov	r1, r8
 8008204:	2200      	movs	r2, #0
 8008206:	4638      	mov	r0, r7
 8008208:	f000 fec2 	bl	8008f90 <_strtod_r>
 800820c:	6825      	ldr	r5, [r4, #0]
 800820e:	4680      	mov	r8, r0
 8008210:	f015 0f02 	tst.w	r5, #2
 8008214:	4689      	mov	r9, r1
 8008216:	f8da 3000 	ldr.w	r3, [sl]
 800821a:	d046      	beq.n	80082aa <_scanf_float+0x38a>
 800821c:	1d1a      	adds	r2, r3, #4
 800821e:	f8ca 2000 	str.w	r2, [sl]
 8008222:	681b      	ldr	r3, [r3, #0]
 8008224:	e9c3 8900 	strd	r8, r9, [r3]
 8008228:	68e3      	ldr	r3, [r4, #12]
 800822a:	3301      	adds	r3, #1
 800822c:	60e3      	str	r3, [r4, #12]
 800822e:	e6bf      	b.n	8007fb0 <_scanf_float+0x90>
 8008230:	f8d4 317c 	ldr.w	r3, [r4, #380]	; 0x17c
 8008234:	4632      	mov	r2, r6
 8008236:	f815 1d01 	ldrb.w	r1, [r5, #-1]!
 800823a:	4638      	mov	r0, r7
 800823c:	4798      	blx	r3
 800823e:	6923      	ldr	r3, [r4, #16]
 8008240:	3b01      	subs	r3, #1
 8008242:	6123      	str	r3, [r4, #16]
 8008244:	e7a7      	b.n	8008196 <_scanf_float+0x276>
 8008246:	f8d4 317c 	ldr.w	r3, [r4, #380]	; 0x17c
 800824a:	4632      	mov	r2, r6
 800824c:	f815 1d01 	ldrb.w	r1, [r5, #-1]!
 8008250:	4638      	mov	r0, r7
 8008252:	4798      	blx	r3
 8008254:	6923      	ldr	r3, [r4, #16]
 8008256:	3b01      	subs	r3, #1
 8008258:	6123      	str	r3, [r4, #16]
 800825a:	4545      	cmp	r5, r8
 800825c:	d8f3      	bhi.n	8008246 <_scanf_float+0x326>
 800825e:	e6a6      	b.n	8007fae <_scanf_float+0x8e>
 8008260:	f8d4 317c 	ldr.w	r3, [r4, #380]	; 0x17c
 8008264:	4632      	mov	r2, r6
 8008266:	f815 1d01 	ldrb.w	r1, [r5, #-1]!
 800826a:	4638      	mov	r0, r7
 800826c:	4798      	blx	r3
 800826e:	6923      	ldr	r3, [r4, #16]
 8008270:	3b01      	subs	r3, #1
 8008272:	6123      	str	r3, [r4, #16]
 8008274:	4545      	cmp	r5, r8
 8008276:	d8f3      	bhi.n	8008260 <_scanf_float+0x340>
 8008278:	e699      	b.n	8007fae <_scanf_float+0x8e>
 800827a:	9b03      	ldr	r3, [sp, #12]
 800827c:	2b00      	cmp	r3, #0
 800827e:	d0c0      	beq.n	8008202 <_scanf_float+0x2e2>
 8008280:	9904      	ldr	r1, [sp, #16]
 8008282:	230a      	movs	r3, #10
 8008284:	4632      	mov	r2, r6
 8008286:	3101      	adds	r1, #1
 8008288:	4638      	mov	r0, r7
 800828a:	f000 ff0d 	bl	80090a8 <_strtol_r>
 800828e:	9b03      	ldr	r3, [sp, #12]
 8008290:	9d04      	ldr	r5, [sp, #16]
 8008292:	1ac2      	subs	r2, r0, r3
 8008294:	f204 136f 	addw	r3, r4, #367	; 0x16f
 8008298:	429d      	cmp	r5, r3
 800829a:	bf28      	it	cs
 800829c:	f504 75b7 	addcs.w	r5, r4, #366	; 0x16e
 80082a0:	490e      	ldr	r1, [pc, #56]	; (80082dc <_scanf_float+0x3bc>)
 80082a2:	4628      	mov	r0, r5
 80082a4:	f000 f830 	bl	8008308 <siprintf>
 80082a8:	e7ab      	b.n	8008202 <_scanf_float+0x2e2>
 80082aa:	1d1f      	adds	r7, r3, #4
 80082ac:	f015 0504 	ands.w	r5, r5, #4
 80082b0:	f8ca 7000 	str.w	r7, [sl]
 80082b4:	d1b5      	bne.n	8008222 <_scanf_float+0x302>
 80082b6:	681f      	ldr	r7, [r3, #0]
 80082b8:	4602      	mov	r2, r0
 80082ba:	460b      	mov	r3, r1
 80082bc:	f7f8 fba6 	bl	8000a0c <__aeabi_dcmpun>
 80082c0:	b120      	cbz	r0, 80082cc <_scanf_float+0x3ac>
 80082c2:	4628      	mov	r0, r5
 80082c4:	f000 f81c 	bl	8008300 <nanf>
 80082c8:	6038      	str	r0, [r7, #0]
 80082ca:	e7ad      	b.n	8008228 <_scanf_float+0x308>
 80082cc:	4640      	mov	r0, r8
 80082ce:	4649      	mov	r1, r9
 80082d0:	f7f8 fbfa 	bl	8000ac8 <__aeabi_d2f>
 80082d4:	e7f8      	b.n	80082c8 <_scanf_float+0x3a8>
 80082d6:	2600      	movs	r6, #0
 80082d8:	e66a      	b.n	8007fb0 <_scanf_float+0x90>
 80082da:	bf00      	nop
 80082dc:	0800b9f0 	.word	0x0800b9f0

080082e0 <_sbrk_r>:
 80082e0:	b538      	push	{r3, r4, r5, lr}
 80082e2:	2300      	movs	r3, #0
 80082e4:	4c05      	ldr	r4, [pc, #20]	; (80082fc <_sbrk_r+0x1c>)
 80082e6:	4605      	mov	r5, r0
 80082e8:	4608      	mov	r0, r1
 80082ea:	6023      	str	r3, [r4, #0]
 80082ec:	f7fb fcba 	bl	8003c64 <_sbrk>
 80082f0:	1c43      	adds	r3, r0, #1
 80082f2:	d102      	bne.n	80082fa <_sbrk_r+0x1a>
 80082f4:	6823      	ldr	r3, [r4, #0]
 80082f6:	b103      	cbz	r3, 80082fa <_sbrk_r+0x1a>
 80082f8:	602b      	str	r3, [r5, #0]
 80082fa:	bd38      	pop	{r3, r4, r5, pc}
 80082fc:	20000490 	.word	0x20000490

08008300 <nanf>:
 8008300:	4800      	ldr	r0, [pc, #0]	; (8008304 <nanf+0x4>)
 8008302:	4770      	bx	lr
 8008304:	7fc00000 	.word	0x7fc00000

08008308 <siprintf>:
 8008308:	b40e      	push	{r1, r2, r3}
 800830a:	f06f 4100 	mvn.w	r1, #2147483648	; 0x80000000
 800830e:	b500      	push	{lr}
 8008310:	b09c      	sub	sp, #112	; 0x70
 8008312:	ab1d      	add	r3, sp, #116	; 0x74
 8008314:	9002      	str	r0, [sp, #8]
 8008316:	9006      	str	r0, [sp, #24]
 8008318:	9107      	str	r1, [sp, #28]
 800831a:	9104      	str	r1, [sp, #16]
 800831c:	4808      	ldr	r0, [pc, #32]	; (8008340 <siprintf+0x38>)
 800831e:	4909      	ldr	r1, [pc, #36]	; (8008344 <siprintf+0x3c>)
 8008320:	f853 2b04 	ldr.w	r2, [r3], #4
 8008324:	9105      	str	r1, [sp, #20]
 8008326:	6800      	ldr	r0, [r0, #0]
 8008328:	a902      	add	r1, sp, #8
 800832a:	9301      	str	r3, [sp, #4]
 800832c:	f002 fcda 	bl	800ace4 <_svfiprintf_r>
 8008330:	2200      	movs	r2, #0
 8008332:	9b02      	ldr	r3, [sp, #8]
 8008334:	701a      	strb	r2, [r3, #0]
 8008336:	b01c      	add	sp, #112	; 0x70
 8008338:	f85d eb04 	ldr.w	lr, [sp], #4
 800833c:	b003      	add	sp, #12
 800833e:	4770      	bx	lr
 8008340:	2000002c 	.word	0x2000002c
 8008344:	ffff0208 	.word	0xffff0208

08008348 <sulp>:
 8008348:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800834c:	460f      	mov	r7, r1
 800834e:	4690      	mov	r8, r2
 8008350:	f002 fb32 	bl	800a9b8 <__ulp>
 8008354:	4604      	mov	r4, r0
 8008356:	460d      	mov	r5, r1
 8008358:	f1b8 0f00 	cmp.w	r8, #0
 800835c:	d011      	beq.n	8008382 <sulp+0x3a>
 800835e:	f3c7 530a 	ubfx	r3, r7, #20, #11
 8008362:	f1c3 036b 	rsb	r3, r3, #107	; 0x6b
 8008366:	2b00      	cmp	r3, #0
 8008368:	dd0b      	ble.n	8008382 <sulp+0x3a>
 800836a:	2400      	movs	r4, #0
 800836c:	051b      	lsls	r3, r3, #20
 800836e:	f103 557f 	add.w	r5, r3, #1069547520	; 0x3fc00000
 8008372:	f505 1540 	add.w	r5, r5, #3145728	; 0x300000
 8008376:	4622      	mov	r2, r4
 8008378:	462b      	mov	r3, r5
 800837a:	f7f8 f8ad 	bl	80004d8 <__aeabi_dmul>
 800837e:	4604      	mov	r4, r0
 8008380:	460d      	mov	r5, r1
 8008382:	4620      	mov	r0, r4
 8008384:	4629      	mov	r1, r5
 8008386:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800838a:	0000      	movs	r0, r0
 800838c:	0000      	movs	r0, r0
	...

08008390 <_strtod_l>:
 8008390:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8008394:	461f      	mov	r7, r3
 8008396:	2300      	movs	r3, #0
 8008398:	b0a1      	sub	sp, #132	; 0x84
 800839a:	4683      	mov	fp, r0
 800839c:	4638      	mov	r0, r7
 800839e:	460e      	mov	r6, r1
 80083a0:	9217      	str	r2, [sp, #92]	; 0x5c
 80083a2:	931c      	str	r3, [sp, #112]	; 0x70
 80083a4:	f001 ffff 	bl	800a3a6 <__localeconv_l>
 80083a8:	4680      	mov	r8, r0
 80083aa:	6800      	ldr	r0, [r0, #0]
 80083ac:	f7f7 fed0 	bl	8000150 <strlen>
 80083b0:	f04f 0900 	mov.w	r9, #0
 80083b4:	4604      	mov	r4, r0
 80083b6:	f04f 0a00 	mov.w	sl, #0
 80083ba:	961b      	str	r6, [sp, #108]	; 0x6c
 80083bc:	9b1b      	ldr	r3, [sp, #108]	; 0x6c
 80083be:	781a      	ldrb	r2, [r3, #0]
 80083c0:	2a0d      	cmp	r2, #13
 80083c2:	d832      	bhi.n	800842a <_strtod_l+0x9a>
 80083c4:	2a09      	cmp	r2, #9
 80083c6:	d236      	bcs.n	8008436 <_strtod_l+0xa6>
 80083c8:	2a00      	cmp	r2, #0
 80083ca:	d03e      	beq.n	800844a <_strtod_l+0xba>
 80083cc:	2300      	movs	r3, #0
 80083ce:	930d      	str	r3, [sp, #52]	; 0x34
 80083d0:	9d1b      	ldr	r5, [sp, #108]	; 0x6c
 80083d2:	782b      	ldrb	r3, [r5, #0]
 80083d4:	2b30      	cmp	r3, #48	; 0x30
 80083d6:	f040 80ac 	bne.w	8008532 <_strtod_l+0x1a2>
 80083da:	786b      	ldrb	r3, [r5, #1]
 80083dc:	2b58      	cmp	r3, #88	; 0x58
 80083de:	d001      	beq.n	80083e4 <_strtod_l+0x54>
 80083e0:	2b78      	cmp	r3, #120	; 0x78
 80083e2:	d167      	bne.n	80084b4 <_strtod_l+0x124>
 80083e4:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 80083e6:	9702      	str	r7, [sp, #8]
 80083e8:	9301      	str	r3, [sp, #4]
 80083ea:	ab1c      	add	r3, sp, #112	; 0x70
 80083ec:	9300      	str	r3, [sp, #0]
 80083ee:	4a89      	ldr	r2, [pc, #548]	; (8008614 <_strtod_l+0x284>)
 80083f0:	ab1d      	add	r3, sp, #116	; 0x74
 80083f2:	a91b      	add	r1, sp, #108	; 0x6c
 80083f4:	4658      	mov	r0, fp
 80083f6:	f001 fcfb 	bl	8009df0 <__gethex>
 80083fa:	f010 0407 	ands.w	r4, r0, #7
 80083fe:	4606      	mov	r6, r0
 8008400:	d005      	beq.n	800840e <_strtod_l+0x7e>
 8008402:	2c06      	cmp	r4, #6
 8008404:	d12b      	bne.n	800845e <_strtod_l+0xce>
 8008406:	2300      	movs	r3, #0
 8008408:	3501      	adds	r5, #1
 800840a:	951b      	str	r5, [sp, #108]	; 0x6c
 800840c:	930d      	str	r3, [sp, #52]	; 0x34
 800840e:	9b17      	ldr	r3, [sp, #92]	; 0x5c
 8008410:	2b00      	cmp	r3, #0
 8008412:	f040 85a6 	bne.w	8008f62 <_strtod_l+0xbd2>
 8008416:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 8008418:	b1e3      	cbz	r3, 8008454 <_strtod_l+0xc4>
 800841a:	464a      	mov	r2, r9
 800841c:	f10a 4300 	add.w	r3, sl, #2147483648	; 0x80000000
 8008420:	4610      	mov	r0, r2
 8008422:	4619      	mov	r1, r3
 8008424:	b021      	add	sp, #132	; 0x84
 8008426:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800842a:	2a2b      	cmp	r2, #43	; 0x2b
 800842c:	d015      	beq.n	800845a <_strtod_l+0xca>
 800842e:	2a2d      	cmp	r2, #45	; 0x2d
 8008430:	d004      	beq.n	800843c <_strtod_l+0xac>
 8008432:	2a20      	cmp	r2, #32
 8008434:	d1ca      	bne.n	80083cc <_strtod_l+0x3c>
 8008436:	3301      	adds	r3, #1
 8008438:	931b      	str	r3, [sp, #108]	; 0x6c
 800843a:	e7bf      	b.n	80083bc <_strtod_l+0x2c>
 800843c:	2201      	movs	r2, #1
 800843e:	920d      	str	r2, [sp, #52]	; 0x34
 8008440:	1c5a      	adds	r2, r3, #1
 8008442:	921b      	str	r2, [sp, #108]	; 0x6c
 8008444:	785b      	ldrb	r3, [r3, #1]
 8008446:	2b00      	cmp	r3, #0
 8008448:	d1c2      	bne.n	80083d0 <_strtod_l+0x40>
 800844a:	9b17      	ldr	r3, [sp, #92]	; 0x5c
 800844c:	961b      	str	r6, [sp, #108]	; 0x6c
 800844e:	2b00      	cmp	r3, #0
 8008450:	f040 8585 	bne.w	8008f5e <_strtod_l+0xbce>
 8008454:	464a      	mov	r2, r9
 8008456:	4653      	mov	r3, sl
 8008458:	e7e2      	b.n	8008420 <_strtod_l+0x90>
 800845a:	2200      	movs	r2, #0
 800845c:	e7ef      	b.n	800843e <_strtod_l+0xae>
 800845e:	9a1c      	ldr	r2, [sp, #112]	; 0x70
 8008460:	b13a      	cbz	r2, 8008472 <_strtod_l+0xe2>
 8008462:	2135      	movs	r1, #53	; 0x35
 8008464:	a81e      	add	r0, sp, #120	; 0x78
 8008466:	f002 fb9a 	bl	800ab9e <__copybits>
 800846a:	991c      	ldr	r1, [sp, #112]	; 0x70
 800846c:	4658      	mov	r0, fp
 800846e:	f002 f80c 	bl	800a48a <_Bfree>
 8008472:	3c01      	subs	r4, #1
 8008474:	2c04      	cmp	r4, #4
 8008476:	d806      	bhi.n	8008486 <_strtod_l+0xf6>
 8008478:	e8df f004 	tbb	[pc, r4]
 800847c:	1714030a 	.word	0x1714030a
 8008480:	0a          	.byte	0x0a
 8008481:	00          	.byte	0x00
 8008482:	e9dd 9a1e 	ldrd	r9, sl, [sp, #120]	; 0x78
 8008486:	0731      	lsls	r1, r6, #28
 8008488:	d5c1      	bpl.n	800840e <_strtod_l+0x7e>
 800848a:	f04a 4a00 	orr.w	sl, sl, #2147483648	; 0x80000000
 800848e:	e7be      	b.n	800840e <_strtod_l+0x7e>
 8008490:	9a1d      	ldr	r2, [sp, #116]	; 0x74
 8008492:	e9dd 931e 	ldrd	r9, r3, [sp, #120]	; 0x78
 8008496:	f202 4233 	addw	r2, r2, #1075	; 0x433
 800849a:	f423 1380 	bic.w	r3, r3, #1048576	; 0x100000
 800849e:	ea43 5a02 	orr.w	sl, r3, r2, lsl #20
 80084a2:	e7f0      	b.n	8008486 <_strtod_l+0xf6>
 80084a4:	f8df a170 	ldr.w	sl, [pc, #368]	; 8008618 <_strtod_l+0x288>
 80084a8:	e7ed      	b.n	8008486 <_strtod_l+0xf6>
 80084aa:	f06f 4a00 	mvn.w	sl, #2147483648	; 0x80000000
 80084ae:	f04f 39ff 	mov.w	r9, #4294967295	; 0xffffffff
 80084b2:	e7e8      	b.n	8008486 <_strtod_l+0xf6>
 80084b4:	9b1b      	ldr	r3, [sp, #108]	; 0x6c
 80084b6:	1c5a      	adds	r2, r3, #1
 80084b8:	921b      	str	r2, [sp, #108]	; 0x6c
 80084ba:	785b      	ldrb	r3, [r3, #1]
 80084bc:	2b30      	cmp	r3, #48	; 0x30
 80084be:	d0f9      	beq.n	80084b4 <_strtod_l+0x124>
 80084c0:	2b00      	cmp	r3, #0
 80084c2:	d0a4      	beq.n	800840e <_strtod_l+0x7e>
 80084c4:	2301      	movs	r3, #1
 80084c6:	2500      	movs	r5, #0
 80084c8:	220a      	movs	r2, #10
 80084ca:	9307      	str	r3, [sp, #28]
 80084cc:	9b1b      	ldr	r3, [sp, #108]	; 0x6c
 80084ce:	9506      	str	r5, [sp, #24]
 80084d0:	9308      	str	r3, [sp, #32]
 80084d2:	9504      	str	r5, [sp, #16]
 80084d4:	981b      	ldr	r0, [sp, #108]	; 0x6c
 80084d6:	7807      	ldrb	r7, [r0, #0]
 80084d8:	f1a7 0330 	sub.w	r3, r7, #48	; 0x30
 80084dc:	b2d9      	uxtb	r1, r3
 80084de:	2909      	cmp	r1, #9
 80084e0:	d929      	bls.n	8008536 <_strtod_l+0x1a6>
 80084e2:	4622      	mov	r2, r4
 80084e4:	f8d8 1000 	ldr.w	r1, [r8]
 80084e8:	f002 fcf4 	bl	800aed4 <strncmp>
 80084ec:	2800      	cmp	r0, #0
 80084ee:	d031      	beq.n	8008554 <_strtod_l+0x1c4>
 80084f0:	2000      	movs	r0, #0
 80084f2:	463b      	mov	r3, r7
 80084f4:	4602      	mov	r2, r0
 80084f6:	9c04      	ldr	r4, [sp, #16]
 80084f8:	9005      	str	r0, [sp, #20]
 80084fa:	2b65      	cmp	r3, #101	; 0x65
 80084fc:	d001      	beq.n	8008502 <_strtod_l+0x172>
 80084fe:	2b45      	cmp	r3, #69	; 0x45
 8008500:	d114      	bne.n	800852c <_strtod_l+0x19c>
 8008502:	b924      	cbnz	r4, 800850e <_strtod_l+0x17e>
 8008504:	b910      	cbnz	r0, 800850c <_strtod_l+0x17c>
 8008506:	9b07      	ldr	r3, [sp, #28]
 8008508:	2b00      	cmp	r3, #0
 800850a:	d09e      	beq.n	800844a <_strtod_l+0xba>
 800850c:	2400      	movs	r4, #0
 800850e:	9e1b      	ldr	r6, [sp, #108]	; 0x6c
 8008510:	1c73      	adds	r3, r6, #1
 8008512:	931b      	str	r3, [sp, #108]	; 0x6c
 8008514:	7873      	ldrb	r3, [r6, #1]
 8008516:	2b2b      	cmp	r3, #43	; 0x2b
 8008518:	d078      	beq.n	800860c <_strtod_l+0x27c>
 800851a:	2b2d      	cmp	r3, #45	; 0x2d
 800851c:	d070      	beq.n	8008600 <_strtod_l+0x270>
 800851e:	f04f 0c00 	mov.w	ip, #0
 8008522:	f1a3 0730 	sub.w	r7, r3, #48	; 0x30
 8008526:	2f09      	cmp	r7, #9
 8008528:	d97c      	bls.n	8008624 <_strtod_l+0x294>
 800852a:	961b      	str	r6, [sp, #108]	; 0x6c
 800852c:	f04f 0e00 	mov.w	lr, #0
 8008530:	e09a      	b.n	8008668 <_strtod_l+0x2d8>
 8008532:	2300      	movs	r3, #0
 8008534:	e7c7      	b.n	80084c6 <_strtod_l+0x136>
 8008536:	9904      	ldr	r1, [sp, #16]
 8008538:	3001      	adds	r0, #1
 800853a:	2908      	cmp	r1, #8
 800853c:	bfd7      	itett	le
 800853e:	9906      	ldrle	r1, [sp, #24]
 8008540:	fb02 3505 	mlagt	r5, r2, r5, r3
 8008544:	fb02 3301 	mlale	r3, r2, r1, r3
 8008548:	9306      	strle	r3, [sp, #24]
 800854a:	9b04      	ldr	r3, [sp, #16]
 800854c:	901b      	str	r0, [sp, #108]	; 0x6c
 800854e:	3301      	adds	r3, #1
 8008550:	9304      	str	r3, [sp, #16]
 8008552:	e7bf      	b.n	80084d4 <_strtod_l+0x144>
 8008554:	9b1b      	ldr	r3, [sp, #108]	; 0x6c
 8008556:	191a      	adds	r2, r3, r4
 8008558:	921b      	str	r2, [sp, #108]	; 0x6c
 800855a:	9a04      	ldr	r2, [sp, #16]
 800855c:	5d1b      	ldrb	r3, [r3, r4]
 800855e:	2a00      	cmp	r2, #0
 8008560:	d037      	beq.n	80085d2 <_strtod_l+0x242>
 8008562:	4602      	mov	r2, r0
 8008564:	9c04      	ldr	r4, [sp, #16]
 8008566:	f1a3 0130 	sub.w	r1, r3, #48	; 0x30
 800856a:	2909      	cmp	r1, #9
 800856c:	d913      	bls.n	8008596 <_strtod_l+0x206>
 800856e:	2101      	movs	r1, #1
 8008570:	9105      	str	r1, [sp, #20]
 8008572:	e7c2      	b.n	80084fa <_strtod_l+0x16a>
 8008574:	9b1b      	ldr	r3, [sp, #108]	; 0x6c
 8008576:	3001      	adds	r0, #1
 8008578:	1c5a      	adds	r2, r3, #1
 800857a:	921b      	str	r2, [sp, #108]	; 0x6c
 800857c:	785b      	ldrb	r3, [r3, #1]
 800857e:	2b30      	cmp	r3, #48	; 0x30
 8008580:	d0f8      	beq.n	8008574 <_strtod_l+0x1e4>
 8008582:	f1a3 0231 	sub.w	r2, r3, #49	; 0x31
 8008586:	2a08      	cmp	r2, #8
 8008588:	f200 84f0 	bhi.w	8008f6c <_strtod_l+0xbdc>
 800858c:	9a1b      	ldr	r2, [sp, #108]	; 0x6c
 800858e:	9208      	str	r2, [sp, #32]
 8008590:	4602      	mov	r2, r0
 8008592:	2000      	movs	r0, #0
 8008594:	4604      	mov	r4, r0
 8008596:	f1b3 0e30 	subs.w	lr, r3, #48	; 0x30
 800859a:	f100 0101 	add.w	r1, r0, #1
 800859e:	d012      	beq.n	80085c6 <_strtod_l+0x236>
 80085a0:	440a      	add	r2, r1
 80085a2:	270a      	movs	r7, #10
 80085a4:	4621      	mov	r1, r4
 80085a6:	eb00 0c04 	add.w	ip, r0, r4
 80085aa:	458c      	cmp	ip, r1
 80085ac:	d113      	bne.n	80085d6 <_strtod_l+0x246>
 80085ae:	1821      	adds	r1, r4, r0
 80085b0:	2908      	cmp	r1, #8
 80085b2:	f104 0401 	add.w	r4, r4, #1
 80085b6:	4404      	add	r4, r0
 80085b8:	dc19      	bgt.n	80085ee <_strtod_l+0x25e>
 80085ba:	210a      	movs	r1, #10
 80085bc:	9b06      	ldr	r3, [sp, #24]
 80085be:	fb01 e303 	mla	r3, r1, r3, lr
 80085c2:	9306      	str	r3, [sp, #24]
 80085c4:	2100      	movs	r1, #0
 80085c6:	9b1b      	ldr	r3, [sp, #108]	; 0x6c
 80085c8:	1c58      	adds	r0, r3, #1
 80085ca:	901b      	str	r0, [sp, #108]	; 0x6c
 80085cc:	785b      	ldrb	r3, [r3, #1]
 80085ce:	4608      	mov	r0, r1
 80085d0:	e7c9      	b.n	8008566 <_strtod_l+0x1d6>
 80085d2:	9804      	ldr	r0, [sp, #16]
 80085d4:	e7d3      	b.n	800857e <_strtod_l+0x1ee>
 80085d6:	2908      	cmp	r1, #8
 80085d8:	f101 0101 	add.w	r1, r1, #1
 80085dc:	dc03      	bgt.n	80085e6 <_strtod_l+0x256>
 80085de:	9b06      	ldr	r3, [sp, #24]
 80085e0:	437b      	muls	r3, r7
 80085e2:	9306      	str	r3, [sp, #24]
 80085e4:	e7e1      	b.n	80085aa <_strtod_l+0x21a>
 80085e6:	2910      	cmp	r1, #16
 80085e8:	bfd8      	it	le
 80085ea:	437d      	mulle	r5, r7
 80085ec:	e7dd      	b.n	80085aa <_strtod_l+0x21a>
 80085ee:	2c10      	cmp	r4, #16
 80085f0:	bfdc      	itt	le
 80085f2:	210a      	movle	r1, #10
 80085f4:	fb01 e505 	mlale	r5, r1, r5, lr
 80085f8:	e7e4      	b.n	80085c4 <_strtod_l+0x234>
 80085fa:	2301      	movs	r3, #1
 80085fc:	9305      	str	r3, [sp, #20]
 80085fe:	e781      	b.n	8008504 <_strtod_l+0x174>
 8008600:	f04f 0c01 	mov.w	ip, #1
 8008604:	1cb3      	adds	r3, r6, #2
 8008606:	931b      	str	r3, [sp, #108]	; 0x6c
 8008608:	78b3      	ldrb	r3, [r6, #2]
 800860a:	e78a      	b.n	8008522 <_strtod_l+0x192>
 800860c:	f04f 0c00 	mov.w	ip, #0
 8008610:	e7f8      	b.n	8008604 <_strtod_l+0x274>
 8008612:	bf00      	nop
 8008614:	0800b9f8 	.word	0x0800b9f8
 8008618:	7ff00000 	.word	0x7ff00000
 800861c:	9b1b      	ldr	r3, [sp, #108]	; 0x6c
 800861e:	1c5f      	adds	r7, r3, #1
 8008620:	971b      	str	r7, [sp, #108]	; 0x6c
 8008622:	785b      	ldrb	r3, [r3, #1]
 8008624:	2b30      	cmp	r3, #48	; 0x30
 8008626:	d0f9      	beq.n	800861c <_strtod_l+0x28c>
 8008628:	f1a3 0731 	sub.w	r7, r3, #49	; 0x31
 800862c:	2f08      	cmp	r7, #8
 800862e:	f63f af7d 	bhi.w	800852c <_strtod_l+0x19c>
 8008632:	f1a3 0e30 	sub.w	lr, r3, #48	; 0x30
 8008636:	9b1b      	ldr	r3, [sp, #108]	; 0x6c
 8008638:	9309      	str	r3, [sp, #36]	; 0x24
 800863a:	9b1b      	ldr	r3, [sp, #108]	; 0x6c
 800863c:	1c5f      	adds	r7, r3, #1
 800863e:	971b      	str	r7, [sp, #108]	; 0x6c
 8008640:	785b      	ldrb	r3, [r3, #1]
 8008642:	f1a3 0830 	sub.w	r8, r3, #48	; 0x30
 8008646:	f1b8 0f09 	cmp.w	r8, #9
 800864a:	d937      	bls.n	80086bc <_strtod_l+0x32c>
 800864c:	9909      	ldr	r1, [sp, #36]	; 0x24
 800864e:	1a7f      	subs	r7, r7, r1
 8008650:	2f08      	cmp	r7, #8
 8008652:	f644 671f 	movw	r7, #19999	; 0x4e1f
 8008656:	dc37      	bgt.n	80086c8 <_strtod_l+0x338>
 8008658:	45be      	cmp	lr, r7
 800865a:	bfa8      	it	ge
 800865c:	46be      	movge	lr, r7
 800865e:	f1bc 0f00 	cmp.w	ip, #0
 8008662:	d001      	beq.n	8008668 <_strtod_l+0x2d8>
 8008664:	f1ce 0e00 	rsb	lr, lr, #0
 8008668:	2c00      	cmp	r4, #0
 800866a:	d151      	bne.n	8008710 <_strtod_l+0x380>
 800866c:	2800      	cmp	r0, #0
 800866e:	f47f aece 	bne.w	800840e <_strtod_l+0x7e>
 8008672:	9a07      	ldr	r2, [sp, #28]
 8008674:	2a00      	cmp	r2, #0
 8008676:	f47f aeca 	bne.w	800840e <_strtod_l+0x7e>
 800867a:	9a05      	ldr	r2, [sp, #20]
 800867c:	2a00      	cmp	r2, #0
 800867e:	f47f aee4 	bne.w	800844a <_strtod_l+0xba>
 8008682:	2b4e      	cmp	r3, #78	; 0x4e
 8008684:	d027      	beq.n	80086d6 <_strtod_l+0x346>
 8008686:	dc21      	bgt.n	80086cc <_strtod_l+0x33c>
 8008688:	2b49      	cmp	r3, #73	; 0x49
 800868a:	f47f aede 	bne.w	800844a <_strtod_l+0xba>
 800868e:	49a4      	ldr	r1, [pc, #656]	; (8008920 <_strtod_l+0x590>)
 8008690:	a81b      	add	r0, sp, #108	; 0x6c
 8008692:	f001 fde1 	bl	800a258 <__match>
 8008696:	2800      	cmp	r0, #0
 8008698:	f43f aed7 	beq.w	800844a <_strtod_l+0xba>
 800869c:	9b1b      	ldr	r3, [sp, #108]	; 0x6c
 800869e:	49a1      	ldr	r1, [pc, #644]	; (8008924 <_strtod_l+0x594>)
 80086a0:	3b01      	subs	r3, #1
 80086a2:	a81b      	add	r0, sp, #108	; 0x6c
 80086a4:	931b      	str	r3, [sp, #108]	; 0x6c
 80086a6:	f001 fdd7 	bl	800a258 <__match>
 80086aa:	b910      	cbnz	r0, 80086b2 <_strtod_l+0x322>
 80086ac:	9b1b      	ldr	r3, [sp, #108]	; 0x6c
 80086ae:	3301      	adds	r3, #1
 80086b0:	931b      	str	r3, [sp, #108]	; 0x6c
 80086b2:	f8df a284 	ldr.w	sl, [pc, #644]	; 8008938 <_strtod_l+0x5a8>
 80086b6:	f04f 0900 	mov.w	r9, #0
 80086ba:	e6a8      	b.n	800840e <_strtod_l+0x7e>
 80086bc:	210a      	movs	r1, #10
 80086be:	fb01 3e0e 	mla	lr, r1, lr, r3
 80086c2:	f1ae 0e30 	sub.w	lr, lr, #48	; 0x30
 80086c6:	e7b8      	b.n	800863a <_strtod_l+0x2aa>
 80086c8:	46be      	mov	lr, r7
 80086ca:	e7c8      	b.n	800865e <_strtod_l+0x2ce>
 80086cc:	2b69      	cmp	r3, #105	; 0x69
 80086ce:	d0de      	beq.n	800868e <_strtod_l+0x2fe>
 80086d0:	2b6e      	cmp	r3, #110	; 0x6e
 80086d2:	f47f aeba 	bne.w	800844a <_strtod_l+0xba>
 80086d6:	4994      	ldr	r1, [pc, #592]	; (8008928 <_strtod_l+0x598>)
 80086d8:	a81b      	add	r0, sp, #108	; 0x6c
 80086da:	f001 fdbd 	bl	800a258 <__match>
 80086de:	2800      	cmp	r0, #0
 80086e0:	f43f aeb3 	beq.w	800844a <_strtod_l+0xba>
 80086e4:	9b1b      	ldr	r3, [sp, #108]	; 0x6c
 80086e6:	781b      	ldrb	r3, [r3, #0]
 80086e8:	2b28      	cmp	r3, #40	; 0x28
 80086ea:	d10e      	bne.n	800870a <_strtod_l+0x37a>
 80086ec:	aa1e      	add	r2, sp, #120	; 0x78
 80086ee:	498f      	ldr	r1, [pc, #572]	; (800892c <_strtod_l+0x59c>)
 80086f0:	a81b      	add	r0, sp, #108	; 0x6c
 80086f2:	f001 fdc5 	bl	800a280 <__hexnan>
 80086f6:	2805      	cmp	r0, #5
 80086f8:	d107      	bne.n	800870a <_strtod_l+0x37a>
 80086fa:	9b1f      	ldr	r3, [sp, #124]	; 0x7c
 80086fc:	f8dd 9078 	ldr.w	r9, [sp, #120]	; 0x78
 8008700:	f043 4aff 	orr.w	sl, r3, #2139095040	; 0x7f800000
 8008704:	f44a 0ae0 	orr.w	sl, sl, #7340032	; 0x700000
 8008708:	e681      	b.n	800840e <_strtod_l+0x7e>
 800870a:	f8df a234 	ldr.w	sl, [pc, #564]	; 8008940 <_strtod_l+0x5b0>
 800870e:	e7d2      	b.n	80086b6 <_strtod_l+0x326>
 8008710:	ebae 0302 	sub.w	r3, lr, r2
 8008714:	9307      	str	r3, [sp, #28]
 8008716:	9b04      	ldr	r3, [sp, #16]
 8008718:	9806      	ldr	r0, [sp, #24]
 800871a:	2b00      	cmp	r3, #0
 800871c:	bf08      	it	eq
 800871e:	4623      	moveq	r3, r4
 8008720:	2c10      	cmp	r4, #16
 8008722:	9304      	str	r3, [sp, #16]
 8008724:	46a0      	mov	r8, r4
 8008726:	bfa8      	it	ge
 8008728:	f04f 0810 	movge.w	r8, #16
 800872c:	f7f7 fe5a 	bl	80003e4 <__aeabi_ui2d>
 8008730:	2c09      	cmp	r4, #9
 8008732:	4681      	mov	r9, r0
 8008734:	468a      	mov	sl, r1
 8008736:	dc13      	bgt.n	8008760 <_strtod_l+0x3d0>
 8008738:	9b07      	ldr	r3, [sp, #28]
 800873a:	2b00      	cmp	r3, #0
 800873c:	f43f ae67 	beq.w	800840e <_strtod_l+0x7e>
 8008740:	9b07      	ldr	r3, [sp, #28]
 8008742:	dd7e      	ble.n	8008842 <_strtod_l+0x4b2>
 8008744:	2b16      	cmp	r3, #22
 8008746:	dc65      	bgt.n	8008814 <_strtod_l+0x484>
 8008748:	4a79      	ldr	r2, [pc, #484]	; (8008930 <_strtod_l+0x5a0>)
 800874a:	eb02 0ec3 	add.w	lr, r2, r3, lsl #3
 800874e:	464a      	mov	r2, r9
 8008750:	e9de 0100 	ldrd	r0, r1, [lr]
 8008754:	4653      	mov	r3, sl
 8008756:	f7f7 febf 	bl	80004d8 <__aeabi_dmul>
 800875a:	4681      	mov	r9, r0
 800875c:	468a      	mov	sl, r1
 800875e:	e656      	b.n	800840e <_strtod_l+0x7e>
 8008760:	4b73      	ldr	r3, [pc, #460]	; (8008930 <_strtod_l+0x5a0>)
 8008762:	eb03 03c8 	add.w	r3, r3, r8, lsl #3
 8008766:	e953 2312 	ldrd	r2, r3, [r3, #-72]	; 0x48
 800876a:	f7f7 feb5 	bl	80004d8 <__aeabi_dmul>
 800876e:	4606      	mov	r6, r0
 8008770:	4628      	mov	r0, r5
 8008772:	460f      	mov	r7, r1
 8008774:	f7f7 fe36 	bl	80003e4 <__aeabi_ui2d>
 8008778:	4602      	mov	r2, r0
 800877a:	460b      	mov	r3, r1
 800877c:	4630      	mov	r0, r6
 800877e:	4639      	mov	r1, r7
 8008780:	f7f7 fcf4 	bl	800016c <__adddf3>
 8008784:	2c0f      	cmp	r4, #15
 8008786:	4681      	mov	r9, r0
 8008788:	468a      	mov	sl, r1
 800878a:	ddd5      	ble.n	8008738 <_strtod_l+0x3a8>
 800878c:	9b07      	ldr	r3, [sp, #28]
 800878e:	eba4 0808 	sub.w	r8, r4, r8
 8008792:	4498      	add	r8, r3
 8008794:	f1b8 0f00 	cmp.w	r8, #0
 8008798:	f340 809a 	ble.w	80088d0 <_strtod_l+0x540>
 800879c:	f018 030f 	ands.w	r3, r8, #15
 80087a0:	d00a      	beq.n	80087b8 <_strtod_l+0x428>
 80087a2:	4963      	ldr	r1, [pc, #396]	; (8008930 <_strtod_l+0x5a0>)
 80087a4:	464a      	mov	r2, r9
 80087a6:	eb01 01c3 	add.w	r1, r1, r3, lsl #3
 80087aa:	e9d1 0100 	ldrd	r0, r1, [r1]
 80087ae:	4653      	mov	r3, sl
 80087b0:	f7f7 fe92 	bl	80004d8 <__aeabi_dmul>
 80087b4:	4681      	mov	r9, r0
 80087b6:	468a      	mov	sl, r1
 80087b8:	f038 080f 	bics.w	r8, r8, #15
 80087bc:	d077      	beq.n	80088ae <_strtod_l+0x51e>
 80087be:	f5b8 7f9a 	cmp.w	r8, #308	; 0x134
 80087c2:	dd4b      	ble.n	800885c <_strtod_l+0x4cc>
 80087c4:	f04f 0800 	mov.w	r8, #0
 80087c8:	f8cd 8010 	str.w	r8, [sp, #16]
 80087cc:	f8cd 8020 	str.w	r8, [sp, #32]
 80087d0:	f8cd 8018 	str.w	r8, [sp, #24]
 80087d4:	2322      	movs	r3, #34	; 0x22
 80087d6:	f04f 0900 	mov.w	r9, #0
 80087da:	f8df a15c 	ldr.w	sl, [pc, #348]	; 8008938 <_strtod_l+0x5a8>
 80087de:	f8cb 3000 	str.w	r3, [fp]
 80087e2:	9b08      	ldr	r3, [sp, #32]
 80087e4:	2b00      	cmp	r3, #0
 80087e6:	f43f ae12 	beq.w	800840e <_strtod_l+0x7e>
 80087ea:	991c      	ldr	r1, [sp, #112]	; 0x70
 80087ec:	4658      	mov	r0, fp
 80087ee:	f001 fe4c 	bl	800a48a <_Bfree>
 80087f2:	9906      	ldr	r1, [sp, #24]
 80087f4:	4658      	mov	r0, fp
 80087f6:	f001 fe48 	bl	800a48a <_Bfree>
 80087fa:	9904      	ldr	r1, [sp, #16]
 80087fc:	4658      	mov	r0, fp
 80087fe:	f001 fe44 	bl	800a48a <_Bfree>
 8008802:	9908      	ldr	r1, [sp, #32]
 8008804:	4658      	mov	r0, fp
 8008806:	f001 fe40 	bl	800a48a <_Bfree>
 800880a:	4641      	mov	r1, r8
 800880c:	4658      	mov	r0, fp
 800880e:	f001 fe3c 	bl	800a48a <_Bfree>
 8008812:	e5fc      	b.n	800840e <_strtod_l+0x7e>
 8008814:	9a07      	ldr	r2, [sp, #28]
 8008816:	f1c4 0325 	rsb	r3, r4, #37	; 0x25
 800881a:	4293      	cmp	r3, r2
 800881c:	dbb6      	blt.n	800878c <_strtod_l+0x3fc>
 800881e:	4d44      	ldr	r5, [pc, #272]	; (8008930 <_strtod_l+0x5a0>)
 8008820:	f1c4 040f 	rsb	r4, r4, #15
 8008824:	eb05 01c4 	add.w	r1, r5, r4, lsl #3
 8008828:	464a      	mov	r2, r9
 800882a:	e9d1 0100 	ldrd	r0, r1, [r1]
 800882e:	4653      	mov	r3, sl
 8008830:	f7f7 fe52 	bl	80004d8 <__aeabi_dmul>
 8008834:	9b07      	ldr	r3, [sp, #28]
 8008836:	1b1c      	subs	r4, r3, r4
 8008838:	eb05 05c4 	add.w	r5, r5, r4, lsl #3
 800883c:	e9d5 2300 	ldrd	r2, r3, [r5]
 8008840:	e789      	b.n	8008756 <_strtod_l+0x3c6>
 8008842:	f113 0f16 	cmn.w	r3, #22
 8008846:	dba1      	blt.n	800878c <_strtod_l+0x3fc>
 8008848:	4a39      	ldr	r2, [pc, #228]	; (8008930 <_strtod_l+0x5a0>)
 800884a:	4648      	mov	r0, r9
 800884c:	eba2 02c3 	sub.w	r2, r2, r3, lsl #3
 8008850:	e9d2 2300 	ldrd	r2, r3, [r2]
 8008854:	4651      	mov	r1, sl
 8008856:	f7f7 ff69 	bl	800072c <__aeabi_ddiv>
 800885a:	e77e      	b.n	800875a <_strtod_l+0x3ca>
 800885c:	2300      	movs	r3, #0
 800885e:	4648      	mov	r0, r9
 8008860:	4651      	mov	r1, sl
 8008862:	461d      	mov	r5, r3
 8008864:	4e33      	ldr	r6, [pc, #204]	; (8008934 <_strtod_l+0x5a4>)
 8008866:	ea4f 1828 	mov.w	r8, r8, asr #4
 800886a:	f1b8 0f01 	cmp.w	r8, #1
 800886e:	dc21      	bgt.n	80088b4 <_strtod_l+0x524>
 8008870:	b10b      	cbz	r3, 8008876 <_strtod_l+0x4e6>
 8008872:	4681      	mov	r9, r0
 8008874:	468a      	mov	sl, r1
 8008876:	4b2f      	ldr	r3, [pc, #188]	; (8008934 <_strtod_l+0x5a4>)
 8008878:	f1aa 7a54 	sub.w	sl, sl, #55574528	; 0x3500000
 800887c:	eb03 05c5 	add.w	r5, r3, r5, lsl #3
 8008880:	464a      	mov	r2, r9
 8008882:	e9d5 0100 	ldrd	r0, r1, [r5]
 8008886:	4653      	mov	r3, sl
 8008888:	f7f7 fe26 	bl	80004d8 <__aeabi_dmul>
 800888c:	4b2a      	ldr	r3, [pc, #168]	; (8008938 <_strtod_l+0x5a8>)
 800888e:	460a      	mov	r2, r1
 8008890:	400b      	ands	r3, r1
 8008892:	492a      	ldr	r1, [pc, #168]	; (800893c <_strtod_l+0x5ac>)
 8008894:	4681      	mov	r9, r0
 8008896:	428b      	cmp	r3, r1
 8008898:	d894      	bhi.n	80087c4 <_strtod_l+0x434>
 800889a:	f5a1 1180 	sub.w	r1, r1, #1048576	; 0x100000
 800889e:	428b      	cmp	r3, r1
 80088a0:	bf86      	itte	hi
 80088a2:	f04f 39ff 	movhi.w	r9, #4294967295	; 0xffffffff
 80088a6:	f8df a09c 	ldrhi.w	sl, [pc, #156]	; 8008944 <_strtod_l+0x5b4>
 80088aa:	f102 7a54 	addls.w	sl, r2, #55574528	; 0x3500000
 80088ae:	2300      	movs	r3, #0
 80088b0:	9305      	str	r3, [sp, #20]
 80088b2:	e07b      	b.n	80089ac <_strtod_l+0x61c>
 80088b4:	f018 0f01 	tst.w	r8, #1
 80088b8:	d006      	beq.n	80088c8 <_strtod_l+0x538>
 80088ba:	eb06 03c5 	add.w	r3, r6, r5, lsl #3
 80088be:	e9d3 2300 	ldrd	r2, r3, [r3]
 80088c2:	f7f7 fe09 	bl	80004d8 <__aeabi_dmul>
 80088c6:	2301      	movs	r3, #1
 80088c8:	3501      	adds	r5, #1
 80088ca:	ea4f 0868 	mov.w	r8, r8, asr #1
 80088ce:	e7cc      	b.n	800886a <_strtod_l+0x4da>
 80088d0:	d0ed      	beq.n	80088ae <_strtod_l+0x51e>
 80088d2:	f1c8 0800 	rsb	r8, r8, #0
 80088d6:	f018 020f 	ands.w	r2, r8, #15
 80088da:	d00a      	beq.n	80088f2 <_strtod_l+0x562>
 80088dc:	4b14      	ldr	r3, [pc, #80]	; (8008930 <_strtod_l+0x5a0>)
 80088de:	4648      	mov	r0, r9
 80088e0:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 80088e4:	4651      	mov	r1, sl
 80088e6:	e9d3 2300 	ldrd	r2, r3, [r3]
 80088ea:	f7f7 ff1f 	bl	800072c <__aeabi_ddiv>
 80088ee:	4681      	mov	r9, r0
 80088f0:	468a      	mov	sl, r1
 80088f2:	ea5f 1828 	movs.w	r8, r8, asr #4
 80088f6:	d0da      	beq.n	80088ae <_strtod_l+0x51e>
 80088f8:	f1b8 0f1f 	cmp.w	r8, #31
 80088fc:	dd24      	ble.n	8008948 <_strtod_l+0x5b8>
 80088fe:	f04f 0800 	mov.w	r8, #0
 8008902:	f8cd 8010 	str.w	r8, [sp, #16]
 8008906:	f8cd 8020 	str.w	r8, [sp, #32]
 800890a:	f8cd 8018 	str.w	r8, [sp, #24]
 800890e:	2322      	movs	r3, #34	; 0x22
 8008910:	f04f 0900 	mov.w	r9, #0
 8008914:	f04f 0a00 	mov.w	sl, #0
 8008918:	f8cb 3000 	str.w	r3, [fp]
 800891c:	e761      	b.n	80087e2 <_strtod_l+0x452>
 800891e:	bf00      	nop
 8008920:	0800bc76 	.word	0x0800bc76
 8008924:	0800ba4b 	.word	0x0800ba4b
 8008928:	0800b9c9 	.word	0x0800b9c9
 800892c:	0800ba0c 	.word	0x0800ba0c
 8008930:	0800ba88 	.word	0x0800ba88
 8008934:	0800ba60 	.word	0x0800ba60
 8008938:	7ff00000 	.word	0x7ff00000
 800893c:	7ca00000 	.word	0x7ca00000
 8008940:	fff80000 	.word	0xfff80000
 8008944:	7fefffff 	.word	0x7fefffff
 8008948:	f018 0310 	ands.w	r3, r8, #16
 800894c:	bf18      	it	ne
 800894e:	236a      	movne	r3, #106	; 0x6a
 8008950:	4648      	mov	r0, r9
 8008952:	9305      	str	r3, [sp, #20]
 8008954:	4651      	mov	r1, sl
 8008956:	2300      	movs	r3, #0
 8008958:	4da1      	ldr	r5, [pc, #644]	; (8008be0 <_strtod_l+0x850>)
 800895a:	f1b8 0f00 	cmp.w	r8, #0
 800895e:	f300 8113 	bgt.w	8008b88 <_strtod_l+0x7f8>
 8008962:	b10b      	cbz	r3, 8008968 <_strtod_l+0x5d8>
 8008964:	4681      	mov	r9, r0
 8008966:	468a      	mov	sl, r1
 8008968:	9b05      	ldr	r3, [sp, #20]
 800896a:	b1bb      	cbz	r3, 800899c <_strtod_l+0x60c>
 800896c:	f3ca 530a 	ubfx	r3, sl, #20, #11
 8008970:	f1c3 036b 	rsb	r3, r3, #107	; 0x6b
 8008974:	2b00      	cmp	r3, #0
 8008976:	4651      	mov	r1, sl
 8008978:	dd10      	ble.n	800899c <_strtod_l+0x60c>
 800897a:	2b1f      	cmp	r3, #31
 800897c:	f340 8110 	ble.w	8008ba0 <_strtod_l+0x810>
 8008980:	2b34      	cmp	r3, #52	; 0x34
 8008982:	bfd8      	it	le
 8008984:	f04f 32ff 	movle.w	r2, #4294967295	; 0xffffffff
 8008988:	f04f 0900 	mov.w	r9, #0
 800898c:	bfcf      	iteee	gt
 800898e:	f04f 7a5c 	movgt.w	sl, #57671680	; 0x3700000
 8008992:	3b20      	suble	r3, #32
 8008994:	fa02 f303 	lslle.w	r3, r2, r3
 8008998:	ea03 0a01 	andle.w	sl, r3, r1
 800899c:	2200      	movs	r2, #0
 800899e:	2300      	movs	r3, #0
 80089a0:	4648      	mov	r0, r9
 80089a2:	4651      	mov	r1, sl
 80089a4:	f7f8 f800 	bl	80009a8 <__aeabi_dcmpeq>
 80089a8:	2800      	cmp	r0, #0
 80089aa:	d1a8      	bne.n	80088fe <_strtod_l+0x56e>
 80089ac:	9b06      	ldr	r3, [sp, #24]
 80089ae:	9a04      	ldr	r2, [sp, #16]
 80089b0:	9300      	str	r3, [sp, #0]
 80089b2:	9908      	ldr	r1, [sp, #32]
 80089b4:	4623      	mov	r3, r4
 80089b6:	4658      	mov	r0, fp
 80089b8:	f001 fdb9 	bl	800a52e <__s2b>
 80089bc:	9008      	str	r0, [sp, #32]
 80089be:	2800      	cmp	r0, #0
 80089c0:	f43f af00 	beq.w	80087c4 <_strtod_l+0x434>
 80089c4:	9a07      	ldr	r2, [sp, #28]
 80089c6:	9b07      	ldr	r3, [sp, #28]
 80089c8:	2a00      	cmp	r2, #0
 80089ca:	f1c3 0300 	rsb	r3, r3, #0
 80089ce:	bfa8      	it	ge
 80089d0:	2300      	movge	r3, #0
 80089d2:	f04f 0800 	mov.w	r8, #0
 80089d6:	930e      	str	r3, [sp, #56]	; 0x38
 80089d8:	ea22 73e2 	bic.w	r3, r2, r2, asr #31
 80089dc:	9316      	str	r3, [sp, #88]	; 0x58
 80089de:	f8cd 8010 	str.w	r8, [sp, #16]
 80089e2:	9b08      	ldr	r3, [sp, #32]
 80089e4:	4658      	mov	r0, fp
 80089e6:	6859      	ldr	r1, [r3, #4]
 80089e8:	f001 fd1b 	bl	800a422 <_Balloc>
 80089ec:	9006      	str	r0, [sp, #24]
 80089ee:	2800      	cmp	r0, #0
 80089f0:	f43f aef0 	beq.w	80087d4 <_strtod_l+0x444>
 80089f4:	9b08      	ldr	r3, [sp, #32]
 80089f6:	300c      	adds	r0, #12
 80089f8:	691a      	ldr	r2, [r3, #16]
 80089fa:	f103 010c 	add.w	r1, r3, #12
 80089fe:	3202      	adds	r2, #2
 8008a00:	0092      	lsls	r2, r2, #2
 8008a02:	f001 fd01 	bl	800a408 <memcpy>
 8008a06:	ab1e      	add	r3, sp, #120	; 0x78
 8008a08:	9301      	str	r3, [sp, #4]
 8008a0a:	ab1d      	add	r3, sp, #116	; 0x74
 8008a0c:	9300      	str	r3, [sp, #0]
 8008a0e:	464a      	mov	r2, r9
 8008a10:	4653      	mov	r3, sl
 8008a12:	4658      	mov	r0, fp
 8008a14:	e9cd 9a0a 	strd	r9, sl, [sp, #40]	; 0x28
 8008a18:	f002 f844 	bl	800aaa4 <__d2b>
 8008a1c:	901c      	str	r0, [sp, #112]	; 0x70
 8008a1e:	2800      	cmp	r0, #0
 8008a20:	f43f aed8 	beq.w	80087d4 <_strtod_l+0x444>
 8008a24:	2101      	movs	r1, #1
 8008a26:	4658      	mov	r0, fp
 8008a28:	f001 fe0d 	bl	800a646 <__i2b>
 8008a2c:	9004      	str	r0, [sp, #16]
 8008a2e:	4603      	mov	r3, r0
 8008a30:	2800      	cmp	r0, #0
 8008a32:	f43f aecf 	beq.w	80087d4 <_strtod_l+0x444>
 8008a36:	9d1d      	ldr	r5, [sp, #116]	; 0x74
 8008a38:	9a1e      	ldr	r2, [sp, #120]	; 0x78
 8008a3a:	2d00      	cmp	r5, #0
 8008a3c:	bfab      	itete	ge
 8008a3e:	9b0e      	ldrge	r3, [sp, #56]	; 0x38
 8008a40:	9b16      	ldrlt	r3, [sp, #88]	; 0x58
 8008a42:	18ee      	addge	r6, r5, r3
 8008a44:	1b5c      	sublt	r4, r3, r5
 8008a46:	9b05      	ldr	r3, [sp, #20]
 8008a48:	bfa8      	it	ge
 8008a4a:	9c16      	ldrge	r4, [sp, #88]	; 0x58
 8008a4c:	eba5 0503 	sub.w	r5, r5, r3
 8008a50:	4415      	add	r5, r2
 8008a52:	4b64      	ldr	r3, [pc, #400]	; (8008be4 <_strtod_l+0x854>)
 8008a54:	f105 35ff 	add.w	r5, r5, #4294967295	; 0xffffffff
 8008a58:	bfb8      	it	lt
 8008a5a:	9e0e      	ldrlt	r6, [sp, #56]	; 0x38
 8008a5c:	429d      	cmp	r5, r3
 8008a5e:	f1c2 0236 	rsb	r2, r2, #54	; 0x36
 8008a62:	f280 80af 	bge.w	8008bc4 <_strtod_l+0x834>
 8008a66:	1b5b      	subs	r3, r3, r5
 8008a68:	2b1f      	cmp	r3, #31
 8008a6a:	eba2 0203 	sub.w	r2, r2, r3
 8008a6e:	f04f 0701 	mov.w	r7, #1
 8008a72:	f300 809c 	bgt.w	8008bae <_strtod_l+0x81e>
 8008a76:	2500      	movs	r5, #0
 8008a78:	fa07 f303 	lsl.w	r3, r7, r3
 8008a7c:	930f      	str	r3, [sp, #60]	; 0x3c
 8008a7e:	18b7      	adds	r7, r6, r2
 8008a80:	9b05      	ldr	r3, [sp, #20]
 8008a82:	42be      	cmp	r6, r7
 8008a84:	4414      	add	r4, r2
 8008a86:	441c      	add	r4, r3
 8008a88:	4633      	mov	r3, r6
 8008a8a:	bfa8      	it	ge
 8008a8c:	463b      	movge	r3, r7
 8008a8e:	42a3      	cmp	r3, r4
 8008a90:	bfa8      	it	ge
 8008a92:	4623      	movge	r3, r4
 8008a94:	2b00      	cmp	r3, #0
 8008a96:	bfc2      	ittt	gt
 8008a98:	1aff      	subgt	r7, r7, r3
 8008a9a:	1ae4      	subgt	r4, r4, r3
 8008a9c:	1af6      	subgt	r6, r6, r3
 8008a9e:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 8008aa0:	b1bb      	cbz	r3, 8008ad2 <_strtod_l+0x742>
 8008aa2:	461a      	mov	r2, r3
 8008aa4:	9904      	ldr	r1, [sp, #16]
 8008aa6:	4658      	mov	r0, fp
 8008aa8:	f001 fe6c 	bl	800a784 <__pow5mult>
 8008aac:	9004      	str	r0, [sp, #16]
 8008aae:	2800      	cmp	r0, #0
 8008ab0:	f43f ae90 	beq.w	80087d4 <_strtod_l+0x444>
 8008ab4:	4601      	mov	r1, r0
 8008ab6:	9a1c      	ldr	r2, [sp, #112]	; 0x70
 8008ab8:	4658      	mov	r0, fp
 8008aba:	f001 fdcd 	bl	800a658 <__multiply>
 8008abe:	9009      	str	r0, [sp, #36]	; 0x24
 8008ac0:	2800      	cmp	r0, #0
 8008ac2:	f43f ae87 	beq.w	80087d4 <_strtod_l+0x444>
 8008ac6:	991c      	ldr	r1, [sp, #112]	; 0x70
 8008ac8:	4658      	mov	r0, fp
 8008aca:	f001 fcde 	bl	800a48a <_Bfree>
 8008ace:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8008ad0:	931c      	str	r3, [sp, #112]	; 0x70
 8008ad2:	2f00      	cmp	r7, #0
 8008ad4:	dc7a      	bgt.n	8008bcc <_strtod_l+0x83c>
 8008ad6:	9b07      	ldr	r3, [sp, #28]
 8008ad8:	2b00      	cmp	r3, #0
 8008ada:	dd08      	ble.n	8008aee <_strtod_l+0x75e>
 8008adc:	9a16      	ldr	r2, [sp, #88]	; 0x58
 8008ade:	9906      	ldr	r1, [sp, #24]
 8008ae0:	4658      	mov	r0, fp
 8008ae2:	f001 fe4f 	bl	800a784 <__pow5mult>
 8008ae6:	9006      	str	r0, [sp, #24]
 8008ae8:	2800      	cmp	r0, #0
 8008aea:	f43f ae73 	beq.w	80087d4 <_strtod_l+0x444>
 8008aee:	2c00      	cmp	r4, #0
 8008af0:	dd08      	ble.n	8008b04 <_strtod_l+0x774>
 8008af2:	4622      	mov	r2, r4
 8008af4:	9906      	ldr	r1, [sp, #24]
 8008af6:	4658      	mov	r0, fp
 8008af8:	f001 fe92 	bl	800a820 <__lshift>
 8008afc:	9006      	str	r0, [sp, #24]
 8008afe:	2800      	cmp	r0, #0
 8008b00:	f43f ae68 	beq.w	80087d4 <_strtod_l+0x444>
 8008b04:	2e00      	cmp	r6, #0
 8008b06:	dd08      	ble.n	8008b1a <_strtod_l+0x78a>
 8008b08:	4632      	mov	r2, r6
 8008b0a:	9904      	ldr	r1, [sp, #16]
 8008b0c:	4658      	mov	r0, fp
 8008b0e:	f001 fe87 	bl	800a820 <__lshift>
 8008b12:	9004      	str	r0, [sp, #16]
 8008b14:	2800      	cmp	r0, #0
 8008b16:	f43f ae5d 	beq.w	80087d4 <_strtod_l+0x444>
 8008b1a:	9a06      	ldr	r2, [sp, #24]
 8008b1c:	991c      	ldr	r1, [sp, #112]	; 0x70
 8008b1e:	4658      	mov	r0, fp
 8008b20:	f001 feec 	bl	800a8fc <__mdiff>
 8008b24:	4680      	mov	r8, r0
 8008b26:	2800      	cmp	r0, #0
 8008b28:	f43f ae54 	beq.w	80087d4 <_strtod_l+0x444>
 8008b2c:	2400      	movs	r4, #0
 8008b2e:	68c3      	ldr	r3, [r0, #12]
 8008b30:	9904      	ldr	r1, [sp, #16]
 8008b32:	60c4      	str	r4, [r0, #12]
 8008b34:	930c      	str	r3, [sp, #48]	; 0x30
 8008b36:	f001 fec7 	bl	800a8c8 <__mcmp>
 8008b3a:	42a0      	cmp	r0, r4
 8008b3c:	da54      	bge.n	8008be8 <_strtod_l+0x858>
 8008b3e:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 8008b40:	b9f3      	cbnz	r3, 8008b80 <_strtod_l+0x7f0>
 8008b42:	f1b9 0f00 	cmp.w	r9, #0
 8008b46:	d11b      	bne.n	8008b80 <_strtod_l+0x7f0>
 8008b48:	f3ca 0313 	ubfx	r3, sl, #0, #20
 8008b4c:	b9c3      	cbnz	r3, 8008b80 <_strtod_l+0x7f0>
 8008b4e:	f02a 4300 	bic.w	r3, sl, #2147483648	; 0x80000000
 8008b52:	0d1b      	lsrs	r3, r3, #20
 8008b54:	051b      	lsls	r3, r3, #20
 8008b56:	f1b3 6fd6 	cmp.w	r3, #112197632	; 0x6b00000
 8008b5a:	d911      	bls.n	8008b80 <_strtod_l+0x7f0>
 8008b5c:	f8d8 3014 	ldr.w	r3, [r8, #20]
 8008b60:	b91b      	cbnz	r3, 8008b6a <_strtod_l+0x7da>
 8008b62:	f8d8 3010 	ldr.w	r3, [r8, #16]
 8008b66:	2b01      	cmp	r3, #1
 8008b68:	dd0a      	ble.n	8008b80 <_strtod_l+0x7f0>
 8008b6a:	4641      	mov	r1, r8
 8008b6c:	2201      	movs	r2, #1
 8008b6e:	4658      	mov	r0, fp
 8008b70:	f001 fe56 	bl	800a820 <__lshift>
 8008b74:	9904      	ldr	r1, [sp, #16]
 8008b76:	4680      	mov	r8, r0
 8008b78:	f001 fea6 	bl	800a8c8 <__mcmp>
 8008b7c:	2800      	cmp	r0, #0
 8008b7e:	dc68      	bgt.n	8008c52 <_strtod_l+0x8c2>
 8008b80:	9b05      	ldr	r3, [sp, #20]
 8008b82:	2b00      	cmp	r3, #0
 8008b84:	d172      	bne.n	8008c6c <_strtod_l+0x8dc>
 8008b86:	e630      	b.n	80087ea <_strtod_l+0x45a>
 8008b88:	f018 0f01 	tst.w	r8, #1
 8008b8c:	d004      	beq.n	8008b98 <_strtod_l+0x808>
 8008b8e:	e9d5 2300 	ldrd	r2, r3, [r5]
 8008b92:	f7f7 fca1 	bl	80004d8 <__aeabi_dmul>
 8008b96:	2301      	movs	r3, #1
 8008b98:	ea4f 0868 	mov.w	r8, r8, asr #1
 8008b9c:	3508      	adds	r5, #8
 8008b9e:	e6dc      	b.n	800895a <_strtod_l+0x5ca>
 8008ba0:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 8008ba4:	fa02 f303 	lsl.w	r3, r2, r3
 8008ba8:	ea03 0909 	and.w	r9, r3, r9
 8008bac:	e6f6      	b.n	800899c <_strtod_l+0x60c>
 8008bae:	f1c5 457f 	rsb	r5, r5, #4278190080	; 0xff000000
 8008bb2:	f505 057f 	add.w	r5, r5, #16711680	; 0xff0000
 8008bb6:	f505 457b 	add.w	r5, r5, #64256	; 0xfb00
 8008bba:	35e2      	adds	r5, #226	; 0xe2
 8008bbc:	fa07 f505 	lsl.w	r5, r7, r5
 8008bc0:	970f      	str	r7, [sp, #60]	; 0x3c
 8008bc2:	e75c      	b.n	8008a7e <_strtod_l+0x6ee>
 8008bc4:	2301      	movs	r3, #1
 8008bc6:	2500      	movs	r5, #0
 8008bc8:	930f      	str	r3, [sp, #60]	; 0x3c
 8008bca:	e758      	b.n	8008a7e <_strtod_l+0x6ee>
 8008bcc:	463a      	mov	r2, r7
 8008bce:	991c      	ldr	r1, [sp, #112]	; 0x70
 8008bd0:	4658      	mov	r0, fp
 8008bd2:	f001 fe25 	bl	800a820 <__lshift>
 8008bd6:	901c      	str	r0, [sp, #112]	; 0x70
 8008bd8:	2800      	cmp	r0, #0
 8008bda:	f47f af7c 	bne.w	8008ad6 <_strtod_l+0x746>
 8008bde:	e5f9      	b.n	80087d4 <_strtod_l+0x444>
 8008be0:	0800ba20 	.word	0x0800ba20
 8008be4:	fffffc02 	.word	0xfffffc02
 8008be8:	f8cd a024 	str.w	sl, [sp, #36]	; 0x24
 8008bec:	f040 8089 	bne.w	8008d02 <_strtod_l+0x972>
 8008bf0:	9a0c      	ldr	r2, [sp, #48]	; 0x30
 8008bf2:	f3ca 0313 	ubfx	r3, sl, #0, #20
 8008bf6:	b342      	cbz	r2, 8008c4a <_strtod_l+0x8ba>
 8008bf8:	4aaf      	ldr	r2, [pc, #700]	; (8008eb8 <_strtod_l+0xb28>)
 8008bfa:	4293      	cmp	r3, r2
 8008bfc:	d156      	bne.n	8008cac <_strtod_l+0x91c>
 8008bfe:	9b05      	ldr	r3, [sp, #20]
 8008c00:	4648      	mov	r0, r9
 8008c02:	b1eb      	cbz	r3, 8008c40 <_strtod_l+0x8b0>
 8008c04:	4653      	mov	r3, sl
 8008c06:	4aad      	ldr	r2, [pc, #692]	; (8008ebc <_strtod_l+0xb2c>)
 8008c08:	f04f 31ff 	mov.w	r1, #4294967295	; 0xffffffff
 8008c0c:	401a      	ands	r2, r3
 8008c0e:	f1b2 6fd4 	cmp.w	r2, #111149056	; 0x6a00000
 8008c12:	d818      	bhi.n	8008c46 <_strtod_l+0x8b6>
 8008c14:	0d12      	lsrs	r2, r2, #20
 8008c16:	f1c2 036b 	rsb	r3, r2, #107	; 0x6b
 8008c1a:	fa01 f303 	lsl.w	r3, r1, r3
 8008c1e:	4298      	cmp	r0, r3
 8008c20:	d144      	bne.n	8008cac <_strtod_l+0x91c>
 8008c22:	4ba7      	ldr	r3, [pc, #668]	; (8008ec0 <_strtod_l+0xb30>)
 8008c24:	9a09      	ldr	r2, [sp, #36]	; 0x24
 8008c26:	429a      	cmp	r2, r3
 8008c28:	d102      	bne.n	8008c30 <_strtod_l+0x8a0>
 8008c2a:	3001      	adds	r0, #1
 8008c2c:	f43f add2 	beq.w	80087d4 <_strtod_l+0x444>
 8008c30:	4ba2      	ldr	r3, [pc, #648]	; (8008ebc <_strtod_l+0xb2c>)
 8008c32:	9a09      	ldr	r2, [sp, #36]	; 0x24
 8008c34:	f04f 0900 	mov.w	r9, #0
 8008c38:	401a      	ands	r2, r3
 8008c3a:	f502 1a80 	add.w	sl, r2, #1048576	; 0x100000
 8008c3e:	e79f      	b.n	8008b80 <_strtod_l+0x7f0>
 8008c40:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 8008c44:	e7eb      	b.n	8008c1e <_strtod_l+0x88e>
 8008c46:	460b      	mov	r3, r1
 8008c48:	e7e9      	b.n	8008c1e <_strtod_l+0x88e>
 8008c4a:	bb7b      	cbnz	r3, 8008cac <_strtod_l+0x91c>
 8008c4c:	f1b9 0f00 	cmp.w	r9, #0
 8008c50:	d12c      	bne.n	8008cac <_strtod_l+0x91c>
 8008c52:	9905      	ldr	r1, [sp, #20]
 8008c54:	4653      	mov	r3, sl
 8008c56:	4a99      	ldr	r2, [pc, #612]	; (8008ebc <_strtod_l+0xb2c>)
 8008c58:	b1f1      	cbz	r1, 8008c98 <_strtod_l+0x908>
 8008c5a:	ea02 010a 	and.w	r1, r2, sl
 8008c5e:	f1b1 6fd6 	cmp.w	r1, #112197632	; 0x6b00000
 8008c62:	dc19      	bgt.n	8008c98 <_strtod_l+0x908>
 8008c64:	f1b1 7f5c 	cmp.w	r1, #57671680	; 0x3700000
 8008c68:	f77f ae51 	ble.w	800890e <_strtod_l+0x57e>
 8008c6c:	2300      	movs	r3, #0
 8008c6e:	4a95      	ldr	r2, [pc, #596]	; (8008ec4 <_strtod_l+0xb34>)
 8008c70:	4648      	mov	r0, r9
 8008c72:	e9cd 3214 	strd	r3, r2, [sp, #80]	; 0x50
 8008c76:	4651      	mov	r1, sl
 8008c78:	e9dd 2314 	ldrd	r2, r3, [sp, #80]	; 0x50
 8008c7c:	f7f7 fc2c 	bl	80004d8 <__aeabi_dmul>
 8008c80:	4681      	mov	r9, r0
 8008c82:	468a      	mov	sl, r1
 8008c84:	2900      	cmp	r1, #0
 8008c86:	f47f adb0 	bne.w	80087ea <_strtod_l+0x45a>
 8008c8a:	2800      	cmp	r0, #0
 8008c8c:	f47f adad 	bne.w	80087ea <_strtod_l+0x45a>
 8008c90:	2322      	movs	r3, #34	; 0x22
 8008c92:	f8cb 3000 	str.w	r3, [fp]
 8008c96:	e5a8      	b.n	80087ea <_strtod_l+0x45a>
 8008c98:	4013      	ands	r3, r2
 8008c9a:	f5a3 1380 	sub.w	r3, r3, #1048576	; 0x100000
 8008c9e:	ea6f 5a13 	mvn.w	sl, r3, lsr #20
 8008ca2:	f04f 39ff 	mov.w	r9, #4294967295	; 0xffffffff
 8008ca6:	ea6f 5a0a 	mvn.w	sl, sl, lsl #20
 8008caa:	e769      	b.n	8008b80 <_strtod_l+0x7f0>
 8008cac:	b19d      	cbz	r5, 8008cd6 <_strtod_l+0x946>
 8008cae:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8008cb0:	421d      	tst	r5, r3
 8008cb2:	f43f af65 	beq.w	8008b80 <_strtod_l+0x7f0>
 8008cb6:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 8008cb8:	9a05      	ldr	r2, [sp, #20]
 8008cba:	4648      	mov	r0, r9
 8008cbc:	4651      	mov	r1, sl
 8008cbe:	b173      	cbz	r3, 8008cde <_strtod_l+0x94e>
 8008cc0:	f7ff fb42 	bl	8008348 <sulp>
 8008cc4:	4602      	mov	r2, r0
 8008cc6:	460b      	mov	r3, r1
 8008cc8:	e9dd 010a 	ldrd	r0, r1, [sp, #40]	; 0x28
 8008ccc:	f7f7 fa4e 	bl	800016c <__adddf3>
 8008cd0:	4681      	mov	r9, r0
 8008cd2:	468a      	mov	sl, r1
 8008cd4:	e754      	b.n	8008b80 <_strtod_l+0x7f0>
 8008cd6:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 8008cd8:	ea13 0f09 	tst.w	r3, r9
 8008cdc:	e7e9      	b.n	8008cb2 <_strtod_l+0x922>
 8008cde:	f7ff fb33 	bl	8008348 <sulp>
 8008ce2:	4602      	mov	r2, r0
 8008ce4:	460b      	mov	r3, r1
 8008ce6:	e9dd 010a 	ldrd	r0, r1, [sp, #40]	; 0x28
 8008cea:	f7f7 fa3d 	bl	8000168 <__aeabi_dsub>
 8008cee:	2200      	movs	r2, #0
 8008cf0:	2300      	movs	r3, #0
 8008cf2:	4681      	mov	r9, r0
 8008cf4:	468a      	mov	sl, r1
 8008cf6:	f7f7 fe57 	bl	80009a8 <__aeabi_dcmpeq>
 8008cfa:	2800      	cmp	r0, #0
 8008cfc:	f47f ae07 	bne.w	800890e <_strtod_l+0x57e>
 8008d00:	e73e      	b.n	8008b80 <_strtod_l+0x7f0>
 8008d02:	9904      	ldr	r1, [sp, #16]
 8008d04:	4640      	mov	r0, r8
 8008d06:	f001 ff1c 	bl	800ab42 <__ratio>
 8008d0a:	2200      	movs	r2, #0
 8008d0c:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
 8008d10:	4606      	mov	r6, r0
 8008d12:	460f      	mov	r7, r1
 8008d14:	f7f7 fe5c 	bl	80009d0 <__aeabi_dcmple>
 8008d18:	2800      	cmp	r0, #0
 8008d1a:	d075      	beq.n	8008e08 <_strtod_l+0xa78>
 8008d1c:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 8008d1e:	2b00      	cmp	r3, #0
 8008d20:	d047      	beq.n	8008db2 <_strtod_l+0xa22>
 8008d22:	2600      	movs	r6, #0
 8008d24:	4f68      	ldr	r7, [pc, #416]	; (8008ec8 <_strtod_l+0xb38>)
 8008d26:	4d68      	ldr	r5, [pc, #416]	; (8008ec8 <_strtod_l+0xb38>)
 8008d28:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8008d2a:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
 8008d2e:	0d1b      	lsrs	r3, r3, #20
 8008d30:	051b      	lsls	r3, r3, #20
 8008d32:	930f      	str	r3, [sp, #60]	; 0x3c
 8008d34:	9a0f      	ldr	r2, [sp, #60]	; 0x3c
 8008d36:	4b65      	ldr	r3, [pc, #404]	; (8008ecc <_strtod_l+0xb3c>)
 8008d38:	429a      	cmp	r2, r3
 8008d3a:	f040 80cf 	bne.w	8008edc <_strtod_l+0xb4c>
 8008d3e:	e9dd 230a 	ldrd	r2, r3, [sp, #40]	; 0x28
 8008d42:	e9cd 2314 	strd	r2, r3, [sp, #80]	; 0x50
 8008d46:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8008d48:	4648      	mov	r0, r9
 8008d4a:	f1a3 7a54 	sub.w	sl, r3, #55574528	; 0x3500000
 8008d4e:	4651      	mov	r1, sl
 8008d50:	f001 fe32 	bl	800a9b8 <__ulp>
 8008d54:	4602      	mov	r2, r0
 8008d56:	460b      	mov	r3, r1
 8008d58:	4630      	mov	r0, r6
 8008d5a:	4639      	mov	r1, r7
 8008d5c:	f7f7 fbbc 	bl	80004d8 <__aeabi_dmul>
 8008d60:	464a      	mov	r2, r9
 8008d62:	4653      	mov	r3, sl
 8008d64:	f7f7 fa02 	bl	800016c <__adddf3>
 8008d68:	460b      	mov	r3, r1
 8008d6a:	4954      	ldr	r1, [pc, #336]	; (8008ebc <_strtod_l+0xb2c>)
 8008d6c:	4a58      	ldr	r2, [pc, #352]	; (8008ed0 <_strtod_l+0xb40>)
 8008d6e:	4019      	ands	r1, r3
 8008d70:	4291      	cmp	r1, r2
 8008d72:	4681      	mov	r9, r0
 8008d74:	d95e      	bls.n	8008e34 <_strtod_l+0xaa4>
 8008d76:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 8008d78:	f102 7254 	add.w	r2, r2, #55574528	; 0x3500000
 8008d7c:	4293      	cmp	r3, r2
 8008d7e:	d103      	bne.n	8008d88 <_strtod_l+0x9f8>
 8008d80:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8008d82:	3301      	adds	r3, #1
 8008d84:	f43f ad26 	beq.w	80087d4 <_strtod_l+0x444>
 8008d88:	f04f 39ff 	mov.w	r9, #4294967295	; 0xffffffff
 8008d8c:	f8df a130 	ldr.w	sl, [pc, #304]	; 8008ec0 <_strtod_l+0xb30>
 8008d90:	991c      	ldr	r1, [sp, #112]	; 0x70
 8008d92:	4658      	mov	r0, fp
 8008d94:	f001 fb79 	bl	800a48a <_Bfree>
 8008d98:	9906      	ldr	r1, [sp, #24]
 8008d9a:	4658      	mov	r0, fp
 8008d9c:	f001 fb75 	bl	800a48a <_Bfree>
 8008da0:	9904      	ldr	r1, [sp, #16]
 8008da2:	4658      	mov	r0, fp
 8008da4:	f001 fb71 	bl	800a48a <_Bfree>
 8008da8:	4641      	mov	r1, r8
 8008daa:	4658      	mov	r0, fp
 8008dac:	f001 fb6d 	bl	800a48a <_Bfree>
 8008db0:	e617      	b.n	80089e2 <_strtod_l+0x652>
 8008db2:	f1b9 0f00 	cmp.w	r9, #0
 8008db6:	d119      	bne.n	8008dec <_strtod_l+0xa5c>
 8008db8:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8008dba:	f3c3 0313 	ubfx	r3, r3, #0, #20
 8008dbe:	b9e3      	cbnz	r3, 8008dfa <_strtod_l+0xa6a>
 8008dc0:	2200      	movs	r2, #0
 8008dc2:	4b41      	ldr	r3, [pc, #260]	; (8008ec8 <_strtod_l+0xb38>)
 8008dc4:	4630      	mov	r0, r6
 8008dc6:	4639      	mov	r1, r7
 8008dc8:	f7f7 fdf8 	bl	80009bc <__aeabi_dcmplt>
 8008dcc:	b9c8      	cbnz	r0, 8008e02 <_strtod_l+0xa72>
 8008dce:	2200      	movs	r2, #0
 8008dd0:	4b40      	ldr	r3, [pc, #256]	; (8008ed4 <_strtod_l+0xb44>)
 8008dd2:	4630      	mov	r0, r6
 8008dd4:	4639      	mov	r1, r7
 8008dd6:	f7f7 fb7f 	bl	80004d8 <__aeabi_dmul>
 8008dda:	4604      	mov	r4, r0
 8008ddc:	460d      	mov	r5, r1
 8008dde:	f105 4300 	add.w	r3, r5, #2147483648	; 0x80000000
 8008de2:	9418      	str	r4, [sp, #96]	; 0x60
 8008de4:	9319      	str	r3, [sp, #100]	; 0x64
 8008de6:	e9dd 6718 	ldrd	r6, r7, [sp, #96]	; 0x60
 8008dea:	e79d      	b.n	8008d28 <_strtod_l+0x998>
 8008dec:	f1b9 0f01 	cmp.w	r9, #1
 8008df0:	d103      	bne.n	8008dfa <_strtod_l+0xa6a>
 8008df2:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8008df4:	2b00      	cmp	r3, #0
 8008df6:	f43f ad8a 	beq.w	800890e <_strtod_l+0x57e>
 8008dfa:	2600      	movs	r6, #0
 8008dfc:	4f36      	ldr	r7, [pc, #216]	; (8008ed8 <_strtod_l+0xb48>)
 8008dfe:	2400      	movs	r4, #0
 8008e00:	e791      	b.n	8008d26 <_strtod_l+0x996>
 8008e02:	9c0c      	ldr	r4, [sp, #48]	; 0x30
 8008e04:	4d33      	ldr	r5, [pc, #204]	; (8008ed4 <_strtod_l+0xb44>)
 8008e06:	e7ea      	b.n	8008dde <_strtod_l+0xa4e>
 8008e08:	4b32      	ldr	r3, [pc, #200]	; (8008ed4 <_strtod_l+0xb44>)
 8008e0a:	2200      	movs	r2, #0
 8008e0c:	4630      	mov	r0, r6
 8008e0e:	4639      	mov	r1, r7
 8008e10:	f7f7 fb62 	bl	80004d8 <__aeabi_dmul>
 8008e14:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 8008e16:	4604      	mov	r4, r0
 8008e18:	460d      	mov	r5, r1
 8008e1a:	b933      	cbnz	r3, 8008e2a <_strtod_l+0xa9a>
 8008e1c:	f101 4300 	add.w	r3, r1, #2147483648	; 0x80000000
 8008e20:	9010      	str	r0, [sp, #64]	; 0x40
 8008e22:	9311      	str	r3, [sp, #68]	; 0x44
 8008e24:	e9dd 6710 	ldrd	r6, r7, [sp, #64]	; 0x40
 8008e28:	e77e      	b.n	8008d28 <_strtod_l+0x998>
 8008e2a:	4602      	mov	r2, r0
 8008e2c:	460b      	mov	r3, r1
 8008e2e:	e9cd 2310 	strd	r2, r3, [sp, #64]	; 0x40
 8008e32:	e7f7      	b.n	8008e24 <_strtod_l+0xa94>
 8008e34:	f103 7a54 	add.w	sl, r3, #55574528	; 0x3500000
 8008e38:	9b05      	ldr	r3, [sp, #20]
 8008e3a:	2b00      	cmp	r3, #0
 8008e3c:	d1a8      	bne.n	8008d90 <_strtod_l+0xa00>
 8008e3e:	f02a 4300 	bic.w	r3, sl, #2147483648	; 0x80000000
 8008e42:	0d1b      	lsrs	r3, r3, #20
 8008e44:	9a0f      	ldr	r2, [sp, #60]	; 0x3c
 8008e46:	051b      	lsls	r3, r3, #20
 8008e48:	429a      	cmp	r2, r3
 8008e4a:	4656      	mov	r6, sl
 8008e4c:	d1a0      	bne.n	8008d90 <_strtod_l+0xa00>
 8008e4e:	4629      	mov	r1, r5
 8008e50:	4620      	mov	r0, r4
 8008e52:	f7f7 fdf1 	bl	8000a38 <__aeabi_d2iz>
 8008e56:	f7f7 fad5 	bl	8000404 <__aeabi_i2d>
 8008e5a:	460b      	mov	r3, r1
 8008e5c:	4602      	mov	r2, r0
 8008e5e:	4629      	mov	r1, r5
 8008e60:	4620      	mov	r0, r4
 8008e62:	f7f7 f981 	bl	8000168 <__aeabi_dsub>
 8008e66:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 8008e68:	4604      	mov	r4, r0
 8008e6a:	460d      	mov	r5, r1
 8008e6c:	b933      	cbnz	r3, 8008e7c <_strtod_l+0xaec>
 8008e6e:	f1b9 0f00 	cmp.w	r9, #0
 8008e72:	d103      	bne.n	8008e7c <_strtod_l+0xaec>
 8008e74:	f3ca 0613 	ubfx	r6, sl, #0, #20
 8008e78:	2e00      	cmp	r6, #0
 8008e7a:	d06a      	beq.n	8008f52 <_strtod_l+0xbc2>
 8008e7c:	a30a      	add	r3, pc, #40	; (adr r3, 8008ea8 <_strtod_l+0xb18>)
 8008e7e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8008e82:	4620      	mov	r0, r4
 8008e84:	4629      	mov	r1, r5
 8008e86:	f7f7 fd99 	bl	80009bc <__aeabi_dcmplt>
 8008e8a:	2800      	cmp	r0, #0
 8008e8c:	f47f acad 	bne.w	80087ea <_strtod_l+0x45a>
 8008e90:	a307      	add	r3, pc, #28	; (adr r3, 8008eb0 <_strtod_l+0xb20>)
 8008e92:	e9d3 2300 	ldrd	r2, r3, [r3]
 8008e96:	4620      	mov	r0, r4
 8008e98:	4629      	mov	r1, r5
 8008e9a:	f7f7 fdad 	bl	80009f8 <__aeabi_dcmpgt>
 8008e9e:	2800      	cmp	r0, #0
 8008ea0:	f43f af76 	beq.w	8008d90 <_strtod_l+0xa00>
 8008ea4:	e4a1      	b.n	80087ea <_strtod_l+0x45a>
 8008ea6:	bf00      	nop
 8008ea8:	94a03595 	.word	0x94a03595
 8008eac:	3fdfffff 	.word	0x3fdfffff
 8008eb0:	35afe535 	.word	0x35afe535
 8008eb4:	3fe00000 	.word	0x3fe00000
 8008eb8:	000fffff 	.word	0x000fffff
 8008ebc:	7ff00000 	.word	0x7ff00000
 8008ec0:	7fefffff 	.word	0x7fefffff
 8008ec4:	39500000 	.word	0x39500000
 8008ec8:	3ff00000 	.word	0x3ff00000
 8008ecc:	7fe00000 	.word	0x7fe00000
 8008ed0:	7c9fffff 	.word	0x7c9fffff
 8008ed4:	3fe00000 	.word	0x3fe00000
 8008ed8:	bff00000 	.word	0xbff00000
 8008edc:	9b05      	ldr	r3, [sp, #20]
 8008ede:	b313      	cbz	r3, 8008f26 <_strtod_l+0xb96>
 8008ee0:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 8008ee2:	f1b3 6fd4 	cmp.w	r3, #111149056	; 0x6a00000
 8008ee6:	d81e      	bhi.n	8008f26 <_strtod_l+0xb96>
 8008ee8:	a325      	add	r3, pc, #148	; (adr r3, 8008f80 <_strtod_l+0xbf0>)
 8008eea:	e9d3 2300 	ldrd	r2, r3, [r3]
 8008eee:	4620      	mov	r0, r4
 8008ef0:	4629      	mov	r1, r5
 8008ef2:	f7f7 fd6d 	bl	80009d0 <__aeabi_dcmple>
 8008ef6:	b190      	cbz	r0, 8008f1e <_strtod_l+0xb8e>
 8008ef8:	4629      	mov	r1, r5
 8008efa:	4620      	mov	r0, r4
 8008efc:	f7f7 fdc4 	bl	8000a88 <__aeabi_d2uiz>
 8008f00:	2800      	cmp	r0, #0
 8008f02:	bf08      	it	eq
 8008f04:	2001      	moveq	r0, #1
 8008f06:	f7f7 fa6d 	bl	80003e4 <__aeabi_ui2d>
 8008f0a:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 8008f0c:	4604      	mov	r4, r0
 8008f0e:	460d      	mov	r5, r1
 8008f10:	b9d3      	cbnz	r3, 8008f48 <_strtod_l+0xbb8>
 8008f12:	f101 4300 	add.w	r3, r1, #2147483648	; 0x80000000
 8008f16:	9012      	str	r0, [sp, #72]	; 0x48
 8008f18:	9313      	str	r3, [sp, #76]	; 0x4c
 8008f1a:	e9dd 6712 	ldrd	r6, r7, [sp, #72]	; 0x48
 8008f1e:	9a0f      	ldr	r2, [sp, #60]	; 0x3c
 8008f20:	f107 63d6 	add.w	r3, r7, #112197632	; 0x6b00000
 8008f24:	1a9f      	subs	r7, r3, r2
 8008f26:	e9dd 010a 	ldrd	r0, r1, [sp, #40]	; 0x28
 8008f2a:	f001 fd45 	bl	800a9b8 <__ulp>
 8008f2e:	4602      	mov	r2, r0
 8008f30:	460b      	mov	r3, r1
 8008f32:	4630      	mov	r0, r6
 8008f34:	4639      	mov	r1, r7
 8008f36:	f7f7 facf 	bl	80004d8 <__aeabi_dmul>
 8008f3a:	e9dd 230a 	ldrd	r2, r3, [sp, #40]	; 0x28
 8008f3e:	f7f7 f915 	bl	800016c <__adddf3>
 8008f42:	4681      	mov	r9, r0
 8008f44:	468a      	mov	sl, r1
 8008f46:	e777      	b.n	8008e38 <_strtod_l+0xaa8>
 8008f48:	4602      	mov	r2, r0
 8008f4a:	460b      	mov	r3, r1
 8008f4c:	e9cd 2312 	strd	r2, r3, [sp, #72]	; 0x48
 8008f50:	e7e3      	b.n	8008f1a <_strtod_l+0xb8a>
 8008f52:	a30d      	add	r3, pc, #52	; (adr r3, 8008f88 <_strtod_l+0xbf8>)
 8008f54:	e9d3 2300 	ldrd	r2, r3, [r3]
 8008f58:	f7f7 fd30 	bl	80009bc <__aeabi_dcmplt>
 8008f5c:	e79f      	b.n	8008e9e <_strtod_l+0xb0e>
 8008f5e:	2300      	movs	r3, #0
 8008f60:	930d      	str	r3, [sp, #52]	; 0x34
 8008f62:	9b1b      	ldr	r3, [sp, #108]	; 0x6c
 8008f64:	9a17      	ldr	r2, [sp, #92]	; 0x5c
 8008f66:	6013      	str	r3, [r2, #0]
 8008f68:	f7ff ba55 	b.w	8008416 <_strtod_l+0x86>
 8008f6c:	2b65      	cmp	r3, #101	; 0x65
 8008f6e:	f04f 0200 	mov.w	r2, #0
 8008f72:	f43f ab42 	beq.w	80085fa <_strtod_l+0x26a>
 8008f76:	2101      	movs	r1, #1
 8008f78:	4614      	mov	r4, r2
 8008f7a:	9105      	str	r1, [sp, #20]
 8008f7c:	f7ff babf 	b.w	80084fe <_strtod_l+0x16e>
 8008f80:	ffc00000 	.word	0xffc00000
 8008f84:	41dfffff 	.word	0x41dfffff
 8008f88:	94a03595 	.word	0x94a03595
 8008f8c:	3fcfffff 	.word	0x3fcfffff

08008f90 <_strtod_r>:
 8008f90:	4b05      	ldr	r3, [pc, #20]	; (8008fa8 <_strtod_r+0x18>)
 8008f92:	b410      	push	{r4}
 8008f94:	681b      	ldr	r3, [r3, #0]
 8008f96:	4c05      	ldr	r4, [pc, #20]	; (8008fac <_strtod_r+0x1c>)
 8008f98:	6a1b      	ldr	r3, [r3, #32]
 8008f9a:	2b00      	cmp	r3, #0
 8008f9c:	bf08      	it	eq
 8008f9e:	4623      	moveq	r3, r4
 8008fa0:	bc10      	pop	{r4}
 8008fa2:	f7ff b9f5 	b.w	8008390 <_strtod_l>
 8008fa6:	bf00      	nop
 8008fa8:	2000002c 	.word	0x2000002c
 8008fac:	20000090 	.word	0x20000090

08008fb0 <_strtol_l.isra.0>:
 8008fb0:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8008fb4:	4680      	mov	r8, r0
 8008fb6:	4689      	mov	r9, r1
 8008fb8:	4692      	mov	sl, r2
 8008fba:	461e      	mov	r6, r3
 8008fbc:	460f      	mov	r7, r1
 8008fbe:	463d      	mov	r5, r7
 8008fc0:	9808      	ldr	r0, [sp, #32]
 8008fc2:	f815 4b01 	ldrb.w	r4, [r5], #1
 8008fc6:	f001 f9eb 	bl	800a3a0 <__locale_ctype_ptr_l>
 8008fca:	4420      	add	r0, r4
 8008fcc:	7843      	ldrb	r3, [r0, #1]
 8008fce:	f013 0308 	ands.w	r3, r3, #8
 8008fd2:	d132      	bne.n	800903a <_strtol_l.isra.0+0x8a>
 8008fd4:	2c2d      	cmp	r4, #45	; 0x2d
 8008fd6:	d132      	bne.n	800903e <_strtol_l.isra.0+0x8e>
 8008fd8:	2201      	movs	r2, #1
 8008fda:	787c      	ldrb	r4, [r7, #1]
 8008fdc:	1cbd      	adds	r5, r7, #2
 8008fde:	2e00      	cmp	r6, #0
 8008fe0:	d05d      	beq.n	800909e <_strtol_l.isra.0+0xee>
 8008fe2:	2e10      	cmp	r6, #16
 8008fe4:	d109      	bne.n	8008ffa <_strtol_l.isra.0+0x4a>
 8008fe6:	2c30      	cmp	r4, #48	; 0x30
 8008fe8:	d107      	bne.n	8008ffa <_strtol_l.isra.0+0x4a>
 8008fea:	782b      	ldrb	r3, [r5, #0]
 8008fec:	f003 03df 	and.w	r3, r3, #223	; 0xdf
 8008ff0:	2b58      	cmp	r3, #88	; 0x58
 8008ff2:	d14f      	bne.n	8009094 <_strtol_l.isra.0+0xe4>
 8008ff4:	2610      	movs	r6, #16
 8008ff6:	786c      	ldrb	r4, [r5, #1]
 8008ff8:	3502      	adds	r5, #2
 8008ffa:	2a00      	cmp	r2, #0
 8008ffc:	bf14      	ite	ne
 8008ffe:	f04f 4100 	movne.w	r1, #2147483648	; 0x80000000
 8009002:	f06f 4100 	mvneq.w	r1, #2147483648	; 0x80000000
 8009006:	2700      	movs	r7, #0
 8009008:	fbb1 fcf6 	udiv	ip, r1, r6
 800900c:	4638      	mov	r0, r7
 800900e:	fb06 1e1c 	mls	lr, r6, ip, r1
 8009012:	f1a4 0330 	sub.w	r3, r4, #48	; 0x30
 8009016:	2b09      	cmp	r3, #9
 8009018:	d817      	bhi.n	800904a <_strtol_l.isra.0+0x9a>
 800901a:	461c      	mov	r4, r3
 800901c:	42a6      	cmp	r6, r4
 800901e:	dd23      	ble.n	8009068 <_strtol_l.isra.0+0xb8>
 8009020:	1c7b      	adds	r3, r7, #1
 8009022:	d007      	beq.n	8009034 <_strtol_l.isra.0+0x84>
 8009024:	4584      	cmp	ip, r0
 8009026:	d31c      	bcc.n	8009062 <_strtol_l.isra.0+0xb2>
 8009028:	d101      	bne.n	800902e <_strtol_l.isra.0+0x7e>
 800902a:	45a6      	cmp	lr, r4
 800902c:	db19      	blt.n	8009062 <_strtol_l.isra.0+0xb2>
 800902e:	2701      	movs	r7, #1
 8009030:	fb00 4006 	mla	r0, r0, r6, r4
 8009034:	f815 4b01 	ldrb.w	r4, [r5], #1
 8009038:	e7eb      	b.n	8009012 <_strtol_l.isra.0+0x62>
 800903a:	462f      	mov	r7, r5
 800903c:	e7bf      	b.n	8008fbe <_strtol_l.isra.0+0xe>
 800903e:	2c2b      	cmp	r4, #43	; 0x2b
 8009040:	bf04      	itt	eq
 8009042:	1cbd      	addeq	r5, r7, #2
 8009044:	787c      	ldrbeq	r4, [r7, #1]
 8009046:	461a      	mov	r2, r3
 8009048:	e7c9      	b.n	8008fde <_strtol_l.isra.0+0x2e>
 800904a:	f1a4 0341 	sub.w	r3, r4, #65	; 0x41
 800904e:	2b19      	cmp	r3, #25
 8009050:	d801      	bhi.n	8009056 <_strtol_l.isra.0+0xa6>
 8009052:	3c37      	subs	r4, #55	; 0x37
 8009054:	e7e2      	b.n	800901c <_strtol_l.isra.0+0x6c>
 8009056:	f1a4 0361 	sub.w	r3, r4, #97	; 0x61
 800905a:	2b19      	cmp	r3, #25
 800905c:	d804      	bhi.n	8009068 <_strtol_l.isra.0+0xb8>
 800905e:	3c57      	subs	r4, #87	; 0x57
 8009060:	e7dc      	b.n	800901c <_strtol_l.isra.0+0x6c>
 8009062:	f04f 37ff 	mov.w	r7, #4294967295	; 0xffffffff
 8009066:	e7e5      	b.n	8009034 <_strtol_l.isra.0+0x84>
 8009068:	1c7b      	adds	r3, r7, #1
 800906a:	d108      	bne.n	800907e <_strtol_l.isra.0+0xce>
 800906c:	2322      	movs	r3, #34	; 0x22
 800906e:	4608      	mov	r0, r1
 8009070:	f8c8 3000 	str.w	r3, [r8]
 8009074:	f1ba 0f00 	cmp.w	sl, #0
 8009078:	d107      	bne.n	800908a <_strtol_l.isra.0+0xda>
 800907a:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800907e:	b102      	cbz	r2, 8009082 <_strtol_l.isra.0+0xd2>
 8009080:	4240      	negs	r0, r0
 8009082:	f1ba 0f00 	cmp.w	sl, #0
 8009086:	d0f8      	beq.n	800907a <_strtol_l.isra.0+0xca>
 8009088:	b10f      	cbz	r7, 800908e <_strtol_l.isra.0+0xde>
 800908a:	f105 39ff 	add.w	r9, r5, #4294967295	; 0xffffffff
 800908e:	f8ca 9000 	str.w	r9, [sl]
 8009092:	e7f2      	b.n	800907a <_strtol_l.isra.0+0xca>
 8009094:	2430      	movs	r4, #48	; 0x30
 8009096:	2e00      	cmp	r6, #0
 8009098:	d1af      	bne.n	8008ffa <_strtol_l.isra.0+0x4a>
 800909a:	2608      	movs	r6, #8
 800909c:	e7ad      	b.n	8008ffa <_strtol_l.isra.0+0x4a>
 800909e:	2c30      	cmp	r4, #48	; 0x30
 80090a0:	d0a3      	beq.n	8008fea <_strtol_l.isra.0+0x3a>
 80090a2:	260a      	movs	r6, #10
 80090a4:	e7a9      	b.n	8008ffa <_strtol_l.isra.0+0x4a>
	...

080090a8 <_strtol_r>:
 80090a8:	b537      	push	{r0, r1, r2, r4, r5, lr}
 80090aa:	4c06      	ldr	r4, [pc, #24]	; (80090c4 <_strtol_r+0x1c>)
 80090ac:	4d06      	ldr	r5, [pc, #24]	; (80090c8 <_strtol_r+0x20>)
 80090ae:	6824      	ldr	r4, [r4, #0]
 80090b0:	6a24      	ldr	r4, [r4, #32]
 80090b2:	2c00      	cmp	r4, #0
 80090b4:	bf08      	it	eq
 80090b6:	462c      	moveq	r4, r5
 80090b8:	9400      	str	r4, [sp, #0]
 80090ba:	f7ff ff79 	bl	8008fb0 <_strtol_l.isra.0>
 80090be:	b003      	add	sp, #12
 80090c0:	bd30      	pop	{r4, r5, pc}
 80090c2:	bf00      	nop
 80090c4:	2000002c 	.word	0x2000002c
 80090c8:	20000090 	.word	0x20000090

080090cc <quorem>:
 80090cc:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80090d0:	6903      	ldr	r3, [r0, #16]
 80090d2:	690c      	ldr	r4, [r1, #16]
 80090d4:	4680      	mov	r8, r0
 80090d6:	42a3      	cmp	r3, r4
 80090d8:	f2c0 8084 	blt.w	80091e4 <quorem+0x118>
 80090dc:	3c01      	subs	r4, #1
 80090de:	f101 0714 	add.w	r7, r1, #20
 80090e2:	f100 0614 	add.w	r6, r0, #20
 80090e6:	f857 5024 	ldr.w	r5, [r7, r4, lsl #2]
 80090ea:	f856 0024 	ldr.w	r0, [r6, r4, lsl #2]
 80090ee:	3501      	adds	r5, #1
 80090f0:	fbb0 f5f5 	udiv	r5, r0, r5
 80090f4:	ea4f 0c84 	mov.w	ip, r4, lsl #2
 80090f8:	eb06 030c 	add.w	r3, r6, ip
 80090fc:	eb07 090c 	add.w	r9, r7, ip
 8009100:	9301      	str	r3, [sp, #4]
 8009102:	b39d      	cbz	r5, 800916c <quorem+0xa0>
 8009104:	f04f 0a00 	mov.w	sl, #0
 8009108:	4638      	mov	r0, r7
 800910a:	46b6      	mov	lr, r6
 800910c:	46d3      	mov	fp, sl
 800910e:	f850 2b04 	ldr.w	r2, [r0], #4
 8009112:	b293      	uxth	r3, r2
 8009114:	fb05 a303 	mla	r3, r5, r3, sl
 8009118:	0c12      	lsrs	r2, r2, #16
 800911a:	ea4f 4a13 	mov.w	sl, r3, lsr #16
 800911e:	fb05 a202 	mla	r2, r5, r2, sl
 8009122:	b29b      	uxth	r3, r3
 8009124:	ebab 0303 	sub.w	r3, fp, r3
 8009128:	f8de b000 	ldr.w	fp, [lr]
 800912c:	ea4f 4a12 	mov.w	sl, r2, lsr #16
 8009130:	fa1f fb8b 	uxth.w	fp, fp
 8009134:	445b      	add	r3, fp
 8009136:	fa1f fb82 	uxth.w	fp, r2
 800913a:	f8de 2000 	ldr.w	r2, [lr]
 800913e:	4581      	cmp	r9, r0
 8009140:	ebcb 4212 	rsb	r2, fp, r2, lsr #16
 8009144:	eb02 4223 	add.w	r2, r2, r3, asr #16
 8009148:	b29b      	uxth	r3, r3
 800914a:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 800914e:	ea4f 4b22 	mov.w	fp, r2, asr #16
 8009152:	f84e 3b04 	str.w	r3, [lr], #4
 8009156:	d2da      	bcs.n	800910e <quorem+0x42>
 8009158:	f856 300c 	ldr.w	r3, [r6, ip]
 800915c:	b933      	cbnz	r3, 800916c <quorem+0xa0>
 800915e:	9b01      	ldr	r3, [sp, #4]
 8009160:	3b04      	subs	r3, #4
 8009162:	429e      	cmp	r6, r3
 8009164:	461a      	mov	r2, r3
 8009166:	d331      	bcc.n	80091cc <quorem+0x100>
 8009168:	f8c8 4010 	str.w	r4, [r8, #16]
 800916c:	4640      	mov	r0, r8
 800916e:	f001 fbab 	bl	800a8c8 <__mcmp>
 8009172:	2800      	cmp	r0, #0
 8009174:	db26      	blt.n	80091c4 <quorem+0xf8>
 8009176:	4630      	mov	r0, r6
 8009178:	f04f 0c00 	mov.w	ip, #0
 800917c:	3501      	adds	r5, #1
 800917e:	f857 1b04 	ldr.w	r1, [r7], #4
 8009182:	f8d0 e000 	ldr.w	lr, [r0]
 8009186:	b28b      	uxth	r3, r1
 8009188:	ebac 0303 	sub.w	r3, ip, r3
 800918c:	fa1f f28e 	uxth.w	r2, lr
 8009190:	4413      	add	r3, r2
 8009192:	0c0a      	lsrs	r2, r1, #16
 8009194:	ebc2 421e 	rsb	r2, r2, lr, lsr #16
 8009198:	eb02 4223 	add.w	r2, r2, r3, asr #16
 800919c:	b29b      	uxth	r3, r3
 800919e:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 80091a2:	45b9      	cmp	r9, r7
 80091a4:	ea4f 4c22 	mov.w	ip, r2, asr #16
 80091a8:	f840 3b04 	str.w	r3, [r0], #4
 80091ac:	d2e7      	bcs.n	800917e <quorem+0xb2>
 80091ae:	f856 2024 	ldr.w	r2, [r6, r4, lsl #2]
 80091b2:	eb06 0384 	add.w	r3, r6, r4, lsl #2
 80091b6:	b92a      	cbnz	r2, 80091c4 <quorem+0xf8>
 80091b8:	3b04      	subs	r3, #4
 80091ba:	429e      	cmp	r6, r3
 80091bc:	461a      	mov	r2, r3
 80091be:	d30b      	bcc.n	80091d8 <quorem+0x10c>
 80091c0:	f8c8 4010 	str.w	r4, [r8, #16]
 80091c4:	4628      	mov	r0, r5
 80091c6:	b003      	add	sp, #12
 80091c8:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80091cc:	6812      	ldr	r2, [r2, #0]
 80091ce:	3b04      	subs	r3, #4
 80091d0:	2a00      	cmp	r2, #0
 80091d2:	d1c9      	bne.n	8009168 <quorem+0x9c>
 80091d4:	3c01      	subs	r4, #1
 80091d6:	e7c4      	b.n	8009162 <quorem+0x96>
 80091d8:	6812      	ldr	r2, [r2, #0]
 80091da:	3b04      	subs	r3, #4
 80091dc:	2a00      	cmp	r2, #0
 80091de:	d1ef      	bne.n	80091c0 <quorem+0xf4>
 80091e0:	3c01      	subs	r4, #1
 80091e2:	e7ea      	b.n	80091ba <quorem+0xee>
 80091e4:	2000      	movs	r0, #0
 80091e6:	e7ee      	b.n	80091c6 <quorem+0xfa>

080091e8 <_dtoa_r>:
 80091e8:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80091ec:	4616      	mov	r6, r2
 80091ee:	461f      	mov	r7, r3
 80091f0:	6a45      	ldr	r5, [r0, #36]	; 0x24
 80091f2:	b095      	sub	sp, #84	; 0x54
 80091f4:	4604      	mov	r4, r0
 80091f6:	f8dd 8084 	ldr.w	r8, [sp, #132]	; 0x84
 80091fa:	e9cd 6702 	strd	r6, r7, [sp, #8]
 80091fe:	b93d      	cbnz	r5, 8009210 <_dtoa_r+0x28>
 8009200:	2010      	movs	r0, #16
 8009202:	f7fe f987 	bl	8007514 <malloc>
 8009206:	6260      	str	r0, [r4, #36]	; 0x24
 8009208:	e9c0 5501 	strd	r5, r5, [r0, #4]
 800920c:	6005      	str	r5, [r0, #0]
 800920e:	60c5      	str	r5, [r0, #12]
 8009210:	6a63      	ldr	r3, [r4, #36]	; 0x24
 8009212:	6819      	ldr	r1, [r3, #0]
 8009214:	b151      	cbz	r1, 800922c <_dtoa_r+0x44>
 8009216:	685a      	ldr	r2, [r3, #4]
 8009218:	2301      	movs	r3, #1
 800921a:	4093      	lsls	r3, r2
 800921c:	604a      	str	r2, [r1, #4]
 800921e:	608b      	str	r3, [r1, #8]
 8009220:	4620      	mov	r0, r4
 8009222:	f001 f932 	bl	800a48a <_Bfree>
 8009226:	2200      	movs	r2, #0
 8009228:	6a63      	ldr	r3, [r4, #36]	; 0x24
 800922a:	601a      	str	r2, [r3, #0]
 800922c:	1e3b      	subs	r3, r7, #0
 800922e:	bfaf      	iteee	ge
 8009230:	2300      	movge	r3, #0
 8009232:	2201      	movlt	r2, #1
 8009234:	f023 4300 	biclt.w	r3, r3, #2147483648	; 0x80000000
 8009238:	9303      	strlt	r3, [sp, #12]
 800923a:	bfac      	ite	ge
 800923c:	f8c8 3000 	strge.w	r3, [r8]
 8009240:	f8c8 2000 	strlt.w	r2, [r8]
 8009244:	4bae      	ldr	r3, [pc, #696]	; (8009500 <_dtoa_r+0x318>)
 8009246:	f8dd 800c 	ldr.w	r8, [sp, #12]
 800924a:	ea33 0308 	bics.w	r3, r3, r8
 800924e:	d11b      	bne.n	8009288 <_dtoa_r+0xa0>
 8009250:	f242 730f 	movw	r3, #9999	; 0x270f
 8009254:	9a20      	ldr	r2, [sp, #128]	; 0x80
 8009256:	6013      	str	r3, [r2, #0]
 8009258:	9b02      	ldr	r3, [sp, #8]
 800925a:	b923      	cbnz	r3, 8009266 <_dtoa_r+0x7e>
 800925c:	f3c8 0013 	ubfx	r0, r8, #0, #20
 8009260:	2800      	cmp	r0, #0
 8009262:	f000 8545 	beq.w	8009cf0 <_dtoa_r+0xb08>
 8009266:	9b22      	ldr	r3, [sp, #136]	; 0x88
 8009268:	b953      	cbnz	r3, 8009280 <_dtoa_r+0x98>
 800926a:	4ba6      	ldr	r3, [pc, #664]	; (8009504 <_dtoa_r+0x31c>)
 800926c:	e021      	b.n	80092b2 <_dtoa_r+0xca>
 800926e:	4ba6      	ldr	r3, [pc, #664]	; (8009508 <_dtoa_r+0x320>)
 8009270:	9306      	str	r3, [sp, #24]
 8009272:	3308      	adds	r3, #8
 8009274:	9a22      	ldr	r2, [sp, #136]	; 0x88
 8009276:	6013      	str	r3, [r2, #0]
 8009278:	9806      	ldr	r0, [sp, #24]
 800927a:	b015      	add	sp, #84	; 0x54
 800927c:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8009280:	4ba0      	ldr	r3, [pc, #640]	; (8009504 <_dtoa_r+0x31c>)
 8009282:	9306      	str	r3, [sp, #24]
 8009284:	3303      	adds	r3, #3
 8009286:	e7f5      	b.n	8009274 <_dtoa_r+0x8c>
 8009288:	e9dd 6702 	ldrd	r6, r7, [sp, #8]
 800928c:	2200      	movs	r2, #0
 800928e:	2300      	movs	r3, #0
 8009290:	4630      	mov	r0, r6
 8009292:	4639      	mov	r1, r7
 8009294:	f7f7 fb88 	bl	80009a8 <__aeabi_dcmpeq>
 8009298:	4682      	mov	sl, r0
 800929a:	b160      	cbz	r0, 80092b6 <_dtoa_r+0xce>
 800929c:	2301      	movs	r3, #1
 800929e:	9a20      	ldr	r2, [sp, #128]	; 0x80
 80092a0:	6013      	str	r3, [r2, #0]
 80092a2:	9b22      	ldr	r3, [sp, #136]	; 0x88
 80092a4:	2b00      	cmp	r3, #0
 80092a6:	f000 8520 	beq.w	8009cea <_dtoa_r+0xb02>
 80092aa:	4b98      	ldr	r3, [pc, #608]	; (800950c <_dtoa_r+0x324>)
 80092ac:	9a22      	ldr	r2, [sp, #136]	; 0x88
 80092ae:	6013      	str	r3, [r2, #0]
 80092b0:	3b01      	subs	r3, #1
 80092b2:	9306      	str	r3, [sp, #24]
 80092b4:	e7e0      	b.n	8009278 <_dtoa_r+0x90>
 80092b6:	ab12      	add	r3, sp, #72	; 0x48
 80092b8:	9301      	str	r3, [sp, #4]
 80092ba:	ab13      	add	r3, sp, #76	; 0x4c
 80092bc:	9300      	str	r3, [sp, #0]
 80092be:	4632      	mov	r2, r6
 80092c0:	463b      	mov	r3, r7
 80092c2:	4620      	mov	r0, r4
 80092c4:	f001 fbee 	bl	800aaa4 <__d2b>
 80092c8:	f3c8 550a 	ubfx	r5, r8, #20, #11
 80092cc:	4683      	mov	fp, r0
 80092ce:	2d00      	cmp	r5, #0
 80092d0:	d07d      	beq.n	80093ce <_dtoa_r+0x1e6>
 80092d2:	46b0      	mov	r8, r6
 80092d4:	f3c7 0313 	ubfx	r3, r7, #0, #20
 80092d8:	f043 597f 	orr.w	r9, r3, #1069547520	; 0x3fc00000
 80092dc:	f449 1940 	orr.w	r9, r9, #3145728	; 0x300000
 80092e0:	f2a5 35ff 	subw	r5, r5, #1023	; 0x3ff
 80092e4:	f8cd a040 	str.w	sl, [sp, #64]	; 0x40
 80092e8:	2200      	movs	r2, #0
 80092ea:	4b89      	ldr	r3, [pc, #548]	; (8009510 <_dtoa_r+0x328>)
 80092ec:	4640      	mov	r0, r8
 80092ee:	4649      	mov	r1, r9
 80092f0:	f7f6 ff3a 	bl	8000168 <__aeabi_dsub>
 80092f4:	a37c      	add	r3, pc, #496	; (adr r3, 80094e8 <_dtoa_r+0x300>)
 80092f6:	e9d3 2300 	ldrd	r2, r3, [r3]
 80092fa:	f7f7 f8ed 	bl	80004d8 <__aeabi_dmul>
 80092fe:	a37c      	add	r3, pc, #496	; (adr r3, 80094f0 <_dtoa_r+0x308>)
 8009300:	e9d3 2300 	ldrd	r2, r3, [r3]
 8009304:	f7f6 ff32 	bl	800016c <__adddf3>
 8009308:	4606      	mov	r6, r0
 800930a:	4628      	mov	r0, r5
 800930c:	460f      	mov	r7, r1
 800930e:	f7f7 f879 	bl	8000404 <__aeabi_i2d>
 8009312:	a379      	add	r3, pc, #484	; (adr r3, 80094f8 <_dtoa_r+0x310>)
 8009314:	e9d3 2300 	ldrd	r2, r3, [r3]
 8009318:	f7f7 f8de 	bl	80004d8 <__aeabi_dmul>
 800931c:	4602      	mov	r2, r0
 800931e:	460b      	mov	r3, r1
 8009320:	4630      	mov	r0, r6
 8009322:	4639      	mov	r1, r7
 8009324:	f7f6 ff22 	bl	800016c <__adddf3>
 8009328:	4606      	mov	r6, r0
 800932a:	460f      	mov	r7, r1
 800932c:	f7f7 fb84 	bl	8000a38 <__aeabi_d2iz>
 8009330:	2200      	movs	r2, #0
 8009332:	4682      	mov	sl, r0
 8009334:	2300      	movs	r3, #0
 8009336:	4630      	mov	r0, r6
 8009338:	4639      	mov	r1, r7
 800933a:	f7f7 fb3f 	bl	80009bc <__aeabi_dcmplt>
 800933e:	b148      	cbz	r0, 8009354 <_dtoa_r+0x16c>
 8009340:	4650      	mov	r0, sl
 8009342:	f7f7 f85f 	bl	8000404 <__aeabi_i2d>
 8009346:	4632      	mov	r2, r6
 8009348:	463b      	mov	r3, r7
 800934a:	f7f7 fb2d 	bl	80009a8 <__aeabi_dcmpeq>
 800934e:	b908      	cbnz	r0, 8009354 <_dtoa_r+0x16c>
 8009350:	f10a 3aff 	add.w	sl, sl, #4294967295	; 0xffffffff
 8009354:	f1ba 0f16 	cmp.w	sl, #22
 8009358:	d85a      	bhi.n	8009410 <_dtoa_r+0x228>
 800935a:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 800935e:	496d      	ldr	r1, [pc, #436]	; (8009514 <_dtoa_r+0x32c>)
 8009360:	eb01 01ca 	add.w	r1, r1, sl, lsl #3
 8009364:	e9d1 0100 	ldrd	r0, r1, [r1]
 8009368:	f7f7 fb46 	bl	80009f8 <__aeabi_dcmpgt>
 800936c:	2800      	cmp	r0, #0
 800936e:	d051      	beq.n	8009414 <_dtoa_r+0x22c>
 8009370:	2300      	movs	r3, #0
 8009372:	f10a 3aff 	add.w	sl, sl, #4294967295	; 0xffffffff
 8009376:	930d      	str	r3, [sp, #52]	; 0x34
 8009378:	9b12      	ldr	r3, [sp, #72]	; 0x48
 800937a:	1b5d      	subs	r5, r3, r5
 800937c:	1e6b      	subs	r3, r5, #1
 800937e:	9307      	str	r3, [sp, #28]
 8009380:	bf43      	ittte	mi
 8009382:	2300      	movmi	r3, #0
 8009384:	f1c5 0901 	rsbmi	r9, r5, #1
 8009388:	9307      	strmi	r3, [sp, #28]
 800938a:	f04f 0900 	movpl.w	r9, #0
 800938e:	f1ba 0f00 	cmp.w	sl, #0
 8009392:	db41      	blt.n	8009418 <_dtoa_r+0x230>
 8009394:	9b07      	ldr	r3, [sp, #28]
 8009396:	f8cd a030 	str.w	sl, [sp, #48]	; 0x30
 800939a:	4453      	add	r3, sl
 800939c:	9307      	str	r3, [sp, #28]
 800939e:	2300      	movs	r3, #0
 80093a0:	9308      	str	r3, [sp, #32]
 80093a2:	9b1e      	ldr	r3, [sp, #120]	; 0x78
 80093a4:	2b09      	cmp	r3, #9
 80093a6:	f200 808f 	bhi.w	80094c8 <_dtoa_r+0x2e0>
 80093aa:	2b05      	cmp	r3, #5
 80093ac:	bfc4      	itt	gt
 80093ae:	3b04      	subgt	r3, #4
 80093b0:	931e      	strgt	r3, [sp, #120]	; 0x78
 80093b2:	9b1e      	ldr	r3, [sp, #120]	; 0x78
 80093b4:	bfc8      	it	gt
 80093b6:	2500      	movgt	r5, #0
 80093b8:	f1a3 0302 	sub.w	r3, r3, #2
 80093bc:	bfd8      	it	le
 80093be:	2501      	movle	r5, #1
 80093c0:	2b03      	cmp	r3, #3
 80093c2:	f200 808d 	bhi.w	80094e0 <_dtoa_r+0x2f8>
 80093c6:	e8df f003 	tbb	[pc, r3]
 80093ca:	7d7b      	.short	0x7d7b
 80093cc:	6f2f      	.short	0x6f2f
 80093ce:	e9dd 5312 	ldrd	r5, r3, [sp, #72]	; 0x48
 80093d2:	441d      	add	r5, r3
 80093d4:	f205 4032 	addw	r0, r5, #1074	; 0x432
 80093d8:	2820      	cmp	r0, #32
 80093da:	dd13      	ble.n	8009404 <_dtoa_r+0x21c>
 80093dc:	f1c0 0040 	rsb	r0, r0, #64	; 0x40
 80093e0:	9b02      	ldr	r3, [sp, #8]
 80093e2:	fa08 f800 	lsl.w	r8, r8, r0
 80093e6:	f205 4012 	addw	r0, r5, #1042	; 0x412
 80093ea:	fa23 f000 	lsr.w	r0, r3, r0
 80093ee:	ea48 0000 	orr.w	r0, r8, r0
 80093f2:	f7f6 fff7 	bl	80003e4 <__aeabi_ui2d>
 80093f6:	2301      	movs	r3, #1
 80093f8:	4680      	mov	r8, r0
 80093fa:	f1a1 79f8 	sub.w	r9, r1, #32505856	; 0x1f00000
 80093fe:	3d01      	subs	r5, #1
 8009400:	9310      	str	r3, [sp, #64]	; 0x40
 8009402:	e771      	b.n	80092e8 <_dtoa_r+0x100>
 8009404:	9b02      	ldr	r3, [sp, #8]
 8009406:	f1c0 0020 	rsb	r0, r0, #32
 800940a:	fa03 f000 	lsl.w	r0, r3, r0
 800940e:	e7f0      	b.n	80093f2 <_dtoa_r+0x20a>
 8009410:	2301      	movs	r3, #1
 8009412:	e7b0      	b.n	8009376 <_dtoa_r+0x18e>
 8009414:	900d      	str	r0, [sp, #52]	; 0x34
 8009416:	e7af      	b.n	8009378 <_dtoa_r+0x190>
 8009418:	f1ca 0300 	rsb	r3, sl, #0
 800941c:	9308      	str	r3, [sp, #32]
 800941e:	2300      	movs	r3, #0
 8009420:	eba9 090a 	sub.w	r9, r9, sl
 8009424:	930c      	str	r3, [sp, #48]	; 0x30
 8009426:	e7bc      	b.n	80093a2 <_dtoa_r+0x1ba>
 8009428:	2301      	movs	r3, #1
 800942a:	9309      	str	r3, [sp, #36]	; 0x24
 800942c:	9b1f      	ldr	r3, [sp, #124]	; 0x7c
 800942e:	2b00      	cmp	r3, #0
 8009430:	dd74      	ble.n	800951c <_dtoa_r+0x334>
 8009432:	4698      	mov	r8, r3
 8009434:	9304      	str	r3, [sp, #16]
 8009436:	2200      	movs	r2, #0
 8009438:	6a66      	ldr	r6, [r4, #36]	; 0x24
 800943a:	6072      	str	r2, [r6, #4]
 800943c:	2204      	movs	r2, #4
 800943e:	f102 0014 	add.w	r0, r2, #20
 8009442:	4298      	cmp	r0, r3
 8009444:	6871      	ldr	r1, [r6, #4]
 8009446:	d96e      	bls.n	8009526 <_dtoa_r+0x33e>
 8009448:	4620      	mov	r0, r4
 800944a:	f000 ffea 	bl	800a422 <_Balloc>
 800944e:	6a63      	ldr	r3, [r4, #36]	; 0x24
 8009450:	6030      	str	r0, [r6, #0]
 8009452:	681b      	ldr	r3, [r3, #0]
 8009454:	f1b8 0f0e 	cmp.w	r8, #14
 8009458:	9306      	str	r3, [sp, #24]
 800945a:	f200 80ed 	bhi.w	8009638 <_dtoa_r+0x450>
 800945e:	2d00      	cmp	r5, #0
 8009460:	f000 80ea 	beq.w	8009638 <_dtoa_r+0x450>
 8009464:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8009468:	f1ba 0f00 	cmp.w	sl, #0
 800946c:	e9cd 230e 	strd	r2, r3, [sp, #56]	; 0x38
 8009470:	dd77      	ble.n	8009562 <_dtoa_r+0x37a>
 8009472:	4a28      	ldr	r2, [pc, #160]	; (8009514 <_dtoa_r+0x32c>)
 8009474:	f00a 030f 	and.w	r3, sl, #15
 8009478:	ea4f 162a 	mov.w	r6, sl, asr #4
 800947c:	eb02 03c3 	add.w	r3, r2, r3, lsl #3
 8009480:	06f0      	lsls	r0, r6, #27
 8009482:	e9d3 2300 	ldrd	r2, r3, [r3]
 8009486:	e9cd 230a 	strd	r2, r3, [sp, #40]	; 0x28
 800948a:	d568      	bpl.n	800955e <_dtoa_r+0x376>
 800948c:	e9dd 010e 	ldrd	r0, r1, [sp, #56]	; 0x38
 8009490:	4b21      	ldr	r3, [pc, #132]	; (8009518 <_dtoa_r+0x330>)
 8009492:	2503      	movs	r5, #3
 8009494:	e9d3 2308 	ldrd	r2, r3, [r3, #32]
 8009498:	f7f7 f948 	bl	800072c <__aeabi_ddiv>
 800949c:	e9cd 0102 	strd	r0, r1, [sp, #8]
 80094a0:	f006 060f 	and.w	r6, r6, #15
 80094a4:	4f1c      	ldr	r7, [pc, #112]	; (8009518 <_dtoa_r+0x330>)
 80094a6:	e04f      	b.n	8009548 <_dtoa_r+0x360>
 80094a8:	2301      	movs	r3, #1
 80094aa:	9309      	str	r3, [sp, #36]	; 0x24
 80094ac:	9b1f      	ldr	r3, [sp, #124]	; 0x7c
 80094ae:	4453      	add	r3, sl
 80094b0:	f103 0801 	add.w	r8, r3, #1
 80094b4:	9304      	str	r3, [sp, #16]
 80094b6:	4643      	mov	r3, r8
 80094b8:	2b01      	cmp	r3, #1
 80094ba:	bfb8      	it	lt
 80094bc:	2301      	movlt	r3, #1
 80094be:	e7ba      	b.n	8009436 <_dtoa_r+0x24e>
 80094c0:	2300      	movs	r3, #0
 80094c2:	e7b2      	b.n	800942a <_dtoa_r+0x242>
 80094c4:	2300      	movs	r3, #0
 80094c6:	e7f0      	b.n	80094aa <_dtoa_r+0x2c2>
 80094c8:	2501      	movs	r5, #1
 80094ca:	2300      	movs	r3, #0
 80094cc:	9509      	str	r5, [sp, #36]	; 0x24
 80094ce:	931e      	str	r3, [sp, #120]	; 0x78
 80094d0:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 80094d4:	2200      	movs	r2, #0
 80094d6:	9304      	str	r3, [sp, #16]
 80094d8:	4698      	mov	r8, r3
 80094da:	2312      	movs	r3, #18
 80094dc:	921f      	str	r2, [sp, #124]	; 0x7c
 80094de:	e7aa      	b.n	8009436 <_dtoa_r+0x24e>
 80094e0:	2301      	movs	r3, #1
 80094e2:	9309      	str	r3, [sp, #36]	; 0x24
 80094e4:	e7f4      	b.n	80094d0 <_dtoa_r+0x2e8>
 80094e6:	bf00      	nop
 80094e8:	636f4361 	.word	0x636f4361
 80094ec:	3fd287a7 	.word	0x3fd287a7
 80094f0:	8b60c8b3 	.word	0x8b60c8b3
 80094f4:	3fc68a28 	.word	0x3fc68a28
 80094f8:	509f79fb 	.word	0x509f79fb
 80094fc:	3fd34413 	.word	0x3fd34413
 8009500:	7ff00000 	.word	0x7ff00000
 8009504:	0800ba51 	.word	0x0800ba51
 8009508:	0800ba48 	.word	0x0800ba48
 800950c:	0800b9cd 	.word	0x0800b9cd
 8009510:	3ff80000 	.word	0x3ff80000
 8009514:	0800ba88 	.word	0x0800ba88
 8009518:	0800ba60 	.word	0x0800ba60
 800951c:	2301      	movs	r3, #1
 800951e:	9304      	str	r3, [sp, #16]
 8009520:	4698      	mov	r8, r3
 8009522:	461a      	mov	r2, r3
 8009524:	e7da      	b.n	80094dc <_dtoa_r+0x2f4>
 8009526:	3101      	adds	r1, #1
 8009528:	6071      	str	r1, [r6, #4]
 800952a:	0052      	lsls	r2, r2, #1
 800952c:	e787      	b.n	800943e <_dtoa_r+0x256>
 800952e:	07f1      	lsls	r1, r6, #31
 8009530:	d508      	bpl.n	8009544 <_dtoa_r+0x35c>
 8009532:	e9dd 010a 	ldrd	r0, r1, [sp, #40]	; 0x28
 8009536:	e9d7 2300 	ldrd	r2, r3, [r7]
 800953a:	f7f6 ffcd 	bl	80004d8 <__aeabi_dmul>
 800953e:	e9cd 010a 	strd	r0, r1, [sp, #40]	; 0x28
 8009542:	3501      	adds	r5, #1
 8009544:	1076      	asrs	r6, r6, #1
 8009546:	3708      	adds	r7, #8
 8009548:	2e00      	cmp	r6, #0
 800954a:	d1f0      	bne.n	800952e <_dtoa_r+0x346>
 800954c:	e9dd 230a 	ldrd	r2, r3, [sp, #40]	; 0x28
 8009550:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 8009554:	f7f7 f8ea 	bl	800072c <__aeabi_ddiv>
 8009558:	e9cd 0102 	strd	r0, r1, [sp, #8]
 800955c:	e01b      	b.n	8009596 <_dtoa_r+0x3ae>
 800955e:	2502      	movs	r5, #2
 8009560:	e7a0      	b.n	80094a4 <_dtoa_r+0x2bc>
 8009562:	f000 80a4 	beq.w	80096ae <_dtoa_r+0x4c6>
 8009566:	e9dd 010e 	ldrd	r0, r1, [sp, #56]	; 0x38
 800956a:	f1ca 0600 	rsb	r6, sl, #0
 800956e:	4ba0      	ldr	r3, [pc, #640]	; (80097f0 <_dtoa_r+0x608>)
 8009570:	f006 020f 	and.w	r2, r6, #15
 8009574:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 8009578:	e9d3 2300 	ldrd	r2, r3, [r3]
 800957c:	f7f6 ffac 	bl	80004d8 <__aeabi_dmul>
 8009580:	2502      	movs	r5, #2
 8009582:	2300      	movs	r3, #0
 8009584:	e9cd 0102 	strd	r0, r1, [sp, #8]
 8009588:	4f9a      	ldr	r7, [pc, #616]	; (80097f4 <_dtoa_r+0x60c>)
 800958a:	1136      	asrs	r6, r6, #4
 800958c:	2e00      	cmp	r6, #0
 800958e:	f040 8083 	bne.w	8009698 <_dtoa_r+0x4b0>
 8009592:	2b00      	cmp	r3, #0
 8009594:	d1e0      	bne.n	8009558 <_dtoa_r+0x370>
 8009596:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 8009598:	2b00      	cmp	r3, #0
 800959a:	f000 808a 	beq.w	80096b2 <_dtoa_r+0x4ca>
 800959e:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 80095a2:	e9cd 230a 	strd	r2, r3, [sp, #40]	; 0x28
 80095a6:	e9dd 010a 	ldrd	r0, r1, [sp, #40]	; 0x28
 80095aa:	2200      	movs	r2, #0
 80095ac:	4b92      	ldr	r3, [pc, #584]	; (80097f8 <_dtoa_r+0x610>)
 80095ae:	f7f7 fa05 	bl	80009bc <__aeabi_dcmplt>
 80095b2:	2800      	cmp	r0, #0
 80095b4:	d07d      	beq.n	80096b2 <_dtoa_r+0x4ca>
 80095b6:	f1b8 0f00 	cmp.w	r8, #0
 80095ba:	d07a      	beq.n	80096b2 <_dtoa_r+0x4ca>
 80095bc:	9b04      	ldr	r3, [sp, #16]
 80095be:	2b00      	cmp	r3, #0
 80095c0:	dd36      	ble.n	8009630 <_dtoa_r+0x448>
 80095c2:	e9dd 010a 	ldrd	r0, r1, [sp, #40]	; 0x28
 80095c6:	2200      	movs	r2, #0
 80095c8:	4b8c      	ldr	r3, [pc, #560]	; (80097fc <_dtoa_r+0x614>)
 80095ca:	f7f6 ff85 	bl	80004d8 <__aeabi_dmul>
 80095ce:	e9cd 0102 	strd	r0, r1, [sp, #8]
 80095d2:	9e04      	ldr	r6, [sp, #16]
 80095d4:	f10a 37ff 	add.w	r7, sl, #4294967295	; 0xffffffff
 80095d8:	3501      	adds	r5, #1
 80095da:	4628      	mov	r0, r5
 80095dc:	f7f6 ff12 	bl	8000404 <__aeabi_i2d>
 80095e0:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 80095e4:	f7f6 ff78 	bl	80004d8 <__aeabi_dmul>
 80095e8:	2200      	movs	r2, #0
 80095ea:	4b85      	ldr	r3, [pc, #532]	; (8009800 <_dtoa_r+0x618>)
 80095ec:	f7f6 fdbe 	bl	800016c <__adddf3>
 80095f0:	f1a1 7550 	sub.w	r5, r1, #54525952	; 0x3400000
 80095f4:	e9cd 010a 	strd	r0, r1, [sp, #40]	; 0x28
 80095f8:	950b      	str	r5, [sp, #44]	; 0x2c
 80095fa:	2e00      	cmp	r6, #0
 80095fc:	d15c      	bne.n	80096b8 <_dtoa_r+0x4d0>
 80095fe:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 8009602:	2200      	movs	r2, #0
 8009604:	4b7f      	ldr	r3, [pc, #508]	; (8009804 <_dtoa_r+0x61c>)
 8009606:	f7f6 fdaf 	bl	8000168 <__aeabi_dsub>
 800960a:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 800960c:	462b      	mov	r3, r5
 800960e:	e9cd 0102 	strd	r0, r1, [sp, #8]
 8009612:	f7f7 f9f1 	bl	80009f8 <__aeabi_dcmpgt>
 8009616:	2800      	cmp	r0, #0
 8009618:	f040 8281 	bne.w	8009b1e <_dtoa_r+0x936>
 800961c:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 8009620:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 8009622:	f105 4300 	add.w	r3, r5, #2147483648	; 0x80000000
 8009626:	f7f7 f9c9 	bl	80009bc <__aeabi_dcmplt>
 800962a:	2800      	cmp	r0, #0
 800962c:	f040 8275 	bne.w	8009b1a <_dtoa_r+0x932>
 8009630:	e9dd 230e 	ldrd	r2, r3, [sp, #56]	; 0x38
 8009634:	e9cd 2302 	strd	r2, r3, [sp, #8]
 8009638:	9b13      	ldr	r3, [sp, #76]	; 0x4c
 800963a:	2b00      	cmp	r3, #0
 800963c:	f2c0 814b 	blt.w	80098d6 <_dtoa_r+0x6ee>
 8009640:	f1ba 0f0e 	cmp.w	sl, #14
 8009644:	f300 8147 	bgt.w	80098d6 <_dtoa_r+0x6ee>
 8009648:	4b69      	ldr	r3, [pc, #420]	; (80097f0 <_dtoa_r+0x608>)
 800964a:	eb03 03ca 	add.w	r3, r3, sl, lsl #3
 800964e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8009652:	e9cd 2304 	strd	r2, r3, [sp, #16]
 8009656:	9b1f      	ldr	r3, [sp, #124]	; 0x7c
 8009658:	2b00      	cmp	r3, #0
 800965a:	f280 80d7 	bge.w	800980c <_dtoa_r+0x624>
 800965e:	f1b8 0f00 	cmp.w	r8, #0
 8009662:	f300 80d3 	bgt.w	800980c <_dtoa_r+0x624>
 8009666:	f040 8257 	bne.w	8009b18 <_dtoa_r+0x930>
 800966a:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 800966e:	2200      	movs	r2, #0
 8009670:	4b64      	ldr	r3, [pc, #400]	; (8009804 <_dtoa_r+0x61c>)
 8009672:	f7f6 ff31 	bl	80004d8 <__aeabi_dmul>
 8009676:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 800967a:	f7f7 f9b3 	bl	80009e4 <__aeabi_dcmpge>
 800967e:	4646      	mov	r6, r8
 8009680:	4647      	mov	r7, r8
 8009682:	2800      	cmp	r0, #0
 8009684:	f040 822d 	bne.w	8009ae2 <_dtoa_r+0x8fa>
 8009688:	9b06      	ldr	r3, [sp, #24]
 800968a:	9a06      	ldr	r2, [sp, #24]
 800968c:	1c5d      	adds	r5, r3, #1
 800968e:	2331      	movs	r3, #49	; 0x31
 8009690:	f10a 0a01 	add.w	sl, sl, #1
 8009694:	7013      	strb	r3, [r2, #0]
 8009696:	e228      	b.n	8009aea <_dtoa_r+0x902>
 8009698:	07f2      	lsls	r2, r6, #31
 800969a:	d505      	bpl.n	80096a8 <_dtoa_r+0x4c0>
 800969c:	e9d7 2300 	ldrd	r2, r3, [r7]
 80096a0:	f7f6 ff1a 	bl	80004d8 <__aeabi_dmul>
 80096a4:	2301      	movs	r3, #1
 80096a6:	3501      	adds	r5, #1
 80096a8:	1076      	asrs	r6, r6, #1
 80096aa:	3708      	adds	r7, #8
 80096ac:	e76e      	b.n	800958c <_dtoa_r+0x3a4>
 80096ae:	2502      	movs	r5, #2
 80096b0:	e771      	b.n	8009596 <_dtoa_r+0x3ae>
 80096b2:	4657      	mov	r7, sl
 80096b4:	4646      	mov	r6, r8
 80096b6:	e790      	b.n	80095da <_dtoa_r+0x3f2>
 80096b8:	4b4d      	ldr	r3, [pc, #308]	; (80097f0 <_dtoa_r+0x608>)
 80096ba:	eb03 03c6 	add.w	r3, r3, r6, lsl #3
 80096be:	e953 0102 	ldrd	r0, r1, [r3, #-8]
 80096c2:	9b09      	ldr	r3, [sp, #36]	; 0x24
 80096c4:	2b00      	cmp	r3, #0
 80096c6:	d048      	beq.n	800975a <_dtoa_r+0x572>
 80096c8:	4602      	mov	r2, r0
 80096ca:	460b      	mov	r3, r1
 80096cc:	2000      	movs	r0, #0
 80096ce:	494e      	ldr	r1, [pc, #312]	; (8009808 <_dtoa_r+0x620>)
 80096d0:	f7f7 f82c 	bl	800072c <__aeabi_ddiv>
 80096d4:	e9dd 230a 	ldrd	r2, r3, [sp, #40]	; 0x28
 80096d8:	f7f6 fd46 	bl	8000168 <__aeabi_dsub>
 80096dc:	e9cd 010a 	strd	r0, r1, [sp, #40]	; 0x28
 80096e0:	9d06      	ldr	r5, [sp, #24]
 80096e2:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 80096e6:	f7f7 f9a7 	bl	8000a38 <__aeabi_d2iz>
 80096ea:	9011      	str	r0, [sp, #68]	; 0x44
 80096ec:	f7f6 fe8a 	bl	8000404 <__aeabi_i2d>
 80096f0:	4602      	mov	r2, r0
 80096f2:	460b      	mov	r3, r1
 80096f4:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 80096f8:	f7f6 fd36 	bl	8000168 <__aeabi_dsub>
 80096fc:	9b11      	ldr	r3, [sp, #68]	; 0x44
 80096fe:	e9cd 0102 	strd	r0, r1, [sp, #8]
 8009702:	3330      	adds	r3, #48	; 0x30
 8009704:	f805 3b01 	strb.w	r3, [r5], #1
 8009708:	e9dd 230a 	ldrd	r2, r3, [sp, #40]	; 0x28
 800970c:	f7f7 f956 	bl	80009bc <__aeabi_dcmplt>
 8009710:	2800      	cmp	r0, #0
 8009712:	d163      	bne.n	80097dc <_dtoa_r+0x5f4>
 8009714:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8009718:	2000      	movs	r0, #0
 800971a:	4937      	ldr	r1, [pc, #220]	; (80097f8 <_dtoa_r+0x610>)
 800971c:	f7f6 fd24 	bl	8000168 <__aeabi_dsub>
 8009720:	e9dd 230a 	ldrd	r2, r3, [sp, #40]	; 0x28
 8009724:	f7f7 f94a 	bl	80009bc <__aeabi_dcmplt>
 8009728:	2800      	cmp	r0, #0
 800972a:	f040 80b5 	bne.w	8009898 <_dtoa_r+0x6b0>
 800972e:	9b06      	ldr	r3, [sp, #24]
 8009730:	1aeb      	subs	r3, r5, r3
 8009732:	429e      	cmp	r6, r3
 8009734:	f77f af7c 	ble.w	8009630 <_dtoa_r+0x448>
 8009738:	e9dd 010a 	ldrd	r0, r1, [sp, #40]	; 0x28
 800973c:	2200      	movs	r2, #0
 800973e:	4b2f      	ldr	r3, [pc, #188]	; (80097fc <_dtoa_r+0x614>)
 8009740:	f7f6 feca 	bl	80004d8 <__aeabi_dmul>
 8009744:	2200      	movs	r2, #0
 8009746:	e9cd 010a 	strd	r0, r1, [sp, #40]	; 0x28
 800974a:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 800974e:	4b2b      	ldr	r3, [pc, #172]	; (80097fc <_dtoa_r+0x614>)
 8009750:	f7f6 fec2 	bl	80004d8 <__aeabi_dmul>
 8009754:	e9cd 0102 	strd	r0, r1, [sp, #8]
 8009758:	e7c3      	b.n	80096e2 <_dtoa_r+0x4fa>
 800975a:	e9dd 230a 	ldrd	r2, r3, [sp, #40]	; 0x28
 800975e:	f7f6 febb 	bl	80004d8 <__aeabi_dmul>
 8009762:	9b06      	ldr	r3, [sp, #24]
 8009764:	e9cd 010a 	strd	r0, r1, [sp, #40]	; 0x28
 8009768:	199d      	adds	r5, r3, r6
 800976a:	461e      	mov	r6, r3
 800976c:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 8009770:	f7f7 f962 	bl	8000a38 <__aeabi_d2iz>
 8009774:	9011      	str	r0, [sp, #68]	; 0x44
 8009776:	f7f6 fe45 	bl	8000404 <__aeabi_i2d>
 800977a:	4602      	mov	r2, r0
 800977c:	460b      	mov	r3, r1
 800977e:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 8009782:	f7f6 fcf1 	bl	8000168 <__aeabi_dsub>
 8009786:	9b11      	ldr	r3, [sp, #68]	; 0x44
 8009788:	e9cd 0102 	strd	r0, r1, [sp, #8]
 800978c:	3330      	adds	r3, #48	; 0x30
 800978e:	f806 3b01 	strb.w	r3, [r6], #1
 8009792:	42ae      	cmp	r6, r5
 8009794:	f04f 0200 	mov.w	r2, #0
 8009798:	d124      	bne.n	80097e4 <_dtoa_r+0x5fc>
 800979a:	e9dd 010a 	ldrd	r0, r1, [sp, #40]	; 0x28
 800979e:	4b1a      	ldr	r3, [pc, #104]	; (8009808 <_dtoa_r+0x620>)
 80097a0:	f7f6 fce4 	bl	800016c <__adddf3>
 80097a4:	4602      	mov	r2, r0
 80097a6:	460b      	mov	r3, r1
 80097a8:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 80097ac:	f7f7 f924 	bl	80009f8 <__aeabi_dcmpgt>
 80097b0:	2800      	cmp	r0, #0
 80097b2:	d171      	bne.n	8009898 <_dtoa_r+0x6b0>
 80097b4:	e9dd 230a 	ldrd	r2, r3, [sp, #40]	; 0x28
 80097b8:	2000      	movs	r0, #0
 80097ba:	4913      	ldr	r1, [pc, #76]	; (8009808 <_dtoa_r+0x620>)
 80097bc:	f7f6 fcd4 	bl	8000168 <__aeabi_dsub>
 80097c0:	4602      	mov	r2, r0
 80097c2:	460b      	mov	r3, r1
 80097c4:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 80097c8:	f7f7 f8f8 	bl	80009bc <__aeabi_dcmplt>
 80097cc:	2800      	cmp	r0, #0
 80097ce:	f43f af2f 	beq.w	8009630 <_dtoa_r+0x448>
 80097d2:	f815 3c01 	ldrb.w	r3, [r5, #-1]
 80097d6:	1e6a      	subs	r2, r5, #1
 80097d8:	2b30      	cmp	r3, #48	; 0x30
 80097da:	d001      	beq.n	80097e0 <_dtoa_r+0x5f8>
 80097dc:	46ba      	mov	sl, r7
 80097de:	e04a      	b.n	8009876 <_dtoa_r+0x68e>
 80097e0:	4615      	mov	r5, r2
 80097e2:	e7f6      	b.n	80097d2 <_dtoa_r+0x5ea>
 80097e4:	4b05      	ldr	r3, [pc, #20]	; (80097fc <_dtoa_r+0x614>)
 80097e6:	f7f6 fe77 	bl	80004d8 <__aeabi_dmul>
 80097ea:	e9cd 0102 	strd	r0, r1, [sp, #8]
 80097ee:	e7bd      	b.n	800976c <_dtoa_r+0x584>
 80097f0:	0800ba88 	.word	0x0800ba88
 80097f4:	0800ba60 	.word	0x0800ba60
 80097f8:	3ff00000 	.word	0x3ff00000
 80097fc:	40240000 	.word	0x40240000
 8009800:	401c0000 	.word	0x401c0000
 8009804:	40140000 	.word	0x40140000
 8009808:	3fe00000 	.word	0x3fe00000
 800980c:	9d06      	ldr	r5, [sp, #24]
 800980e:	e9dd 6702 	ldrd	r6, r7, [sp, #8]
 8009812:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 8009816:	4630      	mov	r0, r6
 8009818:	4639      	mov	r1, r7
 800981a:	f7f6 ff87 	bl	800072c <__aeabi_ddiv>
 800981e:	f7f7 f90b 	bl	8000a38 <__aeabi_d2iz>
 8009822:	4681      	mov	r9, r0
 8009824:	f7f6 fdee 	bl	8000404 <__aeabi_i2d>
 8009828:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 800982c:	f7f6 fe54 	bl	80004d8 <__aeabi_dmul>
 8009830:	4602      	mov	r2, r0
 8009832:	460b      	mov	r3, r1
 8009834:	4630      	mov	r0, r6
 8009836:	4639      	mov	r1, r7
 8009838:	f7f6 fc96 	bl	8000168 <__aeabi_dsub>
 800983c:	f109 0630 	add.w	r6, r9, #48	; 0x30
 8009840:	f805 6b01 	strb.w	r6, [r5], #1
 8009844:	9e06      	ldr	r6, [sp, #24]
 8009846:	4602      	mov	r2, r0
 8009848:	1bae      	subs	r6, r5, r6
 800984a:	45b0      	cmp	r8, r6
 800984c:	460b      	mov	r3, r1
 800984e:	d135      	bne.n	80098bc <_dtoa_r+0x6d4>
 8009850:	f7f6 fc8c 	bl	800016c <__adddf3>
 8009854:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 8009858:	4606      	mov	r6, r0
 800985a:	460f      	mov	r7, r1
 800985c:	f7f7 f8cc 	bl	80009f8 <__aeabi_dcmpgt>
 8009860:	b9c8      	cbnz	r0, 8009896 <_dtoa_r+0x6ae>
 8009862:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 8009866:	4630      	mov	r0, r6
 8009868:	4639      	mov	r1, r7
 800986a:	f7f7 f89d 	bl	80009a8 <__aeabi_dcmpeq>
 800986e:	b110      	cbz	r0, 8009876 <_dtoa_r+0x68e>
 8009870:	f019 0f01 	tst.w	r9, #1
 8009874:	d10f      	bne.n	8009896 <_dtoa_r+0x6ae>
 8009876:	4659      	mov	r1, fp
 8009878:	4620      	mov	r0, r4
 800987a:	f000 fe06 	bl	800a48a <_Bfree>
 800987e:	2300      	movs	r3, #0
 8009880:	9a20      	ldr	r2, [sp, #128]	; 0x80
 8009882:	702b      	strb	r3, [r5, #0]
 8009884:	f10a 0301 	add.w	r3, sl, #1
 8009888:	6013      	str	r3, [r2, #0]
 800988a:	9b22      	ldr	r3, [sp, #136]	; 0x88
 800988c:	2b00      	cmp	r3, #0
 800988e:	f43f acf3 	beq.w	8009278 <_dtoa_r+0x90>
 8009892:	601d      	str	r5, [r3, #0]
 8009894:	e4f0      	b.n	8009278 <_dtoa_r+0x90>
 8009896:	4657      	mov	r7, sl
 8009898:	f815 2c01 	ldrb.w	r2, [r5, #-1]
 800989c:	1e6b      	subs	r3, r5, #1
 800989e:	2a39      	cmp	r2, #57	; 0x39
 80098a0:	d106      	bne.n	80098b0 <_dtoa_r+0x6c8>
 80098a2:	9a06      	ldr	r2, [sp, #24]
 80098a4:	429a      	cmp	r2, r3
 80098a6:	d107      	bne.n	80098b8 <_dtoa_r+0x6d0>
 80098a8:	2330      	movs	r3, #48	; 0x30
 80098aa:	7013      	strb	r3, [r2, #0]
 80098ac:	4613      	mov	r3, r2
 80098ae:	3701      	adds	r7, #1
 80098b0:	781a      	ldrb	r2, [r3, #0]
 80098b2:	3201      	adds	r2, #1
 80098b4:	701a      	strb	r2, [r3, #0]
 80098b6:	e791      	b.n	80097dc <_dtoa_r+0x5f4>
 80098b8:	461d      	mov	r5, r3
 80098ba:	e7ed      	b.n	8009898 <_dtoa_r+0x6b0>
 80098bc:	2200      	movs	r2, #0
 80098be:	4b99      	ldr	r3, [pc, #612]	; (8009b24 <_dtoa_r+0x93c>)
 80098c0:	f7f6 fe0a 	bl	80004d8 <__aeabi_dmul>
 80098c4:	2200      	movs	r2, #0
 80098c6:	2300      	movs	r3, #0
 80098c8:	4606      	mov	r6, r0
 80098ca:	460f      	mov	r7, r1
 80098cc:	f7f7 f86c 	bl	80009a8 <__aeabi_dcmpeq>
 80098d0:	2800      	cmp	r0, #0
 80098d2:	d09e      	beq.n	8009812 <_dtoa_r+0x62a>
 80098d4:	e7cf      	b.n	8009876 <_dtoa_r+0x68e>
 80098d6:	9a09      	ldr	r2, [sp, #36]	; 0x24
 80098d8:	2a00      	cmp	r2, #0
 80098da:	f000 8088 	beq.w	80099ee <_dtoa_r+0x806>
 80098de:	9a1e      	ldr	r2, [sp, #120]	; 0x78
 80098e0:	2a01      	cmp	r2, #1
 80098e2:	dc6d      	bgt.n	80099c0 <_dtoa_r+0x7d8>
 80098e4:	9a10      	ldr	r2, [sp, #64]	; 0x40
 80098e6:	2a00      	cmp	r2, #0
 80098e8:	d066      	beq.n	80099b8 <_dtoa_r+0x7d0>
 80098ea:	f203 4333 	addw	r3, r3, #1075	; 0x433
 80098ee:	464d      	mov	r5, r9
 80098f0:	9e08      	ldr	r6, [sp, #32]
 80098f2:	9a07      	ldr	r2, [sp, #28]
 80098f4:	2101      	movs	r1, #1
 80098f6:	441a      	add	r2, r3
 80098f8:	4620      	mov	r0, r4
 80098fa:	4499      	add	r9, r3
 80098fc:	9207      	str	r2, [sp, #28]
 80098fe:	f000 fea2 	bl	800a646 <__i2b>
 8009902:	4607      	mov	r7, r0
 8009904:	2d00      	cmp	r5, #0
 8009906:	dd0b      	ble.n	8009920 <_dtoa_r+0x738>
 8009908:	9b07      	ldr	r3, [sp, #28]
 800990a:	2b00      	cmp	r3, #0
 800990c:	dd08      	ble.n	8009920 <_dtoa_r+0x738>
 800990e:	42ab      	cmp	r3, r5
 8009910:	bfa8      	it	ge
 8009912:	462b      	movge	r3, r5
 8009914:	9a07      	ldr	r2, [sp, #28]
 8009916:	eba9 0903 	sub.w	r9, r9, r3
 800991a:	1aed      	subs	r5, r5, r3
 800991c:	1ad3      	subs	r3, r2, r3
 800991e:	9307      	str	r3, [sp, #28]
 8009920:	9b08      	ldr	r3, [sp, #32]
 8009922:	b1eb      	cbz	r3, 8009960 <_dtoa_r+0x778>
 8009924:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8009926:	2b00      	cmp	r3, #0
 8009928:	d065      	beq.n	80099f6 <_dtoa_r+0x80e>
 800992a:	b18e      	cbz	r6, 8009950 <_dtoa_r+0x768>
 800992c:	4639      	mov	r1, r7
 800992e:	4632      	mov	r2, r6
 8009930:	4620      	mov	r0, r4
 8009932:	f000 ff27 	bl	800a784 <__pow5mult>
 8009936:	465a      	mov	r2, fp
 8009938:	4601      	mov	r1, r0
 800993a:	4607      	mov	r7, r0
 800993c:	4620      	mov	r0, r4
 800993e:	f000 fe8b 	bl	800a658 <__multiply>
 8009942:	4659      	mov	r1, fp
 8009944:	900a      	str	r0, [sp, #40]	; 0x28
 8009946:	4620      	mov	r0, r4
 8009948:	f000 fd9f 	bl	800a48a <_Bfree>
 800994c:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 800994e:	469b      	mov	fp, r3
 8009950:	9b08      	ldr	r3, [sp, #32]
 8009952:	1b9a      	subs	r2, r3, r6
 8009954:	d004      	beq.n	8009960 <_dtoa_r+0x778>
 8009956:	4659      	mov	r1, fp
 8009958:	4620      	mov	r0, r4
 800995a:	f000 ff13 	bl	800a784 <__pow5mult>
 800995e:	4683      	mov	fp, r0
 8009960:	2101      	movs	r1, #1
 8009962:	4620      	mov	r0, r4
 8009964:	f000 fe6f 	bl	800a646 <__i2b>
 8009968:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 800996a:	4606      	mov	r6, r0
 800996c:	2b00      	cmp	r3, #0
 800996e:	f000 81c6 	beq.w	8009cfe <_dtoa_r+0xb16>
 8009972:	461a      	mov	r2, r3
 8009974:	4601      	mov	r1, r0
 8009976:	4620      	mov	r0, r4
 8009978:	f000 ff04 	bl	800a784 <__pow5mult>
 800997c:	9b1e      	ldr	r3, [sp, #120]	; 0x78
 800997e:	4606      	mov	r6, r0
 8009980:	2b01      	cmp	r3, #1
 8009982:	dc3e      	bgt.n	8009a02 <_dtoa_r+0x81a>
 8009984:	9b02      	ldr	r3, [sp, #8]
 8009986:	2b00      	cmp	r3, #0
 8009988:	d137      	bne.n	80099fa <_dtoa_r+0x812>
 800998a:	9b03      	ldr	r3, [sp, #12]
 800998c:	f3c3 0313 	ubfx	r3, r3, #0, #20
 8009990:	2b00      	cmp	r3, #0
 8009992:	d134      	bne.n	80099fe <_dtoa_r+0x816>
 8009994:	9b03      	ldr	r3, [sp, #12]
 8009996:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
 800999a:	0d1b      	lsrs	r3, r3, #20
 800999c:	051b      	lsls	r3, r3, #20
 800999e:	b12b      	cbz	r3, 80099ac <_dtoa_r+0x7c4>
 80099a0:	9b07      	ldr	r3, [sp, #28]
 80099a2:	f109 0901 	add.w	r9, r9, #1
 80099a6:	3301      	adds	r3, #1
 80099a8:	9307      	str	r3, [sp, #28]
 80099aa:	2301      	movs	r3, #1
 80099ac:	9308      	str	r3, [sp, #32]
 80099ae:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 80099b0:	2b00      	cmp	r3, #0
 80099b2:	d128      	bne.n	8009a06 <_dtoa_r+0x81e>
 80099b4:	2001      	movs	r0, #1
 80099b6:	e02e      	b.n	8009a16 <_dtoa_r+0x82e>
 80099b8:	9b12      	ldr	r3, [sp, #72]	; 0x48
 80099ba:	f1c3 0336 	rsb	r3, r3, #54	; 0x36
 80099be:	e796      	b.n	80098ee <_dtoa_r+0x706>
 80099c0:	9b08      	ldr	r3, [sp, #32]
 80099c2:	f108 36ff 	add.w	r6, r8, #4294967295	; 0xffffffff
 80099c6:	42b3      	cmp	r3, r6
 80099c8:	bfb7      	itett	lt
 80099ca:	9b08      	ldrlt	r3, [sp, #32]
 80099cc:	1b9e      	subge	r6, r3, r6
 80099ce:	1af2      	sublt	r2, r6, r3
 80099d0:	9b0c      	ldrlt	r3, [sp, #48]	; 0x30
 80099d2:	bfbf      	itttt	lt
 80099d4:	9608      	strlt	r6, [sp, #32]
 80099d6:	189b      	addlt	r3, r3, r2
 80099d8:	930c      	strlt	r3, [sp, #48]	; 0x30
 80099da:	2600      	movlt	r6, #0
 80099dc:	f1b8 0f00 	cmp.w	r8, #0
 80099e0:	bfb9      	ittee	lt
 80099e2:	eba9 0508 	sublt.w	r5, r9, r8
 80099e6:	2300      	movlt	r3, #0
 80099e8:	464d      	movge	r5, r9
 80099ea:	4643      	movge	r3, r8
 80099ec:	e781      	b.n	80098f2 <_dtoa_r+0x70a>
 80099ee:	9e08      	ldr	r6, [sp, #32]
 80099f0:	464d      	mov	r5, r9
 80099f2:	9f09      	ldr	r7, [sp, #36]	; 0x24
 80099f4:	e786      	b.n	8009904 <_dtoa_r+0x71c>
 80099f6:	9a08      	ldr	r2, [sp, #32]
 80099f8:	e7ad      	b.n	8009956 <_dtoa_r+0x76e>
 80099fa:	2300      	movs	r3, #0
 80099fc:	e7d6      	b.n	80099ac <_dtoa_r+0x7c4>
 80099fe:	9b02      	ldr	r3, [sp, #8]
 8009a00:	e7d4      	b.n	80099ac <_dtoa_r+0x7c4>
 8009a02:	2300      	movs	r3, #0
 8009a04:	9308      	str	r3, [sp, #32]
 8009a06:	6933      	ldr	r3, [r6, #16]
 8009a08:	eb06 0383 	add.w	r3, r6, r3, lsl #2
 8009a0c:	6918      	ldr	r0, [r3, #16]
 8009a0e:	f000 fdcc 	bl	800a5aa <__hi0bits>
 8009a12:	f1c0 0020 	rsb	r0, r0, #32
 8009a16:	9b07      	ldr	r3, [sp, #28]
 8009a18:	4418      	add	r0, r3
 8009a1a:	f010 001f 	ands.w	r0, r0, #31
 8009a1e:	d047      	beq.n	8009ab0 <_dtoa_r+0x8c8>
 8009a20:	f1c0 0320 	rsb	r3, r0, #32
 8009a24:	2b04      	cmp	r3, #4
 8009a26:	dd3b      	ble.n	8009aa0 <_dtoa_r+0x8b8>
 8009a28:	9b07      	ldr	r3, [sp, #28]
 8009a2a:	f1c0 001c 	rsb	r0, r0, #28
 8009a2e:	4481      	add	r9, r0
 8009a30:	4405      	add	r5, r0
 8009a32:	4403      	add	r3, r0
 8009a34:	9307      	str	r3, [sp, #28]
 8009a36:	f1b9 0f00 	cmp.w	r9, #0
 8009a3a:	dd05      	ble.n	8009a48 <_dtoa_r+0x860>
 8009a3c:	4659      	mov	r1, fp
 8009a3e:	464a      	mov	r2, r9
 8009a40:	4620      	mov	r0, r4
 8009a42:	f000 feed 	bl	800a820 <__lshift>
 8009a46:	4683      	mov	fp, r0
 8009a48:	9b07      	ldr	r3, [sp, #28]
 8009a4a:	2b00      	cmp	r3, #0
 8009a4c:	dd05      	ble.n	8009a5a <_dtoa_r+0x872>
 8009a4e:	4631      	mov	r1, r6
 8009a50:	461a      	mov	r2, r3
 8009a52:	4620      	mov	r0, r4
 8009a54:	f000 fee4 	bl	800a820 <__lshift>
 8009a58:	4606      	mov	r6, r0
 8009a5a:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 8009a5c:	b353      	cbz	r3, 8009ab4 <_dtoa_r+0x8cc>
 8009a5e:	4631      	mov	r1, r6
 8009a60:	4658      	mov	r0, fp
 8009a62:	f000 ff31 	bl	800a8c8 <__mcmp>
 8009a66:	2800      	cmp	r0, #0
 8009a68:	da24      	bge.n	8009ab4 <_dtoa_r+0x8cc>
 8009a6a:	2300      	movs	r3, #0
 8009a6c:	4659      	mov	r1, fp
 8009a6e:	220a      	movs	r2, #10
 8009a70:	4620      	mov	r0, r4
 8009a72:	f000 fd21 	bl	800a4b8 <__multadd>
 8009a76:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8009a78:	f10a 3aff 	add.w	sl, sl, #4294967295	; 0xffffffff
 8009a7c:	4683      	mov	fp, r0
 8009a7e:	2b00      	cmp	r3, #0
 8009a80:	f000 8144 	beq.w	8009d0c <_dtoa_r+0xb24>
 8009a84:	2300      	movs	r3, #0
 8009a86:	4639      	mov	r1, r7
 8009a88:	220a      	movs	r2, #10
 8009a8a:	4620      	mov	r0, r4
 8009a8c:	f000 fd14 	bl	800a4b8 <__multadd>
 8009a90:	9b04      	ldr	r3, [sp, #16]
 8009a92:	4607      	mov	r7, r0
 8009a94:	2b00      	cmp	r3, #0
 8009a96:	dc4d      	bgt.n	8009b34 <_dtoa_r+0x94c>
 8009a98:	9b1e      	ldr	r3, [sp, #120]	; 0x78
 8009a9a:	2b02      	cmp	r3, #2
 8009a9c:	dd4a      	ble.n	8009b34 <_dtoa_r+0x94c>
 8009a9e:	e011      	b.n	8009ac4 <_dtoa_r+0x8dc>
 8009aa0:	d0c9      	beq.n	8009a36 <_dtoa_r+0x84e>
 8009aa2:	9a07      	ldr	r2, [sp, #28]
 8009aa4:	331c      	adds	r3, #28
 8009aa6:	441a      	add	r2, r3
 8009aa8:	4499      	add	r9, r3
 8009aaa:	441d      	add	r5, r3
 8009aac:	4613      	mov	r3, r2
 8009aae:	e7c1      	b.n	8009a34 <_dtoa_r+0x84c>
 8009ab0:	4603      	mov	r3, r0
 8009ab2:	e7f6      	b.n	8009aa2 <_dtoa_r+0x8ba>
 8009ab4:	f1b8 0f00 	cmp.w	r8, #0
 8009ab8:	dc36      	bgt.n	8009b28 <_dtoa_r+0x940>
 8009aba:	9b1e      	ldr	r3, [sp, #120]	; 0x78
 8009abc:	2b02      	cmp	r3, #2
 8009abe:	dd33      	ble.n	8009b28 <_dtoa_r+0x940>
 8009ac0:	f8cd 8010 	str.w	r8, [sp, #16]
 8009ac4:	9b04      	ldr	r3, [sp, #16]
 8009ac6:	b963      	cbnz	r3, 8009ae2 <_dtoa_r+0x8fa>
 8009ac8:	4631      	mov	r1, r6
 8009aca:	2205      	movs	r2, #5
 8009acc:	4620      	mov	r0, r4
 8009ace:	f000 fcf3 	bl	800a4b8 <__multadd>
 8009ad2:	4601      	mov	r1, r0
 8009ad4:	4606      	mov	r6, r0
 8009ad6:	4658      	mov	r0, fp
 8009ad8:	f000 fef6 	bl	800a8c8 <__mcmp>
 8009adc:	2800      	cmp	r0, #0
 8009ade:	f73f add3 	bgt.w	8009688 <_dtoa_r+0x4a0>
 8009ae2:	9b1f      	ldr	r3, [sp, #124]	; 0x7c
 8009ae4:	9d06      	ldr	r5, [sp, #24]
 8009ae6:	ea6f 0a03 	mvn.w	sl, r3
 8009aea:	f04f 0900 	mov.w	r9, #0
 8009aee:	4631      	mov	r1, r6
 8009af0:	4620      	mov	r0, r4
 8009af2:	f000 fcca 	bl	800a48a <_Bfree>
 8009af6:	2f00      	cmp	r7, #0
 8009af8:	f43f aebd 	beq.w	8009876 <_dtoa_r+0x68e>
 8009afc:	f1b9 0f00 	cmp.w	r9, #0
 8009b00:	d005      	beq.n	8009b0e <_dtoa_r+0x926>
 8009b02:	45b9      	cmp	r9, r7
 8009b04:	d003      	beq.n	8009b0e <_dtoa_r+0x926>
 8009b06:	4649      	mov	r1, r9
 8009b08:	4620      	mov	r0, r4
 8009b0a:	f000 fcbe 	bl	800a48a <_Bfree>
 8009b0e:	4639      	mov	r1, r7
 8009b10:	4620      	mov	r0, r4
 8009b12:	f000 fcba 	bl	800a48a <_Bfree>
 8009b16:	e6ae      	b.n	8009876 <_dtoa_r+0x68e>
 8009b18:	2600      	movs	r6, #0
 8009b1a:	4637      	mov	r7, r6
 8009b1c:	e7e1      	b.n	8009ae2 <_dtoa_r+0x8fa>
 8009b1e:	46ba      	mov	sl, r7
 8009b20:	4637      	mov	r7, r6
 8009b22:	e5b1      	b.n	8009688 <_dtoa_r+0x4a0>
 8009b24:	40240000 	.word	0x40240000
 8009b28:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8009b2a:	f8cd 8010 	str.w	r8, [sp, #16]
 8009b2e:	2b00      	cmp	r3, #0
 8009b30:	f000 80f3 	beq.w	8009d1a <_dtoa_r+0xb32>
 8009b34:	2d00      	cmp	r5, #0
 8009b36:	dd05      	ble.n	8009b44 <_dtoa_r+0x95c>
 8009b38:	4639      	mov	r1, r7
 8009b3a:	462a      	mov	r2, r5
 8009b3c:	4620      	mov	r0, r4
 8009b3e:	f000 fe6f 	bl	800a820 <__lshift>
 8009b42:	4607      	mov	r7, r0
 8009b44:	9b08      	ldr	r3, [sp, #32]
 8009b46:	2b00      	cmp	r3, #0
 8009b48:	d04c      	beq.n	8009be4 <_dtoa_r+0x9fc>
 8009b4a:	6879      	ldr	r1, [r7, #4]
 8009b4c:	4620      	mov	r0, r4
 8009b4e:	f000 fc68 	bl	800a422 <_Balloc>
 8009b52:	4605      	mov	r5, r0
 8009b54:	693a      	ldr	r2, [r7, #16]
 8009b56:	f107 010c 	add.w	r1, r7, #12
 8009b5a:	3202      	adds	r2, #2
 8009b5c:	0092      	lsls	r2, r2, #2
 8009b5e:	300c      	adds	r0, #12
 8009b60:	f000 fc52 	bl	800a408 <memcpy>
 8009b64:	2201      	movs	r2, #1
 8009b66:	4629      	mov	r1, r5
 8009b68:	4620      	mov	r0, r4
 8009b6a:	f000 fe59 	bl	800a820 <__lshift>
 8009b6e:	46b9      	mov	r9, r7
 8009b70:	4607      	mov	r7, r0
 8009b72:	9b06      	ldr	r3, [sp, #24]
 8009b74:	9307      	str	r3, [sp, #28]
 8009b76:	9b02      	ldr	r3, [sp, #8]
 8009b78:	f003 0301 	and.w	r3, r3, #1
 8009b7c:	9308      	str	r3, [sp, #32]
 8009b7e:	4631      	mov	r1, r6
 8009b80:	4658      	mov	r0, fp
 8009b82:	f7ff faa3 	bl	80090cc <quorem>
 8009b86:	4649      	mov	r1, r9
 8009b88:	4605      	mov	r5, r0
 8009b8a:	f100 0830 	add.w	r8, r0, #48	; 0x30
 8009b8e:	4658      	mov	r0, fp
 8009b90:	f000 fe9a 	bl	800a8c8 <__mcmp>
 8009b94:	463a      	mov	r2, r7
 8009b96:	9002      	str	r0, [sp, #8]
 8009b98:	4631      	mov	r1, r6
 8009b9a:	4620      	mov	r0, r4
 8009b9c:	f000 feae 	bl	800a8fc <__mdiff>
 8009ba0:	68c3      	ldr	r3, [r0, #12]
 8009ba2:	4602      	mov	r2, r0
 8009ba4:	bb03      	cbnz	r3, 8009be8 <_dtoa_r+0xa00>
 8009ba6:	4601      	mov	r1, r0
 8009ba8:	9009      	str	r0, [sp, #36]	; 0x24
 8009baa:	4658      	mov	r0, fp
 8009bac:	f000 fe8c 	bl	800a8c8 <__mcmp>
 8009bb0:	4603      	mov	r3, r0
 8009bb2:	9a09      	ldr	r2, [sp, #36]	; 0x24
 8009bb4:	4611      	mov	r1, r2
 8009bb6:	4620      	mov	r0, r4
 8009bb8:	9309      	str	r3, [sp, #36]	; 0x24
 8009bba:	f000 fc66 	bl	800a48a <_Bfree>
 8009bbe:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8009bc0:	b9a3      	cbnz	r3, 8009bec <_dtoa_r+0xa04>
 8009bc2:	9a1e      	ldr	r2, [sp, #120]	; 0x78
 8009bc4:	b992      	cbnz	r2, 8009bec <_dtoa_r+0xa04>
 8009bc6:	9a08      	ldr	r2, [sp, #32]
 8009bc8:	b982      	cbnz	r2, 8009bec <_dtoa_r+0xa04>
 8009bca:	f1b8 0f39 	cmp.w	r8, #57	; 0x39
 8009bce:	d029      	beq.n	8009c24 <_dtoa_r+0xa3c>
 8009bd0:	9b02      	ldr	r3, [sp, #8]
 8009bd2:	2b00      	cmp	r3, #0
 8009bd4:	dd01      	ble.n	8009bda <_dtoa_r+0x9f2>
 8009bd6:	f105 0831 	add.w	r8, r5, #49	; 0x31
 8009bda:	9b07      	ldr	r3, [sp, #28]
 8009bdc:	1c5d      	adds	r5, r3, #1
 8009bde:	f883 8000 	strb.w	r8, [r3]
 8009be2:	e784      	b.n	8009aee <_dtoa_r+0x906>
 8009be4:	4638      	mov	r0, r7
 8009be6:	e7c2      	b.n	8009b6e <_dtoa_r+0x986>
 8009be8:	2301      	movs	r3, #1
 8009bea:	e7e3      	b.n	8009bb4 <_dtoa_r+0x9cc>
 8009bec:	9a02      	ldr	r2, [sp, #8]
 8009bee:	2a00      	cmp	r2, #0
 8009bf0:	db04      	blt.n	8009bfc <_dtoa_r+0xa14>
 8009bf2:	d123      	bne.n	8009c3c <_dtoa_r+0xa54>
 8009bf4:	9a1e      	ldr	r2, [sp, #120]	; 0x78
 8009bf6:	bb0a      	cbnz	r2, 8009c3c <_dtoa_r+0xa54>
 8009bf8:	9a08      	ldr	r2, [sp, #32]
 8009bfa:	b9fa      	cbnz	r2, 8009c3c <_dtoa_r+0xa54>
 8009bfc:	2b00      	cmp	r3, #0
 8009bfe:	ddec      	ble.n	8009bda <_dtoa_r+0x9f2>
 8009c00:	4659      	mov	r1, fp
 8009c02:	2201      	movs	r2, #1
 8009c04:	4620      	mov	r0, r4
 8009c06:	f000 fe0b 	bl	800a820 <__lshift>
 8009c0a:	4631      	mov	r1, r6
 8009c0c:	4683      	mov	fp, r0
 8009c0e:	f000 fe5b 	bl	800a8c8 <__mcmp>
 8009c12:	2800      	cmp	r0, #0
 8009c14:	dc03      	bgt.n	8009c1e <_dtoa_r+0xa36>
 8009c16:	d1e0      	bne.n	8009bda <_dtoa_r+0x9f2>
 8009c18:	f018 0f01 	tst.w	r8, #1
 8009c1c:	d0dd      	beq.n	8009bda <_dtoa_r+0x9f2>
 8009c1e:	f1b8 0f39 	cmp.w	r8, #57	; 0x39
 8009c22:	d1d8      	bne.n	8009bd6 <_dtoa_r+0x9ee>
 8009c24:	9b07      	ldr	r3, [sp, #28]
 8009c26:	9a07      	ldr	r2, [sp, #28]
 8009c28:	1c5d      	adds	r5, r3, #1
 8009c2a:	2339      	movs	r3, #57	; 0x39
 8009c2c:	7013      	strb	r3, [r2, #0]
 8009c2e:	f815 3c01 	ldrb.w	r3, [r5, #-1]
 8009c32:	1e6a      	subs	r2, r5, #1
 8009c34:	2b39      	cmp	r3, #57	; 0x39
 8009c36:	d04d      	beq.n	8009cd4 <_dtoa_r+0xaec>
 8009c38:	3301      	adds	r3, #1
 8009c3a:	e052      	b.n	8009ce2 <_dtoa_r+0xafa>
 8009c3c:	9a07      	ldr	r2, [sp, #28]
 8009c3e:	2b00      	cmp	r3, #0
 8009c40:	f102 0501 	add.w	r5, r2, #1
 8009c44:	dd06      	ble.n	8009c54 <_dtoa_r+0xa6c>
 8009c46:	f1b8 0f39 	cmp.w	r8, #57	; 0x39
 8009c4a:	d0eb      	beq.n	8009c24 <_dtoa_r+0xa3c>
 8009c4c:	f108 0801 	add.w	r8, r8, #1
 8009c50:	9b07      	ldr	r3, [sp, #28]
 8009c52:	e7c4      	b.n	8009bde <_dtoa_r+0x9f6>
 8009c54:	9b06      	ldr	r3, [sp, #24]
 8009c56:	9a04      	ldr	r2, [sp, #16]
 8009c58:	1aeb      	subs	r3, r5, r3
 8009c5a:	4293      	cmp	r3, r2
 8009c5c:	f805 8c01 	strb.w	r8, [r5, #-1]
 8009c60:	d021      	beq.n	8009ca6 <_dtoa_r+0xabe>
 8009c62:	4659      	mov	r1, fp
 8009c64:	2300      	movs	r3, #0
 8009c66:	220a      	movs	r2, #10
 8009c68:	4620      	mov	r0, r4
 8009c6a:	f000 fc25 	bl	800a4b8 <__multadd>
 8009c6e:	45b9      	cmp	r9, r7
 8009c70:	4683      	mov	fp, r0
 8009c72:	f04f 0300 	mov.w	r3, #0
 8009c76:	f04f 020a 	mov.w	r2, #10
 8009c7a:	4649      	mov	r1, r9
 8009c7c:	4620      	mov	r0, r4
 8009c7e:	d105      	bne.n	8009c8c <_dtoa_r+0xaa4>
 8009c80:	f000 fc1a 	bl	800a4b8 <__multadd>
 8009c84:	4681      	mov	r9, r0
 8009c86:	4607      	mov	r7, r0
 8009c88:	9507      	str	r5, [sp, #28]
 8009c8a:	e778      	b.n	8009b7e <_dtoa_r+0x996>
 8009c8c:	f000 fc14 	bl	800a4b8 <__multadd>
 8009c90:	4639      	mov	r1, r7
 8009c92:	4681      	mov	r9, r0
 8009c94:	2300      	movs	r3, #0
 8009c96:	220a      	movs	r2, #10
 8009c98:	4620      	mov	r0, r4
 8009c9a:	f000 fc0d 	bl	800a4b8 <__multadd>
 8009c9e:	4607      	mov	r7, r0
 8009ca0:	e7f2      	b.n	8009c88 <_dtoa_r+0xaa0>
 8009ca2:	f04f 0900 	mov.w	r9, #0
 8009ca6:	4659      	mov	r1, fp
 8009ca8:	2201      	movs	r2, #1
 8009caa:	4620      	mov	r0, r4
 8009cac:	f000 fdb8 	bl	800a820 <__lshift>
 8009cb0:	4631      	mov	r1, r6
 8009cb2:	4683      	mov	fp, r0
 8009cb4:	f000 fe08 	bl	800a8c8 <__mcmp>
 8009cb8:	2800      	cmp	r0, #0
 8009cba:	dcb8      	bgt.n	8009c2e <_dtoa_r+0xa46>
 8009cbc:	d102      	bne.n	8009cc4 <_dtoa_r+0xadc>
 8009cbe:	f018 0f01 	tst.w	r8, #1
 8009cc2:	d1b4      	bne.n	8009c2e <_dtoa_r+0xa46>
 8009cc4:	f815 3c01 	ldrb.w	r3, [r5, #-1]
 8009cc8:	1e6a      	subs	r2, r5, #1
 8009cca:	2b30      	cmp	r3, #48	; 0x30
 8009ccc:	f47f af0f 	bne.w	8009aee <_dtoa_r+0x906>
 8009cd0:	4615      	mov	r5, r2
 8009cd2:	e7f7      	b.n	8009cc4 <_dtoa_r+0xadc>
 8009cd4:	9b06      	ldr	r3, [sp, #24]
 8009cd6:	4293      	cmp	r3, r2
 8009cd8:	d105      	bne.n	8009ce6 <_dtoa_r+0xafe>
 8009cda:	2331      	movs	r3, #49	; 0x31
 8009cdc:	9a06      	ldr	r2, [sp, #24]
 8009cde:	f10a 0a01 	add.w	sl, sl, #1
 8009ce2:	7013      	strb	r3, [r2, #0]
 8009ce4:	e703      	b.n	8009aee <_dtoa_r+0x906>
 8009ce6:	4615      	mov	r5, r2
 8009ce8:	e7a1      	b.n	8009c2e <_dtoa_r+0xa46>
 8009cea:	4b17      	ldr	r3, [pc, #92]	; (8009d48 <_dtoa_r+0xb60>)
 8009cec:	f7ff bae1 	b.w	80092b2 <_dtoa_r+0xca>
 8009cf0:	9b22      	ldr	r3, [sp, #136]	; 0x88
 8009cf2:	2b00      	cmp	r3, #0
 8009cf4:	f47f aabb 	bne.w	800926e <_dtoa_r+0x86>
 8009cf8:	4b14      	ldr	r3, [pc, #80]	; (8009d4c <_dtoa_r+0xb64>)
 8009cfa:	f7ff bada 	b.w	80092b2 <_dtoa_r+0xca>
 8009cfe:	9b1e      	ldr	r3, [sp, #120]	; 0x78
 8009d00:	2b01      	cmp	r3, #1
 8009d02:	f77f ae3f 	ble.w	8009984 <_dtoa_r+0x79c>
 8009d06:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 8009d08:	9308      	str	r3, [sp, #32]
 8009d0a:	e653      	b.n	80099b4 <_dtoa_r+0x7cc>
 8009d0c:	9b04      	ldr	r3, [sp, #16]
 8009d0e:	2b00      	cmp	r3, #0
 8009d10:	dc03      	bgt.n	8009d1a <_dtoa_r+0xb32>
 8009d12:	9b1e      	ldr	r3, [sp, #120]	; 0x78
 8009d14:	2b02      	cmp	r3, #2
 8009d16:	f73f aed5 	bgt.w	8009ac4 <_dtoa_r+0x8dc>
 8009d1a:	9d06      	ldr	r5, [sp, #24]
 8009d1c:	4631      	mov	r1, r6
 8009d1e:	4658      	mov	r0, fp
 8009d20:	f7ff f9d4 	bl	80090cc <quorem>
 8009d24:	9b06      	ldr	r3, [sp, #24]
 8009d26:	f100 0830 	add.w	r8, r0, #48	; 0x30
 8009d2a:	f805 8b01 	strb.w	r8, [r5], #1
 8009d2e:	9a04      	ldr	r2, [sp, #16]
 8009d30:	1aeb      	subs	r3, r5, r3
 8009d32:	429a      	cmp	r2, r3
 8009d34:	ddb5      	ble.n	8009ca2 <_dtoa_r+0xaba>
 8009d36:	4659      	mov	r1, fp
 8009d38:	2300      	movs	r3, #0
 8009d3a:	220a      	movs	r2, #10
 8009d3c:	4620      	mov	r0, r4
 8009d3e:	f000 fbbb 	bl	800a4b8 <__multadd>
 8009d42:	4683      	mov	fp, r0
 8009d44:	e7ea      	b.n	8009d1c <_dtoa_r+0xb34>
 8009d46:	bf00      	nop
 8009d48:	0800b9cc 	.word	0x0800b9cc
 8009d4c:	0800ba48 	.word	0x0800ba48

08009d50 <rshift>:
 8009d50:	b5f0      	push	{r4, r5, r6, r7, lr}
 8009d52:	6906      	ldr	r6, [r0, #16]
 8009d54:	114b      	asrs	r3, r1, #5
 8009d56:	429e      	cmp	r6, r3
 8009d58:	f100 0414 	add.w	r4, r0, #20
 8009d5c:	dd31      	ble.n	8009dc2 <rshift+0x72>
 8009d5e:	f011 011f 	ands.w	r1, r1, #31
 8009d62:	eb04 0686 	add.w	r6, r4, r6, lsl #2
 8009d66:	eb04 0283 	add.w	r2, r4, r3, lsl #2
 8009d6a:	d108      	bne.n	8009d7e <rshift+0x2e>
 8009d6c:	4621      	mov	r1, r4
 8009d6e:	42b2      	cmp	r2, r6
 8009d70:	460b      	mov	r3, r1
 8009d72:	d211      	bcs.n	8009d98 <rshift+0x48>
 8009d74:	f852 3b04 	ldr.w	r3, [r2], #4
 8009d78:	f841 3b04 	str.w	r3, [r1], #4
 8009d7c:	e7f7      	b.n	8009d6e <rshift+0x1e>
 8009d7e:	f854 5023 	ldr.w	r5, [r4, r3, lsl #2]
 8009d82:	4623      	mov	r3, r4
 8009d84:	f1c1 0c20 	rsb	ip, r1, #32
 8009d88:	40cd      	lsrs	r5, r1
 8009d8a:	3204      	adds	r2, #4
 8009d8c:	42b2      	cmp	r2, r6
 8009d8e:	4617      	mov	r7, r2
 8009d90:	d30d      	bcc.n	8009dae <rshift+0x5e>
 8009d92:	601d      	str	r5, [r3, #0]
 8009d94:	b105      	cbz	r5, 8009d98 <rshift+0x48>
 8009d96:	3304      	adds	r3, #4
 8009d98:	42a3      	cmp	r3, r4
 8009d9a:	eba3 0204 	sub.w	r2, r3, r4
 8009d9e:	bf08      	it	eq
 8009da0:	2300      	moveq	r3, #0
 8009da2:	ea4f 02a2 	mov.w	r2, r2, asr #2
 8009da6:	6102      	str	r2, [r0, #16]
 8009da8:	bf08      	it	eq
 8009daa:	6143      	streq	r3, [r0, #20]
 8009dac:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8009dae:	683f      	ldr	r7, [r7, #0]
 8009db0:	fa07 f70c 	lsl.w	r7, r7, ip
 8009db4:	433d      	orrs	r5, r7
 8009db6:	f843 5b04 	str.w	r5, [r3], #4
 8009dba:	f852 5b04 	ldr.w	r5, [r2], #4
 8009dbe:	40cd      	lsrs	r5, r1
 8009dc0:	e7e4      	b.n	8009d8c <rshift+0x3c>
 8009dc2:	4623      	mov	r3, r4
 8009dc4:	e7e8      	b.n	8009d98 <rshift+0x48>

08009dc6 <__hexdig_fun>:
 8009dc6:	f1a0 0330 	sub.w	r3, r0, #48	; 0x30
 8009dca:	2b09      	cmp	r3, #9
 8009dcc:	d802      	bhi.n	8009dd4 <__hexdig_fun+0xe>
 8009dce:	3820      	subs	r0, #32
 8009dd0:	b2c0      	uxtb	r0, r0
 8009dd2:	4770      	bx	lr
 8009dd4:	f1a0 0361 	sub.w	r3, r0, #97	; 0x61
 8009dd8:	2b05      	cmp	r3, #5
 8009dda:	d801      	bhi.n	8009de0 <__hexdig_fun+0x1a>
 8009ddc:	3847      	subs	r0, #71	; 0x47
 8009dde:	e7f7      	b.n	8009dd0 <__hexdig_fun+0xa>
 8009de0:	f1a0 0341 	sub.w	r3, r0, #65	; 0x41
 8009de4:	2b05      	cmp	r3, #5
 8009de6:	d801      	bhi.n	8009dec <__hexdig_fun+0x26>
 8009de8:	3827      	subs	r0, #39	; 0x27
 8009dea:	e7f1      	b.n	8009dd0 <__hexdig_fun+0xa>
 8009dec:	2000      	movs	r0, #0
 8009dee:	4770      	bx	lr

08009df0 <__gethex>:
 8009df0:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8009df4:	b08b      	sub	sp, #44	; 0x2c
 8009df6:	9002      	str	r0, [sp, #8]
 8009df8:	9816      	ldr	r0, [sp, #88]	; 0x58
 8009dfa:	468a      	mov	sl, r1
 8009dfc:	4690      	mov	r8, r2
 8009dfe:	9306      	str	r3, [sp, #24]
 8009e00:	f000 fad1 	bl	800a3a6 <__localeconv_l>
 8009e04:	6803      	ldr	r3, [r0, #0]
 8009e06:	f04f 0b00 	mov.w	fp, #0
 8009e0a:	4618      	mov	r0, r3
 8009e0c:	9303      	str	r3, [sp, #12]
 8009e0e:	f7f6 f99f 	bl	8000150 <strlen>
 8009e12:	9b03      	ldr	r3, [sp, #12]
 8009e14:	9001      	str	r0, [sp, #4]
 8009e16:	4403      	add	r3, r0
 8009e18:	f813 3c01 	ldrb.w	r3, [r3, #-1]
 8009e1c:	9307      	str	r3, [sp, #28]
 8009e1e:	f8da 3000 	ldr.w	r3, [sl]
 8009e22:	3302      	adds	r3, #2
 8009e24:	461f      	mov	r7, r3
 8009e26:	f813 0b01 	ldrb.w	r0, [r3], #1
 8009e2a:	2830      	cmp	r0, #48	; 0x30
 8009e2c:	d06c      	beq.n	8009f08 <__gethex+0x118>
 8009e2e:	f7ff ffca 	bl	8009dc6 <__hexdig_fun>
 8009e32:	4604      	mov	r4, r0
 8009e34:	2800      	cmp	r0, #0
 8009e36:	d16a      	bne.n	8009f0e <__gethex+0x11e>
 8009e38:	9a01      	ldr	r2, [sp, #4]
 8009e3a:	9903      	ldr	r1, [sp, #12]
 8009e3c:	4638      	mov	r0, r7
 8009e3e:	f001 f849 	bl	800aed4 <strncmp>
 8009e42:	2800      	cmp	r0, #0
 8009e44:	d166      	bne.n	8009f14 <__gethex+0x124>
 8009e46:	9b01      	ldr	r3, [sp, #4]
 8009e48:	5cf8      	ldrb	r0, [r7, r3]
 8009e4a:	18fe      	adds	r6, r7, r3
 8009e4c:	f7ff ffbb 	bl	8009dc6 <__hexdig_fun>
 8009e50:	2800      	cmp	r0, #0
 8009e52:	d062      	beq.n	8009f1a <__gethex+0x12a>
 8009e54:	4633      	mov	r3, r6
 8009e56:	7818      	ldrb	r0, [r3, #0]
 8009e58:	461f      	mov	r7, r3
 8009e5a:	2830      	cmp	r0, #48	; 0x30
 8009e5c:	f103 0301 	add.w	r3, r3, #1
 8009e60:	d0f9      	beq.n	8009e56 <__gethex+0x66>
 8009e62:	f7ff ffb0 	bl	8009dc6 <__hexdig_fun>
 8009e66:	fab0 f580 	clz	r5, r0
 8009e6a:	4634      	mov	r4, r6
 8009e6c:	f04f 0b01 	mov.w	fp, #1
 8009e70:	096d      	lsrs	r5, r5, #5
 8009e72:	463a      	mov	r2, r7
 8009e74:	4616      	mov	r6, r2
 8009e76:	7830      	ldrb	r0, [r6, #0]
 8009e78:	3201      	adds	r2, #1
 8009e7a:	f7ff ffa4 	bl	8009dc6 <__hexdig_fun>
 8009e7e:	2800      	cmp	r0, #0
 8009e80:	d1f8      	bne.n	8009e74 <__gethex+0x84>
 8009e82:	9a01      	ldr	r2, [sp, #4]
 8009e84:	9903      	ldr	r1, [sp, #12]
 8009e86:	4630      	mov	r0, r6
 8009e88:	f001 f824 	bl	800aed4 <strncmp>
 8009e8c:	b950      	cbnz	r0, 8009ea4 <__gethex+0xb4>
 8009e8e:	b954      	cbnz	r4, 8009ea6 <__gethex+0xb6>
 8009e90:	9b01      	ldr	r3, [sp, #4]
 8009e92:	18f4      	adds	r4, r6, r3
 8009e94:	4622      	mov	r2, r4
 8009e96:	4616      	mov	r6, r2
 8009e98:	7830      	ldrb	r0, [r6, #0]
 8009e9a:	3201      	adds	r2, #1
 8009e9c:	f7ff ff93 	bl	8009dc6 <__hexdig_fun>
 8009ea0:	2800      	cmp	r0, #0
 8009ea2:	d1f8      	bne.n	8009e96 <__gethex+0xa6>
 8009ea4:	b10c      	cbz	r4, 8009eaa <__gethex+0xba>
 8009ea6:	1ba4      	subs	r4, r4, r6
 8009ea8:	00a4      	lsls	r4, r4, #2
 8009eaa:	7833      	ldrb	r3, [r6, #0]
 8009eac:	2b50      	cmp	r3, #80	; 0x50
 8009eae:	d001      	beq.n	8009eb4 <__gethex+0xc4>
 8009eb0:	2b70      	cmp	r3, #112	; 0x70
 8009eb2:	d140      	bne.n	8009f36 <__gethex+0x146>
 8009eb4:	7873      	ldrb	r3, [r6, #1]
 8009eb6:	2b2b      	cmp	r3, #43	; 0x2b
 8009eb8:	d031      	beq.n	8009f1e <__gethex+0x12e>
 8009eba:	2b2d      	cmp	r3, #45	; 0x2d
 8009ebc:	d033      	beq.n	8009f26 <__gethex+0x136>
 8009ebe:	f04f 0900 	mov.w	r9, #0
 8009ec2:	1c71      	adds	r1, r6, #1
 8009ec4:	7808      	ldrb	r0, [r1, #0]
 8009ec6:	f7ff ff7e 	bl	8009dc6 <__hexdig_fun>
 8009eca:	1e43      	subs	r3, r0, #1
 8009ecc:	b2db      	uxtb	r3, r3
 8009ece:	2b18      	cmp	r3, #24
 8009ed0:	d831      	bhi.n	8009f36 <__gethex+0x146>
 8009ed2:	f1a0 0210 	sub.w	r2, r0, #16
 8009ed6:	f811 0f01 	ldrb.w	r0, [r1, #1]!
 8009eda:	f7ff ff74 	bl	8009dc6 <__hexdig_fun>
 8009ede:	1e43      	subs	r3, r0, #1
 8009ee0:	b2db      	uxtb	r3, r3
 8009ee2:	2b18      	cmp	r3, #24
 8009ee4:	d922      	bls.n	8009f2c <__gethex+0x13c>
 8009ee6:	f1b9 0f00 	cmp.w	r9, #0
 8009eea:	d000      	beq.n	8009eee <__gethex+0xfe>
 8009eec:	4252      	negs	r2, r2
 8009eee:	4414      	add	r4, r2
 8009ef0:	f8ca 1000 	str.w	r1, [sl]
 8009ef4:	b30d      	cbz	r5, 8009f3a <__gethex+0x14a>
 8009ef6:	f1bb 0f00 	cmp.w	fp, #0
 8009efa:	bf0c      	ite	eq
 8009efc:	2706      	moveq	r7, #6
 8009efe:	2700      	movne	r7, #0
 8009f00:	4638      	mov	r0, r7
 8009f02:	b00b      	add	sp, #44	; 0x2c
 8009f04:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8009f08:	f10b 0b01 	add.w	fp, fp, #1
 8009f0c:	e78a      	b.n	8009e24 <__gethex+0x34>
 8009f0e:	2500      	movs	r5, #0
 8009f10:	462c      	mov	r4, r5
 8009f12:	e7ae      	b.n	8009e72 <__gethex+0x82>
 8009f14:	463e      	mov	r6, r7
 8009f16:	2501      	movs	r5, #1
 8009f18:	e7c7      	b.n	8009eaa <__gethex+0xba>
 8009f1a:	4604      	mov	r4, r0
 8009f1c:	e7fb      	b.n	8009f16 <__gethex+0x126>
 8009f1e:	f04f 0900 	mov.w	r9, #0
 8009f22:	1cb1      	adds	r1, r6, #2
 8009f24:	e7ce      	b.n	8009ec4 <__gethex+0xd4>
 8009f26:	f04f 0901 	mov.w	r9, #1
 8009f2a:	e7fa      	b.n	8009f22 <__gethex+0x132>
 8009f2c:	230a      	movs	r3, #10
 8009f2e:	fb03 0202 	mla	r2, r3, r2, r0
 8009f32:	3a10      	subs	r2, #16
 8009f34:	e7cf      	b.n	8009ed6 <__gethex+0xe6>
 8009f36:	4631      	mov	r1, r6
 8009f38:	e7da      	b.n	8009ef0 <__gethex+0x100>
 8009f3a:	4629      	mov	r1, r5
 8009f3c:	1bf3      	subs	r3, r6, r7
 8009f3e:	3b01      	subs	r3, #1
 8009f40:	2b07      	cmp	r3, #7
 8009f42:	dc49      	bgt.n	8009fd8 <__gethex+0x1e8>
 8009f44:	9802      	ldr	r0, [sp, #8]
 8009f46:	f000 fa6c 	bl	800a422 <_Balloc>
 8009f4a:	f04f 0b00 	mov.w	fp, #0
 8009f4e:	4605      	mov	r5, r0
 8009f50:	46da      	mov	sl, fp
 8009f52:	9b01      	ldr	r3, [sp, #4]
 8009f54:	f100 0914 	add.w	r9, r0, #20
 8009f58:	f1c3 0301 	rsb	r3, r3, #1
 8009f5c:	f8cd 9010 	str.w	r9, [sp, #16]
 8009f60:	9308      	str	r3, [sp, #32]
 8009f62:	42b7      	cmp	r7, r6
 8009f64:	d33b      	bcc.n	8009fde <__gethex+0x1ee>
 8009f66:	9804      	ldr	r0, [sp, #16]
 8009f68:	f840 ab04 	str.w	sl, [r0], #4
 8009f6c:	eba0 0009 	sub.w	r0, r0, r9
 8009f70:	1080      	asrs	r0, r0, #2
 8009f72:	6128      	str	r0, [r5, #16]
 8009f74:	0147      	lsls	r7, r0, #5
 8009f76:	4650      	mov	r0, sl
 8009f78:	f000 fb17 	bl	800a5aa <__hi0bits>
 8009f7c:	f8d8 6000 	ldr.w	r6, [r8]
 8009f80:	1a3f      	subs	r7, r7, r0
 8009f82:	42b7      	cmp	r7, r6
 8009f84:	dd64      	ble.n	800a050 <__gethex+0x260>
 8009f86:	1bbf      	subs	r7, r7, r6
 8009f88:	4639      	mov	r1, r7
 8009f8a:	4628      	mov	r0, r5
 8009f8c:	f000 fe21 	bl	800abd2 <__any_on>
 8009f90:	4682      	mov	sl, r0
 8009f92:	b178      	cbz	r0, 8009fb4 <__gethex+0x1c4>
 8009f94:	f04f 0a01 	mov.w	sl, #1
 8009f98:	1e7b      	subs	r3, r7, #1
 8009f9a:	1159      	asrs	r1, r3, #5
 8009f9c:	f003 021f 	and.w	r2, r3, #31
 8009fa0:	f859 1021 	ldr.w	r1, [r9, r1, lsl #2]
 8009fa4:	fa0a f202 	lsl.w	r2, sl, r2
 8009fa8:	420a      	tst	r2, r1
 8009faa:	d003      	beq.n	8009fb4 <__gethex+0x1c4>
 8009fac:	4553      	cmp	r3, sl
 8009fae:	dc46      	bgt.n	800a03e <__gethex+0x24e>
 8009fb0:	f04f 0a02 	mov.w	sl, #2
 8009fb4:	4639      	mov	r1, r7
 8009fb6:	4628      	mov	r0, r5
 8009fb8:	f7ff feca 	bl	8009d50 <rshift>
 8009fbc:	443c      	add	r4, r7
 8009fbe:	f8d8 3008 	ldr.w	r3, [r8, #8]
 8009fc2:	42a3      	cmp	r3, r4
 8009fc4:	da52      	bge.n	800a06c <__gethex+0x27c>
 8009fc6:	4629      	mov	r1, r5
 8009fc8:	9802      	ldr	r0, [sp, #8]
 8009fca:	f000 fa5e 	bl	800a48a <_Bfree>
 8009fce:	2300      	movs	r3, #0
 8009fd0:	9a14      	ldr	r2, [sp, #80]	; 0x50
 8009fd2:	27a3      	movs	r7, #163	; 0xa3
 8009fd4:	6013      	str	r3, [r2, #0]
 8009fd6:	e793      	b.n	8009f00 <__gethex+0x110>
 8009fd8:	3101      	adds	r1, #1
 8009fda:	105b      	asrs	r3, r3, #1
 8009fdc:	e7b0      	b.n	8009f40 <__gethex+0x150>
 8009fde:	1e73      	subs	r3, r6, #1
 8009fe0:	9305      	str	r3, [sp, #20]
 8009fe2:	9a07      	ldr	r2, [sp, #28]
 8009fe4:	f816 3c01 	ldrb.w	r3, [r6, #-1]
 8009fe8:	4293      	cmp	r3, r2
 8009fea:	d018      	beq.n	800a01e <__gethex+0x22e>
 8009fec:	f1bb 0f20 	cmp.w	fp, #32
 8009ff0:	d107      	bne.n	800a002 <__gethex+0x212>
 8009ff2:	9b04      	ldr	r3, [sp, #16]
 8009ff4:	f8c3 a000 	str.w	sl, [r3]
 8009ff8:	f04f 0a00 	mov.w	sl, #0
 8009ffc:	46d3      	mov	fp, sl
 8009ffe:	3304      	adds	r3, #4
 800a000:	9304      	str	r3, [sp, #16]
 800a002:	f816 0c01 	ldrb.w	r0, [r6, #-1]
 800a006:	f7ff fede 	bl	8009dc6 <__hexdig_fun>
 800a00a:	f000 000f 	and.w	r0, r0, #15
 800a00e:	fa00 f00b 	lsl.w	r0, r0, fp
 800a012:	ea4a 0a00 	orr.w	sl, sl, r0
 800a016:	f10b 0b04 	add.w	fp, fp, #4
 800a01a:	9b05      	ldr	r3, [sp, #20]
 800a01c:	e00d      	b.n	800a03a <__gethex+0x24a>
 800a01e:	9b05      	ldr	r3, [sp, #20]
 800a020:	9a08      	ldr	r2, [sp, #32]
 800a022:	4413      	add	r3, r2
 800a024:	42bb      	cmp	r3, r7
 800a026:	d3e1      	bcc.n	8009fec <__gethex+0x1fc>
 800a028:	4618      	mov	r0, r3
 800a02a:	9a01      	ldr	r2, [sp, #4]
 800a02c:	9903      	ldr	r1, [sp, #12]
 800a02e:	9309      	str	r3, [sp, #36]	; 0x24
 800a030:	f000 ff50 	bl	800aed4 <strncmp>
 800a034:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800a036:	2800      	cmp	r0, #0
 800a038:	d1d8      	bne.n	8009fec <__gethex+0x1fc>
 800a03a:	461e      	mov	r6, r3
 800a03c:	e791      	b.n	8009f62 <__gethex+0x172>
 800a03e:	1eb9      	subs	r1, r7, #2
 800a040:	4628      	mov	r0, r5
 800a042:	f000 fdc6 	bl	800abd2 <__any_on>
 800a046:	2800      	cmp	r0, #0
 800a048:	d0b2      	beq.n	8009fb0 <__gethex+0x1c0>
 800a04a:	f04f 0a03 	mov.w	sl, #3
 800a04e:	e7b1      	b.n	8009fb4 <__gethex+0x1c4>
 800a050:	da09      	bge.n	800a066 <__gethex+0x276>
 800a052:	1bf7      	subs	r7, r6, r7
 800a054:	4629      	mov	r1, r5
 800a056:	463a      	mov	r2, r7
 800a058:	9802      	ldr	r0, [sp, #8]
 800a05a:	f000 fbe1 	bl	800a820 <__lshift>
 800a05e:	4605      	mov	r5, r0
 800a060:	1be4      	subs	r4, r4, r7
 800a062:	f100 0914 	add.w	r9, r0, #20
 800a066:	f04f 0a00 	mov.w	sl, #0
 800a06a:	e7a8      	b.n	8009fbe <__gethex+0x1ce>
 800a06c:	f8d8 0004 	ldr.w	r0, [r8, #4]
 800a070:	42a0      	cmp	r0, r4
 800a072:	dd6b      	ble.n	800a14c <__gethex+0x35c>
 800a074:	1b04      	subs	r4, r0, r4
 800a076:	42a6      	cmp	r6, r4
 800a078:	dc2e      	bgt.n	800a0d8 <__gethex+0x2e8>
 800a07a:	f8d8 300c 	ldr.w	r3, [r8, #12]
 800a07e:	2b02      	cmp	r3, #2
 800a080:	d022      	beq.n	800a0c8 <__gethex+0x2d8>
 800a082:	2b03      	cmp	r3, #3
 800a084:	d024      	beq.n	800a0d0 <__gethex+0x2e0>
 800a086:	2b01      	cmp	r3, #1
 800a088:	d115      	bne.n	800a0b6 <__gethex+0x2c6>
 800a08a:	42a6      	cmp	r6, r4
 800a08c:	d113      	bne.n	800a0b6 <__gethex+0x2c6>
 800a08e:	2e01      	cmp	r6, #1
 800a090:	dc0b      	bgt.n	800a0aa <__gethex+0x2ba>
 800a092:	f8d8 3004 	ldr.w	r3, [r8, #4]
 800a096:	9a06      	ldr	r2, [sp, #24]
 800a098:	2762      	movs	r7, #98	; 0x62
 800a09a:	6013      	str	r3, [r2, #0]
 800a09c:	2301      	movs	r3, #1
 800a09e:	612b      	str	r3, [r5, #16]
 800a0a0:	f8c9 3000 	str.w	r3, [r9]
 800a0a4:	9b14      	ldr	r3, [sp, #80]	; 0x50
 800a0a6:	601d      	str	r5, [r3, #0]
 800a0a8:	e72a      	b.n	8009f00 <__gethex+0x110>
 800a0aa:	1e71      	subs	r1, r6, #1
 800a0ac:	4628      	mov	r0, r5
 800a0ae:	f000 fd90 	bl	800abd2 <__any_on>
 800a0b2:	2800      	cmp	r0, #0
 800a0b4:	d1ed      	bne.n	800a092 <__gethex+0x2a2>
 800a0b6:	4629      	mov	r1, r5
 800a0b8:	9802      	ldr	r0, [sp, #8]
 800a0ba:	f000 f9e6 	bl	800a48a <_Bfree>
 800a0be:	2300      	movs	r3, #0
 800a0c0:	9a14      	ldr	r2, [sp, #80]	; 0x50
 800a0c2:	2750      	movs	r7, #80	; 0x50
 800a0c4:	6013      	str	r3, [r2, #0]
 800a0c6:	e71b      	b.n	8009f00 <__gethex+0x110>
 800a0c8:	9b15      	ldr	r3, [sp, #84]	; 0x54
 800a0ca:	2b00      	cmp	r3, #0
 800a0cc:	d0e1      	beq.n	800a092 <__gethex+0x2a2>
 800a0ce:	e7f2      	b.n	800a0b6 <__gethex+0x2c6>
 800a0d0:	9b15      	ldr	r3, [sp, #84]	; 0x54
 800a0d2:	2b00      	cmp	r3, #0
 800a0d4:	d1dd      	bne.n	800a092 <__gethex+0x2a2>
 800a0d6:	e7ee      	b.n	800a0b6 <__gethex+0x2c6>
 800a0d8:	1e67      	subs	r7, r4, #1
 800a0da:	f1ba 0f00 	cmp.w	sl, #0
 800a0de:	d132      	bne.n	800a146 <__gethex+0x356>
 800a0e0:	b127      	cbz	r7, 800a0ec <__gethex+0x2fc>
 800a0e2:	4639      	mov	r1, r7
 800a0e4:	4628      	mov	r0, r5
 800a0e6:	f000 fd74 	bl	800abd2 <__any_on>
 800a0ea:	4682      	mov	sl, r0
 800a0ec:	2301      	movs	r3, #1
 800a0ee:	117a      	asrs	r2, r7, #5
 800a0f0:	f007 071f 	and.w	r7, r7, #31
 800a0f4:	fa03 f707 	lsl.w	r7, r3, r7
 800a0f8:	f859 3022 	ldr.w	r3, [r9, r2, lsl #2]
 800a0fc:	4621      	mov	r1, r4
 800a0fe:	421f      	tst	r7, r3
 800a100:	f04f 0702 	mov.w	r7, #2
 800a104:	4628      	mov	r0, r5
 800a106:	bf18      	it	ne
 800a108:	f04a 0a02 	orrne.w	sl, sl, #2
 800a10c:	1b36      	subs	r6, r6, r4
 800a10e:	f7ff fe1f 	bl	8009d50 <rshift>
 800a112:	f8d8 4004 	ldr.w	r4, [r8, #4]
 800a116:	f1ba 0f00 	cmp.w	sl, #0
 800a11a:	d048      	beq.n	800a1ae <__gethex+0x3be>
 800a11c:	f8d8 300c 	ldr.w	r3, [r8, #12]
 800a120:	2b02      	cmp	r3, #2
 800a122:	d015      	beq.n	800a150 <__gethex+0x360>
 800a124:	2b03      	cmp	r3, #3
 800a126:	d017      	beq.n	800a158 <__gethex+0x368>
 800a128:	2b01      	cmp	r3, #1
 800a12a:	d109      	bne.n	800a140 <__gethex+0x350>
 800a12c:	f01a 0f02 	tst.w	sl, #2
 800a130:	d006      	beq.n	800a140 <__gethex+0x350>
 800a132:	f8d9 3000 	ldr.w	r3, [r9]
 800a136:	ea4a 0a03 	orr.w	sl, sl, r3
 800a13a:	f01a 0f01 	tst.w	sl, #1
 800a13e:	d10e      	bne.n	800a15e <__gethex+0x36e>
 800a140:	f047 0710 	orr.w	r7, r7, #16
 800a144:	e033      	b.n	800a1ae <__gethex+0x3be>
 800a146:	f04f 0a01 	mov.w	sl, #1
 800a14a:	e7cf      	b.n	800a0ec <__gethex+0x2fc>
 800a14c:	2701      	movs	r7, #1
 800a14e:	e7e2      	b.n	800a116 <__gethex+0x326>
 800a150:	9b15      	ldr	r3, [sp, #84]	; 0x54
 800a152:	f1c3 0301 	rsb	r3, r3, #1
 800a156:	9315      	str	r3, [sp, #84]	; 0x54
 800a158:	9b15      	ldr	r3, [sp, #84]	; 0x54
 800a15a:	2b00      	cmp	r3, #0
 800a15c:	d0f0      	beq.n	800a140 <__gethex+0x350>
 800a15e:	f04f 0c00 	mov.w	ip, #0
 800a162:	f8d5 9010 	ldr.w	r9, [r5, #16]
 800a166:	f105 0314 	add.w	r3, r5, #20
 800a16a:	ea4f 0a89 	mov.w	sl, r9, lsl #2
 800a16e:	eb03 010a 	add.w	r1, r3, sl
 800a172:	4618      	mov	r0, r3
 800a174:	f853 2b04 	ldr.w	r2, [r3], #4
 800a178:	f1b2 3fff 	cmp.w	r2, #4294967295	; 0xffffffff
 800a17c:	d01c      	beq.n	800a1b8 <__gethex+0x3c8>
 800a17e:	3201      	adds	r2, #1
 800a180:	6002      	str	r2, [r0, #0]
 800a182:	2f02      	cmp	r7, #2
 800a184:	f105 0314 	add.w	r3, r5, #20
 800a188:	d138      	bne.n	800a1fc <__gethex+0x40c>
 800a18a:	f8d8 2000 	ldr.w	r2, [r8]
 800a18e:	3a01      	subs	r2, #1
 800a190:	42b2      	cmp	r2, r6
 800a192:	d10a      	bne.n	800a1aa <__gethex+0x3ba>
 800a194:	2201      	movs	r2, #1
 800a196:	1171      	asrs	r1, r6, #5
 800a198:	f853 3021 	ldr.w	r3, [r3, r1, lsl #2]
 800a19c:	f006 061f 	and.w	r6, r6, #31
 800a1a0:	fa02 f606 	lsl.w	r6, r2, r6
 800a1a4:	421e      	tst	r6, r3
 800a1a6:	bf18      	it	ne
 800a1a8:	4617      	movne	r7, r2
 800a1aa:	f047 0720 	orr.w	r7, r7, #32
 800a1ae:	9b14      	ldr	r3, [sp, #80]	; 0x50
 800a1b0:	601d      	str	r5, [r3, #0]
 800a1b2:	9b06      	ldr	r3, [sp, #24]
 800a1b4:	601c      	str	r4, [r3, #0]
 800a1b6:	e6a3      	b.n	8009f00 <__gethex+0x110>
 800a1b8:	4299      	cmp	r1, r3
 800a1ba:	f843 cc04 	str.w	ip, [r3, #-4]
 800a1be:	d8d8      	bhi.n	800a172 <__gethex+0x382>
 800a1c0:	68ab      	ldr	r3, [r5, #8]
 800a1c2:	4599      	cmp	r9, r3
 800a1c4:	db12      	blt.n	800a1ec <__gethex+0x3fc>
 800a1c6:	6869      	ldr	r1, [r5, #4]
 800a1c8:	9802      	ldr	r0, [sp, #8]
 800a1ca:	3101      	adds	r1, #1
 800a1cc:	f000 f929 	bl	800a422 <_Balloc>
 800a1d0:	4683      	mov	fp, r0
 800a1d2:	692a      	ldr	r2, [r5, #16]
 800a1d4:	f105 010c 	add.w	r1, r5, #12
 800a1d8:	3202      	adds	r2, #2
 800a1da:	0092      	lsls	r2, r2, #2
 800a1dc:	300c      	adds	r0, #12
 800a1de:	f000 f913 	bl	800a408 <memcpy>
 800a1e2:	4629      	mov	r1, r5
 800a1e4:	9802      	ldr	r0, [sp, #8]
 800a1e6:	f000 f950 	bl	800a48a <_Bfree>
 800a1ea:	465d      	mov	r5, fp
 800a1ec:	692b      	ldr	r3, [r5, #16]
 800a1ee:	1c5a      	adds	r2, r3, #1
 800a1f0:	612a      	str	r2, [r5, #16]
 800a1f2:	2201      	movs	r2, #1
 800a1f4:	eb05 0383 	add.w	r3, r5, r3, lsl #2
 800a1f8:	615a      	str	r2, [r3, #20]
 800a1fa:	e7c2      	b.n	800a182 <__gethex+0x392>
 800a1fc:	692a      	ldr	r2, [r5, #16]
 800a1fe:	454a      	cmp	r2, r9
 800a200:	dd0b      	ble.n	800a21a <__gethex+0x42a>
 800a202:	2101      	movs	r1, #1
 800a204:	4628      	mov	r0, r5
 800a206:	f7ff fda3 	bl	8009d50 <rshift>
 800a20a:	f8d8 3008 	ldr.w	r3, [r8, #8]
 800a20e:	3401      	adds	r4, #1
 800a210:	42a3      	cmp	r3, r4
 800a212:	f6ff aed8 	blt.w	8009fc6 <__gethex+0x1d6>
 800a216:	2701      	movs	r7, #1
 800a218:	e7c7      	b.n	800a1aa <__gethex+0x3ba>
 800a21a:	f016 061f 	ands.w	r6, r6, #31
 800a21e:	d0fa      	beq.n	800a216 <__gethex+0x426>
 800a220:	449a      	add	sl, r3
 800a222:	f85a 0c04 	ldr.w	r0, [sl, #-4]
 800a226:	f000 f9c0 	bl	800a5aa <__hi0bits>
 800a22a:	f1c6 0620 	rsb	r6, r6, #32
 800a22e:	42b0      	cmp	r0, r6
 800a230:	dbe7      	blt.n	800a202 <__gethex+0x412>
 800a232:	e7f0      	b.n	800a216 <__gethex+0x426>

0800a234 <L_shift>:
 800a234:	f1c2 0208 	rsb	r2, r2, #8
 800a238:	0092      	lsls	r2, r2, #2
 800a23a:	b570      	push	{r4, r5, r6, lr}
 800a23c:	f1c2 0620 	rsb	r6, r2, #32
 800a240:	6843      	ldr	r3, [r0, #4]
 800a242:	6804      	ldr	r4, [r0, #0]
 800a244:	fa03 f506 	lsl.w	r5, r3, r6
 800a248:	432c      	orrs	r4, r5
 800a24a:	40d3      	lsrs	r3, r2
 800a24c:	6004      	str	r4, [r0, #0]
 800a24e:	f840 3f04 	str.w	r3, [r0, #4]!
 800a252:	4288      	cmp	r0, r1
 800a254:	d3f4      	bcc.n	800a240 <L_shift+0xc>
 800a256:	bd70      	pop	{r4, r5, r6, pc}

0800a258 <__match>:
 800a258:	b530      	push	{r4, r5, lr}
 800a25a:	6803      	ldr	r3, [r0, #0]
 800a25c:	3301      	adds	r3, #1
 800a25e:	f811 4b01 	ldrb.w	r4, [r1], #1
 800a262:	b914      	cbnz	r4, 800a26a <__match+0x12>
 800a264:	6003      	str	r3, [r0, #0]
 800a266:	2001      	movs	r0, #1
 800a268:	bd30      	pop	{r4, r5, pc}
 800a26a:	f813 2b01 	ldrb.w	r2, [r3], #1
 800a26e:	f1a2 0541 	sub.w	r5, r2, #65	; 0x41
 800a272:	2d19      	cmp	r5, #25
 800a274:	bf98      	it	ls
 800a276:	3220      	addls	r2, #32
 800a278:	42a2      	cmp	r2, r4
 800a27a:	d0f0      	beq.n	800a25e <__match+0x6>
 800a27c:	2000      	movs	r0, #0
 800a27e:	e7f3      	b.n	800a268 <__match+0x10>

0800a280 <__hexnan>:
 800a280:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800a284:	2500      	movs	r5, #0
 800a286:	680b      	ldr	r3, [r1, #0]
 800a288:	4682      	mov	sl, r0
 800a28a:	115f      	asrs	r7, r3, #5
 800a28c:	eb02 0787 	add.w	r7, r2, r7, lsl #2
 800a290:	f013 031f 	ands.w	r3, r3, #31
 800a294:	bf18      	it	ne
 800a296:	3704      	addne	r7, #4
 800a298:	1f3e      	subs	r6, r7, #4
 800a29a:	4690      	mov	r8, r2
 800a29c:	46b1      	mov	r9, r6
 800a29e:	4634      	mov	r4, r6
 800a2a0:	46ab      	mov	fp, r5
 800a2a2:	b087      	sub	sp, #28
 800a2a4:	6801      	ldr	r1, [r0, #0]
 800a2a6:	9301      	str	r3, [sp, #4]
 800a2a8:	f847 5c04 	str.w	r5, [r7, #-4]
 800a2ac:	9502      	str	r5, [sp, #8]
 800a2ae:	784a      	ldrb	r2, [r1, #1]
 800a2b0:	1c4b      	adds	r3, r1, #1
 800a2b2:	9303      	str	r3, [sp, #12]
 800a2b4:	b342      	cbz	r2, 800a308 <__hexnan+0x88>
 800a2b6:	4610      	mov	r0, r2
 800a2b8:	9105      	str	r1, [sp, #20]
 800a2ba:	9204      	str	r2, [sp, #16]
 800a2bc:	f7ff fd83 	bl	8009dc6 <__hexdig_fun>
 800a2c0:	2800      	cmp	r0, #0
 800a2c2:	d143      	bne.n	800a34c <__hexnan+0xcc>
 800a2c4:	9a04      	ldr	r2, [sp, #16]
 800a2c6:	9905      	ldr	r1, [sp, #20]
 800a2c8:	2a20      	cmp	r2, #32
 800a2ca:	d818      	bhi.n	800a2fe <__hexnan+0x7e>
 800a2cc:	9b02      	ldr	r3, [sp, #8]
 800a2ce:	459b      	cmp	fp, r3
 800a2d0:	dd13      	ble.n	800a2fa <__hexnan+0x7a>
 800a2d2:	454c      	cmp	r4, r9
 800a2d4:	d206      	bcs.n	800a2e4 <__hexnan+0x64>
 800a2d6:	2d07      	cmp	r5, #7
 800a2d8:	dc04      	bgt.n	800a2e4 <__hexnan+0x64>
 800a2da:	462a      	mov	r2, r5
 800a2dc:	4649      	mov	r1, r9
 800a2de:	4620      	mov	r0, r4
 800a2e0:	f7ff ffa8 	bl	800a234 <L_shift>
 800a2e4:	4544      	cmp	r4, r8
 800a2e6:	d944      	bls.n	800a372 <__hexnan+0xf2>
 800a2e8:	2300      	movs	r3, #0
 800a2ea:	f1a4 0904 	sub.w	r9, r4, #4
 800a2ee:	f844 3c04 	str.w	r3, [r4, #-4]
 800a2f2:	461d      	mov	r5, r3
 800a2f4:	464c      	mov	r4, r9
 800a2f6:	f8cd b008 	str.w	fp, [sp, #8]
 800a2fa:	9903      	ldr	r1, [sp, #12]
 800a2fc:	e7d7      	b.n	800a2ae <__hexnan+0x2e>
 800a2fe:	2a29      	cmp	r2, #41	; 0x29
 800a300:	d14a      	bne.n	800a398 <__hexnan+0x118>
 800a302:	3102      	adds	r1, #2
 800a304:	f8ca 1000 	str.w	r1, [sl]
 800a308:	f1bb 0f00 	cmp.w	fp, #0
 800a30c:	d044      	beq.n	800a398 <__hexnan+0x118>
 800a30e:	454c      	cmp	r4, r9
 800a310:	d206      	bcs.n	800a320 <__hexnan+0xa0>
 800a312:	2d07      	cmp	r5, #7
 800a314:	dc04      	bgt.n	800a320 <__hexnan+0xa0>
 800a316:	462a      	mov	r2, r5
 800a318:	4649      	mov	r1, r9
 800a31a:	4620      	mov	r0, r4
 800a31c:	f7ff ff8a 	bl	800a234 <L_shift>
 800a320:	4544      	cmp	r4, r8
 800a322:	d928      	bls.n	800a376 <__hexnan+0xf6>
 800a324:	4643      	mov	r3, r8
 800a326:	f854 2b04 	ldr.w	r2, [r4], #4
 800a32a:	42a6      	cmp	r6, r4
 800a32c:	f843 2b04 	str.w	r2, [r3], #4
 800a330:	d2f9      	bcs.n	800a326 <__hexnan+0xa6>
 800a332:	2200      	movs	r2, #0
 800a334:	f843 2b04 	str.w	r2, [r3], #4
 800a338:	429e      	cmp	r6, r3
 800a33a:	d2fb      	bcs.n	800a334 <__hexnan+0xb4>
 800a33c:	6833      	ldr	r3, [r6, #0]
 800a33e:	b91b      	cbnz	r3, 800a348 <__hexnan+0xc8>
 800a340:	4546      	cmp	r6, r8
 800a342:	d127      	bne.n	800a394 <__hexnan+0x114>
 800a344:	2301      	movs	r3, #1
 800a346:	6033      	str	r3, [r6, #0]
 800a348:	2005      	movs	r0, #5
 800a34a:	e026      	b.n	800a39a <__hexnan+0x11a>
 800a34c:	3501      	adds	r5, #1
 800a34e:	2d08      	cmp	r5, #8
 800a350:	f10b 0b01 	add.w	fp, fp, #1
 800a354:	dd06      	ble.n	800a364 <__hexnan+0xe4>
 800a356:	4544      	cmp	r4, r8
 800a358:	d9cf      	bls.n	800a2fa <__hexnan+0x7a>
 800a35a:	2300      	movs	r3, #0
 800a35c:	2501      	movs	r5, #1
 800a35e:	f844 3c04 	str.w	r3, [r4, #-4]
 800a362:	3c04      	subs	r4, #4
 800a364:	6822      	ldr	r2, [r4, #0]
 800a366:	f000 000f 	and.w	r0, r0, #15
 800a36a:	ea40 1002 	orr.w	r0, r0, r2, lsl #4
 800a36e:	6020      	str	r0, [r4, #0]
 800a370:	e7c3      	b.n	800a2fa <__hexnan+0x7a>
 800a372:	2508      	movs	r5, #8
 800a374:	e7c1      	b.n	800a2fa <__hexnan+0x7a>
 800a376:	9b01      	ldr	r3, [sp, #4]
 800a378:	2b00      	cmp	r3, #0
 800a37a:	d0df      	beq.n	800a33c <__hexnan+0xbc>
 800a37c:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 800a380:	f1c3 0320 	rsb	r3, r3, #32
 800a384:	fa22 f303 	lsr.w	r3, r2, r3
 800a388:	f857 2c04 	ldr.w	r2, [r7, #-4]
 800a38c:	401a      	ands	r2, r3
 800a38e:	f847 2c04 	str.w	r2, [r7, #-4]
 800a392:	e7d3      	b.n	800a33c <__hexnan+0xbc>
 800a394:	3e04      	subs	r6, #4
 800a396:	e7d1      	b.n	800a33c <__hexnan+0xbc>
 800a398:	2004      	movs	r0, #4
 800a39a:	b007      	add	sp, #28
 800a39c:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}

0800a3a0 <__locale_ctype_ptr_l>:
 800a3a0:	f8d0 00ec 	ldr.w	r0, [r0, #236]	; 0xec
 800a3a4:	4770      	bx	lr

0800a3a6 <__localeconv_l>:
 800a3a6:	30f0      	adds	r0, #240	; 0xf0
 800a3a8:	4770      	bx	lr
	...

0800a3ac <_localeconv_r>:
 800a3ac:	4b04      	ldr	r3, [pc, #16]	; (800a3c0 <_localeconv_r+0x14>)
 800a3ae:	681b      	ldr	r3, [r3, #0]
 800a3b0:	6a18      	ldr	r0, [r3, #32]
 800a3b2:	4b04      	ldr	r3, [pc, #16]	; (800a3c4 <_localeconv_r+0x18>)
 800a3b4:	2800      	cmp	r0, #0
 800a3b6:	bf08      	it	eq
 800a3b8:	4618      	moveq	r0, r3
 800a3ba:	30f0      	adds	r0, #240	; 0xf0
 800a3bc:	4770      	bx	lr
 800a3be:	bf00      	nop
 800a3c0:	2000002c 	.word	0x2000002c
 800a3c4:	20000090 	.word	0x20000090

0800a3c8 <__ascii_mbtowc>:
 800a3c8:	b082      	sub	sp, #8
 800a3ca:	b901      	cbnz	r1, 800a3ce <__ascii_mbtowc+0x6>
 800a3cc:	a901      	add	r1, sp, #4
 800a3ce:	b142      	cbz	r2, 800a3e2 <__ascii_mbtowc+0x1a>
 800a3d0:	b14b      	cbz	r3, 800a3e6 <__ascii_mbtowc+0x1e>
 800a3d2:	7813      	ldrb	r3, [r2, #0]
 800a3d4:	600b      	str	r3, [r1, #0]
 800a3d6:	7812      	ldrb	r2, [r2, #0]
 800a3d8:	1c10      	adds	r0, r2, #0
 800a3da:	bf18      	it	ne
 800a3dc:	2001      	movne	r0, #1
 800a3de:	b002      	add	sp, #8
 800a3e0:	4770      	bx	lr
 800a3e2:	4610      	mov	r0, r2
 800a3e4:	e7fb      	b.n	800a3de <__ascii_mbtowc+0x16>
 800a3e6:	f06f 0001 	mvn.w	r0, #1
 800a3ea:	e7f8      	b.n	800a3de <__ascii_mbtowc+0x16>

0800a3ec <memchr>:
 800a3ec:	b510      	push	{r4, lr}
 800a3ee:	b2c9      	uxtb	r1, r1
 800a3f0:	4402      	add	r2, r0
 800a3f2:	4290      	cmp	r0, r2
 800a3f4:	4603      	mov	r3, r0
 800a3f6:	d101      	bne.n	800a3fc <memchr+0x10>
 800a3f8:	2300      	movs	r3, #0
 800a3fa:	e003      	b.n	800a404 <memchr+0x18>
 800a3fc:	781c      	ldrb	r4, [r3, #0]
 800a3fe:	3001      	adds	r0, #1
 800a400:	428c      	cmp	r4, r1
 800a402:	d1f6      	bne.n	800a3f2 <memchr+0x6>
 800a404:	4618      	mov	r0, r3
 800a406:	bd10      	pop	{r4, pc}

0800a408 <memcpy>:
 800a408:	b510      	push	{r4, lr}
 800a40a:	1e43      	subs	r3, r0, #1
 800a40c:	440a      	add	r2, r1
 800a40e:	4291      	cmp	r1, r2
 800a410:	d100      	bne.n	800a414 <memcpy+0xc>
 800a412:	bd10      	pop	{r4, pc}
 800a414:	f811 4b01 	ldrb.w	r4, [r1], #1
 800a418:	f803 4f01 	strb.w	r4, [r3, #1]!
 800a41c:	e7f7      	b.n	800a40e <memcpy+0x6>

0800a41e <__malloc_lock>:
 800a41e:	4770      	bx	lr

0800a420 <__malloc_unlock>:
 800a420:	4770      	bx	lr

0800a422 <_Balloc>:
 800a422:	b570      	push	{r4, r5, r6, lr}
 800a424:	6a45      	ldr	r5, [r0, #36]	; 0x24
 800a426:	4604      	mov	r4, r0
 800a428:	460e      	mov	r6, r1
 800a42a:	b93d      	cbnz	r5, 800a43c <_Balloc+0x1a>
 800a42c:	2010      	movs	r0, #16
 800a42e:	f7fd f871 	bl	8007514 <malloc>
 800a432:	6260      	str	r0, [r4, #36]	; 0x24
 800a434:	e9c0 5501 	strd	r5, r5, [r0, #4]
 800a438:	6005      	str	r5, [r0, #0]
 800a43a:	60c5      	str	r5, [r0, #12]
 800a43c:	6a65      	ldr	r5, [r4, #36]	; 0x24
 800a43e:	68eb      	ldr	r3, [r5, #12]
 800a440:	b183      	cbz	r3, 800a464 <_Balloc+0x42>
 800a442:	6a63      	ldr	r3, [r4, #36]	; 0x24
 800a444:	68db      	ldr	r3, [r3, #12]
 800a446:	f853 0026 	ldr.w	r0, [r3, r6, lsl #2]
 800a44a:	b9b8      	cbnz	r0, 800a47c <_Balloc+0x5a>
 800a44c:	2101      	movs	r1, #1
 800a44e:	fa01 f506 	lsl.w	r5, r1, r6
 800a452:	1d6a      	adds	r2, r5, #5
 800a454:	0092      	lsls	r2, r2, #2
 800a456:	4620      	mov	r0, r4
 800a458:	f000 fbdc 	bl	800ac14 <_calloc_r>
 800a45c:	b160      	cbz	r0, 800a478 <_Balloc+0x56>
 800a45e:	e9c0 6501 	strd	r6, r5, [r0, #4]
 800a462:	e00e      	b.n	800a482 <_Balloc+0x60>
 800a464:	2221      	movs	r2, #33	; 0x21
 800a466:	2104      	movs	r1, #4
 800a468:	4620      	mov	r0, r4
 800a46a:	f000 fbd3 	bl	800ac14 <_calloc_r>
 800a46e:	6a63      	ldr	r3, [r4, #36]	; 0x24
 800a470:	60e8      	str	r0, [r5, #12]
 800a472:	68db      	ldr	r3, [r3, #12]
 800a474:	2b00      	cmp	r3, #0
 800a476:	d1e4      	bne.n	800a442 <_Balloc+0x20>
 800a478:	2000      	movs	r0, #0
 800a47a:	bd70      	pop	{r4, r5, r6, pc}
 800a47c:	6802      	ldr	r2, [r0, #0]
 800a47e:	f843 2026 	str.w	r2, [r3, r6, lsl #2]
 800a482:	2300      	movs	r3, #0
 800a484:	e9c0 3303 	strd	r3, r3, [r0, #12]
 800a488:	e7f7      	b.n	800a47a <_Balloc+0x58>

0800a48a <_Bfree>:
 800a48a:	b570      	push	{r4, r5, r6, lr}
 800a48c:	6a44      	ldr	r4, [r0, #36]	; 0x24
 800a48e:	4606      	mov	r6, r0
 800a490:	460d      	mov	r5, r1
 800a492:	b93c      	cbnz	r4, 800a4a4 <_Bfree+0x1a>
 800a494:	2010      	movs	r0, #16
 800a496:	f7fd f83d 	bl	8007514 <malloc>
 800a49a:	6270      	str	r0, [r6, #36]	; 0x24
 800a49c:	e9c0 4401 	strd	r4, r4, [r0, #4]
 800a4a0:	6004      	str	r4, [r0, #0]
 800a4a2:	60c4      	str	r4, [r0, #12]
 800a4a4:	b13d      	cbz	r5, 800a4b6 <_Bfree+0x2c>
 800a4a6:	6a73      	ldr	r3, [r6, #36]	; 0x24
 800a4a8:	686a      	ldr	r2, [r5, #4]
 800a4aa:	68db      	ldr	r3, [r3, #12]
 800a4ac:	f853 1022 	ldr.w	r1, [r3, r2, lsl #2]
 800a4b0:	6029      	str	r1, [r5, #0]
 800a4b2:	f843 5022 	str.w	r5, [r3, r2, lsl #2]
 800a4b6:	bd70      	pop	{r4, r5, r6, pc}

0800a4b8 <__multadd>:
 800a4b8:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800a4bc:	461f      	mov	r7, r3
 800a4be:	4606      	mov	r6, r0
 800a4c0:	460c      	mov	r4, r1
 800a4c2:	2300      	movs	r3, #0
 800a4c4:	690d      	ldr	r5, [r1, #16]
 800a4c6:	f101 0c14 	add.w	ip, r1, #20
 800a4ca:	f8dc 0000 	ldr.w	r0, [ip]
 800a4ce:	3301      	adds	r3, #1
 800a4d0:	b281      	uxth	r1, r0
 800a4d2:	fb02 7101 	mla	r1, r2, r1, r7
 800a4d6:	0c00      	lsrs	r0, r0, #16
 800a4d8:	0c0f      	lsrs	r7, r1, #16
 800a4da:	fb02 7000 	mla	r0, r2, r0, r7
 800a4de:	b289      	uxth	r1, r1
 800a4e0:	eb01 4100 	add.w	r1, r1, r0, lsl #16
 800a4e4:	429d      	cmp	r5, r3
 800a4e6:	ea4f 4710 	mov.w	r7, r0, lsr #16
 800a4ea:	f84c 1b04 	str.w	r1, [ip], #4
 800a4ee:	dcec      	bgt.n	800a4ca <__multadd+0x12>
 800a4f0:	b1d7      	cbz	r7, 800a528 <__multadd+0x70>
 800a4f2:	68a3      	ldr	r3, [r4, #8]
 800a4f4:	42ab      	cmp	r3, r5
 800a4f6:	dc12      	bgt.n	800a51e <__multadd+0x66>
 800a4f8:	6861      	ldr	r1, [r4, #4]
 800a4fa:	4630      	mov	r0, r6
 800a4fc:	3101      	adds	r1, #1
 800a4fe:	f7ff ff90 	bl	800a422 <_Balloc>
 800a502:	4680      	mov	r8, r0
 800a504:	6922      	ldr	r2, [r4, #16]
 800a506:	f104 010c 	add.w	r1, r4, #12
 800a50a:	3202      	adds	r2, #2
 800a50c:	0092      	lsls	r2, r2, #2
 800a50e:	300c      	adds	r0, #12
 800a510:	f7ff ff7a 	bl	800a408 <memcpy>
 800a514:	4621      	mov	r1, r4
 800a516:	4630      	mov	r0, r6
 800a518:	f7ff ffb7 	bl	800a48a <_Bfree>
 800a51c:	4644      	mov	r4, r8
 800a51e:	eb04 0385 	add.w	r3, r4, r5, lsl #2
 800a522:	3501      	adds	r5, #1
 800a524:	615f      	str	r7, [r3, #20]
 800a526:	6125      	str	r5, [r4, #16]
 800a528:	4620      	mov	r0, r4
 800a52a:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}

0800a52e <__s2b>:
 800a52e:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 800a532:	4615      	mov	r5, r2
 800a534:	2209      	movs	r2, #9
 800a536:	461f      	mov	r7, r3
 800a538:	3308      	adds	r3, #8
 800a53a:	460c      	mov	r4, r1
 800a53c:	fb93 f3f2 	sdiv	r3, r3, r2
 800a540:	4606      	mov	r6, r0
 800a542:	2201      	movs	r2, #1
 800a544:	2100      	movs	r1, #0
 800a546:	429a      	cmp	r2, r3
 800a548:	db20      	blt.n	800a58c <__s2b+0x5e>
 800a54a:	4630      	mov	r0, r6
 800a54c:	f7ff ff69 	bl	800a422 <_Balloc>
 800a550:	9b08      	ldr	r3, [sp, #32]
 800a552:	2d09      	cmp	r5, #9
 800a554:	6143      	str	r3, [r0, #20]
 800a556:	f04f 0301 	mov.w	r3, #1
 800a55a:	6103      	str	r3, [r0, #16]
 800a55c:	dd19      	ble.n	800a592 <__s2b+0x64>
 800a55e:	f104 0809 	add.w	r8, r4, #9
 800a562:	46c1      	mov	r9, r8
 800a564:	442c      	add	r4, r5
 800a566:	f819 3b01 	ldrb.w	r3, [r9], #1
 800a56a:	4601      	mov	r1, r0
 800a56c:	3b30      	subs	r3, #48	; 0x30
 800a56e:	220a      	movs	r2, #10
 800a570:	4630      	mov	r0, r6
 800a572:	f7ff ffa1 	bl	800a4b8 <__multadd>
 800a576:	45a1      	cmp	r9, r4
 800a578:	d1f5      	bne.n	800a566 <__s2b+0x38>
 800a57a:	eb08 0405 	add.w	r4, r8, r5
 800a57e:	3c08      	subs	r4, #8
 800a580:	1b2d      	subs	r5, r5, r4
 800a582:	1963      	adds	r3, r4, r5
 800a584:	42bb      	cmp	r3, r7
 800a586:	db07      	blt.n	800a598 <__s2b+0x6a>
 800a588:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800a58c:	0052      	lsls	r2, r2, #1
 800a58e:	3101      	adds	r1, #1
 800a590:	e7d9      	b.n	800a546 <__s2b+0x18>
 800a592:	340a      	adds	r4, #10
 800a594:	2509      	movs	r5, #9
 800a596:	e7f3      	b.n	800a580 <__s2b+0x52>
 800a598:	f814 3b01 	ldrb.w	r3, [r4], #1
 800a59c:	4601      	mov	r1, r0
 800a59e:	3b30      	subs	r3, #48	; 0x30
 800a5a0:	220a      	movs	r2, #10
 800a5a2:	4630      	mov	r0, r6
 800a5a4:	f7ff ff88 	bl	800a4b8 <__multadd>
 800a5a8:	e7eb      	b.n	800a582 <__s2b+0x54>

0800a5aa <__hi0bits>:
 800a5aa:	0c02      	lsrs	r2, r0, #16
 800a5ac:	0412      	lsls	r2, r2, #16
 800a5ae:	4603      	mov	r3, r0
 800a5b0:	b9b2      	cbnz	r2, 800a5e0 <__hi0bits+0x36>
 800a5b2:	0403      	lsls	r3, r0, #16
 800a5b4:	2010      	movs	r0, #16
 800a5b6:	f013 4f7f 	tst.w	r3, #4278190080	; 0xff000000
 800a5ba:	bf04      	itt	eq
 800a5bc:	021b      	lsleq	r3, r3, #8
 800a5be:	3008      	addeq	r0, #8
 800a5c0:	f013 4f70 	tst.w	r3, #4026531840	; 0xf0000000
 800a5c4:	bf04      	itt	eq
 800a5c6:	011b      	lsleq	r3, r3, #4
 800a5c8:	3004      	addeq	r0, #4
 800a5ca:	f013 4f40 	tst.w	r3, #3221225472	; 0xc0000000
 800a5ce:	bf04      	itt	eq
 800a5d0:	009b      	lsleq	r3, r3, #2
 800a5d2:	3002      	addeq	r0, #2
 800a5d4:	2b00      	cmp	r3, #0
 800a5d6:	db06      	blt.n	800a5e6 <__hi0bits+0x3c>
 800a5d8:	005b      	lsls	r3, r3, #1
 800a5da:	d503      	bpl.n	800a5e4 <__hi0bits+0x3a>
 800a5dc:	3001      	adds	r0, #1
 800a5de:	4770      	bx	lr
 800a5e0:	2000      	movs	r0, #0
 800a5e2:	e7e8      	b.n	800a5b6 <__hi0bits+0xc>
 800a5e4:	2020      	movs	r0, #32
 800a5e6:	4770      	bx	lr

0800a5e8 <__lo0bits>:
 800a5e8:	6803      	ldr	r3, [r0, #0]
 800a5ea:	4601      	mov	r1, r0
 800a5ec:	f013 0207 	ands.w	r2, r3, #7
 800a5f0:	d00b      	beq.n	800a60a <__lo0bits+0x22>
 800a5f2:	07da      	lsls	r2, r3, #31
 800a5f4:	d423      	bmi.n	800a63e <__lo0bits+0x56>
 800a5f6:	0798      	lsls	r0, r3, #30
 800a5f8:	bf49      	itett	mi
 800a5fa:	085b      	lsrmi	r3, r3, #1
 800a5fc:	089b      	lsrpl	r3, r3, #2
 800a5fe:	2001      	movmi	r0, #1
 800a600:	600b      	strmi	r3, [r1, #0]
 800a602:	bf5c      	itt	pl
 800a604:	600b      	strpl	r3, [r1, #0]
 800a606:	2002      	movpl	r0, #2
 800a608:	4770      	bx	lr
 800a60a:	b298      	uxth	r0, r3
 800a60c:	b9a8      	cbnz	r0, 800a63a <__lo0bits+0x52>
 800a60e:	2010      	movs	r0, #16
 800a610:	0c1b      	lsrs	r3, r3, #16
 800a612:	f013 0fff 	tst.w	r3, #255	; 0xff
 800a616:	bf04      	itt	eq
 800a618:	0a1b      	lsreq	r3, r3, #8
 800a61a:	3008      	addeq	r0, #8
 800a61c:	071a      	lsls	r2, r3, #28
 800a61e:	bf04      	itt	eq
 800a620:	091b      	lsreq	r3, r3, #4
 800a622:	3004      	addeq	r0, #4
 800a624:	079a      	lsls	r2, r3, #30
 800a626:	bf04      	itt	eq
 800a628:	089b      	lsreq	r3, r3, #2
 800a62a:	3002      	addeq	r0, #2
 800a62c:	07da      	lsls	r2, r3, #31
 800a62e:	d402      	bmi.n	800a636 <__lo0bits+0x4e>
 800a630:	085b      	lsrs	r3, r3, #1
 800a632:	d006      	beq.n	800a642 <__lo0bits+0x5a>
 800a634:	3001      	adds	r0, #1
 800a636:	600b      	str	r3, [r1, #0]
 800a638:	4770      	bx	lr
 800a63a:	4610      	mov	r0, r2
 800a63c:	e7e9      	b.n	800a612 <__lo0bits+0x2a>
 800a63e:	2000      	movs	r0, #0
 800a640:	4770      	bx	lr
 800a642:	2020      	movs	r0, #32
 800a644:	4770      	bx	lr

0800a646 <__i2b>:
 800a646:	b510      	push	{r4, lr}
 800a648:	460c      	mov	r4, r1
 800a64a:	2101      	movs	r1, #1
 800a64c:	f7ff fee9 	bl	800a422 <_Balloc>
 800a650:	2201      	movs	r2, #1
 800a652:	6144      	str	r4, [r0, #20]
 800a654:	6102      	str	r2, [r0, #16]
 800a656:	bd10      	pop	{r4, pc}

0800a658 <__multiply>:
 800a658:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800a65c:	4614      	mov	r4, r2
 800a65e:	690a      	ldr	r2, [r1, #16]
 800a660:	6923      	ldr	r3, [r4, #16]
 800a662:	4688      	mov	r8, r1
 800a664:	429a      	cmp	r2, r3
 800a666:	bfbe      	ittt	lt
 800a668:	460b      	movlt	r3, r1
 800a66a:	46a0      	movlt	r8, r4
 800a66c:	461c      	movlt	r4, r3
 800a66e:	f8d8 7010 	ldr.w	r7, [r8, #16]
 800a672:	f8d4 9010 	ldr.w	r9, [r4, #16]
 800a676:	f8d8 3008 	ldr.w	r3, [r8, #8]
 800a67a:	f8d8 1004 	ldr.w	r1, [r8, #4]
 800a67e:	eb07 0609 	add.w	r6, r7, r9
 800a682:	42b3      	cmp	r3, r6
 800a684:	bfb8      	it	lt
 800a686:	3101      	addlt	r1, #1
 800a688:	f7ff fecb 	bl	800a422 <_Balloc>
 800a68c:	f100 0514 	add.w	r5, r0, #20
 800a690:	462b      	mov	r3, r5
 800a692:	2200      	movs	r2, #0
 800a694:	eb05 0e86 	add.w	lr, r5, r6, lsl #2
 800a698:	4573      	cmp	r3, lr
 800a69a:	d316      	bcc.n	800a6ca <__multiply+0x72>
 800a69c:	f104 0214 	add.w	r2, r4, #20
 800a6a0:	f108 0114 	add.w	r1, r8, #20
 800a6a4:	eb02 0389 	add.w	r3, r2, r9, lsl #2
 800a6a8:	eb01 0787 	add.w	r7, r1, r7, lsl #2
 800a6ac:	9300      	str	r3, [sp, #0]
 800a6ae:	9b00      	ldr	r3, [sp, #0]
 800a6b0:	9201      	str	r2, [sp, #4]
 800a6b2:	4293      	cmp	r3, r2
 800a6b4:	d80c      	bhi.n	800a6d0 <__multiply+0x78>
 800a6b6:	2e00      	cmp	r6, #0
 800a6b8:	dd03      	ble.n	800a6c2 <__multiply+0x6a>
 800a6ba:	f85e 3d04 	ldr.w	r3, [lr, #-4]!
 800a6be:	2b00      	cmp	r3, #0
 800a6c0:	d05d      	beq.n	800a77e <__multiply+0x126>
 800a6c2:	6106      	str	r6, [r0, #16]
 800a6c4:	b003      	add	sp, #12
 800a6c6:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800a6ca:	f843 2b04 	str.w	r2, [r3], #4
 800a6ce:	e7e3      	b.n	800a698 <__multiply+0x40>
 800a6d0:	f8b2 b000 	ldrh.w	fp, [r2]
 800a6d4:	f1bb 0f00 	cmp.w	fp, #0
 800a6d8:	d023      	beq.n	800a722 <__multiply+0xca>
 800a6da:	4689      	mov	r9, r1
 800a6dc:	46ac      	mov	ip, r5
 800a6de:	f04f 0800 	mov.w	r8, #0
 800a6e2:	f859 4b04 	ldr.w	r4, [r9], #4
 800a6e6:	f8dc a000 	ldr.w	sl, [ip]
 800a6ea:	b2a3      	uxth	r3, r4
 800a6ec:	fa1f fa8a 	uxth.w	sl, sl
 800a6f0:	fb0b a303 	mla	r3, fp, r3, sl
 800a6f4:	ea4f 4a14 	mov.w	sl, r4, lsr #16
 800a6f8:	f8dc 4000 	ldr.w	r4, [ip]
 800a6fc:	4443      	add	r3, r8
 800a6fe:	ea4f 4814 	mov.w	r8, r4, lsr #16
 800a702:	fb0b 840a 	mla	r4, fp, sl, r8
 800a706:	46e2      	mov	sl, ip
 800a708:	eb04 4413 	add.w	r4, r4, r3, lsr #16
 800a70c:	b29b      	uxth	r3, r3
 800a70e:	ea43 4304 	orr.w	r3, r3, r4, lsl #16
 800a712:	454f      	cmp	r7, r9
 800a714:	ea4f 4814 	mov.w	r8, r4, lsr #16
 800a718:	f84a 3b04 	str.w	r3, [sl], #4
 800a71c:	d82b      	bhi.n	800a776 <__multiply+0x11e>
 800a71e:	f8cc 8004 	str.w	r8, [ip, #4]
 800a722:	9b01      	ldr	r3, [sp, #4]
 800a724:	3204      	adds	r2, #4
 800a726:	f8b3 a002 	ldrh.w	sl, [r3, #2]
 800a72a:	f1ba 0f00 	cmp.w	sl, #0
 800a72e:	d020      	beq.n	800a772 <__multiply+0x11a>
 800a730:	4689      	mov	r9, r1
 800a732:	46a8      	mov	r8, r5
 800a734:	f04f 0b00 	mov.w	fp, #0
 800a738:	682b      	ldr	r3, [r5, #0]
 800a73a:	f8b9 c000 	ldrh.w	ip, [r9]
 800a73e:	f8b8 4002 	ldrh.w	r4, [r8, #2]
 800a742:	b29b      	uxth	r3, r3
 800a744:	fb0a 440c 	mla	r4, sl, ip, r4
 800a748:	46c4      	mov	ip, r8
 800a74a:	445c      	add	r4, fp
 800a74c:	ea43 4304 	orr.w	r3, r3, r4, lsl #16
 800a750:	f84c 3b04 	str.w	r3, [ip], #4
 800a754:	f859 3b04 	ldr.w	r3, [r9], #4
 800a758:	f8b8 b004 	ldrh.w	fp, [r8, #4]
 800a75c:	0c1b      	lsrs	r3, r3, #16
 800a75e:	fb0a b303 	mla	r3, sl, r3, fp
 800a762:	454f      	cmp	r7, r9
 800a764:	eb03 4314 	add.w	r3, r3, r4, lsr #16
 800a768:	ea4f 4b13 	mov.w	fp, r3, lsr #16
 800a76c:	d805      	bhi.n	800a77a <__multiply+0x122>
 800a76e:	f8c8 3004 	str.w	r3, [r8, #4]
 800a772:	3504      	adds	r5, #4
 800a774:	e79b      	b.n	800a6ae <__multiply+0x56>
 800a776:	46d4      	mov	ip, sl
 800a778:	e7b3      	b.n	800a6e2 <__multiply+0x8a>
 800a77a:	46e0      	mov	r8, ip
 800a77c:	e7dd      	b.n	800a73a <__multiply+0xe2>
 800a77e:	3e01      	subs	r6, #1
 800a780:	e799      	b.n	800a6b6 <__multiply+0x5e>
	...

0800a784 <__pow5mult>:
 800a784:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 800a788:	4615      	mov	r5, r2
 800a78a:	f012 0203 	ands.w	r2, r2, #3
 800a78e:	4606      	mov	r6, r0
 800a790:	460f      	mov	r7, r1
 800a792:	d007      	beq.n	800a7a4 <__pow5mult+0x20>
 800a794:	4c21      	ldr	r4, [pc, #132]	; (800a81c <__pow5mult+0x98>)
 800a796:	3a01      	subs	r2, #1
 800a798:	2300      	movs	r3, #0
 800a79a:	f854 2022 	ldr.w	r2, [r4, r2, lsl #2]
 800a79e:	f7ff fe8b 	bl	800a4b8 <__multadd>
 800a7a2:	4607      	mov	r7, r0
 800a7a4:	10ad      	asrs	r5, r5, #2
 800a7a6:	d035      	beq.n	800a814 <__pow5mult+0x90>
 800a7a8:	6a74      	ldr	r4, [r6, #36]	; 0x24
 800a7aa:	b93c      	cbnz	r4, 800a7bc <__pow5mult+0x38>
 800a7ac:	2010      	movs	r0, #16
 800a7ae:	f7fc feb1 	bl	8007514 <malloc>
 800a7b2:	6270      	str	r0, [r6, #36]	; 0x24
 800a7b4:	e9c0 4401 	strd	r4, r4, [r0, #4]
 800a7b8:	6004      	str	r4, [r0, #0]
 800a7ba:	60c4      	str	r4, [r0, #12]
 800a7bc:	f8d6 8024 	ldr.w	r8, [r6, #36]	; 0x24
 800a7c0:	f8d8 4008 	ldr.w	r4, [r8, #8]
 800a7c4:	b94c      	cbnz	r4, 800a7da <__pow5mult+0x56>
 800a7c6:	f240 2171 	movw	r1, #625	; 0x271
 800a7ca:	4630      	mov	r0, r6
 800a7cc:	f7ff ff3b 	bl	800a646 <__i2b>
 800a7d0:	2300      	movs	r3, #0
 800a7d2:	4604      	mov	r4, r0
 800a7d4:	f8c8 0008 	str.w	r0, [r8, #8]
 800a7d8:	6003      	str	r3, [r0, #0]
 800a7da:	f04f 0800 	mov.w	r8, #0
 800a7de:	07eb      	lsls	r3, r5, #31
 800a7e0:	d50a      	bpl.n	800a7f8 <__pow5mult+0x74>
 800a7e2:	4639      	mov	r1, r7
 800a7e4:	4622      	mov	r2, r4
 800a7e6:	4630      	mov	r0, r6
 800a7e8:	f7ff ff36 	bl	800a658 <__multiply>
 800a7ec:	4681      	mov	r9, r0
 800a7ee:	4639      	mov	r1, r7
 800a7f0:	4630      	mov	r0, r6
 800a7f2:	f7ff fe4a 	bl	800a48a <_Bfree>
 800a7f6:	464f      	mov	r7, r9
 800a7f8:	106d      	asrs	r5, r5, #1
 800a7fa:	d00b      	beq.n	800a814 <__pow5mult+0x90>
 800a7fc:	6820      	ldr	r0, [r4, #0]
 800a7fe:	b938      	cbnz	r0, 800a810 <__pow5mult+0x8c>
 800a800:	4622      	mov	r2, r4
 800a802:	4621      	mov	r1, r4
 800a804:	4630      	mov	r0, r6
 800a806:	f7ff ff27 	bl	800a658 <__multiply>
 800a80a:	6020      	str	r0, [r4, #0]
 800a80c:	f8c0 8000 	str.w	r8, [r0]
 800a810:	4604      	mov	r4, r0
 800a812:	e7e4      	b.n	800a7de <__pow5mult+0x5a>
 800a814:	4638      	mov	r0, r7
 800a816:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800a81a:	bf00      	nop
 800a81c:	0800bb50 	.word	0x0800bb50

0800a820 <__lshift>:
 800a820:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800a824:	460c      	mov	r4, r1
 800a826:	4607      	mov	r7, r0
 800a828:	4616      	mov	r6, r2
 800a82a:	6923      	ldr	r3, [r4, #16]
 800a82c:	ea4f 1a62 	mov.w	sl, r2, asr #5
 800a830:	eb0a 0903 	add.w	r9, sl, r3
 800a834:	6849      	ldr	r1, [r1, #4]
 800a836:	68a3      	ldr	r3, [r4, #8]
 800a838:	f109 0501 	add.w	r5, r9, #1
 800a83c:	42ab      	cmp	r3, r5
 800a83e:	db32      	blt.n	800a8a6 <__lshift+0x86>
 800a840:	4638      	mov	r0, r7
 800a842:	f7ff fdee 	bl	800a422 <_Balloc>
 800a846:	2300      	movs	r3, #0
 800a848:	4680      	mov	r8, r0
 800a84a:	461a      	mov	r2, r3
 800a84c:	f100 0114 	add.w	r1, r0, #20
 800a850:	4553      	cmp	r3, sl
 800a852:	db2b      	blt.n	800a8ac <__lshift+0x8c>
 800a854:	6920      	ldr	r0, [r4, #16]
 800a856:	ea2a 7aea 	bic.w	sl, sl, sl, asr #31
 800a85a:	f104 0314 	add.w	r3, r4, #20
 800a85e:	f016 021f 	ands.w	r2, r6, #31
 800a862:	eb01 018a 	add.w	r1, r1, sl, lsl #2
 800a866:	eb03 0c80 	add.w	ip, r3, r0, lsl #2
 800a86a:	d025      	beq.n	800a8b8 <__lshift+0x98>
 800a86c:	2000      	movs	r0, #0
 800a86e:	f1c2 0e20 	rsb	lr, r2, #32
 800a872:	468a      	mov	sl, r1
 800a874:	681e      	ldr	r6, [r3, #0]
 800a876:	4096      	lsls	r6, r2
 800a878:	4330      	orrs	r0, r6
 800a87a:	f84a 0b04 	str.w	r0, [sl], #4
 800a87e:	f853 0b04 	ldr.w	r0, [r3], #4
 800a882:	459c      	cmp	ip, r3
 800a884:	fa20 f00e 	lsr.w	r0, r0, lr
 800a888:	d814      	bhi.n	800a8b4 <__lshift+0x94>
 800a88a:	6048      	str	r0, [r1, #4]
 800a88c:	b108      	cbz	r0, 800a892 <__lshift+0x72>
 800a88e:	f109 0502 	add.w	r5, r9, #2
 800a892:	3d01      	subs	r5, #1
 800a894:	4638      	mov	r0, r7
 800a896:	f8c8 5010 	str.w	r5, [r8, #16]
 800a89a:	4621      	mov	r1, r4
 800a89c:	f7ff fdf5 	bl	800a48a <_Bfree>
 800a8a0:	4640      	mov	r0, r8
 800a8a2:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800a8a6:	3101      	adds	r1, #1
 800a8a8:	005b      	lsls	r3, r3, #1
 800a8aa:	e7c7      	b.n	800a83c <__lshift+0x1c>
 800a8ac:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
 800a8b0:	3301      	adds	r3, #1
 800a8b2:	e7cd      	b.n	800a850 <__lshift+0x30>
 800a8b4:	4651      	mov	r1, sl
 800a8b6:	e7dc      	b.n	800a872 <__lshift+0x52>
 800a8b8:	3904      	subs	r1, #4
 800a8ba:	f853 2b04 	ldr.w	r2, [r3], #4
 800a8be:	459c      	cmp	ip, r3
 800a8c0:	f841 2f04 	str.w	r2, [r1, #4]!
 800a8c4:	d8f9      	bhi.n	800a8ba <__lshift+0x9a>
 800a8c6:	e7e4      	b.n	800a892 <__lshift+0x72>

0800a8c8 <__mcmp>:
 800a8c8:	6903      	ldr	r3, [r0, #16]
 800a8ca:	690a      	ldr	r2, [r1, #16]
 800a8cc:	b530      	push	{r4, r5, lr}
 800a8ce:	1a9b      	subs	r3, r3, r2
 800a8d0:	d10c      	bne.n	800a8ec <__mcmp+0x24>
 800a8d2:	0092      	lsls	r2, r2, #2
 800a8d4:	3014      	adds	r0, #20
 800a8d6:	3114      	adds	r1, #20
 800a8d8:	1884      	adds	r4, r0, r2
 800a8da:	4411      	add	r1, r2
 800a8dc:	f854 5d04 	ldr.w	r5, [r4, #-4]!
 800a8e0:	f851 2d04 	ldr.w	r2, [r1, #-4]!
 800a8e4:	4295      	cmp	r5, r2
 800a8e6:	d003      	beq.n	800a8f0 <__mcmp+0x28>
 800a8e8:	d305      	bcc.n	800a8f6 <__mcmp+0x2e>
 800a8ea:	2301      	movs	r3, #1
 800a8ec:	4618      	mov	r0, r3
 800a8ee:	bd30      	pop	{r4, r5, pc}
 800a8f0:	42a0      	cmp	r0, r4
 800a8f2:	d3f3      	bcc.n	800a8dc <__mcmp+0x14>
 800a8f4:	e7fa      	b.n	800a8ec <__mcmp+0x24>
 800a8f6:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 800a8fa:	e7f7      	b.n	800a8ec <__mcmp+0x24>

0800a8fc <__mdiff>:
 800a8fc:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800a900:	460d      	mov	r5, r1
 800a902:	4607      	mov	r7, r0
 800a904:	4611      	mov	r1, r2
 800a906:	4628      	mov	r0, r5
 800a908:	4614      	mov	r4, r2
 800a90a:	f7ff ffdd 	bl	800a8c8 <__mcmp>
 800a90e:	1e06      	subs	r6, r0, #0
 800a910:	d108      	bne.n	800a924 <__mdiff+0x28>
 800a912:	4631      	mov	r1, r6
 800a914:	4638      	mov	r0, r7
 800a916:	f7ff fd84 	bl	800a422 <_Balloc>
 800a91a:	2301      	movs	r3, #1
 800a91c:	e9c0 3604 	strd	r3, r6, [r0, #16]
 800a920:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800a924:	bfa4      	itt	ge
 800a926:	4623      	movge	r3, r4
 800a928:	462c      	movge	r4, r5
 800a92a:	4638      	mov	r0, r7
 800a92c:	6861      	ldr	r1, [r4, #4]
 800a92e:	bfa6      	itte	ge
 800a930:	461d      	movge	r5, r3
 800a932:	2600      	movge	r6, #0
 800a934:	2601      	movlt	r6, #1
 800a936:	f7ff fd74 	bl	800a422 <_Balloc>
 800a93a:	f04f 0e00 	mov.w	lr, #0
 800a93e:	60c6      	str	r6, [r0, #12]
 800a940:	692b      	ldr	r3, [r5, #16]
 800a942:	6926      	ldr	r6, [r4, #16]
 800a944:	f104 0214 	add.w	r2, r4, #20
 800a948:	f105 0914 	add.w	r9, r5, #20
 800a94c:	eb02 0786 	add.w	r7, r2, r6, lsl #2
 800a950:	eb09 0883 	add.w	r8, r9, r3, lsl #2
 800a954:	f100 0114 	add.w	r1, r0, #20
 800a958:	f852 ab04 	ldr.w	sl, [r2], #4
 800a95c:	f859 5b04 	ldr.w	r5, [r9], #4
 800a960:	fa1f f38a 	uxth.w	r3, sl
 800a964:	4473      	add	r3, lr
 800a966:	b2ac      	uxth	r4, r5
 800a968:	1b1b      	subs	r3, r3, r4
 800a96a:	0c2c      	lsrs	r4, r5, #16
 800a96c:	ebc4 441a 	rsb	r4, r4, sl, lsr #16
 800a970:	eb04 4423 	add.w	r4, r4, r3, asr #16
 800a974:	b29b      	uxth	r3, r3
 800a976:	ea4f 4e24 	mov.w	lr, r4, asr #16
 800a97a:	45c8      	cmp	r8, r9
 800a97c:	ea43 4404 	orr.w	r4, r3, r4, lsl #16
 800a980:	4694      	mov	ip, r2
 800a982:	f841 4b04 	str.w	r4, [r1], #4
 800a986:	d8e7      	bhi.n	800a958 <__mdiff+0x5c>
 800a988:	45bc      	cmp	ip, r7
 800a98a:	d304      	bcc.n	800a996 <__mdiff+0x9a>
 800a98c:	f851 3d04 	ldr.w	r3, [r1, #-4]!
 800a990:	b183      	cbz	r3, 800a9b4 <__mdiff+0xb8>
 800a992:	6106      	str	r6, [r0, #16]
 800a994:	e7c4      	b.n	800a920 <__mdiff+0x24>
 800a996:	f85c 4b04 	ldr.w	r4, [ip], #4
 800a99a:	b2a2      	uxth	r2, r4
 800a99c:	4472      	add	r2, lr
 800a99e:	1413      	asrs	r3, r2, #16
 800a9a0:	eb03 4314 	add.w	r3, r3, r4, lsr #16
 800a9a4:	b292      	uxth	r2, r2
 800a9a6:	ea42 4203 	orr.w	r2, r2, r3, lsl #16
 800a9aa:	ea4f 4e23 	mov.w	lr, r3, asr #16
 800a9ae:	f841 2b04 	str.w	r2, [r1], #4
 800a9b2:	e7e9      	b.n	800a988 <__mdiff+0x8c>
 800a9b4:	3e01      	subs	r6, #1
 800a9b6:	e7e9      	b.n	800a98c <__mdiff+0x90>

0800a9b8 <__ulp>:
 800a9b8:	4b10      	ldr	r3, [pc, #64]	; (800a9fc <__ulp+0x44>)
 800a9ba:	400b      	ands	r3, r1
 800a9bc:	f1a3 7350 	sub.w	r3, r3, #54525952	; 0x3400000
 800a9c0:	2b00      	cmp	r3, #0
 800a9c2:	dd02      	ble.n	800a9ca <__ulp+0x12>
 800a9c4:	2000      	movs	r0, #0
 800a9c6:	4619      	mov	r1, r3
 800a9c8:	4770      	bx	lr
 800a9ca:	425b      	negs	r3, r3
 800a9cc:	151b      	asrs	r3, r3, #20
 800a9ce:	2b13      	cmp	r3, #19
 800a9d0:	f04f 0000 	mov.w	r0, #0
 800a9d4:	f04f 0100 	mov.w	r1, #0
 800a9d8:	dc04      	bgt.n	800a9e4 <__ulp+0x2c>
 800a9da:	f44f 2200 	mov.w	r2, #524288	; 0x80000
 800a9de:	fa42 f103 	asr.w	r1, r2, r3
 800a9e2:	4770      	bx	lr
 800a9e4:	2201      	movs	r2, #1
 800a9e6:	3b14      	subs	r3, #20
 800a9e8:	2b1e      	cmp	r3, #30
 800a9ea:	bfce      	itee	gt
 800a9ec:	4613      	movgt	r3, r2
 800a9ee:	f1c3 031f 	rsble	r3, r3, #31
 800a9f2:	fa02 f303 	lslle.w	r3, r2, r3
 800a9f6:	4618      	mov	r0, r3
 800a9f8:	4770      	bx	lr
 800a9fa:	bf00      	nop
 800a9fc:	7ff00000 	.word	0x7ff00000

0800aa00 <__b2d>:
 800aa00:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 800aa04:	6907      	ldr	r7, [r0, #16]
 800aa06:	f100 0914 	add.w	r9, r0, #20
 800aa0a:	eb09 0787 	add.w	r7, r9, r7, lsl #2
 800aa0e:	f857 6c04 	ldr.w	r6, [r7, #-4]
 800aa12:	f1a7 0804 	sub.w	r8, r7, #4
 800aa16:	4630      	mov	r0, r6
 800aa18:	f7ff fdc7 	bl	800a5aa <__hi0bits>
 800aa1c:	f1c0 0320 	rsb	r3, r0, #32
 800aa20:	280a      	cmp	r0, #10
 800aa22:	600b      	str	r3, [r1, #0]
 800aa24:	491e      	ldr	r1, [pc, #120]	; (800aaa0 <__b2d+0xa0>)
 800aa26:	dc17      	bgt.n	800aa58 <__b2d+0x58>
 800aa28:	45c1      	cmp	r9, r8
 800aa2a:	bf28      	it	cs
 800aa2c:	2200      	movcs	r2, #0
 800aa2e:	f1c0 0c0b 	rsb	ip, r0, #11
 800aa32:	fa26 f30c 	lsr.w	r3, r6, ip
 800aa36:	bf38      	it	cc
 800aa38:	f857 2c08 	ldrcc.w	r2, [r7, #-8]
 800aa3c:	ea43 0501 	orr.w	r5, r3, r1
 800aa40:	f100 0315 	add.w	r3, r0, #21
 800aa44:	fa06 f303 	lsl.w	r3, r6, r3
 800aa48:	fa22 f20c 	lsr.w	r2, r2, ip
 800aa4c:	ea43 0402 	orr.w	r4, r3, r2
 800aa50:	4620      	mov	r0, r4
 800aa52:	4629      	mov	r1, r5
 800aa54:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800aa58:	45c1      	cmp	r9, r8
 800aa5a:	bf3a      	itte	cc
 800aa5c:	f1a7 0808 	subcc.w	r8, r7, #8
 800aa60:	f857 2c08 	ldrcc.w	r2, [r7, #-8]
 800aa64:	2200      	movcs	r2, #0
 800aa66:	f1b0 030b 	subs.w	r3, r0, #11
 800aa6a:	d015      	beq.n	800aa98 <__b2d+0x98>
 800aa6c:	409e      	lsls	r6, r3
 800aa6e:	f1c3 0720 	rsb	r7, r3, #32
 800aa72:	f046 567f 	orr.w	r6, r6, #1069547520	; 0x3fc00000
 800aa76:	fa22 f107 	lsr.w	r1, r2, r7
 800aa7a:	45c8      	cmp	r8, r9
 800aa7c:	f446 1640 	orr.w	r6, r6, #3145728	; 0x300000
 800aa80:	ea46 0501 	orr.w	r5, r6, r1
 800aa84:	bf94      	ite	ls
 800aa86:	2100      	movls	r1, #0
 800aa88:	f858 1c04 	ldrhi.w	r1, [r8, #-4]
 800aa8c:	fa02 f003 	lsl.w	r0, r2, r3
 800aa90:	40f9      	lsrs	r1, r7
 800aa92:	ea40 0401 	orr.w	r4, r0, r1
 800aa96:	e7db      	b.n	800aa50 <__b2d+0x50>
 800aa98:	ea46 0501 	orr.w	r5, r6, r1
 800aa9c:	4614      	mov	r4, r2
 800aa9e:	e7d7      	b.n	800aa50 <__b2d+0x50>
 800aaa0:	3ff00000 	.word	0x3ff00000

0800aaa4 <__d2b>:
 800aaa4:	e92d 41f3 	stmdb	sp!, {r0, r1, r4, r5, r6, r7, r8, lr}
 800aaa8:	461c      	mov	r4, r3
 800aaaa:	e9dd 6508 	ldrd	r6, r5, [sp, #32]
 800aaae:	2101      	movs	r1, #1
 800aab0:	4690      	mov	r8, r2
 800aab2:	f7ff fcb6 	bl	800a422 <_Balloc>
 800aab6:	f3c4 0213 	ubfx	r2, r4, #0, #20
 800aaba:	f3c4 540a 	ubfx	r4, r4, #20, #11
 800aabe:	4607      	mov	r7, r0
 800aac0:	bb34      	cbnz	r4, 800ab10 <__d2b+0x6c>
 800aac2:	9201      	str	r2, [sp, #4]
 800aac4:	f1b8 0200 	subs.w	r2, r8, #0
 800aac8:	d027      	beq.n	800ab1a <__d2b+0x76>
 800aaca:	a802      	add	r0, sp, #8
 800aacc:	f840 2d08 	str.w	r2, [r0, #-8]!
 800aad0:	f7ff fd8a 	bl	800a5e8 <__lo0bits>
 800aad4:	9900      	ldr	r1, [sp, #0]
 800aad6:	b1f0      	cbz	r0, 800ab16 <__d2b+0x72>
 800aad8:	9a01      	ldr	r2, [sp, #4]
 800aada:	f1c0 0320 	rsb	r3, r0, #32
 800aade:	fa02 f303 	lsl.w	r3, r2, r3
 800aae2:	430b      	orrs	r3, r1
 800aae4:	40c2      	lsrs	r2, r0
 800aae6:	617b      	str	r3, [r7, #20]
 800aae8:	9201      	str	r2, [sp, #4]
 800aaea:	9b01      	ldr	r3, [sp, #4]
 800aaec:	2b00      	cmp	r3, #0
 800aaee:	bf14      	ite	ne
 800aaf0:	2102      	movne	r1, #2
 800aaf2:	2101      	moveq	r1, #1
 800aaf4:	61bb      	str	r3, [r7, #24]
 800aaf6:	6139      	str	r1, [r7, #16]
 800aaf8:	b1c4      	cbz	r4, 800ab2c <__d2b+0x88>
 800aafa:	f2a4 4433 	subw	r4, r4, #1075	; 0x433
 800aafe:	4404      	add	r4, r0
 800ab00:	6034      	str	r4, [r6, #0]
 800ab02:	f1c0 0035 	rsb	r0, r0, #53	; 0x35
 800ab06:	6028      	str	r0, [r5, #0]
 800ab08:	4638      	mov	r0, r7
 800ab0a:	b002      	add	sp, #8
 800ab0c:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800ab10:	f442 1280 	orr.w	r2, r2, #1048576	; 0x100000
 800ab14:	e7d5      	b.n	800aac2 <__d2b+0x1e>
 800ab16:	6179      	str	r1, [r7, #20]
 800ab18:	e7e7      	b.n	800aaea <__d2b+0x46>
 800ab1a:	a801      	add	r0, sp, #4
 800ab1c:	f7ff fd64 	bl	800a5e8 <__lo0bits>
 800ab20:	2101      	movs	r1, #1
 800ab22:	9b01      	ldr	r3, [sp, #4]
 800ab24:	6139      	str	r1, [r7, #16]
 800ab26:	617b      	str	r3, [r7, #20]
 800ab28:	3020      	adds	r0, #32
 800ab2a:	e7e5      	b.n	800aaf8 <__d2b+0x54>
 800ab2c:	f2a0 4032 	subw	r0, r0, #1074	; 0x432
 800ab30:	eb07 0381 	add.w	r3, r7, r1, lsl #2
 800ab34:	6030      	str	r0, [r6, #0]
 800ab36:	6918      	ldr	r0, [r3, #16]
 800ab38:	f7ff fd37 	bl	800a5aa <__hi0bits>
 800ab3c:	ebc0 1041 	rsb	r0, r0, r1, lsl #5
 800ab40:	e7e1      	b.n	800ab06 <__d2b+0x62>

0800ab42 <__ratio>:
 800ab42:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800ab46:	4688      	mov	r8, r1
 800ab48:	4669      	mov	r1, sp
 800ab4a:	4681      	mov	r9, r0
 800ab4c:	f7ff ff58 	bl	800aa00 <__b2d>
 800ab50:	468b      	mov	fp, r1
 800ab52:	4606      	mov	r6, r0
 800ab54:	460f      	mov	r7, r1
 800ab56:	4640      	mov	r0, r8
 800ab58:	a901      	add	r1, sp, #4
 800ab5a:	f7ff ff51 	bl	800aa00 <__b2d>
 800ab5e:	f8d9 3010 	ldr.w	r3, [r9, #16]
 800ab62:	f8d8 2010 	ldr.w	r2, [r8, #16]
 800ab66:	460d      	mov	r5, r1
 800ab68:	eba3 0c02 	sub.w	ip, r3, r2
 800ab6c:	e9dd 3200 	ldrd	r3, r2, [sp]
 800ab70:	1a9b      	subs	r3, r3, r2
 800ab72:	eb03 134c 	add.w	r3, r3, ip, lsl #5
 800ab76:	2b00      	cmp	r3, #0
 800ab78:	bfd5      	itete	le
 800ab7a:	460a      	movle	r2, r1
 800ab7c:	463a      	movgt	r2, r7
 800ab7e:	ebc3 3303 	rsble	r3, r3, r3, lsl #12
 800ab82:	eb02 5b03 	addgt.w	fp, r2, r3, lsl #20
 800ab86:	bfd8      	it	le
 800ab88:	eb02 5503 	addle.w	r5, r2, r3, lsl #20
 800ab8c:	462b      	mov	r3, r5
 800ab8e:	4602      	mov	r2, r0
 800ab90:	4659      	mov	r1, fp
 800ab92:	4630      	mov	r0, r6
 800ab94:	f7f5 fdca 	bl	800072c <__aeabi_ddiv>
 800ab98:	b003      	add	sp, #12
 800ab9a:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}

0800ab9e <__copybits>:
 800ab9e:	3901      	subs	r1, #1
 800aba0:	b510      	push	{r4, lr}
 800aba2:	1149      	asrs	r1, r1, #5
 800aba4:	6914      	ldr	r4, [r2, #16]
 800aba6:	3101      	adds	r1, #1
 800aba8:	f102 0314 	add.w	r3, r2, #20
 800abac:	eb00 0181 	add.w	r1, r0, r1, lsl #2
 800abb0:	eb03 0484 	add.w	r4, r3, r4, lsl #2
 800abb4:	42a3      	cmp	r3, r4
 800abb6:	4602      	mov	r2, r0
 800abb8:	d303      	bcc.n	800abc2 <__copybits+0x24>
 800abba:	2300      	movs	r3, #0
 800abbc:	428a      	cmp	r2, r1
 800abbe:	d305      	bcc.n	800abcc <__copybits+0x2e>
 800abc0:	bd10      	pop	{r4, pc}
 800abc2:	f853 2b04 	ldr.w	r2, [r3], #4
 800abc6:	f840 2b04 	str.w	r2, [r0], #4
 800abca:	e7f3      	b.n	800abb4 <__copybits+0x16>
 800abcc:	f842 3b04 	str.w	r3, [r2], #4
 800abd0:	e7f4      	b.n	800abbc <__copybits+0x1e>

0800abd2 <__any_on>:
 800abd2:	f100 0214 	add.w	r2, r0, #20
 800abd6:	6900      	ldr	r0, [r0, #16]
 800abd8:	114b      	asrs	r3, r1, #5
 800abda:	4298      	cmp	r0, r3
 800abdc:	b510      	push	{r4, lr}
 800abde:	db11      	blt.n	800ac04 <__any_on+0x32>
 800abe0:	dd0a      	ble.n	800abf8 <__any_on+0x26>
 800abe2:	f011 011f 	ands.w	r1, r1, #31
 800abe6:	d007      	beq.n	800abf8 <__any_on+0x26>
 800abe8:	f852 4023 	ldr.w	r4, [r2, r3, lsl #2]
 800abec:	fa24 f001 	lsr.w	r0, r4, r1
 800abf0:	fa00 f101 	lsl.w	r1, r0, r1
 800abf4:	428c      	cmp	r4, r1
 800abf6:	d10b      	bne.n	800ac10 <__any_on+0x3e>
 800abf8:	eb02 0383 	add.w	r3, r2, r3, lsl #2
 800abfc:	4293      	cmp	r3, r2
 800abfe:	d803      	bhi.n	800ac08 <__any_on+0x36>
 800ac00:	2000      	movs	r0, #0
 800ac02:	bd10      	pop	{r4, pc}
 800ac04:	4603      	mov	r3, r0
 800ac06:	e7f7      	b.n	800abf8 <__any_on+0x26>
 800ac08:	f853 1d04 	ldr.w	r1, [r3, #-4]!
 800ac0c:	2900      	cmp	r1, #0
 800ac0e:	d0f5      	beq.n	800abfc <__any_on+0x2a>
 800ac10:	2001      	movs	r0, #1
 800ac12:	e7f6      	b.n	800ac02 <__any_on+0x30>

0800ac14 <_calloc_r>:
 800ac14:	b538      	push	{r3, r4, r5, lr}
 800ac16:	fb02 f401 	mul.w	r4, r2, r1
 800ac1a:	4621      	mov	r1, r4
 800ac1c:	f7fc fcd6 	bl	80075cc <_malloc_r>
 800ac20:	4605      	mov	r5, r0
 800ac22:	b118      	cbz	r0, 800ac2c <_calloc_r+0x18>
 800ac24:	4622      	mov	r2, r4
 800ac26:	2100      	movs	r1, #0
 800ac28:	f7fc fc7c 	bl	8007524 <memset>
 800ac2c:	4628      	mov	r0, r5
 800ac2e:	bd38      	pop	{r3, r4, r5, pc}

0800ac30 <__ssputs_r>:
 800ac30:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800ac34:	688e      	ldr	r6, [r1, #8]
 800ac36:	4682      	mov	sl, r0
 800ac38:	429e      	cmp	r6, r3
 800ac3a:	460c      	mov	r4, r1
 800ac3c:	4690      	mov	r8, r2
 800ac3e:	4699      	mov	r9, r3
 800ac40:	d837      	bhi.n	800acb2 <__ssputs_r+0x82>
 800ac42:	898a      	ldrh	r2, [r1, #12]
 800ac44:	f412 6f90 	tst.w	r2, #1152	; 0x480
 800ac48:	d031      	beq.n	800acae <__ssputs_r+0x7e>
 800ac4a:	2302      	movs	r3, #2
 800ac4c:	6825      	ldr	r5, [r4, #0]
 800ac4e:	6909      	ldr	r1, [r1, #16]
 800ac50:	1a6f      	subs	r7, r5, r1
 800ac52:	6965      	ldr	r5, [r4, #20]
 800ac54:	eb05 0545 	add.w	r5, r5, r5, lsl #1
 800ac58:	fb95 f5f3 	sdiv	r5, r5, r3
 800ac5c:	f109 0301 	add.w	r3, r9, #1
 800ac60:	443b      	add	r3, r7
 800ac62:	429d      	cmp	r5, r3
 800ac64:	bf38      	it	cc
 800ac66:	461d      	movcc	r5, r3
 800ac68:	0553      	lsls	r3, r2, #21
 800ac6a:	d530      	bpl.n	800acce <__ssputs_r+0x9e>
 800ac6c:	4629      	mov	r1, r5
 800ac6e:	f7fc fcad 	bl	80075cc <_malloc_r>
 800ac72:	4606      	mov	r6, r0
 800ac74:	b950      	cbnz	r0, 800ac8c <__ssputs_r+0x5c>
 800ac76:	230c      	movs	r3, #12
 800ac78:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 800ac7c:	f8ca 3000 	str.w	r3, [sl]
 800ac80:	89a3      	ldrh	r3, [r4, #12]
 800ac82:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800ac86:	81a3      	strh	r3, [r4, #12]
 800ac88:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800ac8c:	463a      	mov	r2, r7
 800ac8e:	6921      	ldr	r1, [r4, #16]
 800ac90:	f7ff fbba 	bl	800a408 <memcpy>
 800ac94:	89a3      	ldrh	r3, [r4, #12]
 800ac96:	f423 6390 	bic.w	r3, r3, #1152	; 0x480
 800ac9a:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800ac9e:	81a3      	strh	r3, [r4, #12]
 800aca0:	6126      	str	r6, [r4, #16]
 800aca2:	443e      	add	r6, r7
 800aca4:	6026      	str	r6, [r4, #0]
 800aca6:	464e      	mov	r6, r9
 800aca8:	6165      	str	r5, [r4, #20]
 800acaa:	1bed      	subs	r5, r5, r7
 800acac:	60a5      	str	r5, [r4, #8]
 800acae:	454e      	cmp	r6, r9
 800acb0:	d900      	bls.n	800acb4 <__ssputs_r+0x84>
 800acb2:	464e      	mov	r6, r9
 800acb4:	4632      	mov	r2, r6
 800acb6:	4641      	mov	r1, r8
 800acb8:	6820      	ldr	r0, [r4, #0]
 800acba:	f000 f92a 	bl	800af12 <memmove>
 800acbe:	68a3      	ldr	r3, [r4, #8]
 800acc0:	2000      	movs	r0, #0
 800acc2:	1b9b      	subs	r3, r3, r6
 800acc4:	60a3      	str	r3, [r4, #8]
 800acc6:	6823      	ldr	r3, [r4, #0]
 800acc8:	441e      	add	r6, r3
 800acca:	6026      	str	r6, [r4, #0]
 800accc:	e7dc      	b.n	800ac88 <__ssputs_r+0x58>
 800acce:	462a      	mov	r2, r5
 800acd0:	f000 f938 	bl	800af44 <_realloc_r>
 800acd4:	4606      	mov	r6, r0
 800acd6:	2800      	cmp	r0, #0
 800acd8:	d1e2      	bne.n	800aca0 <__ssputs_r+0x70>
 800acda:	6921      	ldr	r1, [r4, #16]
 800acdc:	4650      	mov	r0, sl
 800acde:	f7fc fc29 	bl	8007534 <_free_r>
 800ace2:	e7c8      	b.n	800ac76 <__ssputs_r+0x46>

0800ace4 <_svfiprintf_r>:
 800ace4:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800ace8:	461d      	mov	r5, r3
 800acea:	898b      	ldrh	r3, [r1, #12]
 800acec:	b09d      	sub	sp, #116	; 0x74
 800acee:	061f      	lsls	r7, r3, #24
 800acf0:	4680      	mov	r8, r0
 800acf2:	460c      	mov	r4, r1
 800acf4:	4616      	mov	r6, r2
 800acf6:	d50f      	bpl.n	800ad18 <_svfiprintf_r+0x34>
 800acf8:	690b      	ldr	r3, [r1, #16]
 800acfa:	b96b      	cbnz	r3, 800ad18 <_svfiprintf_r+0x34>
 800acfc:	2140      	movs	r1, #64	; 0x40
 800acfe:	f7fc fc65 	bl	80075cc <_malloc_r>
 800ad02:	6020      	str	r0, [r4, #0]
 800ad04:	6120      	str	r0, [r4, #16]
 800ad06:	b928      	cbnz	r0, 800ad14 <_svfiprintf_r+0x30>
 800ad08:	230c      	movs	r3, #12
 800ad0a:	f8c8 3000 	str.w	r3, [r8]
 800ad0e:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 800ad12:	e0c8      	b.n	800aea6 <_svfiprintf_r+0x1c2>
 800ad14:	2340      	movs	r3, #64	; 0x40
 800ad16:	6163      	str	r3, [r4, #20]
 800ad18:	2300      	movs	r3, #0
 800ad1a:	9309      	str	r3, [sp, #36]	; 0x24
 800ad1c:	2320      	movs	r3, #32
 800ad1e:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 800ad22:	2330      	movs	r3, #48	; 0x30
 800ad24:	f04f 0b01 	mov.w	fp, #1
 800ad28:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 800ad2c:	9503      	str	r5, [sp, #12]
 800ad2e:	4637      	mov	r7, r6
 800ad30:	463d      	mov	r5, r7
 800ad32:	f815 3b01 	ldrb.w	r3, [r5], #1
 800ad36:	b10b      	cbz	r3, 800ad3c <_svfiprintf_r+0x58>
 800ad38:	2b25      	cmp	r3, #37	; 0x25
 800ad3a:	d13e      	bne.n	800adba <_svfiprintf_r+0xd6>
 800ad3c:	ebb7 0a06 	subs.w	sl, r7, r6
 800ad40:	d00b      	beq.n	800ad5a <_svfiprintf_r+0x76>
 800ad42:	4653      	mov	r3, sl
 800ad44:	4632      	mov	r2, r6
 800ad46:	4621      	mov	r1, r4
 800ad48:	4640      	mov	r0, r8
 800ad4a:	f7ff ff71 	bl	800ac30 <__ssputs_r>
 800ad4e:	3001      	adds	r0, #1
 800ad50:	f000 80a4 	beq.w	800ae9c <_svfiprintf_r+0x1b8>
 800ad54:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800ad56:	4453      	add	r3, sl
 800ad58:	9309      	str	r3, [sp, #36]	; 0x24
 800ad5a:	783b      	ldrb	r3, [r7, #0]
 800ad5c:	2b00      	cmp	r3, #0
 800ad5e:	f000 809d 	beq.w	800ae9c <_svfiprintf_r+0x1b8>
 800ad62:	2300      	movs	r3, #0
 800ad64:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 800ad68:	e9cd 2305 	strd	r2, r3, [sp, #20]
 800ad6c:	9304      	str	r3, [sp, #16]
 800ad6e:	9307      	str	r3, [sp, #28]
 800ad70:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 800ad74:	931a      	str	r3, [sp, #104]	; 0x68
 800ad76:	462f      	mov	r7, r5
 800ad78:	2205      	movs	r2, #5
 800ad7a:	f817 1b01 	ldrb.w	r1, [r7], #1
 800ad7e:	4850      	ldr	r0, [pc, #320]	; (800aec0 <_svfiprintf_r+0x1dc>)
 800ad80:	f7ff fb34 	bl	800a3ec <memchr>
 800ad84:	9b04      	ldr	r3, [sp, #16]
 800ad86:	b9d0      	cbnz	r0, 800adbe <_svfiprintf_r+0xda>
 800ad88:	06d9      	lsls	r1, r3, #27
 800ad8a:	bf44      	itt	mi
 800ad8c:	2220      	movmi	r2, #32
 800ad8e:	f88d 2053 	strbmi.w	r2, [sp, #83]	; 0x53
 800ad92:	071a      	lsls	r2, r3, #28
 800ad94:	bf44      	itt	mi
 800ad96:	222b      	movmi	r2, #43	; 0x2b
 800ad98:	f88d 2053 	strbmi.w	r2, [sp, #83]	; 0x53
 800ad9c:	782a      	ldrb	r2, [r5, #0]
 800ad9e:	2a2a      	cmp	r2, #42	; 0x2a
 800ada0:	d015      	beq.n	800adce <_svfiprintf_r+0xea>
 800ada2:	462f      	mov	r7, r5
 800ada4:	2000      	movs	r0, #0
 800ada6:	250a      	movs	r5, #10
 800ada8:	9a07      	ldr	r2, [sp, #28]
 800adaa:	4639      	mov	r1, r7
 800adac:	f811 3b01 	ldrb.w	r3, [r1], #1
 800adb0:	3b30      	subs	r3, #48	; 0x30
 800adb2:	2b09      	cmp	r3, #9
 800adb4:	d94d      	bls.n	800ae52 <_svfiprintf_r+0x16e>
 800adb6:	b1b8      	cbz	r0, 800ade8 <_svfiprintf_r+0x104>
 800adb8:	e00f      	b.n	800adda <_svfiprintf_r+0xf6>
 800adba:	462f      	mov	r7, r5
 800adbc:	e7b8      	b.n	800ad30 <_svfiprintf_r+0x4c>
 800adbe:	4a40      	ldr	r2, [pc, #256]	; (800aec0 <_svfiprintf_r+0x1dc>)
 800adc0:	463d      	mov	r5, r7
 800adc2:	1a80      	subs	r0, r0, r2
 800adc4:	fa0b f000 	lsl.w	r0, fp, r0
 800adc8:	4318      	orrs	r0, r3
 800adca:	9004      	str	r0, [sp, #16]
 800adcc:	e7d3      	b.n	800ad76 <_svfiprintf_r+0x92>
 800adce:	9a03      	ldr	r2, [sp, #12]
 800add0:	1d11      	adds	r1, r2, #4
 800add2:	6812      	ldr	r2, [r2, #0]
 800add4:	9103      	str	r1, [sp, #12]
 800add6:	2a00      	cmp	r2, #0
 800add8:	db01      	blt.n	800adde <_svfiprintf_r+0xfa>
 800adda:	9207      	str	r2, [sp, #28]
 800addc:	e004      	b.n	800ade8 <_svfiprintf_r+0x104>
 800adde:	4252      	negs	r2, r2
 800ade0:	f043 0302 	orr.w	r3, r3, #2
 800ade4:	9207      	str	r2, [sp, #28]
 800ade6:	9304      	str	r3, [sp, #16]
 800ade8:	783b      	ldrb	r3, [r7, #0]
 800adea:	2b2e      	cmp	r3, #46	; 0x2e
 800adec:	d10c      	bne.n	800ae08 <_svfiprintf_r+0x124>
 800adee:	787b      	ldrb	r3, [r7, #1]
 800adf0:	2b2a      	cmp	r3, #42	; 0x2a
 800adf2:	d133      	bne.n	800ae5c <_svfiprintf_r+0x178>
 800adf4:	9b03      	ldr	r3, [sp, #12]
 800adf6:	3702      	adds	r7, #2
 800adf8:	1d1a      	adds	r2, r3, #4
 800adfa:	681b      	ldr	r3, [r3, #0]
 800adfc:	9203      	str	r2, [sp, #12]
 800adfe:	2b00      	cmp	r3, #0
 800ae00:	bfb8      	it	lt
 800ae02:	f04f 33ff 	movlt.w	r3, #4294967295	; 0xffffffff
 800ae06:	9305      	str	r3, [sp, #20]
 800ae08:	4d2e      	ldr	r5, [pc, #184]	; (800aec4 <_svfiprintf_r+0x1e0>)
 800ae0a:	2203      	movs	r2, #3
 800ae0c:	7839      	ldrb	r1, [r7, #0]
 800ae0e:	4628      	mov	r0, r5
 800ae10:	f7ff faec 	bl	800a3ec <memchr>
 800ae14:	b138      	cbz	r0, 800ae26 <_svfiprintf_r+0x142>
 800ae16:	2340      	movs	r3, #64	; 0x40
 800ae18:	1b40      	subs	r0, r0, r5
 800ae1a:	fa03 f000 	lsl.w	r0, r3, r0
 800ae1e:	9b04      	ldr	r3, [sp, #16]
 800ae20:	3701      	adds	r7, #1
 800ae22:	4303      	orrs	r3, r0
 800ae24:	9304      	str	r3, [sp, #16]
 800ae26:	7839      	ldrb	r1, [r7, #0]
 800ae28:	2206      	movs	r2, #6
 800ae2a:	4827      	ldr	r0, [pc, #156]	; (800aec8 <_svfiprintf_r+0x1e4>)
 800ae2c:	1c7e      	adds	r6, r7, #1
 800ae2e:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 800ae32:	f7ff fadb 	bl	800a3ec <memchr>
 800ae36:	2800      	cmp	r0, #0
 800ae38:	d038      	beq.n	800aeac <_svfiprintf_r+0x1c8>
 800ae3a:	4b24      	ldr	r3, [pc, #144]	; (800aecc <_svfiprintf_r+0x1e8>)
 800ae3c:	bb13      	cbnz	r3, 800ae84 <_svfiprintf_r+0x1a0>
 800ae3e:	9b03      	ldr	r3, [sp, #12]
 800ae40:	3307      	adds	r3, #7
 800ae42:	f023 0307 	bic.w	r3, r3, #7
 800ae46:	3308      	adds	r3, #8
 800ae48:	9303      	str	r3, [sp, #12]
 800ae4a:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800ae4c:	444b      	add	r3, r9
 800ae4e:	9309      	str	r3, [sp, #36]	; 0x24
 800ae50:	e76d      	b.n	800ad2e <_svfiprintf_r+0x4a>
 800ae52:	fb05 3202 	mla	r2, r5, r2, r3
 800ae56:	2001      	movs	r0, #1
 800ae58:	460f      	mov	r7, r1
 800ae5a:	e7a6      	b.n	800adaa <_svfiprintf_r+0xc6>
 800ae5c:	2300      	movs	r3, #0
 800ae5e:	250a      	movs	r5, #10
 800ae60:	4619      	mov	r1, r3
 800ae62:	3701      	adds	r7, #1
 800ae64:	9305      	str	r3, [sp, #20]
 800ae66:	4638      	mov	r0, r7
 800ae68:	f810 2b01 	ldrb.w	r2, [r0], #1
 800ae6c:	3a30      	subs	r2, #48	; 0x30
 800ae6e:	2a09      	cmp	r2, #9
 800ae70:	d903      	bls.n	800ae7a <_svfiprintf_r+0x196>
 800ae72:	2b00      	cmp	r3, #0
 800ae74:	d0c8      	beq.n	800ae08 <_svfiprintf_r+0x124>
 800ae76:	9105      	str	r1, [sp, #20]
 800ae78:	e7c6      	b.n	800ae08 <_svfiprintf_r+0x124>
 800ae7a:	fb05 2101 	mla	r1, r5, r1, r2
 800ae7e:	2301      	movs	r3, #1
 800ae80:	4607      	mov	r7, r0
 800ae82:	e7f0      	b.n	800ae66 <_svfiprintf_r+0x182>
 800ae84:	ab03      	add	r3, sp, #12
 800ae86:	9300      	str	r3, [sp, #0]
 800ae88:	4622      	mov	r2, r4
 800ae8a:	4b11      	ldr	r3, [pc, #68]	; (800aed0 <_svfiprintf_r+0x1ec>)
 800ae8c:	a904      	add	r1, sp, #16
 800ae8e:	4640      	mov	r0, r8
 800ae90:	f7fc fc88 	bl	80077a4 <_printf_float>
 800ae94:	f1b0 3fff 	cmp.w	r0, #4294967295	; 0xffffffff
 800ae98:	4681      	mov	r9, r0
 800ae9a:	d1d6      	bne.n	800ae4a <_svfiprintf_r+0x166>
 800ae9c:	89a3      	ldrh	r3, [r4, #12]
 800ae9e:	065b      	lsls	r3, r3, #25
 800aea0:	f53f af35 	bmi.w	800ad0e <_svfiprintf_r+0x2a>
 800aea4:	9809      	ldr	r0, [sp, #36]	; 0x24
 800aea6:	b01d      	add	sp, #116	; 0x74
 800aea8:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800aeac:	ab03      	add	r3, sp, #12
 800aeae:	9300      	str	r3, [sp, #0]
 800aeb0:	4622      	mov	r2, r4
 800aeb2:	4b07      	ldr	r3, [pc, #28]	; (800aed0 <_svfiprintf_r+0x1ec>)
 800aeb4:	a904      	add	r1, sp, #16
 800aeb6:	4640      	mov	r0, r8
 800aeb8:	f7fc ff20 	bl	8007cfc <_printf_i>
 800aebc:	e7ea      	b.n	800ae94 <_svfiprintf_r+0x1b0>
 800aebe:	bf00      	nop
 800aec0:	0800bb5c 	.word	0x0800bb5c
 800aec4:	0800bb62 	.word	0x0800bb62
 800aec8:	0800bb66 	.word	0x0800bb66
 800aecc:	080077a5 	.word	0x080077a5
 800aed0:	0800ac31 	.word	0x0800ac31

0800aed4 <strncmp>:
 800aed4:	b510      	push	{r4, lr}
 800aed6:	b16a      	cbz	r2, 800aef4 <strncmp+0x20>
 800aed8:	3901      	subs	r1, #1
 800aeda:	1884      	adds	r4, r0, r2
 800aedc:	f810 3b01 	ldrb.w	r3, [r0], #1
 800aee0:	f811 2f01 	ldrb.w	r2, [r1, #1]!
 800aee4:	4293      	cmp	r3, r2
 800aee6:	d103      	bne.n	800aef0 <strncmp+0x1c>
 800aee8:	42a0      	cmp	r0, r4
 800aeea:	d001      	beq.n	800aef0 <strncmp+0x1c>
 800aeec:	2b00      	cmp	r3, #0
 800aeee:	d1f5      	bne.n	800aedc <strncmp+0x8>
 800aef0:	1a98      	subs	r0, r3, r2
 800aef2:	bd10      	pop	{r4, pc}
 800aef4:	4610      	mov	r0, r2
 800aef6:	e7fc      	b.n	800aef2 <strncmp+0x1e>

0800aef8 <__ascii_wctomb>:
 800aef8:	b149      	cbz	r1, 800af0e <__ascii_wctomb+0x16>
 800aefa:	2aff      	cmp	r2, #255	; 0xff
 800aefc:	bf8b      	itete	hi
 800aefe:	238a      	movhi	r3, #138	; 0x8a
 800af00:	700a      	strbls	r2, [r1, #0]
 800af02:	6003      	strhi	r3, [r0, #0]
 800af04:	2001      	movls	r0, #1
 800af06:	bf88      	it	hi
 800af08:	f04f 30ff 	movhi.w	r0, #4294967295	; 0xffffffff
 800af0c:	4770      	bx	lr
 800af0e:	4608      	mov	r0, r1
 800af10:	4770      	bx	lr

0800af12 <memmove>:
 800af12:	4288      	cmp	r0, r1
 800af14:	b510      	push	{r4, lr}
 800af16:	eb01 0302 	add.w	r3, r1, r2
 800af1a:	d807      	bhi.n	800af2c <memmove+0x1a>
 800af1c:	1e42      	subs	r2, r0, #1
 800af1e:	4299      	cmp	r1, r3
 800af20:	d00a      	beq.n	800af38 <memmove+0x26>
 800af22:	f811 4b01 	ldrb.w	r4, [r1], #1
 800af26:	f802 4f01 	strb.w	r4, [r2, #1]!
 800af2a:	e7f8      	b.n	800af1e <memmove+0xc>
 800af2c:	4283      	cmp	r3, r0
 800af2e:	d9f5      	bls.n	800af1c <memmove+0xa>
 800af30:	1881      	adds	r1, r0, r2
 800af32:	1ad2      	subs	r2, r2, r3
 800af34:	42d3      	cmn	r3, r2
 800af36:	d100      	bne.n	800af3a <memmove+0x28>
 800af38:	bd10      	pop	{r4, pc}
 800af3a:	f813 4d01 	ldrb.w	r4, [r3, #-1]!
 800af3e:	f801 4d01 	strb.w	r4, [r1, #-1]!
 800af42:	e7f7      	b.n	800af34 <memmove+0x22>

0800af44 <_realloc_r>:
 800af44:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800af46:	4607      	mov	r7, r0
 800af48:	4614      	mov	r4, r2
 800af4a:	460e      	mov	r6, r1
 800af4c:	b921      	cbnz	r1, 800af58 <_realloc_r+0x14>
 800af4e:	e8bd 40f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, lr}
 800af52:	4611      	mov	r1, r2
 800af54:	f7fc bb3a 	b.w	80075cc <_malloc_r>
 800af58:	b922      	cbnz	r2, 800af64 <_realloc_r+0x20>
 800af5a:	f7fc faeb 	bl	8007534 <_free_r>
 800af5e:	4625      	mov	r5, r4
 800af60:	4628      	mov	r0, r5
 800af62:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 800af64:	f000 f814 	bl	800af90 <_malloc_usable_size_r>
 800af68:	42a0      	cmp	r0, r4
 800af6a:	d20f      	bcs.n	800af8c <_realloc_r+0x48>
 800af6c:	4621      	mov	r1, r4
 800af6e:	4638      	mov	r0, r7
 800af70:	f7fc fb2c 	bl	80075cc <_malloc_r>
 800af74:	4605      	mov	r5, r0
 800af76:	2800      	cmp	r0, #0
 800af78:	d0f2      	beq.n	800af60 <_realloc_r+0x1c>
 800af7a:	4631      	mov	r1, r6
 800af7c:	4622      	mov	r2, r4
 800af7e:	f7ff fa43 	bl	800a408 <memcpy>
 800af82:	4631      	mov	r1, r6
 800af84:	4638      	mov	r0, r7
 800af86:	f7fc fad5 	bl	8007534 <_free_r>
 800af8a:	e7e9      	b.n	800af60 <_realloc_r+0x1c>
 800af8c:	4635      	mov	r5, r6
 800af8e:	e7e7      	b.n	800af60 <_realloc_r+0x1c>

0800af90 <_malloc_usable_size_r>:
 800af90:	f851 3c04 	ldr.w	r3, [r1, #-4]
 800af94:	1f18      	subs	r0, r3, #4
 800af96:	2b00      	cmp	r3, #0
 800af98:	bfbc      	itt	lt
 800af9a:	580b      	ldrlt	r3, [r1, r0]
 800af9c:	18c0      	addlt	r0, r0, r3
 800af9e:	4770      	bx	lr

0800afa0 <sqrt>:
 800afa0:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800afa4:	b08b      	sub	sp, #44	; 0x2c
 800afa6:	4604      	mov	r4, r0
 800afa8:	460d      	mov	r5, r1
 800afaa:	f000 f89d 	bl	800b0e8 <__ieee754_sqrt>
 800afae:	4b24      	ldr	r3, [pc, #144]	; (800b040 <sqrt+0xa0>)
 800afb0:	4680      	mov	r8, r0
 800afb2:	f993 a000 	ldrsb.w	sl, [r3]
 800afb6:	4689      	mov	r9, r1
 800afb8:	f1ba 3fff 	cmp.w	sl, #4294967295	; 0xffffffff
 800afbc:	d02b      	beq.n	800b016 <sqrt+0x76>
 800afbe:	4622      	mov	r2, r4
 800afc0:	462b      	mov	r3, r5
 800afc2:	4620      	mov	r0, r4
 800afc4:	4629      	mov	r1, r5
 800afc6:	f7f5 fd21 	bl	8000a0c <__aeabi_dcmpun>
 800afca:	4683      	mov	fp, r0
 800afcc:	bb18      	cbnz	r0, 800b016 <sqrt+0x76>
 800afce:	2600      	movs	r6, #0
 800afd0:	2700      	movs	r7, #0
 800afd2:	4632      	mov	r2, r6
 800afd4:	463b      	mov	r3, r7
 800afd6:	4620      	mov	r0, r4
 800afd8:	4629      	mov	r1, r5
 800afda:	f7f5 fcef 	bl	80009bc <__aeabi_dcmplt>
 800afde:	b1d0      	cbz	r0, 800b016 <sqrt+0x76>
 800afe0:	2301      	movs	r3, #1
 800afe2:	9300      	str	r3, [sp, #0]
 800afe4:	4b17      	ldr	r3, [pc, #92]	; (800b044 <sqrt+0xa4>)
 800afe6:	f8cd b020 	str.w	fp, [sp, #32]
 800afea:	9301      	str	r3, [sp, #4]
 800afec:	e9cd 4504 	strd	r4, r5, [sp, #16]
 800aff0:	e9cd 4502 	strd	r4, r5, [sp, #8]
 800aff4:	f1ba 0f00 	cmp.w	sl, #0
 800aff8:	d112      	bne.n	800b020 <sqrt+0x80>
 800affa:	e9cd 6706 	strd	r6, r7, [sp, #24]
 800affe:	4668      	mov	r0, sp
 800b000:	f000 fb43 	bl	800b68a <matherr>
 800b004:	b1b8      	cbz	r0, 800b036 <sqrt+0x96>
 800b006:	9b08      	ldr	r3, [sp, #32]
 800b008:	b11b      	cbz	r3, 800b012 <sqrt+0x72>
 800b00a:	f7fc fa59 	bl	80074c0 <__errno>
 800b00e:	9b08      	ldr	r3, [sp, #32]
 800b010:	6003      	str	r3, [r0, #0]
 800b012:	e9dd 8906 	ldrd	r8, r9, [sp, #24]
 800b016:	4640      	mov	r0, r8
 800b018:	4649      	mov	r1, r9
 800b01a:	b00b      	add	sp, #44	; 0x2c
 800b01c:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800b020:	4632      	mov	r2, r6
 800b022:	463b      	mov	r3, r7
 800b024:	4630      	mov	r0, r6
 800b026:	4639      	mov	r1, r7
 800b028:	f7f5 fb80 	bl	800072c <__aeabi_ddiv>
 800b02c:	f1ba 0f02 	cmp.w	sl, #2
 800b030:	e9cd 0106 	strd	r0, r1, [sp, #24]
 800b034:	d1e3      	bne.n	800affe <sqrt+0x5e>
 800b036:	f7fc fa43 	bl	80074c0 <__errno>
 800b03a:	2321      	movs	r3, #33	; 0x21
 800b03c:	6003      	str	r3, [r0, #0]
 800b03e:	e7e2      	b.n	800b006 <sqrt+0x66>
 800b040:	200001fc 	.word	0x200001fc
 800b044:	0800bc6e 	.word	0x0800bc6e

0800b048 <asinf>:
 800b048:	b5f0      	push	{r4, r5, r6, r7, lr}
 800b04a:	b08b      	sub	sp, #44	; 0x2c
 800b04c:	4604      	mov	r4, r0
 800b04e:	f000 f8f7 	bl	800b240 <__ieee754_asinf>
 800b052:	4e21      	ldr	r6, [pc, #132]	; (800b0d8 <asinf+0x90>)
 800b054:	4605      	mov	r5, r0
 800b056:	f996 3000 	ldrsb.w	r3, [r6]
 800b05a:	3301      	adds	r3, #1
 800b05c:	d038      	beq.n	800b0d0 <asinf+0x88>
 800b05e:	4621      	mov	r1, r4
 800b060:	4620      	mov	r0, r4
 800b062:	f7f6 f855 	bl	8001110 <__aeabi_fcmpun>
 800b066:	4607      	mov	r7, r0
 800b068:	2800      	cmp	r0, #0
 800b06a:	d131      	bne.n	800b0d0 <asinf+0x88>
 800b06c:	4620      	mov	r0, r4
 800b06e:	f000 fc21 	bl	800b8b4 <fabsf>
 800b072:	f04f 517e 	mov.w	r1, #1065353216	; 0x3f800000
 800b076:	f7f6 f841 	bl	80010fc <__aeabi_fcmpgt>
 800b07a:	b348      	cbz	r0, 800b0d0 <asinf+0x88>
 800b07c:	2301      	movs	r3, #1
 800b07e:	9300      	str	r3, [sp, #0]
 800b080:	4b16      	ldr	r3, [pc, #88]	; (800b0dc <asinf+0x94>)
 800b082:	4620      	mov	r0, r4
 800b084:	9301      	str	r3, [sp, #4]
 800b086:	9708      	str	r7, [sp, #32]
 800b088:	f7f5 f9ce 	bl	8000428 <__aeabi_f2d>
 800b08c:	e9cd 0104 	strd	r0, r1, [sp, #16]
 800b090:	e9cd 0102 	strd	r0, r1, [sp, #8]
 800b094:	4812      	ldr	r0, [pc, #72]	; (800b0e0 <asinf+0x98>)
 800b096:	f000 fafb 	bl	800b690 <nan>
 800b09a:	f996 3000 	ldrsb.w	r3, [r6]
 800b09e:	e9cd 0106 	strd	r0, r1, [sp, #24]
 800b0a2:	2b02      	cmp	r3, #2
 800b0a4:	d104      	bne.n	800b0b0 <asinf+0x68>
 800b0a6:	f7fc fa0b 	bl	80074c0 <__errno>
 800b0aa:	2321      	movs	r3, #33	; 0x21
 800b0ac:	6003      	str	r3, [r0, #0]
 800b0ae:	e004      	b.n	800b0ba <asinf+0x72>
 800b0b0:	4668      	mov	r0, sp
 800b0b2:	f000 faea 	bl	800b68a <matherr>
 800b0b6:	2800      	cmp	r0, #0
 800b0b8:	d0f5      	beq.n	800b0a6 <asinf+0x5e>
 800b0ba:	9b08      	ldr	r3, [sp, #32]
 800b0bc:	b11b      	cbz	r3, 800b0c6 <asinf+0x7e>
 800b0be:	f7fc f9ff 	bl	80074c0 <__errno>
 800b0c2:	9b08      	ldr	r3, [sp, #32]
 800b0c4:	6003      	str	r3, [r0, #0]
 800b0c6:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
 800b0ca:	f7f5 fcfd 	bl	8000ac8 <__aeabi_d2f>
 800b0ce:	4605      	mov	r5, r0
 800b0d0:	4628      	mov	r0, r5
 800b0d2:	b00b      	add	sp, #44	; 0x2c
 800b0d4:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800b0d6:	bf00      	nop
 800b0d8:	200001fc 	.word	0x200001fc
 800b0dc:	0800bc73 	.word	0x0800bc73
 800b0e0:	0800bb61 	.word	0x0800bb61

0800b0e4 <atan2f>:
 800b0e4:	f000 b9ee 	b.w	800b4c4 <__ieee754_atan2f>

0800b0e8 <__ieee754_sqrt>:
 800b0e8:	4b54      	ldr	r3, [pc, #336]	; (800b23c <__ieee754_sqrt+0x154>)
 800b0ea:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800b0ee:	438b      	bics	r3, r1
 800b0f0:	4606      	mov	r6, r0
 800b0f2:	460d      	mov	r5, r1
 800b0f4:	460a      	mov	r2, r1
 800b0f6:	460c      	mov	r4, r1
 800b0f8:	d10f      	bne.n	800b11a <__ieee754_sqrt+0x32>
 800b0fa:	4602      	mov	r2, r0
 800b0fc:	460b      	mov	r3, r1
 800b0fe:	f7f5 f9eb 	bl	80004d8 <__aeabi_dmul>
 800b102:	4602      	mov	r2, r0
 800b104:	460b      	mov	r3, r1
 800b106:	4630      	mov	r0, r6
 800b108:	4629      	mov	r1, r5
 800b10a:	f7f5 f82f 	bl	800016c <__adddf3>
 800b10e:	4606      	mov	r6, r0
 800b110:	460d      	mov	r5, r1
 800b112:	4630      	mov	r0, r6
 800b114:	4629      	mov	r1, r5
 800b116:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800b11a:	2900      	cmp	r1, #0
 800b11c:	4607      	mov	r7, r0
 800b11e:	4603      	mov	r3, r0
 800b120:	dc0e      	bgt.n	800b140 <__ieee754_sqrt+0x58>
 800b122:	f021 4c00 	bic.w	ip, r1, #2147483648	; 0x80000000
 800b126:	ea5c 0707 	orrs.w	r7, ip, r7
 800b12a:	d0f2      	beq.n	800b112 <__ieee754_sqrt+0x2a>
 800b12c:	b141      	cbz	r1, 800b140 <__ieee754_sqrt+0x58>
 800b12e:	4602      	mov	r2, r0
 800b130:	460b      	mov	r3, r1
 800b132:	f7f5 f819 	bl	8000168 <__aeabi_dsub>
 800b136:	4602      	mov	r2, r0
 800b138:	460b      	mov	r3, r1
 800b13a:	f7f5 faf7 	bl	800072c <__aeabi_ddiv>
 800b13e:	e7e6      	b.n	800b10e <__ieee754_sqrt+0x26>
 800b140:	1512      	asrs	r2, r2, #20
 800b142:	d074      	beq.n	800b22e <__ieee754_sqrt+0x146>
 800b144:	f2a2 32ff 	subw	r2, r2, #1023	; 0x3ff
 800b148:	07d5      	lsls	r5, r2, #31
 800b14a:	f04f 0500 	mov.w	r5, #0
 800b14e:	f3c4 0413 	ubfx	r4, r4, #0, #20
 800b152:	bf48      	it	mi
 800b154:	0fd9      	lsrmi	r1, r3, #31
 800b156:	f444 1480 	orr.w	r4, r4, #1048576	; 0x100000
 800b15a:	bf44      	itt	mi
 800b15c:	005b      	lslmi	r3, r3, #1
 800b15e:	eb01 0444 	addmi.w	r4, r1, r4, lsl #1
 800b162:	1051      	asrs	r1, r2, #1
 800b164:	0fda      	lsrs	r2, r3, #31
 800b166:	eb02 0444 	add.w	r4, r2, r4, lsl #1
 800b16a:	4628      	mov	r0, r5
 800b16c:	2216      	movs	r2, #22
 800b16e:	f44f 1600 	mov.w	r6, #2097152	; 0x200000
 800b172:	005b      	lsls	r3, r3, #1
 800b174:	1987      	adds	r7, r0, r6
 800b176:	42a7      	cmp	r7, r4
 800b178:	bfde      	ittt	le
 800b17a:	19b8      	addle	r0, r7, r6
 800b17c:	1be4      	suble	r4, r4, r7
 800b17e:	19ad      	addle	r5, r5, r6
 800b180:	0fdf      	lsrs	r7, r3, #31
 800b182:	3a01      	subs	r2, #1
 800b184:	eb07 0444 	add.w	r4, r7, r4, lsl #1
 800b188:	ea4f 0343 	mov.w	r3, r3, lsl #1
 800b18c:	ea4f 0656 	mov.w	r6, r6, lsr #1
 800b190:	d1f0      	bne.n	800b174 <__ieee754_sqrt+0x8c>
 800b192:	f04f 0c20 	mov.w	ip, #32
 800b196:	4696      	mov	lr, r2
 800b198:	f04f 4600 	mov.w	r6, #2147483648	; 0x80000000
 800b19c:	4284      	cmp	r4, r0
 800b19e:	eb06 070e 	add.w	r7, r6, lr
 800b1a2:	dc02      	bgt.n	800b1aa <__ieee754_sqrt+0xc2>
 800b1a4:	d112      	bne.n	800b1cc <__ieee754_sqrt+0xe4>
 800b1a6:	429f      	cmp	r7, r3
 800b1a8:	d810      	bhi.n	800b1cc <__ieee754_sqrt+0xe4>
 800b1aa:	2f00      	cmp	r7, #0
 800b1ac:	eb07 0e06 	add.w	lr, r7, r6
 800b1b0:	da42      	bge.n	800b238 <__ieee754_sqrt+0x150>
 800b1b2:	f1be 0f00 	cmp.w	lr, #0
 800b1b6:	db3f      	blt.n	800b238 <__ieee754_sqrt+0x150>
 800b1b8:	f100 0801 	add.w	r8, r0, #1
 800b1bc:	1a24      	subs	r4, r4, r0
 800b1be:	4640      	mov	r0, r8
 800b1c0:	429f      	cmp	r7, r3
 800b1c2:	bf88      	it	hi
 800b1c4:	f104 34ff 	addhi.w	r4, r4, #4294967295	; 0xffffffff
 800b1c8:	1bdb      	subs	r3, r3, r7
 800b1ca:	4432      	add	r2, r6
 800b1cc:	0064      	lsls	r4, r4, #1
 800b1ce:	f1bc 0c01 	subs.w	ip, ip, #1
 800b1d2:	eb04 74d3 	add.w	r4, r4, r3, lsr #31
 800b1d6:	ea4f 0656 	mov.w	r6, r6, lsr #1
 800b1da:	ea4f 0343 	mov.w	r3, r3, lsl #1
 800b1de:	d1dd      	bne.n	800b19c <__ieee754_sqrt+0xb4>
 800b1e0:	4323      	orrs	r3, r4
 800b1e2:	d006      	beq.n	800b1f2 <__ieee754_sqrt+0x10a>
 800b1e4:	1c54      	adds	r4, r2, #1
 800b1e6:	bf0b      	itete	eq
 800b1e8:	4662      	moveq	r2, ip
 800b1ea:	3201      	addne	r2, #1
 800b1ec:	3501      	addeq	r5, #1
 800b1ee:	f022 0201 	bicne.w	r2, r2, #1
 800b1f2:	106b      	asrs	r3, r5, #1
 800b1f4:	0852      	lsrs	r2, r2, #1
 800b1f6:	07e8      	lsls	r0, r5, #31
 800b1f8:	f103 537f 	add.w	r3, r3, #1069547520	; 0x3fc00000
 800b1fc:	f503 1300 	add.w	r3, r3, #2097152	; 0x200000
 800b200:	bf48      	it	mi
 800b202:	f042 4200 	orrmi.w	r2, r2, #2147483648	; 0x80000000
 800b206:	eb03 5501 	add.w	r5, r3, r1, lsl #20
 800b20a:	4616      	mov	r6, r2
 800b20c:	e781      	b.n	800b112 <__ieee754_sqrt+0x2a>
 800b20e:	0adc      	lsrs	r4, r3, #11
 800b210:	3915      	subs	r1, #21
 800b212:	055b      	lsls	r3, r3, #21
 800b214:	2c00      	cmp	r4, #0
 800b216:	d0fa      	beq.n	800b20e <__ieee754_sqrt+0x126>
 800b218:	02e6      	lsls	r6, r4, #11
 800b21a:	d50a      	bpl.n	800b232 <__ieee754_sqrt+0x14a>
 800b21c:	f1c2 0020 	rsb	r0, r2, #32
 800b220:	fa23 f000 	lsr.w	r0, r3, r0
 800b224:	1e55      	subs	r5, r2, #1
 800b226:	4093      	lsls	r3, r2
 800b228:	4304      	orrs	r4, r0
 800b22a:	1b4a      	subs	r2, r1, r5
 800b22c:	e78a      	b.n	800b144 <__ieee754_sqrt+0x5c>
 800b22e:	4611      	mov	r1, r2
 800b230:	e7f0      	b.n	800b214 <__ieee754_sqrt+0x12c>
 800b232:	0064      	lsls	r4, r4, #1
 800b234:	3201      	adds	r2, #1
 800b236:	e7ef      	b.n	800b218 <__ieee754_sqrt+0x130>
 800b238:	4680      	mov	r8, r0
 800b23a:	e7bf      	b.n	800b1bc <__ieee754_sqrt+0xd4>
 800b23c:	7ff00000 	.word	0x7ff00000

0800b240 <__ieee754_asinf>:
 800b240:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800b244:	f020 4500 	bic.w	r5, r0, #2147483648	; 0x80000000
 800b248:	f1b5 5f7e 	cmp.w	r5, #1065353216	; 0x3f800000
 800b24c:	4604      	mov	r4, r0
 800b24e:	4607      	mov	r7, r0
 800b250:	d10c      	bne.n	800b26c <__ieee754_asinf+0x2c>
 800b252:	498c      	ldr	r1, [pc, #560]	; (800b484 <__ieee754_asinf+0x244>)
 800b254:	f7f5 fd96 	bl	8000d84 <__aeabi_fmul>
 800b258:	498b      	ldr	r1, [pc, #556]	; (800b488 <__ieee754_asinf+0x248>)
 800b25a:	4605      	mov	r5, r0
 800b25c:	4620      	mov	r0, r4
 800b25e:	f7f5 fd91 	bl	8000d84 <__aeabi_fmul>
 800b262:	4601      	mov	r1, r0
 800b264:	4628      	mov	r0, r5
 800b266:	f7f5 fc85 	bl	8000b74 <__addsf3>
 800b26a:	e006      	b.n	800b27a <__ieee754_asinf+0x3a>
 800b26c:	dd09      	ble.n	800b282 <__ieee754_asinf+0x42>
 800b26e:	4601      	mov	r1, r0
 800b270:	f7f5 fc7e 	bl	8000b70 <__aeabi_fsub>
 800b274:	4601      	mov	r1, r0
 800b276:	f7f5 fe39 	bl	8000eec <__aeabi_fdiv>
 800b27a:	4604      	mov	r4, r0
 800b27c:	4620      	mov	r0, r4
 800b27e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800b282:	f1b5 5f7c 	cmp.w	r5, #1056964608	; 0x3f000000
 800b286:	da0b      	bge.n	800b2a0 <__ieee754_asinf+0x60>
 800b288:	f1b5 5f48 	cmp.w	r5, #838860800	; 0x32000000
 800b28c:	da73      	bge.n	800b376 <__ieee754_asinf+0x136>
 800b28e:	497f      	ldr	r1, [pc, #508]	; (800b48c <__ieee754_asinf+0x24c>)
 800b290:	f7f5 fc70 	bl	8000b74 <__addsf3>
 800b294:	f04f 517e 	mov.w	r1, #1065353216	; 0x3f800000
 800b298:	f7f5 ff30 	bl	80010fc <__aeabi_fcmpgt>
 800b29c:	2800      	cmp	r0, #0
 800b29e:	d1ed      	bne.n	800b27c <__ieee754_asinf+0x3c>
 800b2a0:	4620      	mov	r0, r4
 800b2a2:	f000 fb07 	bl	800b8b4 <fabsf>
 800b2a6:	4601      	mov	r1, r0
 800b2a8:	f04f 507e 	mov.w	r0, #1065353216	; 0x3f800000
 800b2ac:	f7f5 fc60 	bl	8000b70 <__aeabi_fsub>
 800b2b0:	f04f 517c 	mov.w	r1, #1056964608	; 0x3f000000
 800b2b4:	f7f5 fd66 	bl	8000d84 <__aeabi_fmul>
 800b2b8:	4604      	mov	r4, r0
 800b2ba:	4975      	ldr	r1, [pc, #468]	; (800b490 <__ieee754_asinf+0x250>)
 800b2bc:	f7f5 fd62 	bl	8000d84 <__aeabi_fmul>
 800b2c0:	4974      	ldr	r1, [pc, #464]	; (800b494 <__ieee754_asinf+0x254>)
 800b2c2:	f7f5 fc57 	bl	8000b74 <__addsf3>
 800b2c6:	4621      	mov	r1, r4
 800b2c8:	f7f5 fd5c 	bl	8000d84 <__aeabi_fmul>
 800b2cc:	4972      	ldr	r1, [pc, #456]	; (800b498 <__ieee754_asinf+0x258>)
 800b2ce:	f7f5 fc4f 	bl	8000b70 <__aeabi_fsub>
 800b2d2:	4621      	mov	r1, r4
 800b2d4:	f7f5 fd56 	bl	8000d84 <__aeabi_fmul>
 800b2d8:	4970      	ldr	r1, [pc, #448]	; (800b49c <__ieee754_asinf+0x25c>)
 800b2da:	f7f5 fc4b 	bl	8000b74 <__addsf3>
 800b2de:	4621      	mov	r1, r4
 800b2e0:	f7f5 fd50 	bl	8000d84 <__aeabi_fmul>
 800b2e4:	496e      	ldr	r1, [pc, #440]	; (800b4a0 <__ieee754_asinf+0x260>)
 800b2e6:	f7f5 fc43 	bl	8000b70 <__aeabi_fsub>
 800b2ea:	4621      	mov	r1, r4
 800b2ec:	f7f5 fd4a 	bl	8000d84 <__aeabi_fmul>
 800b2f0:	496c      	ldr	r1, [pc, #432]	; (800b4a4 <__ieee754_asinf+0x264>)
 800b2f2:	f7f5 fc3f 	bl	8000b74 <__addsf3>
 800b2f6:	4621      	mov	r1, r4
 800b2f8:	f7f5 fd44 	bl	8000d84 <__aeabi_fmul>
 800b2fc:	496a      	ldr	r1, [pc, #424]	; (800b4a8 <__ieee754_asinf+0x268>)
 800b2fe:	4680      	mov	r8, r0
 800b300:	4620      	mov	r0, r4
 800b302:	f7f5 fd3f 	bl	8000d84 <__aeabi_fmul>
 800b306:	4969      	ldr	r1, [pc, #420]	; (800b4ac <__ieee754_asinf+0x26c>)
 800b308:	f7f5 fc32 	bl	8000b70 <__aeabi_fsub>
 800b30c:	4621      	mov	r1, r4
 800b30e:	f7f5 fd39 	bl	8000d84 <__aeabi_fmul>
 800b312:	4967      	ldr	r1, [pc, #412]	; (800b4b0 <__ieee754_asinf+0x270>)
 800b314:	f7f5 fc2e 	bl	8000b74 <__addsf3>
 800b318:	4621      	mov	r1, r4
 800b31a:	f7f5 fd33 	bl	8000d84 <__aeabi_fmul>
 800b31e:	4965      	ldr	r1, [pc, #404]	; (800b4b4 <__ieee754_asinf+0x274>)
 800b320:	f7f5 fc26 	bl	8000b70 <__aeabi_fsub>
 800b324:	4621      	mov	r1, r4
 800b326:	f7f5 fd2d 	bl	8000d84 <__aeabi_fmul>
 800b32a:	f04f 517e 	mov.w	r1, #1065353216	; 0x3f800000
 800b32e:	f7f5 fc21 	bl	8000b74 <__addsf3>
 800b332:	4681      	mov	r9, r0
 800b334:	4620      	mov	r0, r4
 800b336:	f000 f955 	bl	800b5e4 <__ieee754_sqrtf>
 800b33a:	4b5f      	ldr	r3, [pc, #380]	; (800b4b8 <__ieee754_asinf+0x278>)
 800b33c:	4606      	mov	r6, r0
 800b33e:	429d      	cmp	r5, r3
 800b340:	dd63      	ble.n	800b40a <__ieee754_asinf+0x1ca>
 800b342:	4649      	mov	r1, r9
 800b344:	4640      	mov	r0, r8
 800b346:	f7f5 fdd1 	bl	8000eec <__aeabi_fdiv>
 800b34a:	4631      	mov	r1, r6
 800b34c:	f7f5 fd1a 	bl	8000d84 <__aeabi_fmul>
 800b350:	4631      	mov	r1, r6
 800b352:	f7f5 fc0f 	bl	8000b74 <__addsf3>
 800b356:	4601      	mov	r1, r0
 800b358:	f7f5 fc0c 	bl	8000b74 <__addsf3>
 800b35c:	4957      	ldr	r1, [pc, #348]	; (800b4bc <__ieee754_asinf+0x27c>)
 800b35e:	f7f5 fc09 	bl	8000b74 <__addsf3>
 800b362:	4601      	mov	r1, r0
 800b364:	4847      	ldr	r0, [pc, #284]	; (800b484 <__ieee754_asinf+0x244>)
 800b366:	f7f5 fc03 	bl	8000b70 <__aeabi_fsub>
 800b36a:	2f00      	cmp	r7, #0
 800b36c:	4604      	mov	r4, r0
 800b36e:	bfd8      	it	le
 800b370:	f100 4400 	addle.w	r4, r0, #2147483648	; 0x80000000
 800b374:	e782      	b.n	800b27c <__ieee754_asinf+0x3c>
 800b376:	4601      	mov	r1, r0
 800b378:	f7f5 fd04 	bl	8000d84 <__aeabi_fmul>
 800b37c:	4605      	mov	r5, r0
 800b37e:	4944      	ldr	r1, [pc, #272]	; (800b490 <__ieee754_asinf+0x250>)
 800b380:	f7f5 fd00 	bl	8000d84 <__aeabi_fmul>
 800b384:	4943      	ldr	r1, [pc, #268]	; (800b494 <__ieee754_asinf+0x254>)
 800b386:	f7f5 fbf5 	bl	8000b74 <__addsf3>
 800b38a:	4629      	mov	r1, r5
 800b38c:	f7f5 fcfa 	bl	8000d84 <__aeabi_fmul>
 800b390:	4941      	ldr	r1, [pc, #260]	; (800b498 <__ieee754_asinf+0x258>)
 800b392:	f7f5 fbed 	bl	8000b70 <__aeabi_fsub>
 800b396:	4629      	mov	r1, r5
 800b398:	f7f5 fcf4 	bl	8000d84 <__aeabi_fmul>
 800b39c:	493f      	ldr	r1, [pc, #252]	; (800b49c <__ieee754_asinf+0x25c>)
 800b39e:	f7f5 fbe9 	bl	8000b74 <__addsf3>
 800b3a2:	4629      	mov	r1, r5
 800b3a4:	f7f5 fcee 	bl	8000d84 <__aeabi_fmul>
 800b3a8:	493d      	ldr	r1, [pc, #244]	; (800b4a0 <__ieee754_asinf+0x260>)
 800b3aa:	f7f5 fbe1 	bl	8000b70 <__aeabi_fsub>
 800b3ae:	4629      	mov	r1, r5
 800b3b0:	f7f5 fce8 	bl	8000d84 <__aeabi_fmul>
 800b3b4:	493b      	ldr	r1, [pc, #236]	; (800b4a4 <__ieee754_asinf+0x264>)
 800b3b6:	f7f5 fbdd 	bl	8000b74 <__addsf3>
 800b3ba:	4629      	mov	r1, r5
 800b3bc:	f7f5 fce2 	bl	8000d84 <__aeabi_fmul>
 800b3c0:	4939      	ldr	r1, [pc, #228]	; (800b4a8 <__ieee754_asinf+0x268>)
 800b3c2:	4606      	mov	r6, r0
 800b3c4:	4628      	mov	r0, r5
 800b3c6:	f7f5 fcdd 	bl	8000d84 <__aeabi_fmul>
 800b3ca:	4938      	ldr	r1, [pc, #224]	; (800b4ac <__ieee754_asinf+0x26c>)
 800b3cc:	f7f5 fbd0 	bl	8000b70 <__aeabi_fsub>
 800b3d0:	4629      	mov	r1, r5
 800b3d2:	f7f5 fcd7 	bl	8000d84 <__aeabi_fmul>
 800b3d6:	4936      	ldr	r1, [pc, #216]	; (800b4b0 <__ieee754_asinf+0x270>)
 800b3d8:	f7f5 fbcc 	bl	8000b74 <__addsf3>
 800b3dc:	4629      	mov	r1, r5
 800b3de:	f7f5 fcd1 	bl	8000d84 <__aeabi_fmul>
 800b3e2:	4934      	ldr	r1, [pc, #208]	; (800b4b4 <__ieee754_asinf+0x274>)
 800b3e4:	f7f5 fbc4 	bl	8000b70 <__aeabi_fsub>
 800b3e8:	4629      	mov	r1, r5
 800b3ea:	f7f5 fccb 	bl	8000d84 <__aeabi_fmul>
 800b3ee:	f04f 517e 	mov.w	r1, #1065353216	; 0x3f800000
 800b3f2:	f7f5 fbbf 	bl	8000b74 <__addsf3>
 800b3f6:	4601      	mov	r1, r0
 800b3f8:	4630      	mov	r0, r6
 800b3fa:	f7f5 fd77 	bl	8000eec <__aeabi_fdiv>
 800b3fe:	4621      	mov	r1, r4
 800b400:	f7f5 fcc0 	bl	8000d84 <__aeabi_fmul>
 800b404:	4601      	mov	r1, r0
 800b406:	4620      	mov	r0, r4
 800b408:	e72d      	b.n	800b266 <__ieee754_asinf+0x26>
 800b40a:	4601      	mov	r1, r0
 800b40c:	f420 657f 	bic.w	r5, r0, #4080	; 0xff0
 800b410:	f7f5 fbb0 	bl	8000b74 <__addsf3>
 800b414:	4649      	mov	r1, r9
 800b416:	4682      	mov	sl, r0
 800b418:	4640      	mov	r0, r8
 800b41a:	f7f5 fd67 	bl	8000eec <__aeabi_fdiv>
 800b41e:	4601      	mov	r1, r0
 800b420:	4650      	mov	r0, sl
 800b422:	f7f5 fcaf 	bl	8000d84 <__aeabi_fmul>
 800b426:	f025 050f 	bic.w	r5, r5, #15
 800b42a:	4680      	mov	r8, r0
 800b42c:	4629      	mov	r1, r5
 800b42e:	4628      	mov	r0, r5
 800b430:	f7f5 fca8 	bl	8000d84 <__aeabi_fmul>
 800b434:	4601      	mov	r1, r0
 800b436:	4620      	mov	r0, r4
 800b438:	f7f5 fb9a 	bl	8000b70 <__aeabi_fsub>
 800b43c:	4631      	mov	r1, r6
 800b43e:	4604      	mov	r4, r0
 800b440:	4628      	mov	r0, r5
 800b442:	f7f5 fb97 	bl	8000b74 <__addsf3>
 800b446:	4601      	mov	r1, r0
 800b448:	4620      	mov	r0, r4
 800b44a:	f7f5 fd4f 	bl	8000eec <__aeabi_fdiv>
 800b44e:	4601      	mov	r1, r0
 800b450:	f7f5 fb90 	bl	8000b74 <__addsf3>
 800b454:	4601      	mov	r1, r0
 800b456:	480c      	ldr	r0, [pc, #48]	; (800b488 <__ieee754_asinf+0x248>)
 800b458:	f7f5 fb8a 	bl	8000b70 <__aeabi_fsub>
 800b45c:	4601      	mov	r1, r0
 800b45e:	4640      	mov	r0, r8
 800b460:	f7f5 fb86 	bl	8000b70 <__aeabi_fsub>
 800b464:	4629      	mov	r1, r5
 800b466:	4604      	mov	r4, r0
 800b468:	4628      	mov	r0, r5
 800b46a:	f7f5 fb83 	bl	8000b74 <__addsf3>
 800b46e:	4601      	mov	r1, r0
 800b470:	4813      	ldr	r0, [pc, #76]	; (800b4c0 <__ieee754_asinf+0x280>)
 800b472:	f7f5 fb7d 	bl	8000b70 <__aeabi_fsub>
 800b476:	4601      	mov	r1, r0
 800b478:	4620      	mov	r0, r4
 800b47a:	f7f5 fb79 	bl	8000b70 <__aeabi_fsub>
 800b47e:	4601      	mov	r1, r0
 800b480:	480f      	ldr	r0, [pc, #60]	; (800b4c0 <__ieee754_asinf+0x280>)
 800b482:	e770      	b.n	800b366 <__ieee754_asinf+0x126>
 800b484:	3fc90fdb 	.word	0x3fc90fdb
 800b488:	b33bbd2e 	.word	0xb33bbd2e
 800b48c:	7149f2ca 	.word	0x7149f2ca
 800b490:	3811ef08 	.word	0x3811ef08
 800b494:	3a4f7f04 	.word	0x3a4f7f04
 800b498:	3d241146 	.word	0x3d241146
 800b49c:	3e4e0aa8 	.word	0x3e4e0aa8
 800b4a0:	3ea6b090 	.word	0x3ea6b090
 800b4a4:	3e2aaaab 	.word	0x3e2aaaab
 800b4a8:	3d9dc62e 	.word	0x3d9dc62e
 800b4ac:	3f303361 	.word	0x3f303361
 800b4b0:	4001572d 	.word	0x4001572d
 800b4b4:	4019d139 	.word	0x4019d139
 800b4b8:	3f799999 	.word	0x3f799999
 800b4bc:	333bbd2e 	.word	0x333bbd2e
 800b4c0:	3f490fdb 	.word	0x3f490fdb

0800b4c4 <__ieee754_atan2f>:
 800b4c4:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800b4c6:	f021 4600 	bic.w	r6, r1, #2147483648	; 0x80000000
 800b4ca:	f1b6 4fff 	cmp.w	r6, #2139095040	; 0x7f800000
 800b4ce:	4603      	mov	r3, r0
 800b4d0:	dc05      	bgt.n	800b4de <__ieee754_atan2f+0x1a>
 800b4d2:	f020 4200 	bic.w	r2, r0, #2147483648	; 0x80000000
 800b4d6:	f1b2 4fff 	cmp.w	r2, #2139095040	; 0x7f800000
 800b4da:	4607      	mov	r7, r0
 800b4dc:	dd04      	ble.n	800b4e8 <__ieee754_atan2f+0x24>
 800b4de:	4618      	mov	r0, r3
 800b4e0:	f7f5 fb48 	bl	8000b74 <__addsf3>
 800b4e4:	4603      	mov	r3, r0
 800b4e6:	e024      	b.n	800b532 <__ieee754_atan2f+0x6e>
 800b4e8:	f1b1 5f7e 	cmp.w	r1, #1065353216	; 0x3f800000
 800b4ec:	d103      	bne.n	800b4f6 <__ieee754_atan2f+0x32>
 800b4ee:	e8bd 40f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, lr}
 800b4f2:	f000 b8d3 	b.w	800b69c <atanf>
 800b4f6:	178c      	asrs	r4, r1, #30
 800b4f8:	f004 0402 	and.w	r4, r4, #2
 800b4fc:	ea44 74d0 	orr.w	r4, r4, r0, lsr #31
 800b500:	b92a      	cbnz	r2, 800b50e <__ieee754_atan2f+0x4a>
 800b502:	2c02      	cmp	r4, #2
 800b504:	d057      	beq.n	800b5b6 <__ieee754_atan2f+0xf2>
 800b506:	2c03      	cmp	r4, #3
 800b508:	d113      	bne.n	800b532 <__ieee754_atan2f+0x6e>
 800b50a:	4b2d      	ldr	r3, [pc, #180]	; (800b5c0 <__ieee754_atan2f+0xfc>)
 800b50c:	e011      	b.n	800b532 <__ieee754_atan2f+0x6e>
 800b50e:	b91e      	cbnz	r6, 800b518 <__ieee754_atan2f+0x54>
 800b510:	2f00      	cmp	r7, #0
 800b512:	da52      	bge.n	800b5ba <__ieee754_atan2f+0xf6>
 800b514:	4b2b      	ldr	r3, [pc, #172]	; (800b5c4 <__ieee754_atan2f+0x100>)
 800b516:	e00c      	b.n	800b532 <__ieee754_atan2f+0x6e>
 800b518:	f1b6 4fff 	cmp.w	r6, #2139095040	; 0x7f800000
 800b51c:	d11a      	bne.n	800b554 <__ieee754_atan2f+0x90>
 800b51e:	f1b2 4fff 	cmp.w	r2, #2139095040	; 0x7f800000
 800b522:	d10c      	bne.n	800b53e <__ieee754_atan2f+0x7a>
 800b524:	2c02      	cmp	r4, #2
 800b526:	d006      	beq.n	800b536 <__ieee754_atan2f+0x72>
 800b528:	2c03      	cmp	r4, #3
 800b52a:	d006      	beq.n	800b53a <__ieee754_atan2f+0x76>
 800b52c:	2c01      	cmp	r4, #1
 800b52e:	d140      	bne.n	800b5b2 <__ieee754_atan2f+0xee>
 800b530:	4b25      	ldr	r3, [pc, #148]	; (800b5c8 <__ieee754_atan2f+0x104>)
 800b532:	4618      	mov	r0, r3
 800b534:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 800b536:	4b25      	ldr	r3, [pc, #148]	; (800b5cc <__ieee754_atan2f+0x108>)
 800b538:	e7fb      	b.n	800b532 <__ieee754_atan2f+0x6e>
 800b53a:	4b25      	ldr	r3, [pc, #148]	; (800b5d0 <__ieee754_atan2f+0x10c>)
 800b53c:	e7f9      	b.n	800b532 <__ieee754_atan2f+0x6e>
 800b53e:	2c02      	cmp	r4, #2
 800b540:	d039      	beq.n	800b5b6 <__ieee754_atan2f+0xf2>
 800b542:	2c03      	cmp	r4, #3
 800b544:	d0e1      	beq.n	800b50a <__ieee754_atan2f+0x46>
 800b546:	2c01      	cmp	r4, #1
 800b548:	d102      	bne.n	800b550 <__ieee754_atan2f+0x8c>
 800b54a:	f04f 4300 	mov.w	r3, #2147483648	; 0x80000000
 800b54e:	e7f0      	b.n	800b532 <__ieee754_atan2f+0x6e>
 800b550:	2300      	movs	r3, #0
 800b552:	e7ee      	b.n	800b532 <__ieee754_atan2f+0x6e>
 800b554:	f1b2 4fff 	cmp.w	r2, #2139095040	; 0x7f800000
 800b558:	d0da      	beq.n	800b510 <__ieee754_atan2f+0x4c>
 800b55a:	1b92      	subs	r2, r2, r6
 800b55c:	15d2      	asrs	r2, r2, #23
 800b55e:	2a3c      	cmp	r2, #60	; 0x3c
 800b560:	dc17      	bgt.n	800b592 <__ieee754_atan2f+0xce>
 800b562:	2900      	cmp	r1, #0
 800b564:	da01      	bge.n	800b56a <__ieee754_atan2f+0xa6>
 800b566:	323c      	adds	r2, #60	; 0x3c
 800b568:	db15      	blt.n	800b596 <__ieee754_atan2f+0xd2>
 800b56a:	4618      	mov	r0, r3
 800b56c:	f7f5 fcbe 	bl	8000eec <__aeabi_fdiv>
 800b570:	f000 f9a0 	bl	800b8b4 <fabsf>
 800b574:	f000 f892 	bl	800b69c <atanf>
 800b578:	4603      	mov	r3, r0
 800b57a:	2c01      	cmp	r4, #1
 800b57c:	d00d      	beq.n	800b59a <__ieee754_atan2f+0xd6>
 800b57e:	2c02      	cmp	r4, #2
 800b580:	d00e      	beq.n	800b5a0 <__ieee754_atan2f+0xdc>
 800b582:	2c00      	cmp	r4, #0
 800b584:	d0d5      	beq.n	800b532 <__ieee754_atan2f+0x6e>
 800b586:	4913      	ldr	r1, [pc, #76]	; (800b5d4 <__ieee754_atan2f+0x110>)
 800b588:	4618      	mov	r0, r3
 800b58a:	f7f5 faf3 	bl	8000b74 <__addsf3>
 800b58e:	4912      	ldr	r1, [pc, #72]	; (800b5d8 <__ieee754_atan2f+0x114>)
 800b590:	e00c      	b.n	800b5ac <__ieee754_atan2f+0xe8>
 800b592:	4b12      	ldr	r3, [pc, #72]	; (800b5dc <__ieee754_atan2f+0x118>)
 800b594:	e7f1      	b.n	800b57a <__ieee754_atan2f+0xb6>
 800b596:	2300      	movs	r3, #0
 800b598:	e7ef      	b.n	800b57a <__ieee754_atan2f+0xb6>
 800b59a:	f103 4300 	add.w	r3, r3, #2147483648	; 0x80000000
 800b59e:	e7c8      	b.n	800b532 <__ieee754_atan2f+0x6e>
 800b5a0:	490c      	ldr	r1, [pc, #48]	; (800b5d4 <__ieee754_atan2f+0x110>)
 800b5a2:	4618      	mov	r0, r3
 800b5a4:	f7f5 fae6 	bl	8000b74 <__addsf3>
 800b5a8:	4601      	mov	r1, r0
 800b5aa:	480b      	ldr	r0, [pc, #44]	; (800b5d8 <__ieee754_atan2f+0x114>)
 800b5ac:	f7f5 fae0 	bl	8000b70 <__aeabi_fsub>
 800b5b0:	e798      	b.n	800b4e4 <__ieee754_atan2f+0x20>
 800b5b2:	4b0b      	ldr	r3, [pc, #44]	; (800b5e0 <__ieee754_atan2f+0x11c>)
 800b5b4:	e7bd      	b.n	800b532 <__ieee754_atan2f+0x6e>
 800b5b6:	4b08      	ldr	r3, [pc, #32]	; (800b5d8 <__ieee754_atan2f+0x114>)
 800b5b8:	e7bb      	b.n	800b532 <__ieee754_atan2f+0x6e>
 800b5ba:	4b08      	ldr	r3, [pc, #32]	; (800b5dc <__ieee754_atan2f+0x118>)
 800b5bc:	e7b9      	b.n	800b532 <__ieee754_atan2f+0x6e>
 800b5be:	bf00      	nop
 800b5c0:	c0490fdb 	.word	0xc0490fdb
 800b5c4:	bfc90fdb 	.word	0xbfc90fdb
 800b5c8:	bf490fdb 	.word	0xbf490fdb
 800b5cc:	4016cbe4 	.word	0x4016cbe4
 800b5d0:	c016cbe4 	.word	0xc016cbe4
 800b5d4:	33bbbd2e 	.word	0x33bbbd2e
 800b5d8:	40490fdb 	.word	0x40490fdb
 800b5dc:	3fc90fdb 	.word	0x3fc90fdb
 800b5e0:	3f490fdb 	.word	0x3f490fdb

0800b5e4 <__ieee754_sqrtf>:
 800b5e4:	f020 4200 	bic.w	r2, r0, #2147483648	; 0x80000000
 800b5e8:	f1b2 4fff 	cmp.w	r2, #2139095040	; 0x7f800000
 800b5ec:	b570      	push	{r4, r5, r6, lr}
 800b5ee:	4603      	mov	r3, r0
 800b5f0:	4604      	mov	r4, r0
 800b5f2:	d309      	bcc.n	800b608 <__ieee754_sqrtf+0x24>
 800b5f4:	4601      	mov	r1, r0
 800b5f6:	f7f5 fbc5 	bl	8000d84 <__aeabi_fmul>
 800b5fa:	4601      	mov	r1, r0
 800b5fc:	4620      	mov	r0, r4
 800b5fe:	f7f5 fab9 	bl	8000b74 <__addsf3>
 800b602:	4604      	mov	r4, r0
 800b604:	4620      	mov	r0, r4
 800b606:	bd70      	pop	{r4, r5, r6, pc}
 800b608:	2a00      	cmp	r2, #0
 800b60a:	d0fb      	beq.n	800b604 <__ieee754_sqrtf+0x20>
 800b60c:	2800      	cmp	r0, #0
 800b60e:	da06      	bge.n	800b61e <__ieee754_sqrtf+0x3a>
 800b610:	4601      	mov	r1, r0
 800b612:	f7f5 faad 	bl	8000b70 <__aeabi_fsub>
 800b616:	4601      	mov	r1, r0
 800b618:	f7f5 fc68 	bl	8000eec <__aeabi_fdiv>
 800b61c:	e7f1      	b.n	800b602 <__ieee754_sqrtf+0x1e>
 800b61e:	f5b2 0f00 	cmp.w	r2, #8388608	; 0x800000
 800b622:	ea4f 54e0 	mov.w	r4, r0, asr #23
 800b626:	d32e      	bcc.n	800b686 <__ieee754_sqrtf+0xa2>
 800b628:	3c7f      	subs	r4, #127	; 0x7f
 800b62a:	07e2      	lsls	r2, r4, #31
 800b62c:	f04f 0200 	mov.w	r2, #0
 800b630:	ea4f 0164 	mov.w	r1, r4, asr #1
 800b634:	4616      	mov	r6, r2
 800b636:	f04f 0419 	mov.w	r4, #25
 800b63a:	f04f 7080 	mov.w	r0, #16777216	; 0x1000000
 800b63e:	f3c3 0316 	ubfx	r3, r3, #0, #23
 800b642:	f443 0300 	orr.w	r3, r3, #8388608	; 0x800000
 800b646:	bf48      	it	mi
 800b648:	005b      	lslmi	r3, r3, #1
 800b64a:	005b      	lsls	r3, r3, #1
 800b64c:	1835      	adds	r5, r6, r0
 800b64e:	429d      	cmp	r5, r3
 800b650:	bfde      	ittt	le
 800b652:	182e      	addle	r6, r5, r0
 800b654:	1b5b      	suble	r3, r3, r5
 800b656:	1812      	addle	r2, r2, r0
 800b658:	3c01      	subs	r4, #1
 800b65a:	ea4f 0343 	mov.w	r3, r3, lsl #1
 800b65e:	ea4f 0050 	mov.w	r0, r0, lsr #1
 800b662:	d1f3      	bne.n	800b64c <__ieee754_sqrtf+0x68>
 800b664:	b113      	cbz	r3, 800b66c <__ieee754_sqrtf+0x88>
 800b666:	3201      	adds	r2, #1
 800b668:	f022 0201 	bic.w	r2, r2, #1
 800b66c:	1054      	asrs	r4, r2, #1
 800b66e:	f104 547c 	add.w	r4, r4, #1056964608	; 0x3f000000
 800b672:	eb04 54c1 	add.w	r4, r4, r1, lsl #23
 800b676:	e7c5      	b.n	800b604 <__ieee754_sqrtf+0x20>
 800b678:	005b      	lsls	r3, r3, #1
 800b67a:	3201      	adds	r2, #1
 800b67c:	0219      	lsls	r1, r3, #8
 800b67e:	d5fb      	bpl.n	800b678 <__ieee754_sqrtf+0x94>
 800b680:	3a01      	subs	r2, #1
 800b682:	1aa4      	subs	r4, r4, r2
 800b684:	e7d0      	b.n	800b628 <__ieee754_sqrtf+0x44>
 800b686:	2200      	movs	r2, #0
 800b688:	e7f8      	b.n	800b67c <__ieee754_sqrtf+0x98>

0800b68a <matherr>:
 800b68a:	2000      	movs	r0, #0
 800b68c:	4770      	bx	lr
	...

0800b690 <nan>:
 800b690:	2000      	movs	r0, #0
 800b692:	4901      	ldr	r1, [pc, #4]	; (800b698 <nan+0x8>)
 800b694:	4770      	bx	lr
 800b696:	bf00      	nop
 800b698:	7ff80000 	.word	0x7ff80000

0800b69c <atanf>:
 800b69c:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800b6a0:	f020 4500 	bic.w	r5, r0, #2147483648	; 0x80000000
 800b6a4:	f1b5 4fa1 	cmp.w	r5, #1350565888	; 0x50800000
 800b6a8:	4604      	mov	r4, r0
 800b6aa:	4607      	mov	r7, r0
 800b6ac:	db0e      	blt.n	800b6cc <atanf+0x30>
 800b6ae:	f1b5 4fff 	cmp.w	r5, #2139095040	; 0x7f800000
 800b6b2:	dd04      	ble.n	800b6be <atanf+0x22>
 800b6b4:	4601      	mov	r1, r0
 800b6b6:	f7f5 fa5d 	bl	8000b74 <__addsf3>
 800b6ba:	4604      	mov	r4, r0
 800b6bc:	e003      	b.n	800b6c6 <atanf+0x2a>
 800b6be:	2800      	cmp	r0, #0
 800b6c0:	f340 80cd 	ble.w	800b85e <atanf+0x1c2>
 800b6c4:	4c67      	ldr	r4, [pc, #412]	; (800b864 <atanf+0x1c8>)
 800b6c6:	4620      	mov	r0, r4
 800b6c8:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800b6cc:	4b66      	ldr	r3, [pc, #408]	; (800b868 <atanf+0x1cc>)
 800b6ce:	429d      	cmp	r5, r3
 800b6d0:	dc0e      	bgt.n	800b6f0 <atanf+0x54>
 800b6d2:	f1b5 5f44 	cmp.w	r5, #822083584	; 0x31000000
 800b6d6:	da08      	bge.n	800b6ea <atanf+0x4e>
 800b6d8:	4964      	ldr	r1, [pc, #400]	; (800b86c <atanf+0x1d0>)
 800b6da:	f7f5 fa4b 	bl	8000b74 <__addsf3>
 800b6de:	f04f 517e 	mov.w	r1, #1065353216	; 0x3f800000
 800b6e2:	f7f5 fd0b 	bl	80010fc <__aeabi_fcmpgt>
 800b6e6:	2800      	cmp	r0, #0
 800b6e8:	d1ed      	bne.n	800b6c6 <atanf+0x2a>
 800b6ea:	f04f 36ff 	mov.w	r6, #4294967295	; 0xffffffff
 800b6ee:	e01c      	b.n	800b72a <atanf+0x8e>
 800b6f0:	f000 f8e0 	bl	800b8b4 <fabsf>
 800b6f4:	4b5e      	ldr	r3, [pc, #376]	; (800b870 <atanf+0x1d4>)
 800b6f6:	4604      	mov	r4, r0
 800b6f8:	429d      	cmp	r5, r3
 800b6fa:	dc7c      	bgt.n	800b7f6 <atanf+0x15a>
 800b6fc:	f5a3 03d0 	sub.w	r3, r3, #6815744	; 0x680000
 800b700:	429d      	cmp	r5, r3
 800b702:	dc67      	bgt.n	800b7d4 <atanf+0x138>
 800b704:	4601      	mov	r1, r0
 800b706:	f7f5 fa35 	bl	8000b74 <__addsf3>
 800b70a:	f04f 517e 	mov.w	r1, #1065353216	; 0x3f800000
 800b70e:	f7f5 fa2f 	bl	8000b70 <__aeabi_fsub>
 800b712:	f04f 4180 	mov.w	r1, #1073741824	; 0x40000000
 800b716:	4605      	mov	r5, r0
 800b718:	4620      	mov	r0, r4
 800b71a:	f7f5 fa2b 	bl	8000b74 <__addsf3>
 800b71e:	4601      	mov	r1, r0
 800b720:	4628      	mov	r0, r5
 800b722:	f7f5 fbe3 	bl	8000eec <__aeabi_fdiv>
 800b726:	2600      	movs	r6, #0
 800b728:	4604      	mov	r4, r0
 800b72a:	4621      	mov	r1, r4
 800b72c:	4620      	mov	r0, r4
 800b72e:	f7f5 fb29 	bl	8000d84 <__aeabi_fmul>
 800b732:	4601      	mov	r1, r0
 800b734:	4680      	mov	r8, r0
 800b736:	f7f5 fb25 	bl	8000d84 <__aeabi_fmul>
 800b73a:	4605      	mov	r5, r0
 800b73c:	494d      	ldr	r1, [pc, #308]	; (800b874 <atanf+0x1d8>)
 800b73e:	f7f5 fb21 	bl	8000d84 <__aeabi_fmul>
 800b742:	494d      	ldr	r1, [pc, #308]	; (800b878 <atanf+0x1dc>)
 800b744:	f7f5 fa16 	bl	8000b74 <__addsf3>
 800b748:	4629      	mov	r1, r5
 800b74a:	f7f5 fb1b 	bl	8000d84 <__aeabi_fmul>
 800b74e:	494b      	ldr	r1, [pc, #300]	; (800b87c <atanf+0x1e0>)
 800b750:	f7f5 fa10 	bl	8000b74 <__addsf3>
 800b754:	4629      	mov	r1, r5
 800b756:	f7f5 fb15 	bl	8000d84 <__aeabi_fmul>
 800b75a:	4949      	ldr	r1, [pc, #292]	; (800b880 <atanf+0x1e4>)
 800b75c:	f7f5 fa0a 	bl	8000b74 <__addsf3>
 800b760:	4629      	mov	r1, r5
 800b762:	f7f5 fb0f 	bl	8000d84 <__aeabi_fmul>
 800b766:	4947      	ldr	r1, [pc, #284]	; (800b884 <atanf+0x1e8>)
 800b768:	f7f5 fa04 	bl	8000b74 <__addsf3>
 800b76c:	4629      	mov	r1, r5
 800b76e:	f7f5 fb09 	bl	8000d84 <__aeabi_fmul>
 800b772:	4945      	ldr	r1, [pc, #276]	; (800b888 <atanf+0x1ec>)
 800b774:	f7f5 f9fe 	bl	8000b74 <__addsf3>
 800b778:	4641      	mov	r1, r8
 800b77a:	f7f5 fb03 	bl	8000d84 <__aeabi_fmul>
 800b77e:	4943      	ldr	r1, [pc, #268]	; (800b88c <atanf+0x1f0>)
 800b780:	4680      	mov	r8, r0
 800b782:	4628      	mov	r0, r5
 800b784:	f7f5 fafe 	bl	8000d84 <__aeabi_fmul>
 800b788:	4941      	ldr	r1, [pc, #260]	; (800b890 <atanf+0x1f4>)
 800b78a:	f7f5 f9f1 	bl	8000b70 <__aeabi_fsub>
 800b78e:	4629      	mov	r1, r5
 800b790:	f7f5 faf8 	bl	8000d84 <__aeabi_fmul>
 800b794:	493f      	ldr	r1, [pc, #252]	; (800b894 <atanf+0x1f8>)
 800b796:	f7f5 f9eb 	bl	8000b70 <__aeabi_fsub>
 800b79a:	4629      	mov	r1, r5
 800b79c:	f7f5 faf2 	bl	8000d84 <__aeabi_fmul>
 800b7a0:	493d      	ldr	r1, [pc, #244]	; (800b898 <atanf+0x1fc>)
 800b7a2:	f7f5 f9e5 	bl	8000b70 <__aeabi_fsub>
 800b7a6:	4629      	mov	r1, r5
 800b7a8:	f7f5 faec 	bl	8000d84 <__aeabi_fmul>
 800b7ac:	493b      	ldr	r1, [pc, #236]	; (800b89c <atanf+0x200>)
 800b7ae:	f7f5 f9df 	bl	8000b70 <__aeabi_fsub>
 800b7b2:	4629      	mov	r1, r5
 800b7b4:	f7f5 fae6 	bl	8000d84 <__aeabi_fmul>
 800b7b8:	4601      	mov	r1, r0
 800b7ba:	4640      	mov	r0, r8
 800b7bc:	f7f5 f9da 	bl	8000b74 <__addsf3>
 800b7c0:	4621      	mov	r1, r4
 800b7c2:	f7f5 fadf 	bl	8000d84 <__aeabi_fmul>
 800b7c6:	1c73      	adds	r3, r6, #1
 800b7c8:	4601      	mov	r1, r0
 800b7ca:	d133      	bne.n	800b834 <atanf+0x198>
 800b7cc:	4620      	mov	r0, r4
 800b7ce:	f7f5 f9cf 	bl	8000b70 <__aeabi_fsub>
 800b7d2:	e772      	b.n	800b6ba <atanf+0x1e>
 800b7d4:	f04f 517e 	mov.w	r1, #1065353216	; 0x3f800000
 800b7d8:	f7f5 f9ca 	bl	8000b70 <__aeabi_fsub>
 800b7dc:	f04f 517e 	mov.w	r1, #1065353216	; 0x3f800000
 800b7e0:	4605      	mov	r5, r0
 800b7e2:	4620      	mov	r0, r4
 800b7e4:	f7f5 f9c6 	bl	8000b74 <__addsf3>
 800b7e8:	4601      	mov	r1, r0
 800b7ea:	4628      	mov	r0, r5
 800b7ec:	f7f5 fb7e 	bl	8000eec <__aeabi_fdiv>
 800b7f0:	2601      	movs	r6, #1
 800b7f2:	4604      	mov	r4, r0
 800b7f4:	e799      	b.n	800b72a <atanf+0x8e>
 800b7f6:	4b2a      	ldr	r3, [pc, #168]	; (800b8a0 <atanf+0x204>)
 800b7f8:	429d      	cmp	r5, r3
 800b7fa:	dc14      	bgt.n	800b826 <atanf+0x18a>
 800b7fc:	f04f 517f 	mov.w	r1, #1069547520	; 0x3fc00000
 800b800:	f7f5 f9b6 	bl	8000b70 <__aeabi_fsub>
 800b804:	f04f 517f 	mov.w	r1, #1069547520	; 0x3fc00000
 800b808:	4605      	mov	r5, r0
 800b80a:	4620      	mov	r0, r4
 800b80c:	f7f5 faba 	bl	8000d84 <__aeabi_fmul>
 800b810:	f04f 517e 	mov.w	r1, #1065353216	; 0x3f800000
 800b814:	f7f5 f9ae 	bl	8000b74 <__addsf3>
 800b818:	4601      	mov	r1, r0
 800b81a:	4628      	mov	r0, r5
 800b81c:	f7f5 fb66 	bl	8000eec <__aeabi_fdiv>
 800b820:	2602      	movs	r6, #2
 800b822:	4604      	mov	r4, r0
 800b824:	e781      	b.n	800b72a <atanf+0x8e>
 800b826:	4601      	mov	r1, r0
 800b828:	481e      	ldr	r0, [pc, #120]	; (800b8a4 <atanf+0x208>)
 800b82a:	f7f5 fb5f 	bl	8000eec <__aeabi_fdiv>
 800b82e:	2603      	movs	r6, #3
 800b830:	4604      	mov	r4, r0
 800b832:	e77a      	b.n	800b72a <atanf+0x8e>
 800b834:	4b1c      	ldr	r3, [pc, #112]	; (800b8a8 <atanf+0x20c>)
 800b836:	f853 1026 	ldr.w	r1, [r3, r6, lsl #2]
 800b83a:	f7f5 f999 	bl	8000b70 <__aeabi_fsub>
 800b83e:	4621      	mov	r1, r4
 800b840:	f7f5 f996 	bl	8000b70 <__aeabi_fsub>
 800b844:	4b19      	ldr	r3, [pc, #100]	; (800b8ac <atanf+0x210>)
 800b846:	4601      	mov	r1, r0
 800b848:	f853 0026 	ldr.w	r0, [r3, r6, lsl #2]
 800b84c:	f7f5 f990 	bl	8000b70 <__aeabi_fsub>
 800b850:	2f00      	cmp	r7, #0
 800b852:	4604      	mov	r4, r0
 800b854:	f6bf af37 	bge.w	800b6c6 <atanf+0x2a>
 800b858:	f100 4400 	add.w	r4, r0, #2147483648	; 0x80000000
 800b85c:	e733      	b.n	800b6c6 <atanf+0x2a>
 800b85e:	4c14      	ldr	r4, [pc, #80]	; (800b8b0 <atanf+0x214>)
 800b860:	e731      	b.n	800b6c6 <atanf+0x2a>
 800b862:	bf00      	nop
 800b864:	3fc90fdb 	.word	0x3fc90fdb
 800b868:	3edfffff 	.word	0x3edfffff
 800b86c:	7149f2ca 	.word	0x7149f2ca
 800b870:	3f97ffff 	.word	0x3f97ffff
 800b874:	3c8569d7 	.word	0x3c8569d7
 800b878:	3d4bda59 	.word	0x3d4bda59
 800b87c:	3d886b35 	.word	0x3d886b35
 800b880:	3dba2e6e 	.word	0x3dba2e6e
 800b884:	3e124925 	.word	0x3e124925
 800b888:	3eaaaaab 	.word	0x3eaaaaab
 800b88c:	bd15a221 	.word	0xbd15a221
 800b890:	3d6ef16b 	.word	0x3d6ef16b
 800b894:	3d9d8795 	.word	0x3d9d8795
 800b898:	3de38e38 	.word	0x3de38e38
 800b89c:	3e4ccccd 	.word	0x3e4ccccd
 800b8a0:	401bffff 	.word	0x401bffff
 800b8a4:	bf800000 	.word	0xbf800000
 800b8a8:	0800bc8c 	.word	0x0800bc8c
 800b8ac:	0800bc7c 	.word	0x0800bc7c
 800b8b0:	bfc90fdb 	.word	0xbfc90fdb

0800b8b4 <fabsf>:
 800b8b4:	f020 4000 	bic.w	r0, r0, #2147483648	; 0x80000000
 800b8b8:	4770      	bx	lr
	...

0800b8bc <_init>:
 800b8bc:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800b8be:	bf00      	nop
 800b8c0:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800b8c2:	bc08      	pop	{r3}
 800b8c4:	469e      	mov	lr, r3
 800b8c6:	4770      	bx	lr

0800b8c8 <_fini>:
 800b8c8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800b8ca:	bf00      	nop
 800b8cc:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800b8ce:	bc08      	pop	{r3}
 800b8d0:	469e      	mov	lr, r3
 800b8d2:	4770      	bx	lr
