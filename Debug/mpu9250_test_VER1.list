
mpu9250_test_VER1.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   0000010c  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00009950  08000110  08000110  00010110  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000388  08009a60  08009a60  00019a60  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08009de8  08009de8  000201e4  2**0
                  CONTENTS
  4 .ARM          00000000  08009de8  08009de8  000201e4  2**0
                  CONTENTS
  5 .preinit_array 00000000  08009de8  08009de8  000201e4  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08009de8  08009de8  00019de8  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  08009dec  08009dec  00019dec  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         000001e4  20000000  08009df0  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          00000264  200001e8  08009fd4  000201e8  2**3
                  ALLOC
 10 ._user_heap_stack 00000604  2000044c  08009fd4  0002044c  2**0
                  ALLOC
 11 .ARM.attributes 00000029  00000000  00000000  000201e4  2**0
                  CONTENTS, READONLY
 12 .debug_info   0000fb0e  00000000  00000000  0002020d  2**0
                  CONTENTS, READONLY, DEBUGGING
 13 .debug_abbrev 00001f84  00000000  00000000  0002fd1b  2**0
                  CONTENTS, READONLY, DEBUGGING
 14 .debug_aranges 000010d8  00000000  00000000  00031ca0  2**3
                  CONTENTS, READONLY, DEBUGGING
 15 .debug_ranges 00001008  00000000  00000000  00032d78  2**3
                  CONTENTS, READONLY, DEBUGGING
 16 .debug_macro  000175d1  00000000  00000000  00033d80  2**0
                  CONTENTS, READONLY, DEBUGGING
 17 .debug_line   0000d24b  00000000  00000000  0004b351  2**0
                  CONTENTS, READONLY, DEBUGGING
 18 .debug_str    0008f394  00000000  00000000  0005859c  2**0
                  CONTENTS, READONLY, DEBUGGING
 19 .comment      0000007b  00000000  00000000  000e7930  2**0
                  CONTENTS, READONLY
 20 .debug_frame  00005658  00000000  00000000  000e79ac  2**2
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

08000110 <__do_global_dtors_aux>:
 8000110:	b510      	push	{r4, lr}
 8000112:	4c05      	ldr	r4, [pc, #20]	; (8000128 <__do_global_dtors_aux+0x18>)
 8000114:	7823      	ldrb	r3, [r4, #0]
 8000116:	b933      	cbnz	r3, 8000126 <__do_global_dtors_aux+0x16>
 8000118:	4b04      	ldr	r3, [pc, #16]	; (800012c <__do_global_dtors_aux+0x1c>)
 800011a:	b113      	cbz	r3, 8000122 <__do_global_dtors_aux+0x12>
 800011c:	4804      	ldr	r0, [pc, #16]	; (8000130 <__do_global_dtors_aux+0x20>)
 800011e:	f3af 8000 	nop.w
 8000122:	2301      	movs	r3, #1
 8000124:	7023      	strb	r3, [r4, #0]
 8000126:	bd10      	pop	{r4, pc}
 8000128:	200001e8 	.word	0x200001e8
 800012c:	00000000 	.word	0x00000000
 8000130:	08009a48 	.word	0x08009a48

08000134 <frame_dummy>:
 8000134:	b508      	push	{r3, lr}
 8000136:	4b03      	ldr	r3, [pc, #12]	; (8000144 <frame_dummy+0x10>)
 8000138:	b11b      	cbz	r3, 8000142 <frame_dummy+0xe>
 800013a:	4903      	ldr	r1, [pc, #12]	; (8000148 <frame_dummy+0x14>)
 800013c:	4803      	ldr	r0, [pc, #12]	; (800014c <frame_dummy+0x18>)
 800013e:	f3af 8000 	nop.w
 8000142:	bd08      	pop	{r3, pc}
 8000144:	00000000 	.word	0x00000000
 8000148:	200001ec 	.word	0x200001ec
 800014c:	08009a48 	.word	0x08009a48

08000150 <strlen>:
 8000150:	4603      	mov	r3, r0
 8000152:	f813 2b01 	ldrb.w	r2, [r3], #1
 8000156:	2a00      	cmp	r2, #0
 8000158:	d1fb      	bne.n	8000152 <strlen+0x2>
 800015a:	1a18      	subs	r0, r3, r0
 800015c:	3801      	subs	r0, #1
 800015e:	4770      	bx	lr

08000160 <__aeabi_drsub>:
 8000160:	f081 4100 	eor.w	r1, r1, #2147483648	; 0x80000000
 8000164:	e002      	b.n	800016c <__adddf3>
 8000166:	bf00      	nop

08000168 <__aeabi_dsub>:
 8000168:	f083 4300 	eor.w	r3, r3, #2147483648	; 0x80000000

0800016c <__adddf3>:
 800016c:	b530      	push	{r4, r5, lr}
 800016e:	ea4f 0441 	mov.w	r4, r1, lsl #1
 8000172:	ea4f 0543 	mov.w	r5, r3, lsl #1
 8000176:	ea94 0f05 	teq	r4, r5
 800017a:	bf08      	it	eq
 800017c:	ea90 0f02 	teqeq	r0, r2
 8000180:	bf1f      	itttt	ne
 8000182:	ea54 0c00 	orrsne.w	ip, r4, r0
 8000186:	ea55 0c02 	orrsne.w	ip, r5, r2
 800018a:	ea7f 5c64 	mvnsne.w	ip, r4, asr #21
 800018e:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 8000192:	f000 80e2 	beq.w	800035a <__adddf3+0x1ee>
 8000196:	ea4f 5454 	mov.w	r4, r4, lsr #21
 800019a:	ebd4 5555 	rsbs	r5, r4, r5, lsr #21
 800019e:	bfb8      	it	lt
 80001a0:	426d      	neglt	r5, r5
 80001a2:	dd0c      	ble.n	80001be <__adddf3+0x52>
 80001a4:	442c      	add	r4, r5
 80001a6:	ea80 0202 	eor.w	r2, r0, r2
 80001aa:	ea81 0303 	eor.w	r3, r1, r3
 80001ae:	ea82 0000 	eor.w	r0, r2, r0
 80001b2:	ea83 0101 	eor.w	r1, r3, r1
 80001b6:	ea80 0202 	eor.w	r2, r0, r2
 80001ba:	ea81 0303 	eor.w	r3, r1, r3
 80001be:	2d36      	cmp	r5, #54	; 0x36
 80001c0:	bf88      	it	hi
 80001c2:	bd30      	pophi	{r4, r5, pc}
 80001c4:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 80001c8:	ea4f 3101 	mov.w	r1, r1, lsl #12
 80001cc:	f44f 1c80 	mov.w	ip, #1048576	; 0x100000
 80001d0:	ea4c 3111 	orr.w	r1, ip, r1, lsr #12
 80001d4:	d002      	beq.n	80001dc <__adddf3+0x70>
 80001d6:	4240      	negs	r0, r0
 80001d8:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 80001dc:	f013 4f00 	tst.w	r3, #2147483648	; 0x80000000
 80001e0:	ea4f 3303 	mov.w	r3, r3, lsl #12
 80001e4:	ea4c 3313 	orr.w	r3, ip, r3, lsr #12
 80001e8:	d002      	beq.n	80001f0 <__adddf3+0x84>
 80001ea:	4252      	negs	r2, r2
 80001ec:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 80001f0:	ea94 0f05 	teq	r4, r5
 80001f4:	f000 80a7 	beq.w	8000346 <__adddf3+0x1da>
 80001f8:	f1a4 0401 	sub.w	r4, r4, #1
 80001fc:	f1d5 0e20 	rsbs	lr, r5, #32
 8000200:	db0d      	blt.n	800021e <__adddf3+0xb2>
 8000202:	fa02 fc0e 	lsl.w	ip, r2, lr
 8000206:	fa22 f205 	lsr.w	r2, r2, r5
 800020a:	1880      	adds	r0, r0, r2
 800020c:	f141 0100 	adc.w	r1, r1, #0
 8000210:	fa03 f20e 	lsl.w	r2, r3, lr
 8000214:	1880      	adds	r0, r0, r2
 8000216:	fa43 f305 	asr.w	r3, r3, r5
 800021a:	4159      	adcs	r1, r3
 800021c:	e00e      	b.n	800023c <__adddf3+0xd0>
 800021e:	f1a5 0520 	sub.w	r5, r5, #32
 8000222:	f10e 0e20 	add.w	lr, lr, #32
 8000226:	2a01      	cmp	r2, #1
 8000228:	fa03 fc0e 	lsl.w	ip, r3, lr
 800022c:	bf28      	it	cs
 800022e:	f04c 0c02 	orrcs.w	ip, ip, #2
 8000232:	fa43 f305 	asr.w	r3, r3, r5
 8000236:	18c0      	adds	r0, r0, r3
 8000238:	eb51 71e3 	adcs.w	r1, r1, r3, asr #31
 800023c:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 8000240:	d507      	bpl.n	8000252 <__adddf3+0xe6>
 8000242:	f04f 0e00 	mov.w	lr, #0
 8000246:	f1dc 0c00 	rsbs	ip, ip, #0
 800024a:	eb7e 0000 	sbcs.w	r0, lr, r0
 800024e:	eb6e 0101 	sbc.w	r1, lr, r1
 8000252:	f5b1 1f80 	cmp.w	r1, #1048576	; 0x100000
 8000256:	d31b      	bcc.n	8000290 <__adddf3+0x124>
 8000258:	f5b1 1f00 	cmp.w	r1, #2097152	; 0x200000
 800025c:	d30c      	bcc.n	8000278 <__adddf3+0x10c>
 800025e:	0849      	lsrs	r1, r1, #1
 8000260:	ea5f 0030 	movs.w	r0, r0, rrx
 8000264:	ea4f 0c3c 	mov.w	ip, ip, rrx
 8000268:	f104 0401 	add.w	r4, r4, #1
 800026c:	ea4f 5244 	mov.w	r2, r4, lsl #21
 8000270:	f512 0f80 	cmn.w	r2, #4194304	; 0x400000
 8000274:	f080 809a 	bcs.w	80003ac <__adddf3+0x240>
 8000278:	f1bc 4f00 	cmp.w	ip, #2147483648	; 0x80000000
 800027c:	bf08      	it	eq
 800027e:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 8000282:	f150 0000 	adcs.w	r0, r0, #0
 8000286:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 800028a:	ea41 0105 	orr.w	r1, r1, r5
 800028e:	bd30      	pop	{r4, r5, pc}
 8000290:	ea5f 0c4c 	movs.w	ip, ip, lsl #1
 8000294:	4140      	adcs	r0, r0
 8000296:	eb41 0101 	adc.w	r1, r1, r1
 800029a:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 800029e:	f1a4 0401 	sub.w	r4, r4, #1
 80002a2:	d1e9      	bne.n	8000278 <__adddf3+0x10c>
 80002a4:	f091 0f00 	teq	r1, #0
 80002a8:	bf04      	itt	eq
 80002aa:	4601      	moveq	r1, r0
 80002ac:	2000      	moveq	r0, #0
 80002ae:	fab1 f381 	clz	r3, r1
 80002b2:	bf08      	it	eq
 80002b4:	3320      	addeq	r3, #32
 80002b6:	f1a3 030b 	sub.w	r3, r3, #11
 80002ba:	f1b3 0220 	subs.w	r2, r3, #32
 80002be:	da0c      	bge.n	80002da <__adddf3+0x16e>
 80002c0:	320c      	adds	r2, #12
 80002c2:	dd08      	ble.n	80002d6 <__adddf3+0x16a>
 80002c4:	f102 0c14 	add.w	ip, r2, #20
 80002c8:	f1c2 020c 	rsb	r2, r2, #12
 80002cc:	fa01 f00c 	lsl.w	r0, r1, ip
 80002d0:	fa21 f102 	lsr.w	r1, r1, r2
 80002d4:	e00c      	b.n	80002f0 <__adddf3+0x184>
 80002d6:	f102 0214 	add.w	r2, r2, #20
 80002da:	bfd8      	it	le
 80002dc:	f1c2 0c20 	rsble	ip, r2, #32
 80002e0:	fa01 f102 	lsl.w	r1, r1, r2
 80002e4:	fa20 fc0c 	lsr.w	ip, r0, ip
 80002e8:	bfdc      	itt	le
 80002ea:	ea41 010c 	orrle.w	r1, r1, ip
 80002ee:	4090      	lslle	r0, r2
 80002f0:	1ae4      	subs	r4, r4, r3
 80002f2:	bfa2      	ittt	ge
 80002f4:	eb01 5104 	addge.w	r1, r1, r4, lsl #20
 80002f8:	4329      	orrge	r1, r5
 80002fa:	bd30      	popge	{r4, r5, pc}
 80002fc:	ea6f 0404 	mvn.w	r4, r4
 8000300:	3c1f      	subs	r4, #31
 8000302:	da1c      	bge.n	800033e <__adddf3+0x1d2>
 8000304:	340c      	adds	r4, #12
 8000306:	dc0e      	bgt.n	8000326 <__adddf3+0x1ba>
 8000308:	f104 0414 	add.w	r4, r4, #20
 800030c:	f1c4 0220 	rsb	r2, r4, #32
 8000310:	fa20 f004 	lsr.w	r0, r0, r4
 8000314:	fa01 f302 	lsl.w	r3, r1, r2
 8000318:	ea40 0003 	orr.w	r0, r0, r3
 800031c:	fa21 f304 	lsr.w	r3, r1, r4
 8000320:	ea45 0103 	orr.w	r1, r5, r3
 8000324:	bd30      	pop	{r4, r5, pc}
 8000326:	f1c4 040c 	rsb	r4, r4, #12
 800032a:	f1c4 0220 	rsb	r2, r4, #32
 800032e:	fa20 f002 	lsr.w	r0, r0, r2
 8000332:	fa01 f304 	lsl.w	r3, r1, r4
 8000336:	ea40 0003 	orr.w	r0, r0, r3
 800033a:	4629      	mov	r1, r5
 800033c:	bd30      	pop	{r4, r5, pc}
 800033e:	fa21 f004 	lsr.w	r0, r1, r4
 8000342:	4629      	mov	r1, r5
 8000344:	bd30      	pop	{r4, r5, pc}
 8000346:	f094 0f00 	teq	r4, #0
 800034a:	f483 1380 	eor.w	r3, r3, #1048576	; 0x100000
 800034e:	bf06      	itte	eq
 8000350:	f481 1180 	eoreq.w	r1, r1, #1048576	; 0x100000
 8000354:	3401      	addeq	r4, #1
 8000356:	3d01      	subne	r5, #1
 8000358:	e74e      	b.n	80001f8 <__adddf3+0x8c>
 800035a:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 800035e:	bf18      	it	ne
 8000360:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 8000364:	d029      	beq.n	80003ba <__adddf3+0x24e>
 8000366:	ea94 0f05 	teq	r4, r5
 800036a:	bf08      	it	eq
 800036c:	ea90 0f02 	teqeq	r0, r2
 8000370:	d005      	beq.n	800037e <__adddf3+0x212>
 8000372:	ea54 0c00 	orrs.w	ip, r4, r0
 8000376:	bf04      	itt	eq
 8000378:	4619      	moveq	r1, r3
 800037a:	4610      	moveq	r0, r2
 800037c:	bd30      	pop	{r4, r5, pc}
 800037e:	ea91 0f03 	teq	r1, r3
 8000382:	bf1e      	ittt	ne
 8000384:	2100      	movne	r1, #0
 8000386:	2000      	movne	r0, #0
 8000388:	bd30      	popne	{r4, r5, pc}
 800038a:	ea5f 5c54 	movs.w	ip, r4, lsr #21
 800038e:	d105      	bne.n	800039c <__adddf3+0x230>
 8000390:	0040      	lsls	r0, r0, #1
 8000392:	4149      	adcs	r1, r1
 8000394:	bf28      	it	cs
 8000396:	f041 4100 	orrcs.w	r1, r1, #2147483648	; 0x80000000
 800039a:	bd30      	pop	{r4, r5, pc}
 800039c:	f514 0480 	adds.w	r4, r4, #4194304	; 0x400000
 80003a0:	bf3c      	itt	cc
 80003a2:	f501 1180 	addcc.w	r1, r1, #1048576	; 0x100000
 80003a6:	bd30      	popcc	{r4, r5, pc}
 80003a8:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 80003ac:	f045 41fe 	orr.w	r1, r5, #2130706432	; 0x7f000000
 80003b0:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 80003b4:	f04f 0000 	mov.w	r0, #0
 80003b8:	bd30      	pop	{r4, r5, pc}
 80003ba:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 80003be:	bf1a      	itte	ne
 80003c0:	4619      	movne	r1, r3
 80003c2:	4610      	movne	r0, r2
 80003c4:	ea7f 5c65 	mvnseq.w	ip, r5, asr #21
 80003c8:	bf1c      	itt	ne
 80003ca:	460b      	movne	r3, r1
 80003cc:	4602      	movne	r2, r0
 80003ce:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 80003d2:	bf06      	itte	eq
 80003d4:	ea52 3503 	orrseq.w	r5, r2, r3, lsl #12
 80003d8:	ea91 0f03 	teqeq	r1, r3
 80003dc:	f441 2100 	orrne.w	r1, r1, #524288	; 0x80000
 80003e0:	bd30      	pop	{r4, r5, pc}
 80003e2:	bf00      	nop

080003e4 <__aeabi_ui2d>:
 80003e4:	f090 0f00 	teq	r0, #0
 80003e8:	bf04      	itt	eq
 80003ea:	2100      	moveq	r1, #0
 80003ec:	4770      	bxeq	lr
 80003ee:	b530      	push	{r4, r5, lr}
 80003f0:	f44f 6480 	mov.w	r4, #1024	; 0x400
 80003f4:	f104 0432 	add.w	r4, r4, #50	; 0x32
 80003f8:	f04f 0500 	mov.w	r5, #0
 80003fc:	f04f 0100 	mov.w	r1, #0
 8000400:	e750      	b.n	80002a4 <__adddf3+0x138>
 8000402:	bf00      	nop

08000404 <__aeabi_i2d>:
 8000404:	f090 0f00 	teq	r0, #0
 8000408:	bf04      	itt	eq
 800040a:	2100      	moveq	r1, #0
 800040c:	4770      	bxeq	lr
 800040e:	b530      	push	{r4, r5, lr}
 8000410:	f44f 6480 	mov.w	r4, #1024	; 0x400
 8000414:	f104 0432 	add.w	r4, r4, #50	; 0x32
 8000418:	f010 4500 	ands.w	r5, r0, #2147483648	; 0x80000000
 800041c:	bf48      	it	mi
 800041e:	4240      	negmi	r0, r0
 8000420:	f04f 0100 	mov.w	r1, #0
 8000424:	e73e      	b.n	80002a4 <__adddf3+0x138>
 8000426:	bf00      	nop

08000428 <__aeabi_f2d>:
 8000428:	0042      	lsls	r2, r0, #1
 800042a:	ea4f 01e2 	mov.w	r1, r2, asr #3
 800042e:	ea4f 0131 	mov.w	r1, r1, rrx
 8000432:	ea4f 7002 	mov.w	r0, r2, lsl #28
 8000436:	bf1f      	itttt	ne
 8000438:	f012 437f 	andsne.w	r3, r2, #4278190080	; 0xff000000
 800043c:	f093 4f7f 	teqne	r3, #4278190080	; 0xff000000
 8000440:	f081 5160 	eorne.w	r1, r1, #939524096	; 0x38000000
 8000444:	4770      	bxne	lr
 8000446:	f032 427f 	bics.w	r2, r2, #4278190080	; 0xff000000
 800044a:	bf08      	it	eq
 800044c:	4770      	bxeq	lr
 800044e:	f093 4f7f 	teq	r3, #4278190080	; 0xff000000
 8000452:	bf04      	itt	eq
 8000454:	f441 2100 	orreq.w	r1, r1, #524288	; 0x80000
 8000458:	4770      	bxeq	lr
 800045a:	b530      	push	{r4, r5, lr}
 800045c:	f44f 7460 	mov.w	r4, #896	; 0x380
 8000460:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 8000464:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 8000468:	e71c      	b.n	80002a4 <__adddf3+0x138>
 800046a:	bf00      	nop

0800046c <__aeabi_ul2d>:
 800046c:	ea50 0201 	orrs.w	r2, r0, r1
 8000470:	bf08      	it	eq
 8000472:	4770      	bxeq	lr
 8000474:	b530      	push	{r4, r5, lr}
 8000476:	f04f 0500 	mov.w	r5, #0
 800047a:	e00a      	b.n	8000492 <__aeabi_l2d+0x16>

0800047c <__aeabi_l2d>:
 800047c:	ea50 0201 	orrs.w	r2, r0, r1
 8000480:	bf08      	it	eq
 8000482:	4770      	bxeq	lr
 8000484:	b530      	push	{r4, r5, lr}
 8000486:	f011 4500 	ands.w	r5, r1, #2147483648	; 0x80000000
 800048a:	d502      	bpl.n	8000492 <__aeabi_l2d+0x16>
 800048c:	4240      	negs	r0, r0
 800048e:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 8000492:	f44f 6480 	mov.w	r4, #1024	; 0x400
 8000496:	f104 0432 	add.w	r4, r4, #50	; 0x32
 800049a:	ea5f 5c91 	movs.w	ip, r1, lsr #22
 800049e:	f43f aed8 	beq.w	8000252 <__adddf3+0xe6>
 80004a2:	f04f 0203 	mov.w	r2, #3
 80004a6:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 80004aa:	bf18      	it	ne
 80004ac:	3203      	addne	r2, #3
 80004ae:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 80004b2:	bf18      	it	ne
 80004b4:	3203      	addne	r2, #3
 80004b6:	eb02 02dc 	add.w	r2, r2, ip, lsr #3
 80004ba:	f1c2 0320 	rsb	r3, r2, #32
 80004be:	fa00 fc03 	lsl.w	ip, r0, r3
 80004c2:	fa20 f002 	lsr.w	r0, r0, r2
 80004c6:	fa01 fe03 	lsl.w	lr, r1, r3
 80004ca:	ea40 000e 	orr.w	r0, r0, lr
 80004ce:	fa21 f102 	lsr.w	r1, r1, r2
 80004d2:	4414      	add	r4, r2
 80004d4:	e6bd      	b.n	8000252 <__adddf3+0xe6>
 80004d6:	bf00      	nop

080004d8 <__aeabi_dmul>:
 80004d8:	b570      	push	{r4, r5, r6, lr}
 80004da:	f04f 0cff 	mov.w	ip, #255	; 0xff
 80004de:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 80004e2:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 80004e6:	bf1d      	ittte	ne
 80004e8:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 80004ec:	ea94 0f0c 	teqne	r4, ip
 80004f0:	ea95 0f0c 	teqne	r5, ip
 80004f4:	f000 f8de 	bleq	80006b4 <__aeabi_dmul+0x1dc>
 80004f8:	442c      	add	r4, r5
 80004fa:	ea81 0603 	eor.w	r6, r1, r3
 80004fe:	ea21 514c 	bic.w	r1, r1, ip, lsl #21
 8000502:	ea23 534c 	bic.w	r3, r3, ip, lsl #21
 8000506:	ea50 3501 	orrs.w	r5, r0, r1, lsl #12
 800050a:	bf18      	it	ne
 800050c:	ea52 3503 	orrsne.w	r5, r2, r3, lsl #12
 8000510:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8000514:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8000518:	d038      	beq.n	800058c <__aeabi_dmul+0xb4>
 800051a:	fba0 ce02 	umull	ip, lr, r0, r2
 800051e:	f04f 0500 	mov.w	r5, #0
 8000522:	fbe1 e502 	umlal	lr, r5, r1, r2
 8000526:	f006 4200 	and.w	r2, r6, #2147483648	; 0x80000000
 800052a:	fbe0 e503 	umlal	lr, r5, r0, r3
 800052e:	f04f 0600 	mov.w	r6, #0
 8000532:	fbe1 5603 	umlal	r5, r6, r1, r3
 8000536:	f09c 0f00 	teq	ip, #0
 800053a:	bf18      	it	ne
 800053c:	f04e 0e01 	orrne.w	lr, lr, #1
 8000540:	f1a4 04ff 	sub.w	r4, r4, #255	; 0xff
 8000544:	f5b6 7f00 	cmp.w	r6, #512	; 0x200
 8000548:	f564 7440 	sbc.w	r4, r4, #768	; 0x300
 800054c:	d204      	bcs.n	8000558 <__aeabi_dmul+0x80>
 800054e:	ea5f 0e4e 	movs.w	lr, lr, lsl #1
 8000552:	416d      	adcs	r5, r5
 8000554:	eb46 0606 	adc.w	r6, r6, r6
 8000558:	ea42 21c6 	orr.w	r1, r2, r6, lsl #11
 800055c:	ea41 5155 	orr.w	r1, r1, r5, lsr #21
 8000560:	ea4f 20c5 	mov.w	r0, r5, lsl #11
 8000564:	ea40 505e 	orr.w	r0, r0, lr, lsr #21
 8000568:	ea4f 2ece 	mov.w	lr, lr, lsl #11
 800056c:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 8000570:	bf88      	it	hi
 8000572:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 8000576:	d81e      	bhi.n	80005b6 <__aeabi_dmul+0xde>
 8000578:	f1be 4f00 	cmp.w	lr, #2147483648	; 0x80000000
 800057c:	bf08      	it	eq
 800057e:	ea5f 0e50 	movseq.w	lr, r0, lsr #1
 8000582:	f150 0000 	adcs.w	r0, r0, #0
 8000586:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 800058a:	bd70      	pop	{r4, r5, r6, pc}
 800058c:	f006 4600 	and.w	r6, r6, #2147483648	; 0x80000000
 8000590:	ea46 0101 	orr.w	r1, r6, r1
 8000594:	ea40 0002 	orr.w	r0, r0, r2
 8000598:	ea81 0103 	eor.w	r1, r1, r3
 800059c:	ebb4 045c 	subs.w	r4, r4, ip, lsr #1
 80005a0:	bfc2      	ittt	gt
 80005a2:	ebd4 050c 	rsbsgt	r5, r4, ip
 80005a6:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 80005aa:	bd70      	popgt	{r4, r5, r6, pc}
 80005ac:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 80005b0:	f04f 0e00 	mov.w	lr, #0
 80005b4:	3c01      	subs	r4, #1
 80005b6:	f300 80ab 	bgt.w	8000710 <__aeabi_dmul+0x238>
 80005ba:	f114 0f36 	cmn.w	r4, #54	; 0x36
 80005be:	bfde      	ittt	le
 80005c0:	2000      	movle	r0, #0
 80005c2:	f001 4100 	andle.w	r1, r1, #2147483648	; 0x80000000
 80005c6:	bd70      	pople	{r4, r5, r6, pc}
 80005c8:	f1c4 0400 	rsb	r4, r4, #0
 80005cc:	3c20      	subs	r4, #32
 80005ce:	da35      	bge.n	800063c <__aeabi_dmul+0x164>
 80005d0:	340c      	adds	r4, #12
 80005d2:	dc1b      	bgt.n	800060c <__aeabi_dmul+0x134>
 80005d4:	f104 0414 	add.w	r4, r4, #20
 80005d8:	f1c4 0520 	rsb	r5, r4, #32
 80005dc:	fa00 f305 	lsl.w	r3, r0, r5
 80005e0:	fa20 f004 	lsr.w	r0, r0, r4
 80005e4:	fa01 f205 	lsl.w	r2, r1, r5
 80005e8:	ea40 0002 	orr.w	r0, r0, r2
 80005ec:	f001 4200 	and.w	r2, r1, #2147483648	; 0x80000000
 80005f0:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 80005f4:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 80005f8:	fa21 f604 	lsr.w	r6, r1, r4
 80005fc:	eb42 0106 	adc.w	r1, r2, r6
 8000600:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000604:	bf08      	it	eq
 8000606:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800060a:	bd70      	pop	{r4, r5, r6, pc}
 800060c:	f1c4 040c 	rsb	r4, r4, #12
 8000610:	f1c4 0520 	rsb	r5, r4, #32
 8000614:	fa00 f304 	lsl.w	r3, r0, r4
 8000618:	fa20 f005 	lsr.w	r0, r0, r5
 800061c:	fa01 f204 	lsl.w	r2, r1, r4
 8000620:	ea40 0002 	orr.w	r0, r0, r2
 8000624:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000628:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 800062c:	f141 0100 	adc.w	r1, r1, #0
 8000630:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000634:	bf08      	it	eq
 8000636:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800063a:	bd70      	pop	{r4, r5, r6, pc}
 800063c:	f1c4 0520 	rsb	r5, r4, #32
 8000640:	fa00 f205 	lsl.w	r2, r0, r5
 8000644:	ea4e 0e02 	orr.w	lr, lr, r2
 8000648:	fa20 f304 	lsr.w	r3, r0, r4
 800064c:	fa01 f205 	lsl.w	r2, r1, r5
 8000650:	ea43 0302 	orr.w	r3, r3, r2
 8000654:	fa21 f004 	lsr.w	r0, r1, r4
 8000658:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 800065c:	fa21 f204 	lsr.w	r2, r1, r4
 8000660:	ea20 0002 	bic.w	r0, r0, r2
 8000664:	eb00 70d3 	add.w	r0, r0, r3, lsr #31
 8000668:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 800066c:	bf08      	it	eq
 800066e:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 8000672:	bd70      	pop	{r4, r5, r6, pc}
 8000674:	f094 0f00 	teq	r4, #0
 8000678:	d10f      	bne.n	800069a <__aeabi_dmul+0x1c2>
 800067a:	f001 4600 	and.w	r6, r1, #2147483648	; 0x80000000
 800067e:	0040      	lsls	r0, r0, #1
 8000680:	eb41 0101 	adc.w	r1, r1, r1
 8000684:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 8000688:	bf08      	it	eq
 800068a:	3c01      	subeq	r4, #1
 800068c:	d0f7      	beq.n	800067e <__aeabi_dmul+0x1a6>
 800068e:	ea41 0106 	orr.w	r1, r1, r6
 8000692:	f095 0f00 	teq	r5, #0
 8000696:	bf18      	it	ne
 8000698:	4770      	bxne	lr
 800069a:	f003 4600 	and.w	r6, r3, #2147483648	; 0x80000000
 800069e:	0052      	lsls	r2, r2, #1
 80006a0:	eb43 0303 	adc.w	r3, r3, r3
 80006a4:	f413 1f80 	tst.w	r3, #1048576	; 0x100000
 80006a8:	bf08      	it	eq
 80006aa:	3d01      	subeq	r5, #1
 80006ac:	d0f7      	beq.n	800069e <__aeabi_dmul+0x1c6>
 80006ae:	ea43 0306 	orr.w	r3, r3, r6
 80006b2:	4770      	bx	lr
 80006b4:	ea94 0f0c 	teq	r4, ip
 80006b8:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 80006bc:	bf18      	it	ne
 80006be:	ea95 0f0c 	teqne	r5, ip
 80006c2:	d00c      	beq.n	80006de <__aeabi_dmul+0x206>
 80006c4:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 80006c8:	bf18      	it	ne
 80006ca:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 80006ce:	d1d1      	bne.n	8000674 <__aeabi_dmul+0x19c>
 80006d0:	ea81 0103 	eor.w	r1, r1, r3
 80006d4:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 80006d8:	f04f 0000 	mov.w	r0, #0
 80006dc:	bd70      	pop	{r4, r5, r6, pc}
 80006de:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 80006e2:	bf06      	itte	eq
 80006e4:	4610      	moveq	r0, r2
 80006e6:	4619      	moveq	r1, r3
 80006e8:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 80006ec:	d019      	beq.n	8000722 <__aeabi_dmul+0x24a>
 80006ee:	ea94 0f0c 	teq	r4, ip
 80006f2:	d102      	bne.n	80006fa <__aeabi_dmul+0x222>
 80006f4:	ea50 3601 	orrs.w	r6, r0, r1, lsl #12
 80006f8:	d113      	bne.n	8000722 <__aeabi_dmul+0x24a>
 80006fa:	ea95 0f0c 	teq	r5, ip
 80006fe:	d105      	bne.n	800070c <__aeabi_dmul+0x234>
 8000700:	ea52 3603 	orrs.w	r6, r2, r3, lsl #12
 8000704:	bf1c      	itt	ne
 8000706:	4610      	movne	r0, r2
 8000708:	4619      	movne	r1, r3
 800070a:	d10a      	bne.n	8000722 <__aeabi_dmul+0x24a>
 800070c:	ea81 0103 	eor.w	r1, r1, r3
 8000710:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000714:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 8000718:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 800071c:	f04f 0000 	mov.w	r0, #0
 8000720:	bd70      	pop	{r4, r5, r6, pc}
 8000722:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 8000726:	f441 0178 	orr.w	r1, r1, #16252928	; 0xf80000
 800072a:	bd70      	pop	{r4, r5, r6, pc}

0800072c <__aeabi_ddiv>:
 800072c:	b570      	push	{r4, r5, r6, lr}
 800072e:	f04f 0cff 	mov.w	ip, #255	; 0xff
 8000732:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 8000736:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 800073a:	bf1d      	ittte	ne
 800073c:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 8000740:	ea94 0f0c 	teqne	r4, ip
 8000744:	ea95 0f0c 	teqne	r5, ip
 8000748:	f000 f8a7 	bleq	800089a <__aeabi_ddiv+0x16e>
 800074c:	eba4 0405 	sub.w	r4, r4, r5
 8000750:	ea81 0e03 	eor.w	lr, r1, r3
 8000754:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 8000758:	ea4f 3101 	mov.w	r1, r1, lsl #12
 800075c:	f000 8088 	beq.w	8000870 <__aeabi_ddiv+0x144>
 8000760:	ea4f 3303 	mov.w	r3, r3, lsl #12
 8000764:	f04f 5580 	mov.w	r5, #268435456	; 0x10000000
 8000768:	ea45 1313 	orr.w	r3, r5, r3, lsr #4
 800076c:	ea43 6312 	orr.w	r3, r3, r2, lsr #24
 8000770:	ea4f 2202 	mov.w	r2, r2, lsl #8
 8000774:	ea45 1511 	orr.w	r5, r5, r1, lsr #4
 8000778:	ea45 6510 	orr.w	r5, r5, r0, lsr #24
 800077c:	ea4f 2600 	mov.w	r6, r0, lsl #8
 8000780:	f00e 4100 	and.w	r1, lr, #2147483648	; 0x80000000
 8000784:	429d      	cmp	r5, r3
 8000786:	bf08      	it	eq
 8000788:	4296      	cmpeq	r6, r2
 800078a:	f144 04fd 	adc.w	r4, r4, #253	; 0xfd
 800078e:	f504 7440 	add.w	r4, r4, #768	; 0x300
 8000792:	d202      	bcs.n	800079a <__aeabi_ddiv+0x6e>
 8000794:	085b      	lsrs	r3, r3, #1
 8000796:	ea4f 0232 	mov.w	r2, r2, rrx
 800079a:	1ab6      	subs	r6, r6, r2
 800079c:	eb65 0503 	sbc.w	r5, r5, r3
 80007a0:	085b      	lsrs	r3, r3, #1
 80007a2:	ea4f 0232 	mov.w	r2, r2, rrx
 80007a6:	f44f 1080 	mov.w	r0, #1048576	; 0x100000
 80007aa:	f44f 2c00 	mov.w	ip, #524288	; 0x80000
 80007ae:	ebb6 0e02 	subs.w	lr, r6, r2
 80007b2:	eb75 0e03 	sbcs.w	lr, r5, r3
 80007b6:	bf22      	ittt	cs
 80007b8:	1ab6      	subcs	r6, r6, r2
 80007ba:	4675      	movcs	r5, lr
 80007bc:	ea40 000c 	orrcs.w	r0, r0, ip
 80007c0:	085b      	lsrs	r3, r3, #1
 80007c2:	ea4f 0232 	mov.w	r2, r2, rrx
 80007c6:	ebb6 0e02 	subs.w	lr, r6, r2
 80007ca:	eb75 0e03 	sbcs.w	lr, r5, r3
 80007ce:	bf22      	ittt	cs
 80007d0:	1ab6      	subcs	r6, r6, r2
 80007d2:	4675      	movcs	r5, lr
 80007d4:	ea40 005c 	orrcs.w	r0, r0, ip, lsr #1
 80007d8:	085b      	lsrs	r3, r3, #1
 80007da:	ea4f 0232 	mov.w	r2, r2, rrx
 80007de:	ebb6 0e02 	subs.w	lr, r6, r2
 80007e2:	eb75 0e03 	sbcs.w	lr, r5, r3
 80007e6:	bf22      	ittt	cs
 80007e8:	1ab6      	subcs	r6, r6, r2
 80007ea:	4675      	movcs	r5, lr
 80007ec:	ea40 009c 	orrcs.w	r0, r0, ip, lsr #2
 80007f0:	085b      	lsrs	r3, r3, #1
 80007f2:	ea4f 0232 	mov.w	r2, r2, rrx
 80007f6:	ebb6 0e02 	subs.w	lr, r6, r2
 80007fa:	eb75 0e03 	sbcs.w	lr, r5, r3
 80007fe:	bf22      	ittt	cs
 8000800:	1ab6      	subcs	r6, r6, r2
 8000802:	4675      	movcs	r5, lr
 8000804:	ea40 00dc 	orrcs.w	r0, r0, ip, lsr #3
 8000808:	ea55 0e06 	orrs.w	lr, r5, r6
 800080c:	d018      	beq.n	8000840 <__aeabi_ddiv+0x114>
 800080e:	ea4f 1505 	mov.w	r5, r5, lsl #4
 8000812:	ea45 7516 	orr.w	r5, r5, r6, lsr #28
 8000816:	ea4f 1606 	mov.w	r6, r6, lsl #4
 800081a:	ea4f 03c3 	mov.w	r3, r3, lsl #3
 800081e:	ea43 7352 	orr.w	r3, r3, r2, lsr #29
 8000822:	ea4f 02c2 	mov.w	r2, r2, lsl #3
 8000826:	ea5f 1c1c 	movs.w	ip, ip, lsr #4
 800082a:	d1c0      	bne.n	80007ae <__aeabi_ddiv+0x82>
 800082c:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 8000830:	d10b      	bne.n	800084a <__aeabi_ddiv+0x11e>
 8000832:	ea41 0100 	orr.w	r1, r1, r0
 8000836:	f04f 0000 	mov.w	r0, #0
 800083a:	f04f 4c00 	mov.w	ip, #2147483648	; 0x80000000
 800083e:	e7b6      	b.n	80007ae <__aeabi_ddiv+0x82>
 8000840:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 8000844:	bf04      	itt	eq
 8000846:	4301      	orreq	r1, r0
 8000848:	2000      	moveq	r0, #0
 800084a:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 800084e:	bf88      	it	hi
 8000850:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 8000854:	f63f aeaf 	bhi.w	80005b6 <__aeabi_dmul+0xde>
 8000858:	ebb5 0c03 	subs.w	ip, r5, r3
 800085c:	bf04      	itt	eq
 800085e:	ebb6 0c02 	subseq.w	ip, r6, r2
 8000862:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 8000866:	f150 0000 	adcs.w	r0, r0, #0
 800086a:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 800086e:	bd70      	pop	{r4, r5, r6, pc}
 8000870:	f00e 4e00 	and.w	lr, lr, #2147483648	; 0x80000000
 8000874:	ea4e 3111 	orr.w	r1, lr, r1, lsr #12
 8000878:	eb14 045c 	adds.w	r4, r4, ip, lsr #1
 800087c:	bfc2      	ittt	gt
 800087e:	ebd4 050c 	rsbsgt	r5, r4, ip
 8000882:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 8000886:	bd70      	popgt	{r4, r5, r6, pc}
 8000888:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 800088c:	f04f 0e00 	mov.w	lr, #0
 8000890:	3c01      	subs	r4, #1
 8000892:	e690      	b.n	80005b6 <__aeabi_dmul+0xde>
 8000894:	ea45 0e06 	orr.w	lr, r5, r6
 8000898:	e68d      	b.n	80005b6 <__aeabi_dmul+0xde>
 800089a:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 800089e:	ea94 0f0c 	teq	r4, ip
 80008a2:	bf08      	it	eq
 80008a4:	ea95 0f0c 	teqeq	r5, ip
 80008a8:	f43f af3b 	beq.w	8000722 <__aeabi_dmul+0x24a>
 80008ac:	ea94 0f0c 	teq	r4, ip
 80008b0:	d10a      	bne.n	80008c8 <__aeabi_ddiv+0x19c>
 80008b2:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 80008b6:	f47f af34 	bne.w	8000722 <__aeabi_dmul+0x24a>
 80008ba:	ea95 0f0c 	teq	r5, ip
 80008be:	f47f af25 	bne.w	800070c <__aeabi_dmul+0x234>
 80008c2:	4610      	mov	r0, r2
 80008c4:	4619      	mov	r1, r3
 80008c6:	e72c      	b.n	8000722 <__aeabi_dmul+0x24a>
 80008c8:	ea95 0f0c 	teq	r5, ip
 80008cc:	d106      	bne.n	80008dc <__aeabi_ddiv+0x1b0>
 80008ce:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 80008d2:	f43f aefd 	beq.w	80006d0 <__aeabi_dmul+0x1f8>
 80008d6:	4610      	mov	r0, r2
 80008d8:	4619      	mov	r1, r3
 80008da:	e722      	b.n	8000722 <__aeabi_dmul+0x24a>
 80008dc:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 80008e0:	bf18      	it	ne
 80008e2:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 80008e6:	f47f aec5 	bne.w	8000674 <__aeabi_dmul+0x19c>
 80008ea:	ea50 0441 	orrs.w	r4, r0, r1, lsl #1
 80008ee:	f47f af0d 	bne.w	800070c <__aeabi_dmul+0x234>
 80008f2:	ea52 0543 	orrs.w	r5, r2, r3, lsl #1
 80008f6:	f47f aeeb 	bne.w	80006d0 <__aeabi_dmul+0x1f8>
 80008fa:	e712      	b.n	8000722 <__aeabi_dmul+0x24a>

080008fc <__gedf2>:
 80008fc:	f04f 3cff 	mov.w	ip, #4294967295	; 0xffffffff
 8000900:	e006      	b.n	8000910 <__cmpdf2+0x4>
 8000902:	bf00      	nop

08000904 <__ledf2>:
 8000904:	f04f 0c01 	mov.w	ip, #1
 8000908:	e002      	b.n	8000910 <__cmpdf2+0x4>
 800090a:	bf00      	nop

0800090c <__cmpdf2>:
 800090c:	f04f 0c01 	mov.w	ip, #1
 8000910:	f84d cd04 	str.w	ip, [sp, #-4]!
 8000914:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000918:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 800091c:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000920:	bf18      	it	ne
 8000922:	ea7f 5c6c 	mvnsne.w	ip, ip, asr #21
 8000926:	d01b      	beq.n	8000960 <__cmpdf2+0x54>
 8000928:	b001      	add	sp, #4
 800092a:	ea50 0c41 	orrs.w	ip, r0, r1, lsl #1
 800092e:	bf0c      	ite	eq
 8000930:	ea52 0c43 	orrseq.w	ip, r2, r3, lsl #1
 8000934:	ea91 0f03 	teqne	r1, r3
 8000938:	bf02      	ittt	eq
 800093a:	ea90 0f02 	teqeq	r0, r2
 800093e:	2000      	moveq	r0, #0
 8000940:	4770      	bxeq	lr
 8000942:	f110 0f00 	cmn.w	r0, #0
 8000946:	ea91 0f03 	teq	r1, r3
 800094a:	bf58      	it	pl
 800094c:	4299      	cmppl	r1, r3
 800094e:	bf08      	it	eq
 8000950:	4290      	cmpeq	r0, r2
 8000952:	bf2c      	ite	cs
 8000954:	17d8      	asrcs	r0, r3, #31
 8000956:	ea6f 70e3 	mvncc.w	r0, r3, asr #31
 800095a:	f040 0001 	orr.w	r0, r0, #1
 800095e:	4770      	bx	lr
 8000960:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000964:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000968:	d102      	bne.n	8000970 <__cmpdf2+0x64>
 800096a:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 800096e:	d107      	bne.n	8000980 <__cmpdf2+0x74>
 8000970:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000974:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000978:	d1d6      	bne.n	8000928 <__cmpdf2+0x1c>
 800097a:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 800097e:	d0d3      	beq.n	8000928 <__cmpdf2+0x1c>
 8000980:	f85d 0b04 	ldr.w	r0, [sp], #4
 8000984:	4770      	bx	lr
 8000986:	bf00      	nop

08000988 <__aeabi_cdrcmple>:
 8000988:	4684      	mov	ip, r0
 800098a:	4610      	mov	r0, r2
 800098c:	4662      	mov	r2, ip
 800098e:	468c      	mov	ip, r1
 8000990:	4619      	mov	r1, r3
 8000992:	4663      	mov	r3, ip
 8000994:	e000      	b.n	8000998 <__aeabi_cdcmpeq>
 8000996:	bf00      	nop

08000998 <__aeabi_cdcmpeq>:
 8000998:	b501      	push	{r0, lr}
 800099a:	f7ff ffb7 	bl	800090c <__cmpdf2>
 800099e:	2800      	cmp	r0, #0
 80009a0:	bf48      	it	mi
 80009a2:	f110 0f00 	cmnmi.w	r0, #0
 80009a6:	bd01      	pop	{r0, pc}

080009a8 <__aeabi_dcmpeq>:
 80009a8:	f84d ed08 	str.w	lr, [sp, #-8]!
 80009ac:	f7ff fff4 	bl	8000998 <__aeabi_cdcmpeq>
 80009b0:	bf0c      	ite	eq
 80009b2:	2001      	moveq	r0, #1
 80009b4:	2000      	movne	r0, #0
 80009b6:	f85d fb08 	ldr.w	pc, [sp], #8
 80009ba:	bf00      	nop

080009bc <__aeabi_dcmplt>:
 80009bc:	f84d ed08 	str.w	lr, [sp, #-8]!
 80009c0:	f7ff ffea 	bl	8000998 <__aeabi_cdcmpeq>
 80009c4:	bf34      	ite	cc
 80009c6:	2001      	movcc	r0, #1
 80009c8:	2000      	movcs	r0, #0
 80009ca:	f85d fb08 	ldr.w	pc, [sp], #8
 80009ce:	bf00      	nop

080009d0 <__aeabi_dcmple>:
 80009d0:	f84d ed08 	str.w	lr, [sp, #-8]!
 80009d4:	f7ff ffe0 	bl	8000998 <__aeabi_cdcmpeq>
 80009d8:	bf94      	ite	ls
 80009da:	2001      	movls	r0, #1
 80009dc:	2000      	movhi	r0, #0
 80009de:	f85d fb08 	ldr.w	pc, [sp], #8
 80009e2:	bf00      	nop

080009e4 <__aeabi_dcmpge>:
 80009e4:	f84d ed08 	str.w	lr, [sp, #-8]!
 80009e8:	f7ff ffce 	bl	8000988 <__aeabi_cdrcmple>
 80009ec:	bf94      	ite	ls
 80009ee:	2001      	movls	r0, #1
 80009f0:	2000      	movhi	r0, #0
 80009f2:	f85d fb08 	ldr.w	pc, [sp], #8
 80009f6:	bf00      	nop

080009f8 <__aeabi_dcmpgt>:
 80009f8:	f84d ed08 	str.w	lr, [sp, #-8]!
 80009fc:	f7ff ffc4 	bl	8000988 <__aeabi_cdrcmple>
 8000a00:	bf34      	ite	cc
 8000a02:	2001      	movcc	r0, #1
 8000a04:	2000      	movcs	r0, #0
 8000a06:	f85d fb08 	ldr.w	pc, [sp], #8
 8000a0a:	bf00      	nop

08000a0c <__aeabi_dcmpun>:
 8000a0c:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000a10:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000a14:	d102      	bne.n	8000a1c <__aeabi_dcmpun+0x10>
 8000a16:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 8000a1a:	d10a      	bne.n	8000a32 <__aeabi_dcmpun+0x26>
 8000a1c:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000a20:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000a24:	d102      	bne.n	8000a2c <__aeabi_dcmpun+0x20>
 8000a26:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 8000a2a:	d102      	bne.n	8000a32 <__aeabi_dcmpun+0x26>
 8000a2c:	f04f 0000 	mov.w	r0, #0
 8000a30:	4770      	bx	lr
 8000a32:	f04f 0001 	mov.w	r0, #1
 8000a36:	4770      	bx	lr

08000a38 <__aeabi_d2iz>:
 8000a38:	ea4f 0241 	mov.w	r2, r1, lsl #1
 8000a3c:	f512 1200 	adds.w	r2, r2, #2097152	; 0x200000
 8000a40:	d215      	bcs.n	8000a6e <__aeabi_d2iz+0x36>
 8000a42:	d511      	bpl.n	8000a68 <__aeabi_d2iz+0x30>
 8000a44:	f46f 7378 	mvn.w	r3, #992	; 0x3e0
 8000a48:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
 8000a4c:	d912      	bls.n	8000a74 <__aeabi_d2iz+0x3c>
 8000a4e:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000a52:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8000a56:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
 8000a5a:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 8000a5e:	fa23 f002 	lsr.w	r0, r3, r2
 8000a62:	bf18      	it	ne
 8000a64:	4240      	negne	r0, r0
 8000a66:	4770      	bx	lr
 8000a68:	f04f 0000 	mov.w	r0, #0
 8000a6c:	4770      	bx	lr
 8000a6e:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
 8000a72:	d105      	bne.n	8000a80 <__aeabi_d2iz+0x48>
 8000a74:	f011 4000 	ands.w	r0, r1, #2147483648	; 0x80000000
 8000a78:	bf08      	it	eq
 8000a7a:	f06f 4000 	mvneq.w	r0, #2147483648	; 0x80000000
 8000a7e:	4770      	bx	lr
 8000a80:	f04f 0000 	mov.w	r0, #0
 8000a84:	4770      	bx	lr
 8000a86:	bf00      	nop

08000a88 <__aeabi_d2uiz>:
 8000a88:	004a      	lsls	r2, r1, #1
 8000a8a:	d211      	bcs.n	8000ab0 <__aeabi_d2uiz+0x28>
 8000a8c:	f512 1200 	adds.w	r2, r2, #2097152	; 0x200000
 8000a90:	d211      	bcs.n	8000ab6 <__aeabi_d2uiz+0x2e>
 8000a92:	d50d      	bpl.n	8000ab0 <__aeabi_d2uiz+0x28>
 8000a94:	f46f 7378 	mvn.w	r3, #992	; 0x3e0
 8000a98:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
 8000a9c:	d40e      	bmi.n	8000abc <__aeabi_d2uiz+0x34>
 8000a9e:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000aa2:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8000aa6:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
 8000aaa:	fa23 f002 	lsr.w	r0, r3, r2
 8000aae:	4770      	bx	lr
 8000ab0:	f04f 0000 	mov.w	r0, #0
 8000ab4:	4770      	bx	lr
 8000ab6:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
 8000aba:	d102      	bne.n	8000ac2 <__aeabi_d2uiz+0x3a>
 8000abc:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8000ac0:	4770      	bx	lr
 8000ac2:	f04f 0000 	mov.w	r0, #0
 8000ac6:	4770      	bx	lr

08000ac8 <__aeabi_d2f>:
 8000ac8:	ea4f 0241 	mov.w	r2, r1, lsl #1
 8000acc:	f1b2 43e0 	subs.w	r3, r2, #1879048192	; 0x70000000
 8000ad0:	bf24      	itt	cs
 8000ad2:	f5b3 1c00 	subscs.w	ip, r3, #2097152	; 0x200000
 8000ad6:	f1dc 5cfe 	rsbscs	ip, ip, #532676608	; 0x1fc00000
 8000ada:	d90d      	bls.n	8000af8 <__aeabi_d2f+0x30>
 8000adc:	f001 4c00 	and.w	ip, r1, #2147483648	; 0x80000000
 8000ae0:	ea4f 02c0 	mov.w	r2, r0, lsl #3
 8000ae4:	ea4c 7050 	orr.w	r0, ip, r0, lsr #29
 8000ae8:	f1b2 4f00 	cmp.w	r2, #2147483648	; 0x80000000
 8000aec:	eb40 0083 	adc.w	r0, r0, r3, lsl #2
 8000af0:	bf08      	it	eq
 8000af2:	f020 0001 	biceq.w	r0, r0, #1
 8000af6:	4770      	bx	lr
 8000af8:	f011 4f80 	tst.w	r1, #1073741824	; 0x40000000
 8000afc:	d121      	bne.n	8000b42 <__aeabi_d2f+0x7a>
 8000afe:	f113 7238 	adds.w	r2, r3, #48234496	; 0x2e00000
 8000b02:	bfbc      	itt	lt
 8000b04:	f001 4000 	andlt.w	r0, r1, #2147483648	; 0x80000000
 8000b08:	4770      	bxlt	lr
 8000b0a:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8000b0e:	ea4f 5252 	mov.w	r2, r2, lsr #21
 8000b12:	f1c2 0218 	rsb	r2, r2, #24
 8000b16:	f1c2 0c20 	rsb	ip, r2, #32
 8000b1a:	fa10 f30c 	lsls.w	r3, r0, ip
 8000b1e:	fa20 f002 	lsr.w	r0, r0, r2
 8000b22:	bf18      	it	ne
 8000b24:	f040 0001 	orrne.w	r0, r0, #1
 8000b28:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000b2c:	ea4f 23d3 	mov.w	r3, r3, lsr #11
 8000b30:	fa03 fc0c 	lsl.w	ip, r3, ip
 8000b34:	ea40 000c 	orr.w	r0, r0, ip
 8000b38:	fa23 f302 	lsr.w	r3, r3, r2
 8000b3c:	ea4f 0343 	mov.w	r3, r3, lsl #1
 8000b40:	e7cc      	b.n	8000adc <__aeabi_d2f+0x14>
 8000b42:	ea7f 5362 	mvns.w	r3, r2, asr #21
 8000b46:	d107      	bne.n	8000b58 <__aeabi_d2f+0x90>
 8000b48:	ea50 3301 	orrs.w	r3, r0, r1, lsl #12
 8000b4c:	bf1e      	ittt	ne
 8000b4e:	f04f 40fe 	movne.w	r0, #2130706432	; 0x7f000000
 8000b52:	f440 0040 	orrne.w	r0, r0, #12582912	; 0xc00000
 8000b56:	4770      	bxne	lr
 8000b58:	f001 4000 	and.w	r0, r1, #2147483648	; 0x80000000
 8000b5c:	f040 40fe 	orr.w	r0, r0, #2130706432	; 0x7f000000
 8000b60:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
 8000b64:	4770      	bx	lr
 8000b66:	bf00      	nop

08000b68 <__aeabi_frsub>:
 8000b68:	f080 4000 	eor.w	r0, r0, #2147483648	; 0x80000000
 8000b6c:	e002      	b.n	8000b74 <__addsf3>
 8000b6e:	bf00      	nop

08000b70 <__aeabi_fsub>:
 8000b70:	f081 4100 	eor.w	r1, r1, #2147483648	; 0x80000000

08000b74 <__addsf3>:
 8000b74:	0042      	lsls	r2, r0, #1
 8000b76:	bf1f      	itttt	ne
 8000b78:	ea5f 0341 	movsne.w	r3, r1, lsl #1
 8000b7c:	ea92 0f03 	teqne	r2, r3
 8000b80:	ea7f 6c22 	mvnsne.w	ip, r2, asr #24
 8000b84:	ea7f 6c23 	mvnsne.w	ip, r3, asr #24
 8000b88:	d06a      	beq.n	8000c60 <__addsf3+0xec>
 8000b8a:	ea4f 6212 	mov.w	r2, r2, lsr #24
 8000b8e:	ebd2 6313 	rsbs	r3, r2, r3, lsr #24
 8000b92:	bfc1      	itttt	gt
 8000b94:	18d2      	addgt	r2, r2, r3
 8000b96:	4041      	eorgt	r1, r0
 8000b98:	4048      	eorgt	r0, r1
 8000b9a:	4041      	eorgt	r1, r0
 8000b9c:	bfb8      	it	lt
 8000b9e:	425b      	neglt	r3, r3
 8000ba0:	2b19      	cmp	r3, #25
 8000ba2:	bf88      	it	hi
 8000ba4:	4770      	bxhi	lr
 8000ba6:	f010 4f00 	tst.w	r0, #2147483648	; 0x80000000
 8000baa:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
 8000bae:	f020 407f 	bic.w	r0, r0, #4278190080	; 0xff000000
 8000bb2:	bf18      	it	ne
 8000bb4:	4240      	negne	r0, r0
 8000bb6:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 8000bba:	f441 0100 	orr.w	r1, r1, #8388608	; 0x800000
 8000bbe:	f021 417f 	bic.w	r1, r1, #4278190080	; 0xff000000
 8000bc2:	bf18      	it	ne
 8000bc4:	4249      	negne	r1, r1
 8000bc6:	ea92 0f03 	teq	r2, r3
 8000bca:	d03f      	beq.n	8000c4c <__addsf3+0xd8>
 8000bcc:	f1a2 0201 	sub.w	r2, r2, #1
 8000bd0:	fa41 fc03 	asr.w	ip, r1, r3
 8000bd4:	eb10 000c 	adds.w	r0, r0, ip
 8000bd8:	f1c3 0320 	rsb	r3, r3, #32
 8000bdc:	fa01 f103 	lsl.w	r1, r1, r3
 8000be0:	f000 4300 	and.w	r3, r0, #2147483648	; 0x80000000
 8000be4:	d502      	bpl.n	8000bec <__addsf3+0x78>
 8000be6:	4249      	negs	r1, r1
 8000be8:	eb60 0040 	sbc.w	r0, r0, r0, lsl #1
 8000bec:	f5b0 0f00 	cmp.w	r0, #8388608	; 0x800000
 8000bf0:	d313      	bcc.n	8000c1a <__addsf3+0xa6>
 8000bf2:	f1b0 7f80 	cmp.w	r0, #16777216	; 0x1000000
 8000bf6:	d306      	bcc.n	8000c06 <__addsf3+0x92>
 8000bf8:	0840      	lsrs	r0, r0, #1
 8000bfa:	ea4f 0131 	mov.w	r1, r1, rrx
 8000bfe:	f102 0201 	add.w	r2, r2, #1
 8000c02:	2afe      	cmp	r2, #254	; 0xfe
 8000c04:	d251      	bcs.n	8000caa <__addsf3+0x136>
 8000c06:	f1b1 4f00 	cmp.w	r1, #2147483648	; 0x80000000
 8000c0a:	eb40 50c2 	adc.w	r0, r0, r2, lsl #23
 8000c0e:	bf08      	it	eq
 8000c10:	f020 0001 	biceq.w	r0, r0, #1
 8000c14:	ea40 0003 	orr.w	r0, r0, r3
 8000c18:	4770      	bx	lr
 8000c1a:	0049      	lsls	r1, r1, #1
 8000c1c:	eb40 0000 	adc.w	r0, r0, r0
 8000c20:	f410 0f00 	tst.w	r0, #8388608	; 0x800000
 8000c24:	f1a2 0201 	sub.w	r2, r2, #1
 8000c28:	d1ed      	bne.n	8000c06 <__addsf3+0x92>
 8000c2a:	fab0 fc80 	clz	ip, r0
 8000c2e:	f1ac 0c08 	sub.w	ip, ip, #8
 8000c32:	ebb2 020c 	subs.w	r2, r2, ip
 8000c36:	fa00 f00c 	lsl.w	r0, r0, ip
 8000c3a:	bfaa      	itet	ge
 8000c3c:	eb00 50c2 	addge.w	r0, r0, r2, lsl #23
 8000c40:	4252      	neglt	r2, r2
 8000c42:	4318      	orrge	r0, r3
 8000c44:	bfbc      	itt	lt
 8000c46:	40d0      	lsrlt	r0, r2
 8000c48:	4318      	orrlt	r0, r3
 8000c4a:	4770      	bx	lr
 8000c4c:	f092 0f00 	teq	r2, #0
 8000c50:	f481 0100 	eor.w	r1, r1, #8388608	; 0x800000
 8000c54:	bf06      	itte	eq
 8000c56:	f480 0000 	eoreq.w	r0, r0, #8388608	; 0x800000
 8000c5a:	3201      	addeq	r2, #1
 8000c5c:	3b01      	subne	r3, #1
 8000c5e:	e7b5      	b.n	8000bcc <__addsf3+0x58>
 8000c60:	ea4f 0341 	mov.w	r3, r1, lsl #1
 8000c64:	ea7f 6c22 	mvns.w	ip, r2, asr #24
 8000c68:	bf18      	it	ne
 8000c6a:	ea7f 6c23 	mvnsne.w	ip, r3, asr #24
 8000c6e:	d021      	beq.n	8000cb4 <__addsf3+0x140>
 8000c70:	ea92 0f03 	teq	r2, r3
 8000c74:	d004      	beq.n	8000c80 <__addsf3+0x10c>
 8000c76:	f092 0f00 	teq	r2, #0
 8000c7a:	bf08      	it	eq
 8000c7c:	4608      	moveq	r0, r1
 8000c7e:	4770      	bx	lr
 8000c80:	ea90 0f01 	teq	r0, r1
 8000c84:	bf1c      	itt	ne
 8000c86:	2000      	movne	r0, #0
 8000c88:	4770      	bxne	lr
 8000c8a:	f012 4f7f 	tst.w	r2, #4278190080	; 0xff000000
 8000c8e:	d104      	bne.n	8000c9a <__addsf3+0x126>
 8000c90:	0040      	lsls	r0, r0, #1
 8000c92:	bf28      	it	cs
 8000c94:	f040 4000 	orrcs.w	r0, r0, #2147483648	; 0x80000000
 8000c98:	4770      	bx	lr
 8000c9a:	f112 7200 	adds.w	r2, r2, #33554432	; 0x2000000
 8000c9e:	bf3c      	itt	cc
 8000ca0:	f500 0000 	addcc.w	r0, r0, #8388608	; 0x800000
 8000ca4:	4770      	bxcc	lr
 8000ca6:	f000 4300 	and.w	r3, r0, #2147483648	; 0x80000000
 8000caa:	f043 40fe 	orr.w	r0, r3, #2130706432	; 0x7f000000
 8000cae:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
 8000cb2:	4770      	bx	lr
 8000cb4:	ea7f 6222 	mvns.w	r2, r2, asr #24
 8000cb8:	bf16      	itet	ne
 8000cba:	4608      	movne	r0, r1
 8000cbc:	ea7f 6323 	mvnseq.w	r3, r3, asr #24
 8000cc0:	4601      	movne	r1, r0
 8000cc2:	0242      	lsls	r2, r0, #9
 8000cc4:	bf06      	itte	eq
 8000cc6:	ea5f 2341 	movseq.w	r3, r1, lsl #9
 8000cca:	ea90 0f01 	teqeq	r0, r1
 8000cce:	f440 0080 	orrne.w	r0, r0, #4194304	; 0x400000
 8000cd2:	4770      	bx	lr

08000cd4 <__aeabi_ui2f>:
 8000cd4:	f04f 0300 	mov.w	r3, #0
 8000cd8:	e004      	b.n	8000ce4 <__aeabi_i2f+0x8>
 8000cda:	bf00      	nop

08000cdc <__aeabi_i2f>:
 8000cdc:	f010 4300 	ands.w	r3, r0, #2147483648	; 0x80000000
 8000ce0:	bf48      	it	mi
 8000ce2:	4240      	negmi	r0, r0
 8000ce4:	ea5f 0c00 	movs.w	ip, r0
 8000ce8:	bf08      	it	eq
 8000cea:	4770      	bxeq	lr
 8000cec:	f043 4396 	orr.w	r3, r3, #1258291200	; 0x4b000000
 8000cf0:	4601      	mov	r1, r0
 8000cf2:	f04f 0000 	mov.w	r0, #0
 8000cf6:	e01c      	b.n	8000d32 <__aeabi_l2f+0x2a>

08000cf8 <__aeabi_ul2f>:
 8000cf8:	ea50 0201 	orrs.w	r2, r0, r1
 8000cfc:	bf08      	it	eq
 8000cfe:	4770      	bxeq	lr
 8000d00:	f04f 0300 	mov.w	r3, #0
 8000d04:	e00a      	b.n	8000d1c <__aeabi_l2f+0x14>
 8000d06:	bf00      	nop

08000d08 <__aeabi_l2f>:
 8000d08:	ea50 0201 	orrs.w	r2, r0, r1
 8000d0c:	bf08      	it	eq
 8000d0e:	4770      	bxeq	lr
 8000d10:	f011 4300 	ands.w	r3, r1, #2147483648	; 0x80000000
 8000d14:	d502      	bpl.n	8000d1c <__aeabi_l2f+0x14>
 8000d16:	4240      	negs	r0, r0
 8000d18:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 8000d1c:	ea5f 0c01 	movs.w	ip, r1
 8000d20:	bf02      	ittt	eq
 8000d22:	4684      	moveq	ip, r0
 8000d24:	4601      	moveq	r1, r0
 8000d26:	2000      	moveq	r0, #0
 8000d28:	f043 43b6 	orr.w	r3, r3, #1526726656	; 0x5b000000
 8000d2c:	bf08      	it	eq
 8000d2e:	f1a3 5380 	subeq.w	r3, r3, #268435456	; 0x10000000
 8000d32:	f5a3 0300 	sub.w	r3, r3, #8388608	; 0x800000
 8000d36:	fabc f28c 	clz	r2, ip
 8000d3a:	3a08      	subs	r2, #8
 8000d3c:	eba3 53c2 	sub.w	r3, r3, r2, lsl #23
 8000d40:	db10      	blt.n	8000d64 <__aeabi_l2f+0x5c>
 8000d42:	fa01 fc02 	lsl.w	ip, r1, r2
 8000d46:	4463      	add	r3, ip
 8000d48:	fa00 fc02 	lsl.w	ip, r0, r2
 8000d4c:	f1c2 0220 	rsb	r2, r2, #32
 8000d50:	f1bc 4f00 	cmp.w	ip, #2147483648	; 0x80000000
 8000d54:	fa20 f202 	lsr.w	r2, r0, r2
 8000d58:	eb43 0002 	adc.w	r0, r3, r2
 8000d5c:	bf08      	it	eq
 8000d5e:	f020 0001 	biceq.w	r0, r0, #1
 8000d62:	4770      	bx	lr
 8000d64:	f102 0220 	add.w	r2, r2, #32
 8000d68:	fa01 fc02 	lsl.w	ip, r1, r2
 8000d6c:	f1c2 0220 	rsb	r2, r2, #32
 8000d70:	ea50 004c 	orrs.w	r0, r0, ip, lsl #1
 8000d74:	fa21 f202 	lsr.w	r2, r1, r2
 8000d78:	eb43 0002 	adc.w	r0, r3, r2
 8000d7c:	bf08      	it	eq
 8000d7e:	ea20 70dc 	biceq.w	r0, r0, ip, lsr #31
 8000d82:	4770      	bx	lr

08000d84 <__aeabi_fmul>:
 8000d84:	f04f 0cff 	mov.w	ip, #255	; 0xff
 8000d88:	ea1c 52d0 	ands.w	r2, ip, r0, lsr #23
 8000d8c:	bf1e      	ittt	ne
 8000d8e:	ea1c 53d1 	andsne.w	r3, ip, r1, lsr #23
 8000d92:	ea92 0f0c 	teqne	r2, ip
 8000d96:	ea93 0f0c 	teqne	r3, ip
 8000d9a:	d06f      	beq.n	8000e7c <__aeabi_fmul+0xf8>
 8000d9c:	441a      	add	r2, r3
 8000d9e:	ea80 0c01 	eor.w	ip, r0, r1
 8000da2:	0240      	lsls	r0, r0, #9
 8000da4:	bf18      	it	ne
 8000da6:	ea5f 2141 	movsne.w	r1, r1, lsl #9
 8000daa:	d01e      	beq.n	8000dea <__aeabi_fmul+0x66>
 8000dac:	f04f 6300 	mov.w	r3, #134217728	; 0x8000000
 8000db0:	ea43 1050 	orr.w	r0, r3, r0, lsr #5
 8000db4:	ea43 1151 	orr.w	r1, r3, r1, lsr #5
 8000db8:	fba0 3101 	umull	r3, r1, r0, r1
 8000dbc:	f00c 4000 	and.w	r0, ip, #2147483648	; 0x80000000
 8000dc0:	f5b1 0f00 	cmp.w	r1, #8388608	; 0x800000
 8000dc4:	bf3e      	ittt	cc
 8000dc6:	0049      	lslcc	r1, r1, #1
 8000dc8:	ea41 71d3 	orrcc.w	r1, r1, r3, lsr #31
 8000dcc:	005b      	lslcc	r3, r3, #1
 8000dce:	ea40 0001 	orr.w	r0, r0, r1
 8000dd2:	f162 027f 	sbc.w	r2, r2, #127	; 0x7f
 8000dd6:	2afd      	cmp	r2, #253	; 0xfd
 8000dd8:	d81d      	bhi.n	8000e16 <__aeabi_fmul+0x92>
 8000dda:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 8000dde:	eb40 50c2 	adc.w	r0, r0, r2, lsl #23
 8000de2:	bf08      	it	eq
 8000de4:	f020 0001 	biceq.w	r0, r0, #1
 8000de8:	4770      	bx	lr
 8000dea:	f090 0f00 	teq	r0, #0
 8000dee:	f00c 4c00 	and.w	ip, ip, #2147483648	; 0x80000000
 8000df2:	bf08      	it	eq
 8000df4:	0249      	lsleq	r1, r1, #9
 8000df6:	ea4c 2050 	orr.w	r0, ip, r0, lsr #9
 8000dfa:	ea40 2051 	orr.w	r0, r0, r1, lsr #9
 8000dfe:	3a7f      	subs	r2, #127	; 0x7f
 8000e00:	bfc2      	ittt	gt
 8000e02:	f1d2 03ff 	rsbsgt	r3, r2, #255	; 0xff
 8000e06:	ea40 50c2 	orrgt.w	r0, r0, r2, lsl #23
 8000e0a:	4770      	bxgt	lr
 8000e0c:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
 8000e10:	f04f 0300 	mov.w	r3, #0
 8000e14:	3a01      	subs	r2, #1
 8000e16:	dc5d      	bgt.n	8000ed4 <__aeabi_fmul+0x150>
 8000e18:	f112 0f19 	cmn.w	r2, #25
 8000e1c:	bfdc      	itt	le
 8000e1e:	f000 4000 	andle.w	r0, r0, #2147483648	; 0x80000000
 8000e22:	4770      	bxle	lr
 8000e24:	f1c2 0200 	rsb	r2, r2, #0
 8000e28:	0041      	lsls	r1, r0, #1
 8000e2a:	fa21 f102 	lsr.w	r1, r1, r2
 8000e2e:	f1c2 0220 	rsb	r2, r2, #32
 8000e32:	fa00 fc02 	lsl.w	ip, r0, r2
 8000e36:	ea5f 0031 	movs.w	r0, r1, rrx
 8000e3a:	f140 0000 	adc.w	r0, r0, #0
 8000e3e:	ea53 034c 	orrs.w	r3, r3, ip, lsl #1
 8000e42:	bf08      	it	eq
 8000e44:	ea20 70dc 	biceq.w	r0, r0, ip, lsr #31
 8000e48:	4770      	bx	lr
 8000e4a:	f092 0f00 	teq	r2, #0
 8000e4e:	f000 4c00 	and.w	ip, r0, #2147483648	; 0x80000000
 8000e52:	bf02      	ittt	eq
 8000e54:	0040      	lsleq	r0, r0, #1
 8000e56:	f410 0f00 	tsteq.w	r0, #8388608	; 0x800000
 8000e5a:	3a01      	subeq	r2, #1
 8000e5c:	d0f9      	beq.n	8000e52 <__aeabi_fmul+0xce>
 8000e5e:	ea40 000c 	orr.w	r0, r0, ip
 8000e62:	f093 0f00 	teq	r3, #0
 8000e66:	f001 4c00 	and.w	ip, r1, #2147483648	; 0x80000000
 8000e6a:	bf02      	ittt	eq
 8000e6c:	0049      	lsleq	r1, r1, #1
 8000e6e:	f411 0f00 	tsteq.w	r1, #8388608	; 0x800000
 8000e72:	3b01      	subeq	r3, #1
 8000e74:	d0f9      	beq.n	8000e6a <__aeabi_fmul+0xe6>
 8000e76:	ea41 010c 	orr.w	r1, r1, ip
 8000e7a:	e78f      	b.n	8000d9c <__aeabi_fmul+0x18>
 8000e7c:	ea0c 53d1 	and.w	r3, ip, r1, lsr #23
 8000e80:	ea92 0f0c 	teq	r2, ip
 8000e84:	bf18      	it	ne
 8000e86:	ea93 0f0c 	teqne	r3, ip
 8000e8a:	d00a      	beq.n	8000ea2 <__aeabi_fmul+0x11e>
 8000e8c:	f030 4c00 	bics.w	ip, r0, #2147483648	; 0x80000000
 8000e90:	bf18      	it	ne
 8000e92:	f031 4c00 	bicsne.w	ip, r1, #2147483648	; 0x80000000
 8000e96:	d1d8      	bne.n	8000e4a <__aeabi_fmul+0xc6>
 8000e98:	ea80 0001 	eor.w	r0, r0, r1
 8000e9c:	f000 4000 	and.w	r0, r0, #2147483648	; 0x80000000
 8000ea0:	4770      	bx	lr
 8000ea2:	f090 0f00 	teq	r0, #0
 8000ea6:	bf17      	itett	ne
 8000ea8:	f090 4f00 	teqne	r0, #2147483648	; 0x80000000
 8000eac:	4608      	moveq	r0, r1
 8000eae:	f091 0f00 	teqne	r1, #0
 8000eb2:	f091 4f00 	teqne	r1, #2147483648	; 0x80000000
 8000eb6:	d014      	beq.n	8000ee2 <__aeabi_fmul+0x15e>
 8000eb8:	ea92 0f0c 	teq	r2, ip
 8000ebc:	d101      	bne.n	8000ec2 <__aeabi_fmul+0x13e>
 8000ebe:	0242      	lsls	r2, r0, #9
 8000ec0:	d10f      	bne.n	8000ee2 <__aeabi_fmul+0x15e>
 8000ec2:	ea93 0f0c 	teq	r3, ip
 8000ec6:	d103      	bne.n	8000ed0 <__aeabi_fmul+0x14c>
 8000ec8:	024b      	lsls	r3, r1, #9
 8000eca:	bf18      	it	ne
 8000ecc:	4608      	movne	r0, r1
 8000ece:	d108      	bne.n	8000ee2 <__aeabi_fmul+0x15e>
 8000ed0:	ea80 0001 	eor.w	r0, r0, r1
 8000ed4:	f000 4000 	and.w	r0, r0, #2147483648	; 0x80000000
 8000ed8:	f040 40fe 	orr.w	r0, r0, #2130706432	; 0x7f000000
 8000edc:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
 8000ee0:	4770      	bx	lr
 8000ee2:	f040 40fe 	orr.w	r0, r0, #2130706432	; 0x7f000000
 8000ee6:	f440 0040 	orr.w	r0, r0, #12582912	; 0xc00000
 8000eea:	4770      	bx	lr

08000eec <__aeabi_fdiv>:
 8000eec:	f04f 0cff 	mov.w	ip, #255	; 0xff
 8000ef0:	ea1c 52d0 	ands.w	r2, ip, r0, lsr #23
 8000ef4:	bf1e      	ittt	ne
 8000ef6:	ea1c 53d1 	andsne.w	r3, ip, r1, lsr #23
 8000efa:	ea92 0f0c 	teqne	r2, ip
 8000efe:	ea93 0f0c 	teqne	r3, ip
 8000f02:	d069      	beq.n	8000fd8 <__aeabi_fdiv+0xec>
 8000f04:	eba2 0203 	sub.w	r2, r2, r3
 8000f08:	ea80 0c01 	eor.w	ip, r0, r1
 8000f0c:	0249      	lsls	r1, r1, #9
 8000f0e:	ea4f 2040 	mov.w	r0, r0, lsl #9
 8000f12:	d037      	beq.n	8000f84 <__aeabi_fdiv+0x98>
 8000f14:	f04f 5380 	mov.w	r3, #268435456	; 0x10000000
 8000f18:	ea43 1111 	orr.w	r1, r3, r1, lsr #4
 8000f1c:	ea43 1310 	orr.w	r3, r3, r0, lsr #4
 8000f20:	f00c 4000 	and.w	r0, ip, #2147483648	; 0x80000000
 8000f24:	428b      	cmp	r3, r1
 8000f26:	bf38      	it	cc
 8000f28:	005b      	lslcc	r3, r3, #1
 8000f2a:	f142 027d 	adc.w	r2, r2, #125	; 0x7d
 8000f2e:	f44f 0c00 	mov.w	ip, #8388608	; 0x800000
 8000f32:	428b      	cmp	r3, r1
 8000f34:	bf24      	itt	cs
 8000f36:	1a5b      	subcs	r3, r3, r1
 8000f38:	ea40 000c 	orrcs.w	r0, r0, ip
 8000f3c:	ebb3 0f51 	cmp.w	r3, r1, lsr #1
 8000f40:	bf24      	itt	cs
 8000f42:	eba3 0351 	subcs.w	r3, r3, r1, lsr #1
 8000f46:	ea40 005c 	orrcs.w	r0, r0, ip, lsr #1
 8000f4a:	ebb3 0f91 	cmp.w	r3, r1, lsr #2
 8000f4e:	bf24      	itt	cs
 8000f50:	eba3 0391 	subcs.w	r3, r3, r1, lsr #2
 8000f54:	ea40 009c 	orrcs.w	r0, r0, ip, lsr #2
 8000f58:	ebb3 0fd1 	cmp.w	r3, r1, lsr #3
 8000f5c:	bf24      	itt	cs
 8000f5e:	eba3 03d1 	subcs.w	r3, r3, r1, lsr #3
 8000f62:	ea40 00dc 	orrcs.w	r0, r0, ip, lsr #3
 8000f66:	011b      	lsls	r3, r3, #4
 8000f68:	bf18      	it	ne
 8000f6a:	ea5f 1c1c 	movsne.w	ip, ip, lsr #4
 8000f6e:	d1e0      	bne.n	8000f32 <__aeabi_fdiv+0x46>
 8000f70:	2afd      	cmp	r2, #253	; 0xfd
 8000f72:	f63f af50 	bhi.w	8000e16 <__aeabi_fmul+0x92>
 8000f76:	428b      	cmp	r3, r1
 8000f78:	eb40 50c2 	adc.w	r0, r0, r2, lsl #23
 8000f7c:	bf08      	it	eq
 8000f7e:	f020 0001 	biceq.w	r0, r0, #1
 8000f82:	4770      	bx	lr
 8000f84:	f00c 4c00 	and.w	ip, ip, #2147483648	; 0x80000000
 8000f88:	ea4c 2050 	orr.w	r0, ip, r0, lsr #9
 8000f8c:	327f      	adds	r2, #127	; 0x7f
 8000f8e:	bfc2      	ittt	gt
 8000f90:	f1d2 03ff 	rsbsgt	r3, r2, #255	; 0xff
 8000f94:	ea40 50c2 	orrgt.w	r0, r0, r2, lsl #23
 8000f98:	4770      	bxgt	lr
 8000f9a:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
 8000f9e:	f04f 0300 	mov.w	r3, #0
 8000fa2:	3a01      	subs	r2, #1
 8000fa4:	e737      	b.n	8000e16 <__aeabi_fmul+0x92>
 8000fa6:	f092 0f00 	teq	r2, #0
 8000faa:	f000 4c00 	and.w	ip, r0, #2147483648	; 0x80000000
 8000fae:	bf02      	ittt	eq
 8000fb0:	0040      	lsleq	r0, r0, #1
 8000fb2:	f410 0f00 	tsteq.w	r0, #8388608	; 0x800000
 8000fb6:	3a01      	subeq	r2, #1
 8000fb8:	d0f9      	beq.n	8000fae <__aeabi_fdiv+0xc2>
 8000fba:	ea40 000c 	orr.w	r0, r0, ip
 8000fbe:	f093 0f00 	teq	r3, #0
 8000fc2:	f001 4c00 	and.w	ip, r1, #2147483648	; 0x80000000
 8000fc6:	bf02      	ittt	eq
 8000fc8:	0049      	lsleq	r1, r1, #1
 8000fca:	f411 0f00 	tsteq.w	r1, #8388608	; 0x800000
 8000fce:	3b01      	subeq	r3, #1
 8000fd0:	d0f9      	beq.n	8000fc6 <__aeabi_fdiv+0xda>
 8000fd2:	ea41 010c 	orr.w	r1, r1, ip
 8000fd6:	e795      	b.n	8000f04 <__aeabi_fdiv+0x18>
 8000fd8:	ea0c 53d1 	and.w	r3, ip, r1, lsr #23
 8000fdc:	ea92 0f0c 	teq	r2, ip
 8000fe0:	d108      	bne.n	8000ff4 <__aeabi_fdiv+0x108>
 8000fe2:	0242      	lsls	r2, r0, #9
 8000fe4:	f47f af7d 	bne.w	8000ee2 <__aeabi_fmul+0x15e>
 8000fe8:	ea93 0f0c 	teq	r3, ip
 8000fec:	f47f af70 	bne.w	8000ed0 <__aeabi_fmul+0x14c>
 8000ff0:	4608      	mov	r0, r1
 8000ff2:	e776      	b.n	8000ee2 <__aeabi_fmul+0x15e>
 8000ff4:	ea93 0f0c 	teq	r3, ip
 8000ff8:	d104      	bne.n	8001004 <__aeabi_fdiv+0x118>
 8000ffa:	024b      	lsls	r3, r1, #9
 8000ffc:	f43f af4c 	beq.w	8000e98 <__aeabi_fmul+0x114>
 8001000:	4608      	mov	r0, r1
 8001002:	e76e      	b.n	8000ee2 <__aeabi_fmul+0x15e>
 8001004:	f030 4c00 	bics.w	ip, r0, #2147483648	; 0x80000000
 8001008:	bf18      	it	ne
 800100a:	f031 4c00 	bicsne.w	ip, r1, #2147483648	; 0x80000000
 800100e:	d1ca      	bne.n	8000fa6 <__aeabi_fdiv+0xba>
 8001010:	f030 4200 	bics.w	r2, r0, #2147483648	; 0x80000000
 8001014:	f47f af5c 	bne.w	8000ed0 <__aeabi_fmul+0x14c>
 8001018:	f031 4300 	bics.w	r3, r1, #2147483648	; 0x80000000
 800101c:	f47f af3c 	bne.w	8000e98 <__aeabi_fmul+0x114>
 8001020:	e75f      	b.n	8000ee2 <__aeabi_fmul+0x15e>
 8001022:	bf00      	nop

08001024 <MPU9250_Init>:
double base[3]={0,0,0};
double acce[3];


void MPU9250_Init (void)
{
 8001024:	b580      	push	{r7, lr}
 8001026:	b086      	sub	sp, #24
 8001028:	af04      	add	r7, sp, #16
    uint8_t check;
    uint8_t Data;

	// check WHO_AM_I

    HAL_I2C_Mem_Read (&hi2c1, MPU9250_ADDR,WHO_AM_I_REG,1, &check, 1, 1000);
 800102a:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 800102e:	9302      	str	r3, [sp, #8]
 8001030:	2301      	movs	r3, #1
 8001032:	9301      	str	r3, [sp, #4]
 8001034:	1dfb      	adds	r3, r7, #7
 8001036:	9300      	str	r3, [sp, #0]
 8001038:	2301      	movs	r3, #1
 800103a:	2275      	movs	r2, #117	; 0x75
 800103c:	21d0      	movs	r1, #208	; 0xd0
 800103e:	4860      	ldr	r0, [pc, #384]	; (80011c0 <MPU9250_Init+0x19c>)
 8001040:	f002 f9ea 	bl	8003418 <HAL_I2C_Mem_Read>

    if (check == 0x71)
 8001044:	79fb      	ldrb	r3, [r7, #7]
 8001046:	2b71      	cmp	r3, #113	; 0x71
 8001048:	f040 8096 	bne.w	8001178 <MPU9250_Init+0x154>
	{
		//Reset
		Data = 0X80;
 800104c:	2380      	movs	r3, #128	; 0x80
 800104e:	71bb      	strb	r3, [r7, #6]
		HAL_I2C_Mem_Write(&hi2c1, MPU9250_ADDR, PWR_MGMT_1_REG, 1,&Data, 1, 1000);
 8001050:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8001054:	9302      	str	r3, [sp, #8]
 8001056:	2301      	movs	r3, #1
 8001058:	9301      	str	r3, [sp, #4]
 800105a:	1dbb      	adds	r3, r7, #6
 800105c:	9300      	str	r3, [sp, #0]
 800105e:	2301      	movs	r3, #1
 8001060:	226b      	movs	r2, #107	; 0x6b
 8001062:	21d0      	movs	r1, #208	; 0xd0
 8001064:	4856      	ldr	r0, [pc, #344]	; (80011c0 <MPU9250_Init+0x19c>)
 8001066:	f002 f8dd 	bl	8003224 <HAL_I2C_Mem_Write>

		//Wake up
        Data = 0X00;
 800106a:	2300      	movs	r3, #0
 800106c:	71bb      	strb	r3, [r7, #6]
        HAL_I2C_Mem_Write(&hi2c1, MPU9250_ADDR, PWR_MGMT_1_REG, 1,&Data, 1, 1000);
 800106e:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8001072:	9302      	str	r3, [sp, #8]
 8001074:	2301      	movs	r3, #1
 8001076:	9301      	str	r3, [sp, #4]
 8001078:	1dbb      	adds	r3, r7, #6
 800107a:	9300      	str	r3, [sp, #0]
 800107c:	2301      	movs	r3, #1
 800107e:	226b      	movs	r2, #107	; 0x6b
 8001080:	21d0      	movs	r1, #208	; 0xd0
 8001082:	484f      	ldr	r0, [pc, #316]	; (80011c0 <MPU9250_Init+0x19c>)
 8001084:	f002 f8ce 	bl	8003224 <HAL_I2C_Mem_Write>

		// Set DATA RATE = 1kHZ
        Data = 0x00;
 8001088:	2300      	movs	r3, #0
 800108a:	71bb      	strb	r3, [r7, #6]
        HAL_I2C_Mem_Write(&hi2c1, MPU9250_ADDR, SMPLRT_DIV_REG, 1, &Data, 1, 1000);
 800108c:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8001090:	9302      	str	r3, [sp, #8]
 8001092:	2301      	movs	r3, #1
 8001094:	9301      	str	r3, [sp, #4]
 8001096:	1dbb      	adds	r3, r7, #6
 8001098:	9300      	str	r3, [sp, #0]
 800109a:	2301      	movs	r3, #1
 800109c:	2219      	movs	r2, #25
 800109e:	21d0      	movs	r1, #208	; 0xd0
 80010a0:	4847      	ldr	r0, [pc, #284]	; (80011c0 <MPU9250_Init+0x19c>)
 80010a2:	f002 f8bf 	bl	8003224 <HAL_I2C_Mem_Write>

		// Set accelerometer +-2g
		Data = 0x00;
 80010a6:	2300      	movs	r3, #0
 80010a8:	71bb      	strb	r3, [r7, #6]
		HAL_I2C_Mem_Write(&hi2c1, MPU9250_ADDR, ACCEL_CONFIG_REG, 1, &Data, 1, 1000);
 80010aa:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 80010ae:	9302      	str	r3, [sp, #8]
 80010b0:	2301      	movs	r3, #1
 80010b2:	9301      	str	r3, [sp, #4]
 80010b4:	1dbb      	adds	r3, r7, #6
 80010b6:	9300      	str	r3, [sp, #0]
 80010b8:	2301      	movs	r3, #1
 80010ba:	221c      	movs	r2, #28
 80010bc:	21d0      	movs	r1, #208	; 0xd0
 80010be:	4840      	ldr	r0, [pc, #256]	; (80011c0 <MPU9250_Init+0x19c>)
 80010c0:	f002 f8b0 	bl	8003224 <HAL_I2C_Mem_Write>

		// Set Gyroscope +-250
		Data = 0x11;
 80010c4:	2311      	movs	r3, #17
 80010c6:	71bb      	strb	r3, [r7, #6]
		HAL_I2C_Mem_Write(&hi2c1, MPU9250_ADDR, GYRO_CONFIG_REG, 1, &Data, 1, 1000);
 80010c8:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 80010cc:	9302      	str	r3, [sp, #8]
 80010ce:	2301      	movs	r3, #1
 80010d0:	9301      	str	r3, [sp, #4]
 80010d2:	1dbb      	adds	r3, r7, #6
 80010d4:	9300      	str	r3, [sp, #0]
 80010d6:	2301      	movs	r3, #1
 80010d8:	221b      	movs	r2, #27
 80010da:	21d0      	movs	r1, #208	; 0xd0
 80010dc:	4838      	ldr	r0, [pc, #224]	; (80011c0 <MPU9250_Init+0x19c>)
 80010de:	f002 f8a1 	bl	8003224 <HAL_I2C_Mem_Write>

		// Set DLPF Gyro Bandwidth = 188hz
		Data = 0x01;
 80010e2:	2301      	movs	r3, #1
 80010e4:	71bb      	strb	r3, [r7, #6]
		HAL_I2C_Mem_Write(&hi2c1, MPU9250_ADDR, CONFIG_REG, 1, &Data, 1, 1000);
 80010e6:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 80010ea:	9302      	str	r3, [sp, #8]
 80010ec:	2301      	movs	r3, #1
 80010ee:	9301      	str	r3, [sp, #4]
 80010f0:	1dbb      	adds	r3, r7, #6
 80010f2:	9300      	str	r3, [sp, #0]
 80010f4:	2301      	movs	r3, #1
 80010f6:	221a      	movs	r2, #26
 80010f8:	21d0      	movs	r1, #208	; 0xd0
 80010fa:	4831      	ldr	r0, [pc, #196]	; (80011c0 <MPU9250_Init+0x19c>)
 80010fc:	f002 f892 	bl	8003224 <HAL_I2C_Mem_Write>

		// Set DLPF ACCEL Bandwidth = 5hz
		Data = 0x06;
 8001100:	2306      	movs	r3, #6
 8001102:	71bb      	strb	r3, [r7, #6]
		HAL_I2C_Mem_Write(&hi2c1, MPU9250_ADDR, ACCEL_CONFIG2_REG, 1, &Data, 1, 1000);
 8001104:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8001108:	9302      	str	r3, [sp, #8]
 800110a:	2301      	movs	r3, #1
 800110c:	9301      	str	r3, [sp, #4]
 800110e:	1dbb      	adds	r3, r7, #6
 8001110:	9300      	str	r3, [sp, #0]
 8001112:	2301      	movs	r3, #1
 8001114:	221d      	movs	r2, #29
 8001116:	21d0      	movs	r1, #208	; 0xd0
 8001118:	4829      	ldr	r0, [pc, #164]	; (80011c0 <MPU9250_Init+0x19c>)
 800111a:	f002 f883 	bl	8003224 <HAL_I2C_Mem_Write>

		//The logic level for INT pin is active low
		//BYPASS Enable
		Data = 0x82;
 800111e:	2382      	movs	r3, #130	; 0x82
 8001120:	71bb      	strb	r3, [r7, #6]
		HAL_I2C_Mem_Write(&hi2c1, MPU9250_ADDR, INT_PIN_CFG_REG, 1, &Data, 1, 1000);
 8001122:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8001126:	9302      	str	r3, [sp, #8]
 8001128:	2301      	movs	r3, #1
 800112a:	9301      	str	r3, [sp, #4]
 800112c:	1dbb      	adds	r3, r7, #6
 800112e:	9300      	str	r3, [sp, #0]
 8001130:	2301      	movs	r3, #1
 8001132:	2237      	movs	r2, #55	; 0x37
 8001134:	21d0      	movs	r1, #208	; 0xd0
 8001136:	4822      	ldr	r0, [pc, #136]	; (80011c0 <MPU9250_Init+0x19c>)
 8001138:	f002 f874 	bl	8003224 <HAL_I2C_Mem_Write>

		// Auto selects the best available clock source ?? PLL if ready, else use the Internal oscillator
		Data = 0x01;
 800113c:	2301      	movs	r3, #1
 800113e:	71bb      	strb	r3, [r7, #6]
		HAL_I2C_Mem_Write(&hi2c1, MPU9250_ADDR, PWR_MGMT_1_REG, 1, &Data, 1, 1000);
 8001140:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8001144:	9302      	str	r3, [sp, #8]
 8001146:	2301      	movs	r3, #1
 8001148:	9301      	str	r3, [sp, #4]
 800114a:	1dbb      	adds	r3, r7, #6
 800114c:	9300      	str	r3, [sp, #0]
 800114e:	2301      	movs	r3, #1
 8001150:	226b      	movs	r2, #107	; 0x6b
 8001152:	21d0      	movs	r1, #208	; 0xd0
 8001154:	481a      	ldr	r0, [pc, #104]	; (80011c0 <MPU9250_Init+0x19c>)
 8001156:	f002 f865 	bl	8003224 <HAL_I2C_Mem_Write>

		// Enable ACCEL & GYRO
		Data = 0x00;
 800115a:	2300      	movs	r3, #0
 800115c:	71bb      	strb	r3, [r7, #6]
		HAL_I2C_Mem_Write(&hi2c1, MPU9250_ADDR, PWR_MGMT_2_REG, 1, &Data, 1, 1000);
 800115e:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8001162:	9302      	str	r3, [sp, #8]
 8001164:	2301      	movs	r3, #1
 8001166:	9301      	str	r3, [sp, #4]
 8001168:	1dbb      	adds	r3, r7, #6
 800116a:	9300      	str	r3, [sp, #0]
 800116c:	2301      	movs	r3, #1
 800116e:	226c      	movs	r2, #108	; 0x6c
 8001170:	21d0      	movs	r1, #208	; 0xd0
 8001172:	4813      	ldr	r0, [pc, #76]	; (80011c0 <MPU9250_Init+0x19c>)
 8001174:	f002 f856 	bl	8003224 <HAL_I2C_Mem_Write>
	}

	HAL_I2C_Mem_Read (&hi2c1, (AK8963_ADDR<<1),AK8963_WHOAMI_REG,1, &check, 1, 1000);
 8001178:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 800117c:	9302      	str	r3, [sp, #8]
 800117e:	2301      	movs	r3, #1
 8001180:	9301      	str	r3, [sp, #4]
 8001182:	1dfb      	adds	r3, r7, #7
 8001184:	9300      	str	r3, [sp, #0]
 8001186:	2301      	movs	r3, #1
 8001188:	2200      	movs	r2, #0
 800118a:	2118      	movs	r1, #24
 800118c:	480c      	ldr	r0, [pc, #48]	; (80011c0 <MPU9250_Init+0x19c>)
 800118e:	f002 f943 	bl	8003418 <HAL_I2C_Mem_Read>

	if (check == 0x48){
 8001192:	79fb      	ldrb	r3, [r7, #7]
 8001194:	2b48      	cmp	r3, #72	; 0x48
 8001196:	d10e      	bne.n	80011b6 <MPU9250_Init+0x192>
		// Single measurement mode
		// 16-bit output
		Data = 0x11;
 8001198:	2311      	movs	r3, #17
 800119a:	71bb      	strb	r3, [r7, #6]
		HAL_I2C_Mem_Write(&hi2c1, (AK8963_ADDR<<1), AK8963_CNTL1_REG, 1, &Data, 1, 1000);
 800119c:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 80011a0:	9302      	str	r3, [sp, #8]
 80011a2:	2301      	movs	r3, #1
 80011a4:	9301      	str	r3, [sp, #4]
 80011a6:	1dbb      	adds	r3, r7, #6
 80011a8:	9300      	str	r3, [sp, #0]
 80011aa:	2301      	movs	r3, #1
 80011ac:	220a      	movs	r2, #10
 80011ae:	2118      	movs	r1, #24
 80011b0:	4803      	ldr	r0, [pc, #12]	; (80011c0 <MPU9250_Init+0x19c>)
 80011b2:	f002 f837 	bl	8003224 <HAL_I2C_Mem_Write>
	}
}
 80011b6:	bf00      	nop
 80011b8:	3708      	adds	r7, #8
 80011ba:	46bd      	mov	sp, r7
 80011bc:	bd80      	pop	{r7, pc}
 80011be:	bf00      	nop
 80011c0:	200002e0 	.word	0x200002e0

080011c4 <initAK8963>:
void initAK8963(float * destination)
{
 80011c4:	b590      	push	{r4, r7, lr}
 80011c6:	b089      	sub	sp, #36	; 0x24
 80011c8:	af04      	add	r7, sp, #16
 80011ca:	6078      	str	r0, [r7, #4]
  // First extract the factory calibration for each magnetometer axis
    uint8_t rawData[3];  // x/y/z gyro calibration data stored here
    uint8_t Data;
    Data = 0x00;
 80011cc:	2300      	movs	r3, #0
 80011ce:	72fb      	strb	r3, [r7, #11]
    HAL_I2C_Mem_Write(&hi2c1, (AK8963_ADDR<<1), AK8963_CNTL1_REG, 1, &Data, 1, 1000);	 // Power down magnetometer
 80011d0:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 80011d4:	9302      	str	r3, [sp, #8]
 80011d6:	2301      	movs	r3, #1
 80011d8:	9301      	str	r3, [sp, #4]
 80011da:	f107 030b 	add.w	r3, r7, #11
 80011de:	9300      	str	r3, [sp, #0]
 80011e0:	2301      	movs	r3, #1
 80011e2:	220a      	movs	r2, #10
 80011e4:	2118      	movs	r1, #24
 80011e6:	485e      	ldr	r0, [pc, #376]	; (8001360 <initAK8963+0x19c>)
 80011e8:	f002 f81c 	bl	8003224 <HAL_I2C_Mem_Write>
    HAL_Delay(10);
 80011ec:	200a      	movs	r0, #10
 80011ee:	f001 fba7 	bl	8002940 <HAL_Delay>
    Data = 0x0F;
 80011f2:	230f      	movs	r3, #15
 80011f4:	72fb      	strb	r3, [r7, #11]
    HAL_I2C_Mem_Write(&hi2c1, (AK8963_ADDR<<1), AK8963_CNTL1_REG, 1, &Data, 1, 1000);	// Enter Fuse ROM access mode
 80011f6:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 80011fa:	9302      	str	r3, [sp, #8]
 80011fc:	2301      	movs	r3, #1
 80011fe:	9301      	str	r3, [sp, #4]
 8001200:	f107 030b 	add.w	r3, r7, #11
 8001204:	9300      	str	r3, [sp, #0]
 8001206:	2301      	movs	r3, #1
 8001208:	220a      	movs	r2, #10
 800120a:	2118      	movs	r1, #24
 800120c:	4854      	ldr	r0, [pc, #336]	; (8001360 <initAK8963+0x19c>)
 800120e:	f002 f809 	bl	8003224 <HAL_I2C_Mem_Write>
    HAL_Delay(10);
 8001212:	200a      	movs	r0, #10
 8001214:	f001 fb94 	bl	8002940 <HAL_Delay>
    HAL_I2C_Mem_Read (&hi2c1, (AK8963_ADDR<<1),AK8963_ASAX,1, &rawData, 3, 1000); // Read the x-, y-, and z-axis calibration values
 8001218:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 800121c:	9302      	str	r3, [sp, #8]
 800121e:	2303      	movs	r3, #3
 8001220:	9301      	str	r3, [sp, #4]
 8001222:	f107 030c 	add.w	r3, r7, #12
 8001226:	9300      	str	r3, [sp, #0]
 8001228:	2301      	movs	r3, #1
 800122a:	2210      	movs	r2, #16
 800122c:	2118      	movs	r1, #24
 800122e:	484c      	ldr	r0, [pc, #304]	; (8001360 <initAK8963+0x19c>)
 8001230:	f002 f8f2 	bl	8003418 <HAL_I2C_Mem_Read>
    destination[0] =  (float)(rawData[0] - 128)/256. + 1.;   // Return x-axis sensitivity adjustment values, etc.
 8001234:	7b3b      	ldrb	r3, [r7, #12]
 8001236:	3b80      	subs	r3, #128	; 0x80
 8001238:	4618      	mov	r0, r3
 800123a:	f7ff fd4f 	bl	8000cdc <__aeabi_i2f>
 800123e:	4603      	mov	r3, r0
 8001240:	4618      	mov	r0, r3
 8001242:	f7ff f8f1 	bl	8000428 <__aeabi_f2d>
 8001246:	f04f 0200 	mov.w	r2, #0
 800124a:	4b46      	ldr	r3, [pc, #280]	; (8001364 <initAK8963+0x1a0>)
 800124c:	f7ff fa6e 	bl	800072c <__aeabi_ddiv>
 8001250:	4603      	mov	r3, r0
 8001252:	460c      	mov	r4, r1
 8001254:	4618      	mov	r0, r3
 8001256:	4621      	mov	r1, r4
 8001258:	f04f 0200 	mov.w	r2, #0
 800125c:	4b42      	ldr	r3, [pc, #264]	; (8001368 <initAK8963+0x1a4>)
 800125e:	f7fe ff85 	bl	800016c <__adddf3>
 8001262:	4603      	mov	r3, r0
 8001264:	460c      	mov	r4, r1
 8001266:	4618      	mov	r0, r3
 8001268:	4621      	mov	r1, r4
 800126a:	f7ff fc2d 	bl	8000ac8 <__aeabi_d2f>
 800126e:	4602      	mov	r2, r0
 8001270:	687b      	ldr	r3, [r7, #4]
 8001272:	601a      	str	r2, [r3, #0]
    destination[1] =  (float)(rawData[1] - 128)/256. + 1.;
 8001274:	7b7b      	ldrb	r3, [r7, #13]
 8001276:	3b80      	subs	r3, #128	; 0x80
 8001278:	4618      	mov	r0, r3
 800127a:	f7ff fd2f 	bl	8000cdc <__aeabi_i2f>
 800127e:	4603      	mov	r3, r0
 8001280:	4618      	mov	r0, r3
 8001282:	f7ff f8d1 	bl	8000428 <__aeabi_f2d>
 8001286:	f04f 0200 	mov.w	r2, #0
 800128a:	4b36      	ldr	r3, [pc, #216]	; (8001364 <initAK8963+0x1a0>)
 800128c:	f7ff fa4e 	bl	800072c <__aeabi_ddiv>
 8001290:	4603      	mov	r3, r0
 8001292:	460c      	mov	r4, r1
 8001294:	4618      	mov	r0, r3
 8001296:	4621      	mov	r1, r4
 8001298:	f04f 0200 	mov.w	r2, #0
 800129c:	4b32      	ldr	r3, [pc, #200]	; (8001368 <initAK8963+0x1a4>)
 800129e:	f7fe ff65 	bl	800016c <__adddf3>
 80012a2:	4603      	mov	r3, r0
 80012a4:	460c      	mov	r4, r1
 80012a6:	4619      	mov	r1, r3
 80012a8:	4622      	mov	r2, r4
 80012aa:	687b      	ldr	r3, [r7, #4]
 80012ac:	1d1c      	adds	r4, r3, #4
 80012ae:	4608      	mov	r0, r1
 80012b0:	4611      	mov	r1, r2
 80012b2:	f7ff fc09 	bl	8000ac8 <__aeabi_d2f>
 80012b6:	4603      	mov	r3, r0
 80012b8:	6023      	str	r3, [r4, #0]
    destination[2] =  (float)(rawData[2] - 128)/256. + 1.;
 80012ba:	7bbb      	ldrb	r3, [r7, #14]
 80012bc:	3b80      	subs	r3, #128	; 0x80
 80012be:	4618      	mov	r0, r3
 80012c0:	f7ff fd0c 	bl	8000cdc <__aeabi_i2f>
 80012c4:	4603      	mov	r3, r0
 80012c6:	4618      	mov	r0, r3
 80012c8:	f7ff f8ae 	bl	8000428 <__aeabi_f2d>
 80012cc:	f04f 0200 	mov.w	r2, #0
 80012d0:	4b24      	ldr	r3, [pc, #144]	; (8001364 <initAK8963+0x1a0>)
 80012d2:	f7ff fa2b 	bl	800072c <__aeabi_ddiv>
 80012d6:	4603      	mov	r3, r0
 80012d8:	460c      	mov	r4, r1
 80012da:	4618      	mov	r0, r3
 80012dc:	4621      	mov	r1, r4
 80012de:	f04f 0200 	mov.w	r2, #0
 80012e2:	4b21      	ldr	r3, [pc, #132]	; (8001368 <initAK8963+0x1a4>)
 80012e4:	f7fe ff42 	bl	800016c <__adddf3>
 80012e8:	4603      	mov	r3, r0
 80012ea:	460c      	mov	r4, r1
 80012ec:	4619      	mov	r1, r3
 80012ee:	4622      	mov	r2, r4
 80012f0:	687b      	ldr	r3, [r7, #4]
 80012f2:	f103 0408 	add.w	r4, r3, #8
 80012f6:	4608      	mov	r0, r1
 80012f8:	4611      	mov	r1, r2
 80012fa:	f7ff fbe5 	bl	8000ac8 <__aeabi_d2f>
 80012fe:	4603      	mov	r3, r0
 8001300:	6023      	str	r3, [r4, #0]
    Data = 0x00;
 8001302:	2300      	movs	r3, #0
 8001304:	72fb      	strb	r3, [r7, #11]
    HAL_I2C_Mem_Write(&hi2c1, (AK8963_ADDR<<1), AK8963_CNTL1_REG, 1, &Data, 1, 1000);	 // Power down magnetometer
 8001306:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 800130a:	9302      	str	r3, [sp, #8]
 800130c:	2301      	movs	r3, #1
 800130e:	9301      	str	r3, [sp, #4]
 8001310:	f107 030b 	add.w	r3, r7, #11
 8001314:	9300      	str	r3, [sp, #0]
 8001316:	2301      	movs	r3, #1
 8001318:	220a      	movs	r2, #10
 800131a:	2118      	movs	r1, #24
 800131c:	4810      	ldr	r0, [pc, #64]	; (8001360 <initAK8963+0x19c>)
 800131e:	f001 ff81 	bl	8003224 <HAL_I2C_Mem_Write>
    HAL_Delay(10);
 8001322:	200a      	movs	r0, #10
 8001324:	f001 fb0c 	bl	8002940 <HAL_Delay>
  // Configure the magnetometer for continuous read and highest resolution
  // set Mscale bit 4 to 1 (0) to enable 16 (14) bit resolution in CNTL register,
  // and enable continuous mode data acquisition Mmode (bits [3:0]), 0010 for 8 Hz and 0110 for 100 Hz sample rates
    Data = 1 << 4 | Mmode;
 8001328:	4b10      	ldr	r3, [pc, #64]	; (800136c <initAK8963+0x1a8>)
 800132a:	781b      	ldrb	r3, [r3, #0]
 800132c:	f043 0310 	orr.w	r3, r3, #16
 8001330:	b2db      	uxtb	r3, r3
 8001332:	72fb      	strb	r3, [r7, #11]
    HAL_I2C_Mem_Write(&hi2c1, (AK8963_ADDR<<1), AK8963_CNTL1_REG, 1, &Data, 1, 1000); // Set magnetometer data resolution and sample ODR
 8001334:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8001338:	9302      	str	r3, [sp, #8]
 800133a:	2301      	movs	r3, #1
 800133c:	9301      	str	r3, [sp, #4]
 800133e:	f107 030b 	add.w	r3, r7, #11
 8001342:	9300      	str	r3, [sp, #0]
 8001344:	2301      	movs	r3, #1
 8001346:	220a      	movs	r2, #10
 8001348:	2118      	movs	r1, #24
 800134a:	4805      	ldr	r0, [pc, #20]	; (8001360 <initAK8963+0x19c>)
 800134c:	f001 ff6a 	bl	8003224 <HAL_I2C_Mem_Write>
    HAL_Delay(10);
 8001350:	200a      	movs	r0, #10
 8001352:	f001 faf5 	bl	8002940 <HAL_Delay>
}
 8001356:	bf00      	nop
 8001358:	3714      	adds	r7, #20
 800135a:	46bd      	mov	sp, r7
 800135c:	bd90      	pop	{r4, r7, pc}
 800135e:	bf00      	nop
 8001360:	200002e0 	.word	0x200002e0
 8001364:	40700000 	.word	0x40700000
 8001368:	3ff00000 	.word	0x3ff00000
 800136c:	20000000 	.word	0x20000000

08001370 <MPU9250_Read_Accel>:


void MPU9250_Read_Accel (void)
{
 8001370:	b590      	push	{r4, r7, lr}
 8001372:	b087      	sub	sp, #28
 8001374:	af04      	add	r7, sp, #16
	uint8_t Rec_Data[6];

	// Read 6 BYTES of data starting from ACCEL_XOUT_H register

	HAL_I2C_Mem_Read (&hi2c1, MPU9250_ADDR, ACCEL_XOUT_H_REG, 1, Rec_Data, 6, 1000);
 8001376:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 800137a:	9302      	str	r3, [sp, #8]
 800137c:	2306      	movs	r3, #6
 800137e:	9301      	str	r3, [sp, #4]
 8001380:	463b      	mov	r3, r7
 8001382:	9300      	str	r3, [sp, #0]
 8001384:	2301      	movs	r3, #1
 8001386:	223b      	movs	r2, #59	; 0x3b
 8001388:	21d0      	movs	r1, #208	; 0xd0
 800138a:	4841      	ldr	r0, [pc, #260]	; (8001490 <MPU9250_Read_Accel+0x120>)
 800138c:	f002 f844 	bl	8003418 <HAL_I2C_Mem_Read>

	Accel_X_RAW = (int16_t)(Rec_Data[0] << 8 | Rec_Data [1]);
 8001390:	783b      	ldrb	r3, [r7, #0]
 8001392:	021b      	lsls	r3, r3, #8
 8001394:	b21a      	sxth	r2, r3
 8001396:	787b      	ldrb	r3, [r7, #1]
 8001398:	b21b      	sxth	r3, r3
 800139a:	4313      	orrs	r3, r2
 800139c:	b21a      	sxth	r2, r3
 800139e:	4b3d      	ldr	r3, [pc, #244]	; (8001494 <MPU9250_Read_Accel+0x124>)
 80013a0:	801a      	strh	r2, [r3, #0]
	Accel_Y_RAW = (int16_t)(Rec_Data[2] << 8 | Rec_Data [3]);
 80013a2:	78bb      	ldrb	r3, [r7, #2]
 80013a4:	021b      	lsls	r3, r3, #8
 80013a6:	b21a      	sxth	r2, r3
 80013a8:	78fb      	ldrb	r3, [r7, #3]
 80013aa:	b21b      	sxth	r3, r3
 80013ac:	4313      	orrs	r3, r2
 80013ae:	b21a      	sxth	r2, r3
 80013b0:	4b39      	ldr	r3, [pc, #228]	; (8001498 <MPU9250_Read_Accel+0x128>)
 80013b2:	801a      	strh	r2, [r3, #0]
	Accel_Z_RAW = (int16_t)(Rec_Data[4] << 8 | Rec_Data [5]);
 80013b4:	793b      	ldrb	r3, [r7, #4]
 80013b6:	021b      	lsls	r3, r3, #8
 80013b8:	b21a      	sxth	r2, r3
 80013ba:	797b      	ldrb	r3, [r7, #5]
 80013bc:	b21b      	sxth	r3, r3
 80013be:	4313      	orrs	r3, r2
 80013c0:	b21a      	sxth	r2, r3
 80013c2:	4b36      	ldr	r3, [pc, #216]	; (800149c <MPU9250_Read_Accel+0x12c>)
 80013c4:	801a      	strh	r2, [r3, #0]

	/*** convert the RAW values into acceleration in 'g'
	     check ACCEL_CONFIG Register              ****/

	Ax = Accel_X_RAW/16384.0 ;
 80013c6:	4b33      	ldr	r3, [pc, #204]	; (8001494 <MPU9250_Read_Accel+0x124>)
 80013c8:	f9b3 3000 	ldrsh.w	r3, [r3]
 80013cc:	4618      	mov	r0, r3
 80013ce:	f7ff f819 	bl	8000404 <__aeabi_i2d>
 80013d2:	f04f 0200 	mov.w	r2, #0
 80013d6:	4b32      	ldr	r3, [pc, #200]	; (80014a0 <MPU9250_Read_Accel+0x130>)
 80013d8:	f7ff f9a8 	bl	800072c <__aeabi_ddiv>
 80013dc:	4603      	mov	r3, r0
 80013de:	460c      	mov	r4, r1
 80013e0:	4618      	mov	r0, r3
 80013e2:	4621      	mov	r1, r4
 80013e4:	f7ff fb70 	bl	8000ac8 <__aeabi_d2f>
 80013e8:	4602      	mov	r2, r0
 80013ea:	4b2e      	ldr	r3, [pc, #184]	; (80014a4 <MPU9250_Read_Accel+0x134>)
 80013ec:	601a      	str	r2, [r3, #0]
	Ay = Accel_Y_RAW/16384.0 ;
 80013ee:	4b2a      	ldr	r3, [pc, #168]	; (8001498 <MPU9250_Read_Accel+0x128>)
 80013f0:	f9b3 3000 	ldrsh.w	r3, [r3]
 80013f4:	4618      	mov	r0, r3
 80013f6:	f7ff f805 	bl	8000404 <__aeabi_i2d>
 80013fa:	f04f 0200 	mov.w	r2, #0
 80013fe:	4b28      	ldr	r3, [pc, #160]	; (80014a0 <MPU9250_Read_Accel+0x130>)
 8001400:	f7ff f994 	bl	800072c <__aeabi_ddiv>
 8001404:	4603      	mov	r3, r0
 8001406:	460c      	mov	r4, r1
 8001408:	4618      	mov	r0, r3
 800140a:	4621      	mov	r1, r4
 800140c:	f7ff fb5c 	bl	8000ac8 <__aeabi_d2f>
 8001410:	4602      	mov	r2, r0
 8001412:	4b25      	ldr	r3, [pc, #148]	; (80014a8 <MPU9250_Read_Accel+0x138>)
 8001414:	601a      	str	r2, [r3, #0]
    Az = Accel_Z_RAW/16384.0 ;
 8001416:	4b21      	ldr	r3, [pc, #132]	; (800149c <MPU9250_Read_Accel+0x12c>)
 8001418:	f9b3 3000 	ldrsh.w	r3, [r3]
 800141c:	4618      	mov	r0, r3
 800141e:	f7fe fff1 	bl	8000404 <__aeabi_i2d>
 8001422:	f04f 0200 	mov.w	r2, #0
 8001426:	4b1e      	ldr	r3, [pc, #120]	; (80014a0 <MPU9250_Read_Accel+0x130>)
 8001428:	f7ff f980 	bl	800072c <__aeabi_ddiv>
 800142c:	4603      	mov	r3, r0
 800142e:	460c      	mov	r4, r1
 8001430:	4618      	mov	r0, r3
 8001432:	4621      	mov	r1, r4
 8001434:	f7ff fb48 	bl	8000ac8 <__aeabi_d2f>
 8001438:	4602      	mov	r2, r0
 800143a:	4b1c      	ldr	r3, [pc, #112]	; (80014ac <MPU9250_Read_Accel+0x13c>)
 800143c:	601a      	str	r2, [r3, #0]
    Ax-=accelBias[0];
 800143e:	4b19      	ldr	r3, [pc, #100]	; (80014a4 <MPU9250_Read_Accel+0x134>)
 8001440:	681a      	ldr	r2, [r3, #0]
 8001442:	4b1b      	ldr	r3, [pc, #108]	; (80014b0 <MPU9250_Read_Accel+0x140>)
 8001444:	681b      	ldr	r3, [r3, #0]
 8001446:	4619      	mov	r1, r3
 8001448:	4610      	mov	r0, r2
 800144a:	f7ff fb91 	bl	8000b70 <__aeabi_fsub>
 800144e:	4603      	mov	r3, r0
 8001450:	461a      	mov	r2, r3
 8001452:	4b14      	ldr	r3, [pc, #80]	; (80014a4 <MPU9250_Read_Accel+0x134>)
 8001454:	601a      	str	r2, [r3, #0]
	Ay-=accelBias[1];
 8001456:	4b14      	ldr	r3, [pc, #80]	; (80014a8 <MPU9250_Read_Accel+0x138>)
 8001458:	681a      	ldr	r2, [r3, #0]
 800145a:	4b15      	ldr	r3, [pc, #84]	; (80014b0 <MPU9250_Read_Accel+0x140>)
 800145c:	685b      	ldr	r3, [r3, #4]
 800145e:	4619      	mov	r1, r3
 8001460:	4610      	mov	r0, r2
 8001462:	f7ff fb85 	bl	8000b70 <__aeabi_fsub>
 8001466:	4603      	mov	r3, r0
 8001468:	461a      	mov	r2, r3
 800146a:	4b0f      	ldr	r3, [pc, #60]	; (80014a8 <MPU9250_Read_Accel+0x138>)
 800146c:	601a      	str	r2, [r3, #0]
    Az-=accelBias[2];
 800146e:	4b0f      	ldr	r3, [pc, #60]	; (80014ac <MPU9250_Read_Accel+0x13c>)
 8001470:	681a      	ldr	r2, [r3, #0]
 8001472:	4b0f      	ldr	r3, [pc, #60]	; (80014b0 <MPU9250_Read_Accel+0x140>)
 8001474:	689b      	ldr	r3, [r3, #8]
 8001476:	4619      	mov	r1, r3
 8001478:	4610      	mov	r0, r2
 800147a:	f7ff fb79 	bl	8000b70 <__aeabi_fsub>
 800147e:	4603      	mov	r3, r0
 8001480:	461a      	mov	r2, r3
 8001482:	4b0a      	ldr	r3, [pc, #40]	; (80014ac <MPU9250_Read_Accel+0x13c>)
 8001484:	601a      	str	r2, [r3, #0]
}
 8001486:	bf00      	nop
 8001488:	370c      	adds	r7, #12
 800148a:	46bd      	mov	sp, r7
 800148c:	bd90      	pop	{r4, r7, pc}
 800148e:	bf00      	nop
 8001490:	200002e0 	.word	0x200002e0
 8001494:	20000204 	.word	0x20000204
 8001498:	20000206 	.word	0x20000206
 800149c:	20000208 	.word	0x20000208
 80014a0:	40d00000 	.word	0x40d00000
 80014a4:	20000368 	.word	0x20000368
 80014a8:	20000340 	.word	0x20000340
 80014ac:	20000374 	.word	0x20000374
 80014b0:	20000230 	.word	0x20000230
 80014b4:	00000000 	.word	0x00000000

080014b8 <MPU9250_Read_Gyro>:


void MPU9250_Read_Gyro (void)
{
 80014b8:	b5b0      	push	{r4, r5, r7, lr}
 80014ba:	b086      	sub	sp, #24
 80014bc:	af04      	add	r7, sp, #16
	uint8_t Rec_Data[6];

	// Read 6 BYTES of data starting from GYRO_XOUT_H register

	HAL_I2C_Mem_Read (&hi2c1, MPU9250_ADDR, GYRO_XOUT_H_REG, 1, Rec_Data, 6, 1000);
 80014be:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 80014c2:	9302      	str	r3, [sp, #8]
 80014c4:	2306      	movs	r3, #6
 80014c6:	9301      	str	r3, [sp, #4]
 80014c8:	463b      	mov	r3, r7
 80014ca:	9300      	str	r3, [sp, #0]
 80014cc:	2301      	movs	r3, #1
 80014ce:	2243      	movs	r2, #67	; 0x43
 80014d0:	21d0      	movs	r1, #208	; 0xd0
 80014d2:	4847      	ldr	r0, [pc, #284]	; (80015f0 <MPU9250_Read_Gyro+0x138>)
 80014d4:	f001 ffa0 	bl	8003418 <HAL_I2C_Mem_Read>

	Gyro_X_RAW = (int16_t)(Rec_Data[0] << 8 | Rec_Data [1]);
 80014d8:	783b      	ldrb	r3, [r7, #0]
 80014da:	021b      	lsls	r3, r3, #8
 80014dc:	b21a      	sxth	r2, r3
 80014de:	787b      	ldrb	r3, [r7, #1]
 80014e0:	b21b      	sxth	r3, r3
 80014e2:	4313      	orrs	r3, r2
 80014e4:	b21a      	sxth	r2, r3
 80014e6:	4b43      	ldr	r3, [pc, #268]	; (80015f4 <MPU9250_Read_Gyro+0x13c>)
 80014e8:	801a      	strh	r2, [r3, #0]
	Gyro_Y_RAW = (int16_t)(Rec_Data[2] << 8 | Rec_Data [3]);
 80014ea:	78bb      	ldrb	r3, [r7, #2]
 80014ec:	021b      	lsls	r3, r3, #8
 80014ee:	b21a      	sxth	r2, r3
 80014f0:	78fb      	ldrb	r3, [r7, #3]
 80014f2:	b21b      	sxth	r3, r3
 80014f4:	4313      	orrs	r3, r2
 80014f6:	b21a      	sxth	r2, r3
 80014f8:	4b3f      	ldr	r3, [pc, #252]	; (80015f8 <MPU9250_Read_Gyro+0x140>)
 80014fa:	801a      	strh	r2, [r3, #0]
	Gyro_Z_RAW = (int16_t)(Rec_Data[4] << 8 | Rec_Data [5]);
 80014fc:	793b      	ldrb	r3, [r7, #4]
 80014fe:	021b      	lsls	r3, r3, #8
 8001500:	b21a      	sxth	r2, r3
 8001502:	797b      	ldrb	r3, [r7, #5]
 8001504:	b21b      	sxth	r3, r3
 8001506:	4313      	orrs	r3, r2
 8001508:	b21a      	sxth	r2, r3
 800150a:	4b3c      	ldr	r3, [pc, #240]	; (80015fc <MPU9250_Read_Gyro+0x144>)
 800150c:	801a      	strh	r2, [r3, #0]

	/*** convert the RAW values into dps
	 check GYRO_CONFIG Register              ****/

	Gx = Gyro_X_RAW/131.0 - gyroBias[0];
 800150e:	4b39      	ldr	r3, [pc, #228]	; (80015f4 <MPU9250_Read_Gyro+0x13c>)
 8001510:	f9b3 3000 	ldrsh.w	r3, [r3]
 8001514:	4618      	mov	r0, r3
 8001516:	f7fe ff75 	bl	8000404 <__aeabi_i2d>
 800151a:	a333      	add	r3, pc, #204	; (adr r3, 80015e8 <MPU9250_Read_Gyro+0x130>)
 800151c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001520:	f7ff f904 	bl	800072c <__aeabi_ddiv>
 8001524:	4603      	mov	r3, r0
 8001526:	460c      	mov	r4, r1
 8001528:	4625      	mov	r5, r4
 800152a:	461c      	mov	r4, r3
 800152c:	4b34      	ldr	r3, [pc, #208]	; (8001600 <MPU9250_Read_Gyro+0x148>)
 800152e:	681b      	ldr	r3, [r3, #0]
 8001530:	4618      	mov	r0, r3
 8001532:	f7fe ff79 	bl	8000428 <__aeabi_f2d>
 8001536:	4602      	mov	r2, r0
 8001538:	460b      	mov	r3, r1
 800153a:	4620      	mov	r0, r4
 800153c:	4629      	mov	r1, r5
 800153e:	f7fe fe13 	bl	8000168 <__aeabi_dsub>
 8001542:	4603      	mov	r3, r0
 8001544:	460c      	mov	r4, r1
 8001546:	4618      	mov	r0, r3
 8001548:	4621      	mov	r1, r4
 800154a:	f7ff fabd 	bl	8000ac8 <__aeabi_d2f>
 800154e:	4602      	mov	r2, r0
 8001550:	4b2c      	ldr	r3, [pc, #176]	; (8001604 <MPU9250_Read_Gyro+0x14c>)
 8001552:	601a      	str	r2, [r3, #0]
	Gy = Gyro_Y_RAW/131.0 - gyroBias[1];
 8001554:	4b28      	ldr	r3, [pc, #160]	; (80015f8 <MPU9250_Read_Gyro+0x140>)
 8001556:	f9b3 3000 	ldrsh.w	r3, [r3]
 800155a:	4618      	mov	r0, r3
 800155c:	f7fe ff52 	bl	8000404 <__aeabi_i2d>
 8001560:	a321      	add	r3, pc, #132	; (adr r3, 80015e8 <MPU9250_Read_Gyro+0x130>)
 8001562:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001566:	f7ff f8e1 	bl	800072c <__aeabi_ddiv>
 800156a:	4603      	mov	r3, r0
 800156c:	460c      	mov	r4, r1
 800156e:	4625      	mov	r5, r4
 8001570:	461c      	mov	r4, r3
 8001572:	4b23      	ldr	r3, [pc, #140]	; (8001600 <MPU9250_Read_Gyro+0x148>)
 8001574:	685b      	ldr	r3, [r3, #4]
 8001576:	4618      	mov	r0, r3
 8001578:	f7fe ff56 	bl	8000428 <__aeabi_f2d>
 800157c:	4602      	mov	r2, r0
 800157e:	460b      	mov	r3, r1
 8001580:	4620      	mov	r0, r4
 8001582:	4629      	mov	r1, r5
 8001584:	f7fe fdf0 	bl	8000168 <__aeabi_dsub>
 8001588:	4603      	mov	r3, r0
 800158a:	460c      	mov	r4, r1
 800158c:	4618      	mov	r0, r3
 800158e:	4621      	mov	r1, r4
 8001590:	f7ff fa9a 	bl	8000ac8 <__aeabi_d2f>
 8001594:	4602      	mov	r2, r0
 8001596:	4b1c      	ldr	r3, [pc, #112]	; (8001608 <MPU9250_Read_Gyro+0x150>)
 8001598:	601a      	str	r2, [r3, #0]
	Gz = Gyro_Z_RAW/131.0 - gyroBias[2];
 800159a:	4b18      	ldr	r3, [pc, #96]	; (80015fc <MPU9250_Read_Gyro+0x144>)
 800159c:	f9b3 3000 	ldrsh.w	r3, [r3]
 80015a0:	4618      	mov	r0, r3
 80015a2:	f7fe ff2f 	bl	8000404 <__aeabi_i2d>
 80015a6:	a310      	add	r3, pc, #64	; (adr r3, 80015e8 <MPU9250_Read_Gyro+0x130>)
 80015a8:	e9d3 2300 	ldrd	r2, r3, [r3]
 80015ac:	f7ff f8be 	bl	800072c <__aeabi_ddiv>
 80015b0:	4603      	mov	r3, r0
 80015b2:	460c      	mov	r4, r1
 80015b4:	4625      	mov	r5, r4
 80015b6:	461c      	mov	r4, r3
 80015b8:	4b11      	ldr	r3, [pc, #68]	; (8001600 <MPU9250_Read_Gyro+0x148>)
 80015ba:	689b      	ldr	r3, [r3, #8]
 80015bc:	4618      	mov	r0, r3
 80015be:	f7fe ff33 	bl	8000428 <__aeabi_f2d>
 80015c2:	4602      	mov	r2, r0
 80015c4:	460b      	mov	r3, r1
 80015c6:	4620      	mov	r0, r4
 80015c8:	4629      	mov	r1, r5
 80015ca:	f7fe fdcd 	bl	8000168 <__aeabi_dsub>
 80015ce:	4603      	mov	r3, r0
 80015d0:	460c      	mov	r4, r1
 80015d2:	4618      	mov	r0, r3
 80015d4:	4621      	mov	r1, r4
 80015d6:	f7ff fa77 	bl	8000ac8 <__aeabi_d2f>
 80015da:	4602      	mov	r2, r0
 80015dc:	4b0b      	ldr	r3, [pc, #44]	; (800160c <MPU9250_Read_Gyro+0x154>)
 80015de:	601a      	str	r2, [r3, #0]
}
 80015e0:	bf00      	nop
 80015e2:	3708      	adds	r7, #8
 80015e4:	46bd      	mov	sp, r7
 80015e6:	bdb0      	pop	{r4, r5, r7, pc}
 80015e8:	00000000 	.word	0x00000000
 80015ec:	40606000 	.word	0x40606000
 80015f0:	200002e0 	.word	0x200002e0
 80015f4:	2000020a 	.word	0x2000020a
 80015f8:	2000020c 	.word	0x2000020c
 80015fc:	2000020e 	.word	0x2000020e
 8001600:	20000224 	.word	0x20000224
 8001604:	20000278 	.word	0x20000278
 8001608:	20000348 	.word	0x20000348
 800160c:	20000438 	.word	0x20000438

08001610 <MPU9250_Read_Mag>:

	Temp=21+((double)Temp_RAW)/333.87;
}

void MPU9250_Read_Mag (void)
{
 8001610:	b580      	push	{r7, lr}
 8001612:	b088      	sub	sp, #32
 8001614:	af04      	add	r7, sp, #16
	uint8_t Rec_Data[6];
	uint8_t Data = 0x11;
 8001616:	2311      	movs	r3, #17
 8001618:	71fb      	strb	r3, [r7, #7]
	// Read 6 BYTES of data starting from AK8963_HXL_REG register

	HAL_I2C_Mem_Read (&hi2c1, (AK8963_ADDR<<1), AK8963_HXL_REG, 1, Rec_Data, 6, 1000);
 800161a:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 800161e:	9302      	str	r3, [sp, #8]
 8001620:	2306      	movs	r3, #6
 8001622:	9301      	str	r3, [sp, #4]
 8001624:	f107 0308 	add.w	r3, r7, #8
 8001628:	9300      	str	r3, [sp, #0]
 800162a:	2301      	movs	r3, #1
 800162c:	2203      	movs	r2, #3
 800162e:	2118      	movs	r1, #24
 8001630:	485a      	ldr	r0, [pc, #360]	; (800179c <MPU9250_Read_Mag+0x18c>)
 8001632:	f001 fef1 	bl	8003418 <HAL_I2C_Mem_Read>

	Mag_X_RAW = (int16_t)(Rec_Data[1] << 8 | Rec_Data [0]);
 8001636:	7a7b      	ldrb	r3, [r7, #9]
 8001638:	021b      	lsls	r3, r3, #8
 800163a:	b21a      	sxth	r2, r3
 800163c:	7a3b      	ldrb	r3, [r7, #8]
 800163e:	b21b      	sxth	r3, r3
 8001640:	4313      	orrs	r3, r2
 8001642:	b21a      	sxth	r2, r3
 8001644:	4b56      	ldr	r3, [pc, #344]	; (80017a0 <MPU9250_Read_Mag+0x190>)
 8001646:	801a      	strh	r2, [r3, #0]
	Mag_Y_RAW = (int16_t)(Rec_Data[3] << 8 | Rec_Data [2]);
 8001648:	7afb      	ldrb	r3, [r7, #11]
 800164a:	021b      	lsls	r3, r3, #8
 800164c:	b21a      	sxth	r2, r3
 800164e:	7abb      	ldrb	r3, [r7, #10]
 8001650:	b21b      	sxth	r3, r3
 8001652:	4313      	orrs	r3, r2
 8001654:	b21a      	sxth	r2, r3
 8001656:	4b53      	ldr	r3, [pc, #332]	; (80017a4 <MPU9250_Read_Mag+0x194>)
 8001658:	801a      	strh	r2, [r3, #0]
	Mag_Z_RAW = (int16_t)(Rec_Data[5] << 8 | Rec_Data [4]);
 800165a:	7b7b      	ldrb	r3, [r7, #13]
 800165c:	021b      	lsls	r3, r3, #8
 800165e:	b21a      	sxth	r2, r3
 8001660:	7b3b      	ldrb	r3, [r7, #12]
 8001662:	b21b      	sxth	r3, r3
 8001664:	4313      	orrs	r3, r2
 8001666:	b21a      	sxth	r2, r3
 8001668:	4b4f      	ldr	r3, [pc, #316]	; (80017a8 <MPU9250_Read_Mag+0x198>)
 800166a:	801a      	strh	r2, [r3, #0]

	/*** convert the RAW values into µT
		 check HXL Register              ****/
	Mx = (float)Mag_X_RAW*mRes*magCalibration[0] - magBias[0];  // get actual magnetometer value, this depends on scale being set
 800166c:	4b4c      	ldr	r3, [pc, #304]	; (80017a0 <MPU9250_Read_Mag+0x190>)
 800166e:	f9b3 3000 	ldrsh.w	r3, [r3]
 8001672:	4618      	mov	r0, r3
 8001674:	f7ff fb32 	bl	8000cdc <__aeabi_i2f>
 8001678:	4602      	mov	r2, r0
 800167a:	4b4c      	ldr	r3, [pc, #304]	; (80017ac <MPU9250_Read_Mag+0x19c>)
 800167c:	681b      	ldr	r3, [r3, #0]
 800167e:	4619      	mov	r1, r3
 8001680:	4610      	mov	r0, r2
 8001682:	f7ff fb7f 	bl	8000d84 <__aeabi_fmul>
 8001686:	4603      	mov	r3, r0
 8001688:	461a      	mov	r2, r3
 800168a:	4b49      	ldr	r3, [pc, #292]	; (80017b0 <MPU9250_Read_Mag+0x1a0>)
 800168c:	681b      	ldr	r3, [r3, #0]
 800168e:	4619      	mov	r1, r3
 8001690:	4610      	mov	r0, r2
 8001692:	f7ff fb77 	bl	8000d84 <__aeabi_fmul>
 8001696:	4603      	mov	r3, r0
 8001698:	461a      	mov	r2, r3
 800169a:	4b46      	ldr	r3, [pc, #280]	; (80017b4 <MPU9250_Read_Mag+0x1a4>)
 800169c:	681b      	ldr	r3, [r3, #0]
 800169e:	4619      	mov	r1, r3
 80016a0:	4610      	mov	r0, r2
 80016a2:	f7ff fa65 	bl	8000b70 <__aeabi_fsub>
 80016a6:	4603      	mov	r3, r0
 80016a8:	461a      	mov	r2, r3
 80016aa:	4b43      	ldr	r3, [pc, #268]	; (80017b8 <MPU9250_Read_Mag+0x1a8>)
 80016ac:	601a      	str	r2, [r3, #0]
	My = (float)Mag_Y_RAW*mRes*magCalibration[1] - magBias[1];
 80016ae:	4b3d      	ldr	r3, [pc, #244]	; (80017a4 <MPU9250_Read_Mag+0x194>)
 80016b0:	f9b3 3000 	ldrsh.w	r3, [r3]
 80016b4:	4618      	mov	r0, r3
 80016b6:	f7ff fb11 	bl	8000cdc <__aeabi_i2f>
 80016ba:	4602      	mov	r2, r0
 80016bc:	4b3b      	ldr	r3, [pc, #236]	; (80017ac <MPU9250_Read_Mag+0x19c>)
 80016be:	681b      	ldr	r3, [r3, #0]
 80016c0:	4619      	mov	r1, r3
 80016c2:	4610      	mov	r0, r2
 80016c4:	f7ff fb5e 	bl	8000d84 <__aeabi_fmul>
 80016c8:	4603      	mov	r3, r0
 80016ca:	461a      	mov	r2, r3
 80016cc:	4b38      	ldr	r3, [pc, #224]	; (80017b0 <MPU9250_Read_Mag+0x1a0>)
 80016ce:	685b      	ldr	r3, [r3, #4]
 80016d0:	4619      	mov	r1, r3
 80016d2:	4610      	mov	r0, r2
 80016d4:	f7ff fb56 	bl	8000d84 <__aeabi_fmul>
 80016d8:	4603      	mov	r3, r0
 80016da:	461a      	mov	r2, r3
 80016dc:	4b35      	ldr	r3, [pc, #212]	; (80017b4 <MPU9250_Read_Mag+0x1a4>)
 80016de:	685b      	ldr	r3, [r3, #4]
 80016e0:	4619      	mov	r1, r3
 80016e2:	4610      	mov	r0, r2
 80016e4:	f7ff fa44 	bl	8000b70 <__aeabi_fsub>
 80016e8:	4603      	mov	r3, r0
 80016ea:	461a      	mov	r2, r3
 80016ec:	4b33      	ldr	r3, [pc, #204]	; (80017bc <MPU9250_Read_Mag+0x1ac>)
 80016ee:	601a      	str	r2, [r3, #0]
	Mz = (float)Mag_Z_RAW*mRes*magCalibration[2] - magBias[2];
 80016f0:	4b2d      	ldr	r3, [pc, #180]	; (80017a8 <MPU9250_Read_Mag+0x198>)
 80016f2:	f9b3 3000 	ldrsh.w	r3, [r3]
 80016f6:	4618      	mov	r0, r3
 80016f8:	f7ff faf0 	bl	8000cdc <__aeabi_i2f>
 80016fc:	4602      	mov	r2, r0
 80016fe:	4b2b      	ldr	r3, [pc, #172]	; (80017ac <MPU9250_Read_Mag+0x19c>)
 8001700:	681b      	ldr	r3, [r3, #0]
 8001702:	4619      	mov	r1, r3
 8001704:	4610      	mov	r0, r2
 8001706:	f7ff fb3d 	bl	8000d84 <__aeabi_fmul>
 800170a:	4603      	mov	r3, r0
 800170c:	461a      	mov	r2, r3
 800170e:	4b28      	ldr	r3, [pc, #160]	; (80017b0 <MPU9250_Read_Mag+0x1a0>)
 8001710:	689b      	ldr	r3, [r3, #8]
 8001712:	4619      	mov	r1, r3
 8001714:	4610      	mov	r0, r2
 8001716:	f7ff fb35 	bl	8000d84 <__aeabi_fmul>
 800171a:	4603      	mov	r3, r0
 800171c:	461a      	mov	r2, r3
 800171e:	4b25      	ldr	r3, [pc, #148]	; (80017b4 <MPU9250_Read_Mag+0x1a4>)
 8001720:	689b      	ldr	r3, [r3, #8]
 8001722:	4619      	mov	r1, r3
 8001724:	4610      	mov	r0, r2
 8001726:	f7ff fa23 	bl	8000b70 <__aeabi_fsub>
 800172a:	4603      	mov	r3, r0
 800172c:	461a      	mov	r2, r3
 800172e:	4b24      	ldr	r3, [pc, #144]	; (80017c0 <MPU9250_Read_Mag+0x1b0>)
 8001730:	601a      	str	r2, [r3, #0]
	Mx *= magScale[0];
 8001732:	4b24      	ldr	r3, [pc, #144]	; (80017c4 <MPU9250_Read_Mag+0x1b4>)
 8001734:	681a      	ldr	r2, [r3, #0]
 8001736:	4b20      	ldr	r3, [pc, #128]	; (80017b8 <MPU9250_Read_Mag+0x1a8>)
 8001738:	681b      	ldr	r3, [r3, #0]
 800173a:	4619      	mov	r1, r3
 800173c:	4610      	mov	r0, r2
 800173e:	f7ff fb21 	bl	8000d84 <__aeabi_fmul>
 8001742:	4603      	mov	r3, r0
 8001744:	461a      	mov	r2, r3
 8001746:	4b1c      	ldr	r3, [pc, #112]	; (80017b8 <MPU9250_Read_Mag+0x1a8>)
 8001748:	601a      	str	r2, [r3, #0]
	My *= magScale[1];
 800174a:	4b1e      	ldr	r3, [pc, #120]	; (80017c4 <MPU9250_Read_Mag+0x1b4>)
 800174c:	685a      	ldr	r2, [r3, #4]
 800174e:	4b1b      	ldr	r3, [pc, #108]	; (80017bc <MPU9250_Read_Mag+0x1ac>)
 8001750:	681b      	ldr	r3, [r3, #0]
 8001752:	4619      	mov	r1, r3
 8001754:	4610      	mov	r0, r2
 8001756:	f7ff fb15 	bl	8000d84 <__aeabi_fmul>
 800175a:	4603      	mov	r3, r0
 800175c:	461a      	mov	r2, r3
 800175e:	4b17      	ldr	r3, [pc, #92]	; (80017bc <MPU9250_Read_Mag+0x1ac>)
 8001760:	601a      	str	r2, [r3, #0]
	Mz *= magScale[2];
 8001762:	4b18      	ldr	r3, [pc, #96]	; (80017c4 <MPU9250_Read_Mag+0x1b4>)
 8001764:	689a      	ldr	r2, [r3, #8]
 8001766:	4b16      	ldr	r3, [pc, #88]	; (80017c0 <MPU9250_Read_Mag+0x1b0>)
 8001768:	681b      	ldr	r3, [r3, #0]
 800176a:	4619      	mov	r1, r3
 800176c:	4610      	mov	r0, r2
 800176e:	f7ff fb09 	bl	8000d84 <__aeabi_fmul>
 8001772:	4603      	mov	r3, r0
 8001774:	461a      	mov	r2, r3
 8001776:	4b12      	ldr	r3, [pc, #72]	; (80017c0 <MPU9250_Read_Mag+0x1b0>)
 8001778:	601a      	str	r2, [r3, #0]

	HAL_I2C_Mem_Write(&hi2c1, (AK8963_ADDR<<1), AK8963_CNTL1_REG, 1, &Data, 1, 1000);
 800177a:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 800177e:	9302      	str	r3, [sp, #8]
 8001780:	2301      	movs	r3, #1
 8001782:	9301      	str	r3, [sp, #4]
 8001784:	1dfb      	adds	r3, r7, #7
 8001786:	9300      	str	r3, [sp, #0]
 8001788:	2301      	movs	r3, #1
 800178a:	220a      	movs	r2, #10
 800178c:	2118      	movs	r1, #24
 800178e:	4803      	ldr	r0, [pc, #12]	; (800179c <MPU9250_Read_Mag+0x18c>)
 8001790:	f001 fd48 	bl	8003224 <HAL_I2C_Mem_Write>
}
 8001794:	bf00      	nop
 8001796:	3710      	adds	r7, #16
 8001798:	46bd      	mov	sp, r7
 800179a:	bd80      	pop	{r7, pc}
 800179c:	200002e0 	.word	0x200002e0
 80017a0:	20000210 	.word	0x20000210
 80017a4:	20000212 	.word	0x20000212
 80017a8:	20000214 	.word	0x20000214
 80017ac:	20000004 	.word	0x20000004
 80017b0:	20000218 	.word	0x20000218
 80017b4:	2000023c 	.word	0x2000023c
 80017b8:	20000440 	.word	0x20000440
 80017bc:	20000344 	.word	0x20000344
 80017c0:	200002dc 	.word	0x200002dc
 80017c4:	20000248 	.word	0x20000248

080017c8 <magcalMPU9250>:
void magcalMPU9250(float * dest1, float * dest2)
{
 80017c8:	b590      	push	{r4, r7, lr}
 80017ca:	b095      	sub	sp, #84	; 0x54
 80017cc:	af00      	add	r7, sp, #0
 80017ce:	6078      	str	r0, [r7, #4]
 80017d0:	6039      	str	r1, [r7, #0]
    uint16_t ii = 0, sample_count = 0;
 80017d2:	2300      	movs	r3, #0
 80017d4:	f8a7 304e 	strh.w	r3, [r7, #78]	; 0x4e
 80017d8:	2300      	movs	r3, #0
 80017da:	f8a7 304c 	strh.w	r3, [r7, #76]	; 0x4c
    int32_t mag_bias[3] = {0, 0, 0}, mag_scale[3] = {0, 0, 0};
 80017de:	2300      	movs	r3, #0
 80017e0:	633b      	str	r3, [r7, #48]	; 0x30
 80017e2:	2300      	movs	r3, #0
 80017e4:	637b      	str	r3, [r7, #52]	; 0x34
 80017e6:	2300      	movs	r3, #0
 80017e8:	63bb      	str	r3, [r7, #56]	; 0x38
 80017ea:	2300      	movs	r3, #0
 80017ec:	627b      	str	r3, [r7, #36]	; 0x24
 80017ee:	2300      	movs	r3, #0
 80017f0:	62bb      	str	r3, [r7, #40]	; 0x28
 80017f2:	2300      	movs	r3, #0
 80017f4:	62fb      	str	r3, [r7, #44]	; 0x2c
    int16_t mag_max[3] = {-32767, -32767, -32767}, mag_min[3] = {32767, 32767, 32767}, mag_temp[3] = {0, 0, 0};
 80017f6:	4ab7      	ldr	r2, [pc, #732]	; (8001ad4 <magcalMPU9250+0x30c>)
 80017f8:	f107 031c 	add.w	r3, r7, #28
 80017fc:	e892 0003 	ldmia.w	r2, {r0, r1}
 8001800:	6018      	str	r0, [r3, #0]
 8001802:	3304      	adds	r3, #4
 8001804:	8019      	strh	r1, [r3, #0]
 8001806:	4ab4      	ldr	r2, [pc, #720]	; (8001ad8 <magcalMPU9250+0x310>)
 8001808:	f107 0314 	add.w	r3, r7, #20
 800180c:	e892 0003 	ldmia.w	r2, {r0, r1}
 8001810:	6018      	str	r0, [r3, #0]
 8001812:	3304      	adds	r3, #4
 8001814:	8019      	strh	r1, [r3, #0]
 8001816:	2300      	movs	r3, #0
 8001818:	81bb      	strh	r3, [r7, #12]
 800181a:	2300      	movs	r3, #0
 800181c:	81fb      	strh	r3, [r7, #14]
 800181e:	2300      	movs	r3, #0
 8001820:	823b      	strh	r3, [r7, #16]
    char *str = "turn sensor \n\n";
 8001822:	4bae      	ldr	r3, [pc, #696]	; (8001adc <magcalMPU9250+0x314>)
 8001824:	647b      	str	r3, [r7, #68]	; 0x44
    HAL_UART_Transmit(&huart2, (uint8_t *)str, strlen (str), HAL_MAX_DELAY);
 8001826:	6c78      	ldr	r0, [r7, #68]	; 0x44
 8001828:	f7fe fc92 	bl	8000150 <strlen>
 800182c:	4603      	mov	r3, r0
 800182e:	b29a      	uxth	r2, r3
 8001830:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 8001834:	6c79      	ldr	r1, [r7, #68]	; 0x44
 8001836:	48aa      	ldr	r0, [pc, #680]	; (8001ae0 <magcalMPU9250+0x318>)
 8001838:	f003 ffdb 	bl	80057f2 <HAL_UART_Transmit>
    HAL_Delay(1000);
 800183c:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 8001840:	f001 f87e 	bl	8002940 <HAL_Delay>

    // shoot for ~fifteen seconds of mag data
    if(Mmode == 0x02) sample_count = 128;  // at 8 Hz ODR, new mag data is available every 125 ms
 8001844:	4ba7      	ldr	r3, [pc, #668]	; (8001ae4 <magcalMPU9250+0x31c>)
 8001846:	781b      	ldrb	r3, [r3, #0]
 8001848:	2b02      	cmp	r3, #2
 800184a:	d102      	bne.n	8001852 <magcalMPU9250+0x8a>
 800184c:	2380      	movs	r3, #128	; 0x80
 800184e:	f8a7 304c 	strh.w	r3, [r7, #76]	; 0x4c
    if(Mmode == 0x06) sample_count = 1500;  // at 100 Hz ODR, new mag data is available every 10 ms
 8001852:	4ba4      	ldr	r3, [pc, #656]	; (8001ae4 <magcalMPU9250+0x31c>)
 8001854:	781b      	ldrb	r3, [r3, #0]
 8001856:	2b06      	cmp	r3, #6
 8001858:	d103      	bne.n	8001862 <magcalMPU9250+0x9a>
 800185a:	f240 53dc 	movw	r3, #1500	; 0x5dc
 800185e:	f8a7 304c 	strh.w	r3, [r7, #76]	; 0x4c
    for(ii = 0; ii < sample_count; ii++) {
 8001862:	2300      	movs	r3, #0
 8001864:	f8a7 304e 	strh.w	r3, [r7, #78]	; 0x4e
 8001868:	e065      	b.n	8001936 <magcalMPU9250+0x16e>
        MPU9250_Read_Mag ();  // Read the mag data
 800186a:	f7ff fed1 	bl	8001610 <MPU9250_Read_Mag>
        mag_temp[0]=Mag_X_RAW;
 800186e:	4b9e      	ldr	r3, [pc, #632]	; (8001ae8 <magcalMPU9250+0x320>)
 8001870:	f9b3 3000 	ldrsh.w	r3, [r3]
 8001874:	81bb      	strh	r3, [r7, #12]
        mag_temp[1]= Mag_Y_RAW;
 8001876:	4b9d      	ldr	r3, [pc, #628]	; (8001aec <magcalMPU9250+0x324>)
 8001878:	f9b3 3000 	ldrsh.w	r3, [r3]
 800187c:	81fb      	strh	r3, [r7, #14]
        mag_temp[2]= Mag_Z_RAW;
 800187e:	4b9c      	ldr	r3, [pc, #624]	; (8001af0 <magcalMPU9250+0x328>)
 8001880:	f9b3 3000 	ldrsh.w	r3, [r3]
 8001884:	823b      	strh	r3, [r7, #16]
    for (int jj = 0; jj < 3; jj++) {
 8001886:	2300      	movs	r3, #0
 8001888:	64bb      	str	r3, [r7, #72]	; 0x48
 800188a:	e03e      	b.n	800190a <magcalMPU9250+0x142>
        if(mag_temp[jj] > mag_max[jj]) mag_max[jj] = mag_temp[jj];
 800188c:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 800188e:	005b      	lsls	r3, r3, #1
 8001890:	f107 0250 	add.w	r2, r7, #80	; 0x50
 8001894:	4413      	add	r3, r2
 8001896:	f933 2c44 	ldrsh.w	r2, [r3, #-68]
 800189a:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 800189c:	005b      	lsls	r3, r3, #1
 800189e:	f107 0150 	add.w	r1, r7, #80	; 0x50
 80018a2:	440b      	add	r3, r1
 80018a4:	f933 3c34 	ldrsh.w	r3, [r3, #-52]
 80018a8:	429a      	cmp	r2, r3
 80018aa:	dd0d      	ble.n	80018c8 <magcalMPU9250+0x100>
 80018ac:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 80018ae:	005b      	lsls	r3, r3, #1
 80018b0:	f107 0250 	add.w	r2, r7, #80	; 0x50
 80018b4:	4413      	add	r3, r2
 80018b6:	f933 2c44 	ldrsh.w	r2, [r3, #-68]
 80018ba:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 80018bc:	005b      	lsls	r3, r3, #1
 80018be:	f107 0150 	add.w	r1, r7, #80	; 0x50
 80018c2:	440b      	add	r3, r1
 80018c4:	f823 2c34 	strh.w	r2, [r3, #-52]
        if(mag_temp[jj] < mag_min[jj]) mag_min[jj] = mag_temp[jj];
 80018c8:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 80018ca:	005b      	lsls	r3, r3, #1
 80018cc:	f107 0250 	add.w	r2, r7, #80	; 0x50
 80018d0:	4413      	add	r3, r2
 80018d2:	f933 2c44 	ldrsh.w	r2, [r3, #-68]
 80018d6:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 80018d8:	005b      	lsls	r3, r3, #1
 80018da:	f107 0150 	add.w	r1, r7, #80	; 0x50
 80018de:	440b      	add	r3, r1
 80018e0:	f933 3c3c 	ldrsh.w	r3, [r3, #-60]
 80018e4:	429a      	cmp	r2, r3
 80018e6:	da0d      	bge.n	8001904 <magcalMPU9250+0x13c>
 80018e8:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 80018ea:	005b      	lsls	r3, r3, #1
 80018ec:	f107 0250 	add.w	r2, r7, #80	; 0x50
 80018f0:	4413      	add	r3, r2
 80018f2:	f933 2c44 	ldrsh.w	r2, [r3, #-68]
 80018f6:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 80018f8:	005b      	lsls	r3, r3, #1
 80018fa:	f107 0150 	add.w	r1, r7, #80	; 0x50
 80018fe:	440b      	add	r3, r1
 8001900:	f823 2c3c 	strh.w	r2, [r3, #-60]
    for (int jj = 0; jj < 3; jj++) {
 8001904:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8001906:	3301      	adds	r3, #1
 8001908:	64bb      	str	r3, [r7, #72]	; 0x48
 800190a:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 800190c:	2b02      	cmp	r3, #2
 800190e:	ddbd      	ble.n	800188c <magcalMPU9250+0xc4>
    }
    if(Mmode == 0x02) HAL_Delay(135);  // at 8 Hz ODR, new mag data is available every 125 ms
 8001910:	4b74      	ldr	r3, [pc, #464]	; (8001ae4 <magcalMPU9250+0x31c>)
 8001912:	781b      	ldrb	r3, [r3, #0]
 8001914:	2b02      	cmp	r3, #2
 8001916:	d102      	bne.n	800191e <magcalMPU9250+0x156>
 8001918:	2087      	movs	r0, #135	; 0x87
 800191a:	f001 f811 	bl	8002940 <HAL_Delay>
    if(Mmode == 0x06) HAL_Delay(12);  // at 100 Hz ODR, new mag data is available every 10 ms
 800191e:	4b71      	ldr	r3, [pc, #452]	; (8001ae4 <magcalMPU9250+0x31c>)
 8001920:	781b      	ldrb	r3, [r3, #0]
 8001922:	2b06      	cmp	r3, #6
 8001924:	d102      	bne.n	800192c <magcalMPU9250+0x164>
 8001926:	200c      	movs	r0, #12
 8001928:	f001 f80a 	bl	8002940 <HAL_Delay>
    for(ii = 0; ii < sample_count; ii++) {
 800192c:	f8b7 304e 	ldrh.w	r3, [r7, #78]	; 0x4e
 8001930:	3301      	adds	r3, #1
 8001932:	f8a7 304e 	strh.w	r3, [r7, #78]	; 0x4e
 8001936:	f8b7 204e 	ldrh.w	r2, [r7, #78]	; 0x4e
 800193a:	f8b7 304c 	ldrh.w	r3, [r7, #76]	; 0x4c
 800193e:	429a      	cmp	r2, r3
 8001940:	d393      	bcc.n	800186a <magcalMPU9250+0xa2>
    }
    char *str2 = "mag done\n\n";
 8001942:	4b6c      	ldr	r3, [pc, #432]	; (8001af4 <magcalMPU9250+0x32c>)
 8001944:	643b      	str	r3, [r7, #64]	; 0x40
    HAL_UART_Transmit(&huart2, (uint8_t *)str2, strlen (str2), HAL_MAX_DELAY);
 8001946:	6c38      	ldr	r0, [r7, #64]	; 0x40
 8001948:	f7fe fc02 	bl	8000150 <strlen>
 800194c:	4603      	mov	r3, r0
 800194e:	b29a      	uxth	r2, r3
 8001950:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 8001954:	6c39      	ldr	r1, [r7, #64]	; 0x40
 8001956:	4862      	ldr	r0, [pc, #392]	; (8001ae0 <magcalMPU9250+0x318>)
 8001958:	f003 ff4b 	bl	80057f2 <HAL_UART_Transmit>
//    Serial.println("mag x min/max:"); Serial.println(mag_max[0]); Serial.println(mag_min[0]);
//    Serial.println("mag y min/max:"); Serial.println(mag_max[1]); Serial.println(mag_min[1]);
//    Serial.println("mag z min/max:"); Serial.println(mag_max[2]); Serial.println(mag_min[2]);

    // Get hard iron correction
    mag_bias[0]  = (mag_max[0] + mag_min[0])/2;  // get average x mag bias in counts
 800195c:	f9b7 301c 	ldrsh.w	r3, [r7, #28]
 8001960:	461a      	mov	r2, r3
 8001962:	f9b7 3014 	ldrsh.w	r3, [r7, #20]
 8001966:	4413      	add	r3, r2
 8001968:	0fda      	lsrs	r2, r3, #31
 800196a:	4413      	add	r3, r2
 800196c:	105b      	asrs	r3, r3, #1
 800196e:	633b      	str	r3, [r7, #48]	; 0x30
    mag_bias[1]  = (mag_max[1] + mag_min[1])/2;  // get average y mag bias in counts
 8001970:	f9b7 301e 	ldrsh.w	r3, [r7, #30]
 8001974:	461a      	mov	r2, r3
 8001976:	f9b7 3016 	ldrsh.w	r3, [r7, #22]
 800197a:	4413      	add	r3, r2
 800197c:	0fda      	lsrs	r2, r3, #31
 800197e:	4413      	add	r3, r2
 8001980:	105b      	asrs	r3, r3, #1
 8001982:	637b      	str	r3, [r7, #52]	; 0x34
    mag_bias[2]  = (mag_max[2] + mag_min[2])/2;  // get average z mag bias in counts
 8001984:	f9b7 3020 	ldrsh.w	r3, [r7, #32]
 8001988:	461a      	mov	r2, r3
 800198a:	f9b7 3018 	ldrsh.w	r3, [r7, #24]
 800198e:	4413      	add	r3, r2
 8001990:	0fda      	lsrs	r2, r3, #31
 8001992:	4413      	add	r3, r2
 8001994:	105b      	asrs	r3, r3, #1
 8001996:	63bb      	str	r3, [r7, #56]	; 0x38

    dest1[0] = (float) mag_bias[0]*mRes*magCalibration[0];  // save mag biases in G for main program
 8001998:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800199a:	4618      	mov	r0, r3
 800199c:	f7ff f99e 	bl	8000cdc <__aeabi_i2f>
 80019a0:	4602      	mov	r2, r0
 80019a2:	4b55      	ldr	r3, [pc, #340]	; (8001af8 <magcalMPU9250+0x330>)
 80019a4:	681b      	ldr	r3, [r3, #0]
 80019a6:	4619      	mov	r1, r3
 80019a8:	4610      	mov	r0, r2
 80019aa:	f7ff f9eb 	bl	8000d84 <__aeabi_fmul>
 80019ae:	4603      	mov	r3, r0
 80019b0:	461a      	mov	r2, r3
 80019b2:	4b52      	ldr	r3, [pc, #328]	; (8001afc <magcalMPU9250+0x334>)
 80019b4:	681b      	ldr	r3, [r3, #0]
 80019b6:	4619      	mov	r1, r3
 80019b8:	4610      	mov	r0, r2
 80019ba:	f7ff f9e3 	bl	8000d84 <__aeabi_fmul>
 80019be:	4603      	mov	r3, r0
 80019c0:	461a      	mov	r2, r3
 80019c2:	687b      	ldr	r3, [r7, #4]
 80019c4:	601a      	str	r2, [r3, #0]
    dest1[1] = (float) mag_bias[1]*mRes*magCalibration[1];
 80019c6:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80019c8:	4618      	mov	r0, r3
 80019ca:	f7ff f987 	bl	8000cdc <__aeabi_i2f>
 80019ce:	4602      	mov	r2, r0
 80019d0:	4b49      	ldr	r3, [pc, #292]	; (8001af8 <magcalMPU9250+0x330>)
 80019d2:	681b      	ldr	r3, [r3, #0]
 80019d4:	4619      	mov	r1, r3
 80019d6:	4610      	mov	r0, r2
 80019d8:	f7ff f9d4 	bl	8000d84 <__aeabi_fmul>
 80019dc:	4603      	mov	r3, r0
 80019de:	4618      	mov	r0, r3
 80019e0:	4b46      	ldr	r3, [pc, #280]	; (8001afc <magcalMPU9250+0x334>)
 80019e2:	685a      	ldr	r2, [r3, #4]
 80019e4:	687b      	ldr	r3, [r7, #4]
 80019e6:	1d1c      	adds	r4, r3, #4
 80019e8:	4611      	mov	r1, r2
 80019ea:	f7ff f9cb 	bl	8000d84 <__aeabi_fmul>
 80019ee:	4603      	mov	r3, r0
 80019f0:	6023      	str	r3, [r4, #0]
    dest1[2] = (float) mag_bias[2]*mRes*magCalibration[2];
 80019f2:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80019f4:	4618      	mov	r0, r3
 80019f6:	f7ff f971 	bl	8000cdc <__aeabi_i2f>
 80019fa:	4602      	mov	r2, r0
 80019fc:	4b3e      	ldr	r3, [pc, #248]	; (8001af8 <magcalMPU9250+0x330>)
 80019fe:	681b      	ldr	r3, [r3, #0]
 8001a00:	4619      	mov	r1, r3
 8001a02:	4610      	mov	r0, r2
 8001a04:	f7ff f9be 	bl	8000d84 <__aeabi_fmul>
 8001a08:	4603      	mov	r3, r0
 8001a0a:	4618      	mov	r0, r3
 8001a0c:	4b3b      	ldr	r3, [pc, #236]	; (8001afc <magcalMPU9250+0x334>)
 8001a0e:	689a      	ldr	r2, [r3, #8]
 8001a10:	687b      	ldr	r3, [r7, #4]
 8001a12:	f103 0408 	add.w	r4, r3, #8
 8001a16:	4611      	mov	r1, r2
 8001a18:	f7ff f9b4 	bl	8000d84 <__aeabi_fmul>
 8001a1c:	4603      	mov	r3, r0
 8001a1e:	6023      	str	r3, [r4, #0]

    // Get soft iron correction estimate
    mag_scale[0]  = (mag_max[0] - mag_min[0])/2;  // get average x axis max chord length in counts
 8001a20:	f9b7 301c 	ldrsh.w	r3, [r7, #28]
 8001a24:	461a      	mov	r2, r3
 8001a26:	f9b7 3014 	ldrsh.w	r3, [r7, #20]
 8001a2a:	1ad3      	subs	r3, r2, r3
 8001a2c:	0fda      	lsrs	r2, r3, #31
 8001a2e:	4413      	add	r3, r2
 8001a30:	105b      	asrs	r3, r3, #1
 8001a32:	627b      	str	r3, [r7, #36]	; 0x24
    mag_scale[1]  = (mag_max[1] - mag_min[1])/2;  // get average y axis max chord length in counts
 8001a34:	f9b7 301e 	ldrsh.w	r3, [r7, #30]
 8001a38:	461a      	mov	r2, r3
 8001a3a:	f9b7 3016 	ldrsh.w	r3, [r7, #22]
 8001a3e:	1ad3      	subs	r3, r2, r3
 8001a40:	0fda      	lsrs	r2, r3, #31
 8001a42:	4413      	add	r3, r2
 8001a44:	105b      	asrs	r3, r3, #1
 8001a46:	62bb      	str	r3, [r7, #40]	; 0x28
    mag_scale[2]  = (mag_max[2] - mag_min[2])/2;  // get average z axis max chord length in counts
 8001a48:	f9b7 3020 	ldrsh.w	r3, [r7, #32]
 8001a4c:	461a      	mov	r2, r3
 8001a4e:	f9b7 3018 	ldrsh.w	r3, [r7, #24]
 8001a52:	1ad3      	subs	r3, r2, r3
 8001a54:	0fda      	lsrs	r2, r3, #31
 8001a56:	4413      	add	r3, r2
 8001a58:	105b      	asrs	r3, r3, #1
 8001a5a:	62fb      	str	r3, [r7, #44]	; 0x2c

    float avg_rad = mag_scale[0] + mag_scale[1] + mag_scale[2];
 8001a5c:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8001a5e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8001a60:	441a      	add	r2, r3
 8001a62:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8001a64:	4413      	add	r3, r2
 8001a66:	4618      	mov	r0, r3
 8001a68:	f7ff f938 	bl	8000cdc <__aeabi_i2f>
 8001a6c:	4603      	mov	r3, r0
 8001a6e:	63fb      	str	r3, [r7, #60]	; 0x3c
    avg_rad /= 3.0;
 8001a70:	4923      	ldr	r1, [pc, #140]	; (8001b00 <magcalMPU9250+0x338>)
 8001a72:	6bf8      	ldr	r0, [r7, #60]	; 0x3c
 8001a74:	f7ff fa3a 	bl	8000eec <__aeabi_fdiv>
 8001a78:	4603      	mov	r3, r0
 8001a7a:	63fb      	str	r3, [r7, #60]	; 0x3c

    dest2[0] = avg_rad/((float)mag_scale[0]);
 8001a7c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001a7e:	4618      	mov	r0, r3
 8001a80:	f7ff f92c 	bl	8000cdc <__aeabi_i2f>
 8001a84:	4603      	mov	r3, r0
 8001a86:	4619      	mov	r1, r3
 8001a88:	6bf8      	ldr	r0, [r7, #60]	; 0x3c
 8001a8a:	f7ff fa2f 	bl	8000eec <__aeabi_fdiv>
 8001a8e:	4603      	mov	r3, r0
 8001a90:	461a      	mov	r2, r3
 8001a92:	683b      	ldr	r3, [r7, #0]
 8001a94:	601a      	str	r2, [r3, #0]
    dest2[1] = avg_rad/((float)mag_scale[1]);
 8001a96:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8001a98:	4618      	mov	r0, r3
 8001a9a:	f7ff f91f 	bl	8000cdc <__aeabi_i2f>
 8001a9e:	4602      	mov	r2, r0
 8001aa0:	683b      	ldr	r3, [r7, #0]
 8001aa2:	1d1c      	adds	r4, r3, #4
 8001aa4:	4611      	mov	r1, r2
 8001aa6:	6bf8      	ldr	r0, [r7, #60]	; 0x3c
 8001aa8:	f7ff fa20 	bl	8000eec <__aeabi_fdiv>
 8001aac:	4603      	mov	r3, r0
 8001aae:	6023      	str	r3, [r4, #0]
    dest2[2] = avg_rad/((float)mag_scale[2]);
 8001ab0:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8001ab2:	4618      	mov	r0, r3
 8001ab4:	f7ff f912 	bl	8000cdc <__aeabi_i2f>
 8001ab8:	4602      	mov	r2, r0
 8001aba:	683b      	ldr	r3, [r7, #0]
 8001abc:	f103 0408 	add.w	r4, r3, #8
 8001ac0:	4611      	mov	r1, r2
 8001ac2:	6bf8      	ldr	r0, [r7, #60]	; 0x3c
 8001ac4:	f7ff fa12 	bl	8000eec <__aeabi_fdiv>
 8001ac8:	4603      	mov	r3, r0
 8001aca:	6023      	str	r3, [r4, #0]
}
 8001acc:	bf00      	nop
 8001ace:	3754      	adds	r7, #84	; 0x54
 8001ad0:	46bd      	mov	sp, r7
 8001ad2:	bd90      	pop	{r4, r7, pc}
 8001ad4:	08009a7c 	.word	0x08009a7c
 8001ad8:	08009a84 	.word	0x08009a84
 8001adc:	08009a60 	.word	0x08009a60
 8001ae0:	200003c0 	.word	0x200003c0
 8001ae4:	20000000 	.word	0x20000000
 8001ae8:	20000210 	.word	0x20000210
 8001aec:	20000212 	.word	0x20000212
 8001af0:	20000214 	.word	0x20000214
 8001af4:	08009a70 	.word	0x08009a70
 8001af8:	20000004 	.word	0x20000004
 8001afc:	20000218 	.word	0x20000218
 8001b00:	40400000 	.word	0x40400000

08001b04 <calibrateMPU9250>:

void calibrateMPU9250(float * dest1, float * dest2)
{
 8001b04:	b5b0      	push	{r4, r5, r7, lr}
 8001b06:	b094      	sub	sp, #80	; 0x50
 8001b08:	af04      	add	r7, sp, #16
 8001b0a:	6078      	str	r0, [r7, #4]
 8001b0c:	6039      	str	r1, [r7, #0]
	uint8_t data[12]; // data array to hold accelerometer and gyro x, y, z, data
	uint16_t ii, packet_count, fifo_count;
	int32_t gyro_bias[3]  = {0, 0, 0}, accel_bias[3] = {0, 0, 0};
 8001b0e:	2300      	movs	r3, #0
 8001b10:	61fb      	str	r3, [r7, #28]
 8001b12:	2300      	movs	r3, #0
 8001b14:	623b      	str	r3, [r7, #32]
 8001b16:	2300      	movs	r3, #0
 8001b18:	627b      	str	r3, [r7, #36]	; 0x24
 8001b1a:	2300      	movs	r3, #0
 8001b1c:	613b      	str	r3, [r7, #16]
 8001b1e:	2300      	movs	r3, #0
 8001b20:	617b      	str	r3, [r7, #20]
 8001b22:	2300      	movs	r3, #0
 8001b24:	61bb      	str	r3, [r7, #24]
	uint8_t Data;



// Configure device for bias calculation
	Data = 0x01;
 8001b26:	2301      	movs	r3, #1
 8001b28:	73fb      	strb	r3, [r7, #15]
	HAL_I2C_Mem_Write(&hi2c1, MPU9250_ADDR, PWR_MGMT_1_REG, 1, &Data, 1, 1000);
 8001b2a:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8001b2e:	9302      	str	r3, [sp, #8]
 8001b30:	2301      	movs	r3, #1
 8001b32:	9301      	str	r3, [sp, #4]
 8001b34:	f107 030f 	add.w	r3, r7, #15
 8001b38:	9300      	str	r3, [sp, #0]
 8001b3a:	2301      	movs	r3, #1
 8001b3c:	226b      	movs	r2, #107	; 0x6b
 8001b3e:	21d0      	movs	r1, #208	; 0xd0
 8001b40:	48b1      	ldr	r0, [pc, #708]	; (8001e08 <calibrateMPU9250+0x304>)
 8001b42:	f001 fb6f 	bl	8003224 <HAL_I2C_Mem_Write>
	Data = 0x00;
 8001b46:	2300      	movs	r3, #0
 8001b48:	73fb      	strb	r3, [r7, #15]
	HAL_I2C_Mem_Write(&hi2c1, MPU9250_ADDR, PWR_MGMT_1_REG, 1, &Data, 1, 1000);   // Turn on internal clock source
 8001b4a:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8001b4e:	9302      	str	r3, [sp, #8]
 8001b50:	2301      	movs	r3, #1
 8001b52:	9301      	str	r3, [sp, #4]
 8001b54:	f107 030f 	add.w	r3, r7, #15
 8001b58:	9300      	str	r3, [sp, #0]
 8001b5a:	2301      	movs	r3, #1
 8001b5c:	226b      	movs	r2, #107	; 0x6b
 8001b5e:	21d0      	movs	r1, #208	; 0xd0
 8001b60:	48a9      	ldr	r0, [pc, #676]	; (8001e08 <calibrateMPU9250+0x304>)
 8001b62:	f001 fb5f 	bl	8003224 <HAL_I2C_Mem_Write>
	HAL_I2C_Mem_Write(&hi2c1, MPU9250_ADDR, I2C_MST_CTRL, 1, &Data, 1, 1000);		 // Disable I2C master
 8001b66:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8001b6a:	9302      	str	r3, [sp, #8]
 8001b6c:	2301      	movs	r3, #1
 8001b6e:	9301      	str	r3, [sp, #4]
 8001b70:	f107 030f 	add.w	r3, r7, #15
 8001b74:	9300      	str	r3, [sp, #0]
 8001b76:	2301      	movs	r3, #1
 8001b78:	2224      	movs	r2, #36	; 0x24
 8001b7a:	21d0      	movs	r1, #208	; 0xd0
 8001b7c:	48a2      	ldr	r0, [pc, #648]	; (8001e08 <calibrateMPU9250+0x304>)
 8001b7e:	f001 fb51 	bl	8003224 <HAL_I2C_Mem_Write>
	HAL_I2C_Mem_Write(&hi2c1, MPU9250_ADDR, USER_CTRL, 1, &Data, 1, 1000);	  // Disable FIFO and I2C master modes
 8001b82:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8001b86:	9302      	str	r3, [sp, #8]
 8001b88:	2301      	movs	r3, #1
 8001b8a:	9301      	str	r3, [sp, #4]
 8001b8c:	f107 030f 	add.w	r3, r7, #15
 8001b90:	9300      	str	r3, [sp, #0]
 8001b92:	2301      	movs	r3, #1
 8001b94:	226a      	movs	r2, #106	; 0x6a
 8001b96:	21d0      	movs	r1, #208	; 0xd0
 8001b98:	489b      	ldr	r0, [pc, #620]	; (8001e08 <calibrateMPU9250+0x304>)
 8001b9a:	f001 fb43 	bl	8003224 <HAL_I2C_Mem_Write>
	Data = 0x0C;
 8001b9e:	230c      	movs	r3, #12
 8001ba0:	73fb      	strb	r3, [r7, #15]
	HAL_I2C_Mem_Write(&hi2c1, MPU9250_ADDR, USER_CTRL, 1, &Data, 1, 1000);	  // Reset FIFO and DMP
 8001ba2:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8001ba6:	9302      	str	r3, [sp, #8]
 8001ba8:	2301      	movs	r3, #1
 8001baa:	9301      	str	r3, [sp, #4]
 8001bac:	f107 030f 	add.w	r3, r7, #15
 8001bb0:	9300      	str	r3, [sp, #0]
 8001bb2:	2301      	movs	r3, #1
 8001bb4:	226a      	movs	r2, #106	; 0x6a
 8001bb6:	21d0      	movs	r1, #208	; 0xd0
 8001bb8:	4893      	ldr	r0, [pc, #588]	; (8001e08 <calibrateMPU9250+0x304>)
 8001bba:	f001 fb33 	bl	8003224 <HAL_I2C_Mem_Write>


// Configure MPU6050 gyro and accelerometer for bias calculation

	Data = 0x01;
 8001bbe:	2301      	movs	r3, #1
 8001bc0:	73fb      	strb	r3, [r7, #15]
	HAL_I2C_Mem_Write(&hi2c1, MPU9250_ADDR, CONFIG_REG, 1, &Data, 1, 1000);     // Set low-pass filter to 188 Hz
 8001bc2:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8001bc6:	9302      	str	r3, [sp, #8]
 8001bc8:	2301      	movs	r3, #1
 8001bca:	9301      	str	r3, [sp, #4]
 8001bcc:	f107 030f 	add.w	r3, r7, #15
 8001bd0:	9300      	str	r3, [sp, #0]
 8001bd2:	2301      	movs	r3, #1
 8001bd4:	221a      	movs	r2, #26
 8001bd6:	21d0      	movs	r1, #208	; 0xd0
 8001bd8:	488b      	ldr	r0, [pc, #556]	; (8001e08 <calibrateMPU9250+0x304>)
 8001bda:	f001 fb23 	bl	8003224 <HAL_I2C_Mem_Write>
	Data = 0x00;
 8001bde:	2300      	movs	r3, #0
 8001be0:	73fb      	strb	r3, [r7, #15]
	HAL_I2C_Mem_Write(&hi2c1, MPU9250_ADDR, SMPLRT_DIV_REG, 1, &Data, 1, 1000);  // Set sample rate to 1 kHz
 8001be2:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8001be6:	9302      	str	r3, [sp, #8]
 8001be8:	2301      	movs	r3, #1
 8001bea:	9301      	str	r3, [sp, #4]
 8001bec:	f107 030f 	add.w	r3, r7, #15
 8001bf0:	9300      	str	r3, [sp, #0]
 8001bf2:	2301      	movs	r3, #1
 8001bf4:	2219      	movs	r2, #25
 8001bf6:	21d0      	movs	r1, #208	; 0xd0
 8001bf8:	4883      	ldr	r0, [pc, #524]	; (8001e08 <calibrateMPU9250+0x304>)
 8001bfa:	f001 fb13 	bl	8003224 <HAL_I2C_Mem_Write>
	HAL_I2C_Mem_Write(&hi2c1, MPU9250_ADDR, GYRO_CONFIG_REG, 1, &Data, 1, 1000);	 // Set gyro full-scale to 250 degrees per second, maximum sensitivity
 8001bfe:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8001c02:	9302      	str	r3, [sp, #8]
 8001c04:	2301      	movs	r3, #1
 8001c06:	9301      	str	r3, [sp, #4]
 8001c08:	f107 030f 	add.w	r3, r7, #15
 8001c0c:	9300      	str	r3, [sp, #0]
 8001c0e:	2301      	movs	r3, #1
 8001c10:	221b      	movs	r2, #27
 8001c12:	21d0      	movs	r1, #208	; 0xd0
 8001c14:	487c      	ldr	r0, [pc, #496]	; (8001e08 <calibrateMPU9250+0x304>)
 8001c16:	f001 fb05 	bl	8003224 <HAL_I2C_Mem_Write>
	HAL_I2C_Mem_Write(&hi2c1, MPU9250_ADDR, ACCEL_CONFIG_REG, 1, &Data, 1, 1000);	 // Set accelerometer full-scale to 2 g, maximum sensitivity
 8001c1a:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8001c1e:	9302      	str	r3, [sp, #8]
 8001c20:	2301      	movs	r3, #1
 8001c22:	9301      	str	r3, [sp, #4]
 8001c24:	f107 030f 	add.w	r3, r7, #15
 8001c28:	9300      	str	r3, [sp, #0]
 8001c2a:	2301      	movs	r3, #1
 8001c2c:	221c      	movs	r2, #28
 8001c2e:	21d0      	movs	r1, #208	; 0xd0
 8001c30:	4875      	ldr	r0, [pc, #468]	; (8001e08 <calibrateMPU9250+0x304>)
 8001c32:	f001 faf7 	bl	8003224 <HAL_I2C_Mem_Write>

	uint16_t  gyrosensitivity  = 131;   // = 131 LSB/degrees/sec
 8001c36:	2383      	movs	r3, #131	; 0x83
 8001c38:	877b      	strh	r3, [r7, #58]	; 0x3a
	uint16_t  accelsensitivity = 16384;  // = 16384 LSB/g
 8001c3a:	f44f 4380 	mov.w	r3, #16384	; 0x4000
 8001c3e:	873b      	strh	r3, [r7, #56]	; 0x38

    // Configure FIFO to capture accelerometer and gyro data for bias calculation
	Data = 0x40;
 8001c40:	2340      	movs	r3, #64	; 0x40
 8001c42:	73fb      	strb	r3, [r7, #15]
	HAL_I2C_Mem_Write(&hi2c1, MPU9250_ADDR, USER_CTRL, 1, &Data, 1, 1000);  // Enable FIFO
 8001c44:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8001c48:	9302      	str	r3, [sp, #8]
 8001c4a:	2301      	movs	r3, #1
 8001c4c:	9301      	str	r3, [sp, #4]
 8001c4e:	f107 030f 	add.w	r3, r7, #15
 8001c52:	9300      	str	r3, [sp, #0]
 8001c54:	2301      	movs	r3, #1
 8001c56:	226a      	movs	r2, #106	; 0x6a
 8001c58:	21d0      	movs	r1, #208	; 0xd0
 8001c5a:	486b      	ldr	r0, [pc, #428]	; (8001e08 <calibrateMPU9250+0x304>)
 8001c5c:	f001 fae2 	bl	8003224 <HAL_I2C_Mem_Write>
	Data = 0x78;
 8001c60:	2378      	movs	r3, #120	; 0x78
 8001c62:	73fb      	strb	r3, [r7, #15]
	for(int j=0;j<100;j++){
 8001c64:	2300      	movs	r3, #0
 8001c66:	63fb      	str	r3, [r7, #60]	; 0x3c
 8001c68:	e02d      	b.n	8001cc6 <calibrateMPU9250+0x1c2>
		MPU9250_Read_Accel();
 8001c6a:	f7ff fb81 	bl	8001370 <MPU9250_Read_Accel>
		MPU9250_Read_Gyro();
 8001c6e:	f7ff fc23 	bl	80014b8 <MPU9250_Read_Gyro>
		accel_bias[0]+=Accel_X_RAW;
 8001c72:	693b      	ldr	r3, [r7, #16]
 8001c74:	4a65      	ldr	r2, [pc, #404]	; (8001e0c <calibrateMPU9250+0x308>)
 8001c76:	f9b2 2000 	ldrsh.w	r2, [r2]
 8001c7a:	4413      	add	r3, r2
 8001c7c:	613b      	str	r3, [r7, #16]
		accel_bias[1]+=Accel_Y_RAW;
 8001c7e:	697b      	ldr	r3, [r7, #20]
 8001c80:	4a63      	ldr	r2, [pc, #396]	; (8001e10 <calibrateMPU9250+0x30c>)
 8001c82:	f9b2 2000 	ldrsh.w	r2, [r2]
 8001c86:	4413      	add	r3, r2
 8001c88:	617b      	str	r3, [r7, #20]
		accel_bias[2]+=Accel_Z_RAW;
 8001c8a:	69bb      	ldr	r3, [r7, #24]
 8001c8c:	4a61      	ldr	r2, [pc, #388]	; (8001e14 <calibrateMPU9250+0x310>)
 8001c8e:	f9b2 2000 	ldrsh.w	r2, [r2]
 8001c92:	4413      	add	r3, r2
 8001c94:	61bb      	str	r3, [r7, #24]
		gyro_bias[0]+=Gyro_X_RAW;
 8001c96:	69fb      	ldr	r3, [r7, #28]
 8001c98:	4a5f      	ldr	r2, [pc, #380]	; (8001e18 <calibrateMPU9250+0x314>)
 8001c9a:	f9b2 2000 	ldrsh.w	r2, [r2]
 8001c9e:	4413      	add	r3, r2
 8001ca0:	61fb      	str	r3, [r7, #28]
		gyro_bias[1]+=Gyro_Y_RAW;
 8001ca2:	6a3b      	ldr	r3, [r7, #32]
 8001ca4:	4a5d      	ldr	r2, [pc, #372]	; (8001e1c <calibrateMPU9250+0x318>)
 8001ca6:	f9b2 2000 	ldrsh.w	r2, [r2]
 8001caa:	4413      	add	r3, r2
 8001cac:	623b      	str	r3, [r7, #32]
		gyro_bias[2]+=Gyro_Z_RAW;
 8001cae:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001cb0:	4a5b      	ldr	r2, [pc, #364]	; (8001e20 <calibrateMPU9250+0x31c>)
 8001cb2:	f9b2 2000 	ldrsh.w	r2, [r2]
 8001cb6:	4413      	add	r3, r2
 8001cb8:	627b      	str	r3, [r7, #36]	; 0x24
		HAL_Delay(1);
 8001cba:	2001      	movs	r0, #1
 8001cbc:	f000 fe40 	bl	8002940 <HAL_Delay>
	for(int j=0;j<100;j++){
 8001cc0:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8001cc2:	3301      	adds	r3, #1
 8001cc4:	63fb      	str	r3, [r7, #60]	; 0x3c
 8001cc6:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8001cc8:	2b63      	cmp	r3, #99	; 0x63
 8001cca:	ddce      	ble.n	8001c6a <calibrateMPU9250+0x166>
	}
	packet_count = 100;// How many sets of full gyro and accelerometer data for averaging
 8001ccc:	2364      	movs	r3, #100	; 0x64
 8001cce:	86fb      	strh	r3, [r7, #54]	; 0x36


    accel_bias[0] /= (int32_t) packet_count; // Normalize sums to get average count biases
 8001cd0:	693a      	ldr	r2, [r7, #16]
 8001cd2:	8efb      	ldrh	r3, [r7, #54]	; 0x36
 8001cd4:	fb92 f3f3 	sdiv	r3, r2, r3
 8001cd8:	613b      	str	r3, [r7, #16]
    accel_bias[1] /= (int32_t) packet_count;
 8001cda:	697a      	ldr	r2, [r7, #20]
 8001cdc:	8efb      	ldrh	r3, [r7, #54]	; 0x36
 8001cde:	fb92 f3f3 	sdiv	r3, r2, r3
 8001ce2:	617b      	str	r3, [r7, #20]
    accel_bias[2] /= (int32_t) packet_count;
 8001ce4:	69ba      	ldr	r2, [r7, #24]
 8001ce6:	8efb      	ldrh	r3, [r7, #54]	; 0x36
 8001ce8:	fb92 f3f3 	sdiv	r3, r2, r3
 8001cec:	61bb      	str	r3, [r7, #24]
    gyro_bias[0]  /= (int32_t) packet_count;
 8001cee:	69fa      	ldr	r2, [r7, #28]
 8001cf0:	8efb      	ldrh	r3, [r7, #54]	; 0x36
 8001cf2:	fb92 f3f3 	sdiv	r3, r2, r3
 8001cf6:	61fb      	str	r3, [r7, #28]
    gyro_bias[1]  /= (int32_t) packet_count;
 8001cf8:	6a3a      	ldr	r2, [r7, #32]
 8001cfa:	8efb      	ldrh	r3, [r7, #54]	; 0x36
 8001cfc:	fb92 f3f3 	sdiv	r3, r2, r3
 8001d00:	623b      	str	r3, [r7, #32]
    gyro_bias[2]  /= (int32_t) packet_count;
 8001d02:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8001d04:	8efb      	ldrh	r3, [r7, #54]	; 0x36
 8001d06:	fb92 f3f3 	sdiv	r3, r2, r3
 8001d0a:	627b      	str	r3, [r7, #36]	; 0x24

	if(accel_bias[2] > 0L) {accel_bias[2] -= (int32_t) accelsensitivity;}  // Remove gravity from the z-axis accelerometer bias calculation
 8001d0c:	69bb      	ldr	r3, [r7, #24]
 8001d0e:	2b00      	cmp	r3, #0
 8001d10:	dd04      	ble.n	8001d1c <calibrateMPU9250+0x218>
 8001d12:	69ba      	ldr	r2, [r7, #24]
 8001d14:	8f3b      	ldrh	r3, [r7, #56]	; 0x38
 8001d16:	1ad3      	subs	r3, r2, r3
 8001d18:	61bb      	str	r3, [r7, #24]
 8001d1a:	e003      	b.n	8001d24 <calibrateMPU9250+0x220>
	else {accel_bias[2] += (int32_t) accelsensitivity;}
 8001d1c:	69ba      	ldr	r2, [r7, #24]
 8001d1e:	8f3b      	ldrh	r3, [r7, #56]	; 0x38
 8001d20:	4413      	add	r3, r2
 8001d22:	61bb      	str	r3, [r7, #24]



// Output scaled gyro biases for display in the main program
	dest1[0] = (float) gyro_bias[0]/(float) gyrosensitivity;
 8001d24:	69fb      	ldr	r3, [r7, #28]
 8001d26:	4618      	mov	r0, r3
 8001d28:	f7fe ffd8 	bl	8000cdc <__aeabi_i2f>
 8001d2c:	4604      	mov	r4, r0
 8001d2e:	8f7b      	ldrh	r3, [r7, #58]	; 0x3a
 8001d30:	4618      	mov	r0, r3
 8001d32:	f7fe ffcf 	bl	8000cd4 <__aeabi_ui2f>
 8001d36:	4603      	mov	r3, r0
 8001d38:	4619      	mov	r1, r3
 8001d3a:	4620      	mov	r0, r4
 8001d3c:	f7ff f8d6 	bl	8000eec <__aeabi_fdiv>
 8001d40:	4603      	mov	r3, r0
 8001d42:	461a      	mov	r2, r3
 8001d44:	687b      	ldr	r3, [r7, #4]
 8001d46:	601a      	str	r2, [r3, #0]
	dest1[1] = (float) gyro_bias[1]/(float) gyrosensitivity;
 8001d48:	6a3b      	ldr	r3, [r7, #32]
 8001d4a:	4618      	mov	r0, r3
 8001d4c:	f7fe ffc6 	bl	8000cdc <__aeabi_i2f>
 8001d50:	4605      	mov	r5, r0
 8001d52:	8f7b      	ldrh	r3, [r7, #58]	; 0x3a
 8001d54:	4618      	mov	r0, r3
 8001d56:	f7fe ffbd 	bl	8000cd4 <__aeabi_ui2f>
 8001d5a:	4602      	mov	r2, r0
 8001d5c:	687b      	ldr	r3, [r7, #4]
 8001d5e:	1d1c      	adds	r4, r3, #4
 8001d60:	4611      	mov	r1, r2
 8001d62:	4628      	mov	r0, r5
 8001d64:	f7ff f8c2 	bl	8000eec <__aeabi_fdiv>
 8001d68:	4603      	mov	r3, r0
 8001d6a:	6023      	str	r3, [r4, #0]
	dest1[2] = (float) gyro_bias[2]/(float) gyrosensitivity;
 8001d6c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001d6e:	4618      	mov	r0, r3
 8001d70:	f7fe ffb4 	bl	8000cdc <__aeabi_i2f>
 8001d74:	4605      	mov	r5, r0
 8001d76:	8f7b      	ldrh	r3, [r7, #58]	; 0x3a
 8001d78:	4618      	mov	r0, r3
 8001d7a:	f7fe ffab 	bl	8000cd4 <__aeabi_ui2f>
 8001d7e:	4602      	mov	r2, r0
 8001d80:	687b      	ldr	r3, [r7, #4]
 8001d82:	f103 0408 	add.w	r4, r3, #8
 8001d86:	4611      	mov	r1, r2
 8001d88:	4628      	mov	r0, r5
 8001d8a:	f7ff f8af 	bl	8000eec <__aeabi_fdiv>
 8001d8e:	4603      	mov	r3, r0
 8001d90:	6023      	str	r3, [r4, #0]




// Output scaled accelerometer biases for display in the main program
	dest2[0] = (float)accel_bias[0]/(float)accelsensitivity;
 8001d92:	693b      	ldr	r3, [r7, #16]
 8001d94:	4618      	mov	r0, r3
 8001d96:	f7fe ffa1 	bl	8000cdc <__aeabi_i2f>
 8001d9a:	4604      	mov	r4, r0
 8001d9c:	8f3b      	ldrh	r3, [r7, #56]	; 0x38
 8001d9e:	4618      	mov	r0, r3
 8001da0:	f7fe ff98 	bl	8000cd4 <__aeabi_ui2f>
 8001da4:	4603      	mov	r3, r0
 8001da6:	4619      	mov	r1, r3
 8001da8:	4620      	mov	r0, r4
 8001daa:	f7ff f89f 	bl	8000eec <__aeabi_fdiv>
 8001dae:	4603      	mov	r3, r0
 8001db0:	461a      	mov	r2, r3
 8001db2:	683b      	ldr	r3, [r7, #0]
 8001db4:	601a      	str	r2, [r3, #0]
	dest2[1] = (float)accel_bias[1]/(float)accelsensitivity;
 8001db6:	697b      	ldr	r3, [r7, #20]
 8001db8:	4618      	mov	r0, r3
 8001dba:	f7fe ff8f 	bl	8000cdc <__aeabi_i2f>
 8001dbe:	4605      	mov	r5, r0
 8001dc0:	8f3b      	ldrh	r3, [r7, #56]	; 0x38
 8001dc2:	4618      	mov	r0, r3
 8001dc4:	f7fe ff86 	bl	8000cd4 <__aeabi_ui2f>
 8001dc8:	4602      	mov	r2, r0
 8001dca:	683b      	ldr	r3, [r7, #0]
 8001dcc:	1d1c      	adds	r4, r3, #4
 8001dce:	4611      	mov	r1, r2
 8001dd0:	4628      	mov	r0, r5
 8001dd2:	f7ff f88b 	bl	8000eec <__aeabi_fdiv>
 8001dd6:	4603      	mov	r3, r0
 8001dd8:	6023      	str	r3, [r4, #0]
	dest2[2] = (float)accel_bias[2]/(float)accelsensitivity;
 8001dda:	69bb      	ldr	r3, [r7, #24]
 8001ddc:	4618      	mov	r0, r3
 8001dde:	f7fe ff7d 	bl	8000cdc <__aeabi_i2f>
 8001de2:	4605      	mov	r5, r0
 8001de4:	8f3b      	ldrh	r3, [r7, #56]	; 0x38
 8001de6:	4618      	mov	r0, r3
 8001de8:	f7fe ff74 	bl	8000cd4 <__aeabi_ui2f>
 8001dec:	4602      	mov	r2, r0
 8001dee:	683b      	ldr	r3, [r7, #0]
 8001df0:	f103 0408 	add.w	r4, r3, #8
 8001df4:	4611      	mov	r1, r2
 8001df6:	4628      	mov	r0, r5
 8001df8:	f7ff f878 	bl	8000eec <__aeabi_fdiv>
 8001dfc:	4603      	mov	r3, r0
 8001dfe:	6023      	str	r3, [r4, #0]
}
 8001e00:	bf00      	nop
 8001e02:	3740      	adds	r7, #64	; 0x40
 8001e04:	46bd      	mov	sp, r7
 8001e06:	bdb0      	pop	{r4, r5, r7, pc}
 8001e08:	200002e0 	.word	0x200002e0
 8001e0c:	20000204 	.word	0x20000204
 8001e10:	20000206 	.word	0x20000206
 8001e14:	20000208 	.word	0x20000208
 8001e18:	2000020a 	.word	0x2000020a
 8001e1c:	2000020c 	.word	0x2000020c
 8001e20:	2000020e 	.word	0x2000020e

08001e24 <adxl_write>:
//
//	/* USER CODE END SPI2_Init 2 */
//}


void adxl_write(uint8_t address,uint8_t value){
 8001e24:	b580      	push	{r7, lr}
 8001e26:	b084      	sub	sp, #16
 8001e28:	af00      	add	r7, sp, #0
 8001e2a:	4603      	mov	r3, r0
 8001e2c:	460a      	mov	r2, r1
 8001e2e:	71fb      	strb	r3, [r7, #7]
 8001e30:	4613      	mov	r3, r2
 8001e32:	71bb      	strb	r3, [r7, #6]
	uint8_t data[2];
	data[0]=address|0x40;
 8001e34:	79fb      	ldrb	r3, [r7, #7]
 8001e36:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8001e3a:	b2db      	uxtb	r3, r3
 8001e3c:	733b      	strb	r3, [r7, #12]
	data[1]=value;
 8001e3e:	79bb      	ldrb	r3, [r7, #6]
 8001e40:	737b      	strb	r3, [r7, #13]
	HAL_GPIO_WritePin(GPIOB,GPIO_PIN_9,GPIO_PIN_RESET);
 8001e42:	2200      	movs	r2, #0
 8001e44:	f44f 7100 	mov.w	r1, #512	; 0x200
 8001e48:	4809      	ldr	r0, [pc, #36]	; (8001e70 <adxl_write+0x4c>)
 8001e4a:	f001 f879 	bl	8002f40 <HAL_GPIO_WritePin>
	HAL_SPI_Transmit(&hspi2,data,2,100);
 8001e4e:	f107 010c 	add.w	r1, r7, #12
 8001e52:	2364      	movs	r3, #100	; 0x64
 8001e54:	2202      	movs	r2, #2
 8001e56:	4807      	ldr	r0, [pc, #28]	; (8001e74 <adxl_write+0x50>)
 8001e58:	f002 fd3a 	bl	80048d0 <HAL_SPI_Transmit>
	HAL_GPIO_WritePin(GPIOB,GPIO_PIN_9,GPIO_PIN_SET);
 8001e5c:	2201      	movs	r2, #1
 8001e5e:	f44f 7100 	mov.w	r1, #512	; 0x200
 8001e62:	4803      	ldr	r0, [pc, #12]	; (8001e70 <adxl_write+0x4c>)
 8001e64:	f001 f86c 	bl	8002f40 <HAL_GPIO_WritePin>
}
 8001e68:	bf00      	nop
 8001e6a:	3710      	adds	r7, #16
 8001e6c:	46bd      	mov	sp, r7
 8001e6e:	bd80      	pop	{r7, pc}
 8001e70:	40010c00 	.word	0x40010c00
 8001e74:	20000280 	.word	0x20000280

08001e78 <adxl_read_data>:

void adxl_read_data(uint8_t address){
 8001e78:	b580      	push	{r7, lr}
 8001e7a:	b082      	sub	sp, #8
 8001e7c:	af00      	add	r7, sp, #0
 8001e7e:	4603      	mov	r3, r0
 8001e80:	71fb      	strb	r3, [r7, #7]
	address |= 0x80;
 8001e82:	79fb      	ldrb	r3, [r7, #7]
 8001e84:	f063 037f 	orn	r3, r3, #127	; 0x7f
 8001e88:	b2db      	uxtb	r3, r3
 8001e8a:	71fb      	strb	r3, [r7, #7]
	address |= 0x40;
 8001e8c:	79fb      	ldrb	r3, [r7, #7]
 8001e8e:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8001e92:	b2db      	uxtb	r3, r3
 8001e94:	71fb      	strb	r3, [r7, #7]
	HAL_GPIO_WritePin(GPIOB,GPIO_PIN_9,GPIO_PIN_RESET);
 8001e96:	2200      	movs	r2, #0
 8001e98:	f44f 7100 	mov.w	r1, #512	; 0x200
 8001e9c:	480c      	ldr	r0, [pc, #48]	; (8001ed0 <adxl_read_data+0x58>)
 8001e9e:	f001 f84f 	bl	8002f40 <HAL_GPIO_WritePin>
	HAL_SPI_Transmit(&hspi2,&address,1,100);
 8001ea2:	1df9      	adds	r1, r7, #7
 8001ea4:	2364      	movs	r3, #100	; 0x64
 8001ea6:	2201      	movs	r2, #1
 8001ea8:	480a      	ldr	r0, [pc, #40]	; (8001ed4 <adxl_read_data+0x5c>)
 8001eaa:	f002 fd11 	bl	80048d0 <HAL_SPI_Transmit>
	HAL_SPI_Receive(&hspi2,data_rec,6,100);
 8001eae:	2364      	movs	r3, #100	; 0x64
 8001eb0:	2206      	movs	r2, #6
 8001eb2:	4909      	ldr	r1, [pc, #36]	; (8001ed8 <adxl_read_data+0x60>)
 8001eb4:	4807      	ldr	r0, [pc, #28]	; (8001ed4 <adxl_read_data+0x5c>)
 8001eb6:	f002 fe47 	bl	8004b48 <HAL_SPI_Receive>
	HAL_GPIO_WritePin(GPIOB,GPIO_PIN_9,GPIO_PIN_SET);
 8001eba:	2201      	movs	r2, #1
 8001ebc:	f44f 7100 	mov.w	r1, #512	; 0x200
 8001ec0:	4803      	ldr	r0, [pc, #12]	; (8001ed0 <adxl_read_data+0x58>)
 8001ec2:	f001 f83d 	bl	8002f40 <HAL_GPIO_WritePin>
}
 8001ec6:	bf00      	nop
 8001ec8:	3708      	adds	r7, #8
 8001eca:	46bd      	mov	sp, r7
 8001ecc:	bd80      	pop	{r7, pc}
 8001ece:	bf00      	nop
 8001ed0:	40010c00 	.word	0x40010c00
 8001ed4:	20000280 	.word	0x20000280
 8001ed8:	20000414 	.word	0x20000414

08001edc <adxl_init>:
	HAL_SPI_Transmit(&hspi2,&address,1,100);
	HAL_SPI_Receive(&hspi2,&data,1,100);
	HAL_GPIO_WritePin(GPIOB,GPIO_PIN_9,GPIO_PIN_SET);
}

void adxl_init(void){
 8001edc:	b580      	push	{r7, lr}
 8001ede:	af00      	add	r7, sp, #0
	adxl_write(0x31,0x01); //DATA_FORMAT=> +-4g
 8001ee0:	2101      	movs	r1, #1
 8001ee2:	2031      	movs	r0, #49	; 0x31
 8001ee4:	f7ff ff9e 	bl	8001e24 <adxl_write>
	adxl_write(0x2d,0x00); //POWER_CTL => Wakeup Bits
 8001ee8:	2100      	movs	r1, #0
 8001eea:	202d      	movs	r0, #45	; 0x2d
 8001eec:	f7ff ff9a 	bl	8001e24 <adxl_write>
	adxl_write(0x2c,0x0A); //100hz
 8001ef0:	210a      	movs	r1, #10
 8001ef2:	202c      	movs	r0, #44	; 0x2c
 8001ef4:	f7ff ff96 	bl	8001e24 <adxl_write>
	adxl_write(0x2d,0x08); //POWER_CTL => Measure Bit
 8001ef8:	2108      	movs	r1, #8
 8001efa:	202d      	movs	r0, #45	; 0x2d
 8001efc:	f7ff ff92 	bl	8001e24 <adxl_write>
	adxl_write(0x2e,0x00); //INT_ENABLE => close
 8001f00:	2100      	movs	r1, #0
 8001f02:	202e      	movs	r0, #46	; 0x2e
 8001f04:	f7ff ff8e 	bl	8001e24 <adxl_write>
	adxl_write(0x24,0x4b); //THRESH_ACT =>75
 8001f08:	214b      	movs	r1, #75	; 0x4b
 8001f0a:	2024      	movs	r0, #36	; 0x24
 8001f0c:	f7ff ff8a 	bl	8001e24 <adxl_write>
	adxl_write(0x27,0x40); //ACT_INACT_CTL => dc-coupled operation,enable ACT_X
 8001f10:	2140      	movs	r1, #64	; 0x40
 8001f12:	2027      	movs	r0, #39	; 0x27
 8001f14:	f7ff ff86 	bl	8001e24 <adxl_write>
	adxl_write(0x2f,0x10); //INT_MAP => Activity map INT2
 8001f18:	2110      	movs	r1, #16
 8001f1a:	202f      	movs	r0, #47	; 0x2f
 8001f1c:	f7ff ff82 	bl	8001e24 <adxl_write>
	adxl_write(0x2e,0x93); //INT_ENABLE => open
 8001f20:	2193      	movs	r1, #147	; 0x93
 8001f22:	202e      	movs	r0, #46	; 0x2e
 8001f24:	f7ff ff7e 	bl	8001e24 <adxl_write>
}
 8001f28:	bf00      	nop
 8001f2a:	bd80      	pop	{r7, pc}
 8001f2c:	0000      	movs	r0, r0
	...

08001f30 <getData_from_ADXL>:

void getData_from_ADXL(int id){
 8001f30:	e92d 43b0 	stmdb	sp!, {r4, r5, r7, r8, r9, lr}
 8001f34:	b0a2      	sub	sp, #136	; 0x88
 8001f36:	af06      	add	r7, sp, #24
 8001f38:	6078      	str	r0, [r7, #4]

	unsigned char buffer[100]="\0";
 8001f3a:	4b57      	ldr	r3, [pc, #348]	; (8002098 <getData_from_ADXL+0x168>)
 8001f3c:	881b      	ldrh	r3, [r3, #0]
 8001f3e:	81bb      	strh	r3, [r7, #12]
 8001f40:	f107 030e 	add.w	r3, r7, #14
 8001f44:	2262      	movs	r2, #98	; 0x62
 8001f46:	2100      	movs	r1, #0
 8001f48:	4618      	mov	r0, r3
 8001f4a:	f004 f83f 	bl	8005fcc <memset>
//	while(HAL_UART_GetState(&huart2)!=HAL_UART_STATE_READY);
//
//	if(HAL_UART_Transmit(&huart2,(uint8_t*)buffer,sizeof(buffer),100)!=HAL_OK){
//		Error_Handler();
//	}
	adxl_read_data(0x32);
 8001f4e:	2032      	movs	r0, #50	; 0x32
 8001f50:	f7ff ff92 	bl	8001e78 <adxl_read_data>
	x=(data_rec[1]<<8)|data_rec[0];
 8001f54:	4b51      	ldr	r3, [pc, #324]	; (800209c <getData_from_ADXL+0x16c>)
 8001f56:	785b      	ldrb	r3, [r3, #1]
 8001f58:	021b      	lsls	r3, r3, #8
 8001f5a:	b21a      	sxth	r2, r3
 8001f5c:	4b4f      	ldr	r3, [pc, #316]	; (800209c <getData_from_ADXL+0x16c>)
 8001f5e:	781b      	ldrb	r3, [r3, #0]
 8001f60:	b21b      	sxth	r3, r3
 8001f62:	4313      	orrs	r3, r2
 8001f64:	b21a      	sxth	r2, r3
 8001f66:	4b4e      	ldr	r3, [pc, #312]	; (80020a0 <getData_from_ADXL+0x170>)
 8001f68:	801a      	strh	r2, [r3, #0]
	y=(data_rec[3]<<8)|data_rec[2];
 8001f6a:	4b4c      	ldr	r3, [pc, #304]	; (800209c <getData_from_ADXL+0x16c>)
 8001f6c:	78db      	ldrb	r3, [r3, #3]
 8001f6e:	021b      	lsls	r3, r3, #8
 8001f70:	b21a      	sxth	r2, r3
 8001f72:	4b4a      	ldr	r3, [pc, #296]	; (800209c <getData_from_ADXL+0x16c>)
 8001f74:	789b      	ldrb	r3, [r3, #2]
 8001f76:	b21b      	sxth	r3, r3
 8001f78:	4313      	orrs	r3, r2
 8001f7a:	b21a      	sxth	r2, r3
 8001f7c:	4b49      	ldr	r3, [pc, #292]	; (80020a4 <getData_from_ADXL+0x174>)
 8001f7e:	801a      	strh	r2, [r3, #0]
	z=(data_rec[5]<<8)|data_rec[4];
 8001f80:	4b46      	ldr	r3, [pc, #280]	; (800209c <getData_from_ADXL+0x16c>)
 8001f82:	795b      	ldrb	r3, [r3, #5]
 8001f84:	021b      	lsls	r3, r3, #8
 8001f86:	b21a      	sxth	r2, r3
 8001f88:	4b44      	ldr	r3, [pc, #272]	; (800209c <getData_from_ADXL+0x16c>)
 8001f8a:	791b      	ldrb	r3, [r3, #4]
 8001f8c:	b21b      	sxth	r3, r3
 8001f8e:	4313      	orrs	r3, r2
 8001f90:	b21a      	sxth	r2, r3
 8001f92:	4b45      	ldr	r3, [pc, #276]	; (80020a8 <getData_from_ADXL+0x178>)
 8001f94:	801a      	strh	r2, [r3, #0]

	xg = x*0.0078;
 8001f96:	4b42      	ldr	r3, [pc, #264]	; (80020a0 <getData_from_ADXL+0x170>)
 8001f98:	f9b3 3000 	ldrsh.w	r3, [r3]
 8001f9c:	4618      	mov	r0, r3
 8001f9e:	f7fe fa31 	bl	8000404 <__aeabi_i2d>
 8001fa2:	a33b      	add	r3, pc, #236	; (adr r3, 8002090 <getData_from_ADXL+0x160>)
 8001fa4:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001fa8:	f7fe fa96 	bl	80004d8 <__aeabi_dmul>
 8001fac:	4603      	mov	r3, r0
 8001fae:	460c      	mov	r4, r1
 8001fb0:	4618      	mov	r0, r3
 8001fb2:	4621      	mov	r1, r4
 8001fb4:	f7fe fd88 	bl	8000ac8 <__aeabi_d2f>
 8001fb8:	4602      	mov	r2, r0
 8001fba:	4b3c      	ldr	r3, [pc, #240]	; (80020ac <getData_from_ADXL+0x17c>)
 8001fbc:	601a      	str	r2, [r3, #0]
	yg = y*0.0078;
 8001fbe:	4b39      	ldr	r3, [pc, #228]	; (80020a4 <getData_from_ADXL+0x174>)
 8001fc0:	f9b3 3000 	ldrsh.w	r3, [r3]
 8001fc4:	4618      	mov	r0, r3
 8001fc6:	f7fe fa1d 	bl	8000404 <__aeabi_i2d>
 8001fca:	a331      	add	r3, pc, #196	; (adr r3, 8002090 <getData_from_ADXL+0x160>)
 8001fcc:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001fd0:	f7fe fa82 	bl	80004d8 <__aeabi_dmul>
 8001fd4:	4603      	mov	r3, r0
 8001fd6:	460c      	mov	r4, r1
 8001fd8:	4618      	mov	r0, r3
 8001fda:	4621      	mov	r1, r4
 8001fdc:	f7fe fd74 	bl	8000ac8 <__aeabi_d2f>
 8001fe0:	4602      	mov	r2, r0
 8001fe2:	4b33      	ldr	r3, [pc, #204]	; (80020b0 <getData_from_ADXL+0x180>)
 8001fe4:	601a      	str	r2, [r3, #0]
	zg = z*0.0078;
 8001fe6:	4b30      	ldr	r3, [pc, #192]	; (80020a8 <getData_from_ADXL+0x178>)
 8001fe8:	f9b3 3000 	ldrsh.w	r3, [r3]
 8001fec:	4618      	mov	r0, r3
 8001fee:	f7fe fa09 	bl	8000404 <__aeabi_i2d>
 8001ff2:	a327      	add	r3, pc, #156	; (adr r3, 8002090 <getData_from_ADXL+0x160>)
 8001ff4:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001ff8:	f7fe fa6e 	bl	80004d8 <__aeabi_dmul>
 8001ffc:	4603      	mov	r3, r0
 8001ffe:	460c      	mov	r4, r1
 8002000:	4618      	mov	r0, r3
 8002002:	4621      	mov	r1, r4
 8002004:	f7fe fd60 	bl	8000ac8 <__aeabi_d2f>
 8002008:	4602      	mov	r2, r0
 800200a:	4b2a      	ldr	r3, [pc, #168]	; (80020b4 <getData_from_ADXL+0x184>)
 800200c:	601a      	str	r2, [r3, #0]
//	while(HAL_UART_GetState(&huart2)!=HAL_UART_STATE_READY);
//	if(HAL_UART_Transmit(&huart2,(uint8_t*)buffer,sizeof(buffer),100)!=HAL_OK){
//		Error_Handler();
//	}

	memset(buffer, '\0', 100);
 800200e:	f107 030c 	add.w	r3, r7, #12
 8002012:	2264      	movs	r2, #100	; 0x64
 8002014:	2100      	movs	r1, #0
 8002016:	4618      	mov	r0, r3
 8002018:	f003 ffd8 	bl	8005fcc <memset>
	sprintf(buffer,"%d,%7.2f,%7.2f,%7.2f\n\r",id,xg,yg,zg);
 800201c:	4b23      	ldr	r3, [pc, #140]	; (80020ac <getData_from_ADXL+0x17c>)
 800201e:	681b      	ldr	r3, [r3, #0]
 8002020:	4618      	mov	r0, r3
 8002022:	f7fe fa01 	bl	8000428 <__aeabi_f2d>
 8002026:	4604      	mov	r4, r0
 8002028:	460d      	mov	r5, r1
 800202a:	4b21      	ldr	r3, [pc, #132]	; (80020b0 <getData_from_ADXL+0x180>)
 800202c:	681b      	ldr	r3, [r3, #0]
 800202e:	4618      	mov	r0, r3
 8002030:	f7fe f9fa 	bl	8000428 <__aeabi_f2d>
 8002034:	4680      	mov	r8, r0
 8002036:	4689      	mov	r9, r1
 8002038:	4b1e      	ldr	r3, [pc, #120]	; (80020b4 <getData_from_ADXL+0x184>)
 800203a:	681b      	ldr	r3, [r3, #0]
 800203c:	4618      	mov	r0, r3
 800203e:	f7fe f9f3 	bl	8000428 <__aeabi_f2d>
 8002042:	4602      	mov	r2, r0
 8002044:	460b      	mov	r3, r1
 8002046:	f107 000c 	add.w	r0, r7, #12
 800204a:	e9cd 2304 	strd	r2, r3, [sp, #16]
 800204e:	e9cd 8902 	strd	r8, r9, [sp, #8]
 8002052:	e9cd 4500 	strd	r4, r5, [sp]
 8002056:	687a      	ldr	r2, [r7, #4]
 8002058:	4917      	ldr	r1, [pc, #92]	; (80020b8 <getData_from_ADXL+0x188>)
 800205a:	f004 fea9 	bl	8006db0 <siprintf>
	while(HAL_UART_GetState(&huart2)!=HAL_UART_STATE_READY);
 800205e:	bf00      	nop
 8002060:	4816      	ldr	r0, [pc, #88]	; (80020bc <getData_from_ADXL+0x18c>)
 8002062:	f003 fd74 	bl	8005b4e <HAL_UART_GetState>
 8002066:	4603      	mov	r3, r0
 8002068:	2b20      	cmp	r3, #32
 800206a:	d1f9      	bne.n	8002060 <getData_from_ADXL+0x130>
	if(HAL_UART_Transmit(&huart2,(uint8_t*)buffer,sizeof(buffer),100)!=HAL_OK){
 800206c:	f107 010c 	add.w	r1, r7, #12
 8002070:	2364      	movs	r3, #100	; 0x64
 8002072:	2264      	movs	r2, #100	; 0x64
 8002074:	4811      	ldr	r0, [pc, #68]	; (80020bc <getData_from_ADXL+0x18c>)
 8002076:	f003 fbbc 	bl	80057f2 <HAL_UART_Transmit>
 800207a:	4603      	mov	r3, r0
 800207c:	2b00      	cmp	r3, #0
 800207e:	d001      	beq.n	8002084 <getData_from_ADXL+0x154>
		Error_Handler();
 8002080:	f000 fa2e 	bl	80024e0 <Error_Handler>
	}
}
 8002084:	bf00      	nop
 8002086:	3770      	adds	r7, #112	; 0x70
 8002088:	46bd      	mov	sp, r7
 800208a:	e8bd 83b0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, pc}
 800208e:	bf00      	nop
 8002090:	8e8a71de 	.word	0x8e8a71de
 8002094:	3f7ff2e4 	.word	0x3f7ff2e4
 8002098:	08009aa4 	.word	0x08009aa4
 800209c:	20000414 	.word	0x20000414
 80020a0:	2000027c 	.word	0x2000027c
 80020a4:	2000036e 	.word	0x2000036e
 80020a8:	2000034c 	.word	0x2000034c
 80020ac:	2000043c 	.word	0x2000043c
 80020b0:	20000410 	.word	0x20000410
 80020b4:	2000033c 	.word	0x2000033c
 80020b8:	08009a8c 	.word	0x08009a8c
 80020bc:	200003c0 	.word	0x200003c0

080020c0 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 80020c0:	b580      	push	{r7, lr}
 80020c2:	b0a2      	sub	sp, #136	; 0x88
 80020c4:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
	HAL_Init();
 80020c6:	f000 fbd9 	bl	800287c <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
	SystemClock_Config();
 80020ca:	f000 f84d 	bl	8002168 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
	MX_GPIO_Init();
 80020ce:	f000 f96d 	bl	80023ac <MX_GPIO_Init>
	MX_USART2_UART_Init();
 80020d2:	f000 f941 	bl	8002358 <MX_USART2_UART_Init>
	MX_I2C1_Init();
 80020d6:	f000 f88d 	bl	80021f4 <MX_I2C1_Init>
	MX_TIM2_Init();
 80020da:	f000 f8ef 	bl	80022bc <MX_TIM2_Init>
	MX_SPI2_Init();
 80020de:	f000 f8b7 	bl	8002250 <MX_SPI2_Init>
  /* USER CODE BEGIN 2 */
	MPU9250_Init();
 80020e2:	f7fe ff9f 	bl	8001024 <MPU9250_Init>
	HAL_Delay(2000);
 80020e6:	f44f 60fa 	mov.w	r0, #2000	; 0x7d0
 80020ea:	f000 fc29 	bl	8002940 <HAL_Delay>

	calibrateMPU9250(gyroBias,accelBias);
 80020ee:	4918      	ldr	r1, [pc, #96]	; (8002150 <main+0x90>)
 80020f0:	4818      	ldr	r0, [pc, #96]	; (8002154 <main+0x94>)
 80020f2:	f7ff fd07 	bl	8001b04 <calibrateMPU9250>

	initAK8963(magCalibration);
 80020f6:	4818      	ldr	r0, [pc, #96]	; (8002158 <main+0x98>)
 80020f8:	f7ff f864 	bl	80011c4 <initAK8963>
	magcalMPU9250(magBias, magScale);
 80020fc:	4917      	ldr	r1, [pc, #92]	; (800215c <main+0x9c>)
 80020fe:	4818      	ldr	r0, [pc, #96]	; (8002160 <main+0xa0>)
 8002100:	f7ff fb62 	bl	80017c8 <magcalMPU9250>
	//gxf=new_Kalman();
	//gyf=new_Kalman();
	//gzf=new_Kalman();
	adxl_init();
 8002104:	f7ff feea 	bl	8001edc <adxl_init>

  /* USER CODE END 2 */

  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
	float ahrs[]={0,0,0};
 8002108:	f04f 0300 	mov.w	r3, #0
 800210c:	67bb      	str	r3, [r7, #120]	; 0x78
 800210e:	f04f 0300 	mov.w	r3, #0
 8002112:	67fb      	str	r3, [r7, #124]	; 0x7c
 8002114:	f04f 0300 	mov.w	r3, #0
 8002118:	f8c7 3080 	str.w	r3, [r7, #128]	; 0x80
	int m=0;
 800211c:	2300      	movs	r3, #0
 800211e:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
	unsigned char buffer[30]="\0";
 8002122:	4b10      	ldr	r3, [pc, #64]	; (8002164 <main+0xa4>)
 8002124:	881b      	ldrh	r3, [r3, #0]
 8002126:	f8a7 3058 	strh.w	r3, [r7, #88]	; 0x58
 800212a:	f107 035a 	add.w	r3, r7, #90	; 0x5a
 800212e:	2200      	movs	r2, #0
 8002130:	601a      	str	r2, [r3, #0]
 8002132:	605a      	str	r2, [r3, #4]
 8002134:	609a      	str	r2, [r3, #8]
 8002136:	60da      	str	r2, [r3, #12]
 8002138:	611a      	str	r2, [r3, #16]
 800213a:	615a      	str	r2, [r3, #20]
 800213c:	619a      	str	r2, [r3, #24]
	while(1){
		getData_from_ADXL(100);
 800213e:	2064      	movs	r0, #100	; 0x64
 8002140:	f7ff fef6 	bl	8001f30 <getData_from_ADXL>
		HAL_Delay(1000);
 8002144:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 8002148:	f000 fbfa 	bl	8002940 <HAL_Delay>
		getData_from_ADXL(100);
 800214c:	e7f7      	b.n	800213e <main+0x7e>
 800214e:	bf00      	nop
 8002150:	20000230 	.word	0x20000230
 8002154:	20000224 	.word	0x20000224
 8002158:	20000218 	.word	0x20000218
 800215c:	20000248 	.word	0x20000248
 8002160:	2000023c 	.word	0x2000023c
 8002164:	08009aa4 	.word	0x08009aa4

08002168 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8002168:	b580      	push	{r7, lr}
 800216a:	b090      	sub	sp, #64	; 0x40
 800216c:	af00      	add	r7, sp, #0
	RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 800216e:	f107 0318 	add.w	r3, r7, #24
 8002172:	2228      	movs	r2, #40	; 0x28
 8002174:	2100      	movs	r1, #0
 8002176:	4618      	mov	r0, r3
 8002178:	f003 ff28 	bl	8005fcc <memset>
	RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 800217c:	1d3b      	adds	r3, r7, #4
 800217e:	2200      	movs	r2, #0
 8002180:	601a      	str	r2, [r3, #0]
 8002182:	605a      	str	r2, [r3, #4]
 8002184:	609a      	str	r2, [r3, #8]
 8002186:	60da      	str	r2, [r3, #12]
 8002188:	611a      	str	r2, [r3, #16]

	/** Initializes the RCC Oscillators according to the specified parameters
	* in the RCC_OscInitTypeDef structure.
	*/
	RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSE;
 800218a:	2301      	movs	r3, #1
 800218c:	61bb      	str	r3, [r7, #24]
	RCC_OscInitStruct.HSEState = RCC_HSE_ON;
 800218e:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 8002192:	61fb      	str	r3, [r7, #28]
	RCC_OscInitStruct.HSEPredivValue = RCC_HSE_PREDIV_DIV1;
 8002194:	2300      	movs	r3, #0
 8002196:	623b      	str	r3, [r7, #32]
	RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 8002198:	2301      	movs	r3, #1
 800219a:	62bb      	str	r3, [r7, #40]	; 0x28
	RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 800219c:	2302      	movs	r3, #2
 800219e:	637b      	str	r3, [r7, #52]	; 0x34
	RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 80021a0:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 80021a4:	63bb      	str	r3, [r7, #56]	; 0x38
	RCC_OscInitStruct.PLL.PLLMUL = RCC_PLL_MUL9;
 80021a6:	f44f 13e0 	mov.w	r3, #1835008	; 0x1c0000
 80021aa:	63fb      	str	r3, [r7, #60]	; 0x3c
	if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 80021ac:	f107 0318 	add.w	r3, r7, #24
 80021b0:	4618      	mov	r0, r3
 80021b2:	f001 feed 	bl	8003f90 <HAL_RCC_OscConfig>
 80021b6:	4603      	mov	r3, r0
 80021b8:	2b00      	cmp	r3, #0
 80021ba:	d001      	beq.n	80021c0 <SystemClock_Config+0x58>
	{
		Error_Handler();
 80021bc:	f000 f990 	bl	80024e0 <Error_Handler>
	}
	/** Initializes the CPU, AHB and APB buses clocks
	*/
	RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 80021c0:	230f      	movs	r3, #15
 80021c2:	607b      	str	r3, [r7, #4]
							  |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
	RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 80021c4:	2302      	movs	r3, #2
 80021c6:	60bb      	str	r3, [r7, #8]
	RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 80021c8:	2300      	movs	r3, #0
 80021ca:	60fb      	str	r3, [r7, #12]
	RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV2;
 80021cc:	f44f 6380 	mov.w	r3, #1024	; 0x400
 80021d0:	613b      	str	r3, [r7, #16]
	RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 80021d2:	2300      	movs	r3, #0
 80021d4:	617b      	str	r3, [r7, #20]

	if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_2) != HAL_OK)
 80021d6:	1d3b      	adds	r3, r7, #4
 80021d8:	2102      	movs	r1, #2
 80021da:	4618      	mov	r0, r3
 80021dc:	f002 f958 	bl	8004490 <HAL_RCC_ClockConfig>
 80021e0:	4603      	mov	r3, r0
 80021e2:	2b00      	cmp	r3, #0
 80021e4:	d001      	beq.n	80021ea <SystemClock_Config+0x82>
	{
		Error_Handler();
 80021e6:	f000 f97b 	bl	80024e0 <Error_Handler>
	}
}
 80021ea:	bf00      	nop
 80021ec:	3740      	adds	r7, #64	; 0x40
 80021ee:	46bd      	mov	sp, r7
 80021f0:	bd80      	pop	{r7, pc}
	...

080021f4 <MX_I2C1_Init>:
  * @brief I2C1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_I2C1_Init(void)
{
 80021f4:	b580      	push	{r7, lr}
 80021f6:	af00      	add	r7, sp, #0
  /* USER CODE END I2C1_Init 0 */

  /* USER CODE BEGIN I2C1_Init 1 */

  /* USER CODE END I2C1_Init 1 */
	hi2c1.Instance = I2C1;
 80021f8:	4b12      	ldr	r3, [pc, #72]	; (8002244 <MX_I2C1_Init+0x50>)
 80021fa:	4a13      	ldr	r2, [pc, #76]	; (8002248 <MX_I2C1_Init+0x54>)
 80021fc:	601a      	str	r2, [r3, #0]
	hi2c1.Init.ClockSpeed = 400000;
 80021fe:	4b11      	ldr	r3, [pc, #68]	; (8002244 <MX_I2C1_Init+0x50>)
 8002200:	4a12      	ldr	r2, [pc, #72]	; (800224c <MX_I2C1_Init+0x58>)
 8002202:	605a      	str	r2, [r3, #4]
	hi2c1.Init.DutyCycle = I2C_DUTYCYCLE_2;
 8002204:	4b0f      	ldr	r3, [pc, #60]	; (8002244 <MX_I2C1_Init+0x50>)
 8002206:	2200      	movs	r2, #0
 8002208:	609a      	str	r2, [r3, #8]
	hi2c1.Init.OwnAddress1 = 0;
 800220a:	4b0e      	ldr	r3, [pc, #56]	; (8002244 <MX_I2C1_Init+0x50>)
 800220c:	2200      	movs	r2, #0
 800220e:	60da      	str	r2, [r3, #12]
	hi2c1.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 8002210:	4b0c      	ldr	r3, [pc, #48]	; (8002244 <MX_I2C1_Init+0x50>)
 8002212:	f44f 4280 	mov.w	r2, #16384	; 0x4000
 8002216:	611a      	str	r2, [r3, #16]
	hi2c1.Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
 8002218:	4b0a      	ldr	r3, [pc, #40]	; (8002244 <MX_I2C1_Init+0x50>)
 800221a:	2200      	movs	r2, #0
 800221c:	615a      	str	r2, [r3, #20]
	hi2c1.Init.OwnAddress2 = 0;
 800221e:	4b09      	ldr	r3, [pc, #36]	; (8002244 <MX_I2C1_Init+0x50>)
 8002220:	2200      	movs	r2, #0
 8002222:	619a      	str	r2, [r3, #24]
	hi2c1.Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
 8002224:	4b07      	ldr	r3, [pc, #28]	; (8002244 <MX_I2C1_Init+0x50>)
 8002226:	2200      	movs	r2, #0
 8002228:	61da      	str	r2, [r3, #28]
	hi2c1.Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
 800222a:	4b06      	ldr	r3, [pc, #24]	; (8002244 <MX_I2C1_Init+0x50>)
 800222c:	2200      	movs	r2, #0
 800222e:	621a      	str	r2, [r3, #32]
	if (HAL_I2C_Init(&hi2c1) != HAL_OK)
 8002230:	4804      	ldr	r0, [pc, #16]	; (8002244 <MX_I2C1_Init+0x50>)
 8002232:	f000 febf 	bl	8002fb4 <HAL_I2C_Init>
 8002236:	4603      	mov	r3, r0
 8002238:	2b00      	cmp	r3, #0
 800223a:	d001      	beq.n	8002240 <MX_I2C1_Init+0x4c>
	{
		Error_Handler();
 800223c:	f000 f950 	bl	80024e0 <Error_Handler>
	}
  /* USER CODE BEGIN I2C1_Init 2 */

  /* USER CODE END I2C1_Init 2 */

}
 8002240:	bf00      	nop
 8002242:	bd80      	pop	{r7, pc}
 8002244:	200002e0 	.word	0x200002e0
 8002248:	40005400 	.word	0x40005400
 800224c:	00061a80 	.word	0x00061a80

08002250 <MX_SPI2_Init>:
  * @brief SPI2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_SPI2_Init(void)
{
 8002250:	b580      	push	{r7, lr}
 8002252:	af00      	add	r7, sp, #0

	/* USER CODE BEGIN SPI2_Init 1 */

	/* USER CODE END SPI2_Init 1 */
	/* SPI2 parameter configuration*/
	hspi2.Instance = SPI2;
 8002254:	4b17      	ldr	r3, [pc, #92]	; (80022b4 <MX_SPI2_Init+0x64>)
 8002256:	4a18      	ldr	r2, [pc, #96]	; (80022b8 <MX_SPI2_Init+0x68>)
 8002258:	601a      	str	r2, [r3, #0]
	hspi2.Init.Mode = SPI_MODE_MASTER;
 800225a:	4b16      	ldr	r3, [pc, #88]	; (80022b4 <MX_SPI2_Init+0x64>)
 800225c:	f44f 7282 	mov.w	r2, #260	; 0x104
 8002260:	605a      	str	r2, [r3, #4]
	hspi2.Init.Direction = SPI_DIRECTION_2LINES;
 8002262:	4b14      	ldr	r3, [pc, #80]	; (80022b4 <MX_SPI2_Init+0x64>)
 8002264:	2200      	movs	r2, #0
 8002266:	609a      	str	r2, [r3, #8]
	hspi2.Init.DataSize = SPI_DATASIZE_8BIT;
 8002268:	4b12      	ldr	r3, [pc, #72]	; (80022b4 <MX_SPI2_Init+0x64>)
 800226a:	2200      	movs	r2, #0
 800226c:	60da      	str	r2, [r3, #12]
	hspi2.Init.CLKPolarity = SPI_POLARITY_HIGH;
 800226e:	4b11      	ldr	r3, [pc, #68]	; (80022b4 <MX_SPI2_Init+0x64>)
 8002270:	2202      	movs	r2, #2
 8002272:	611a      	str	r2, [r3, #16]
	hspi2.Init.CLKPhase = SPI_PHASE_2EDGE;
 8002274:	4b0f      	ldr	r3, [pc, #60]	; (80022b4 <MX_SPI2_Init+0x64>)
 8002276:	2201      	movs	r2, #1
 8002278:	615a      	str	r2, [r3, #20]
	hspi2.Init.NSS = SPI_NSS_SOFT;
 800227a:	4b0e      	ldr	r3, [pc, #56]	; (80022b4 <MX_SPI2_Init+0x64>)
 800227c:	f44f 7200 	mov.w	r2, #512	; 0x200
 8002280:	619a      	str	r2, [r3, #24]
	hspi2.Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_16;
 8002282:	4b0c      	ldr	r3, [pc, #48]	; (80022b4 <MX_SPI2_Init+0x64>)
 8002284:	2218      	movs	r2, #24
 8002286:	61da      	str	r2, [r3, #28]
	hspi2.Init.FirstBit = SPI_FIRSTBIT_MSB;
 8002288:	4b0a      	ldr	r3, [pc, #40]	; (80022b4 <MX_SPI2_Init+0x64>)
 800228a:	2200      	movs	r2, #0
 800228c:	621a      	str	r2, [r3, #32]
	hspi2.Init.TIMode = SPI_TIMODE_DISABLE;
 800228e:	4b09      	ldr	r3, [pc, #36]	; (80022b4 <MX_SPI2_Init+0x64>)
 8002290:	2200      	movs	r2, #0
 8002292:	625a      	str	r2, [r3, #36]	; 0x24
	hspi2.Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8002294:	4b07      	ldr	r3, [pc, #28]	; (80022b4 <MX_SPI2_Init+0x64>)
 8002296:	2200      	movs	r2, #0
 8002298:	629a      	str	r2, [r3, #40]	; 0x28
	hspi2.Init.CRCPolynomial = 10;
 800229a:	4b06      	ldr	r3, [pc, #24]	; (80022b4 <MX_SPI2_Init+0x64>)
 800229c:	220a      	movs	r2, #10
 800229e:	62da      	str	r2, [r3, #44]	; 0x2c
	if (HAL_SPI_Init(&hspi2) != HAL_OK)
 80022a0:	4804      	ldr	r0, [pc, #16]	; (80022b4 <MX_SPI2_Init+0x64>)
 80022a2:	f002 fa91 	bl	80047c8 <HAL_SPI_Init>
 80022a6:	4603      	mov	r3, r0
 80022a8:	2b00      	cmp	r3, #0
 80022aa:	d001      	beq.n	80022b0 <MX_SPI2_Init+0x60>
	{
		Error_Handler();
 80022ac:	f000 f918 	bl	80024e0 <Error_Handler>
	}
	/* USER CODE BEGIN SPI2_Init 2 */

	/* USER CODE END SPI2_Init 2 */

}
 80022b0:	bf00      	nop
 80022b2:	bd80      	pop	{r7, pc}
 80022b4:	20000280 	.word	0x20000280
 80022b8:	40003800 	.word	0x40003800

080022bc <MX_TIM2_Init>:
  * @brief TIM2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM2_Init(void)
{
 80022bc:	b580      	push	{r7, lr}
 80022be:	b086      	sub	sp, #24
 80022c0:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM2_Init 0 */

  /* USER CODE END TIM2_Init 0 */

	TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 80022c2:	f107 0308 	add.w	r3, r7, #8
 80022c6:	2200      	movs	r2, #0
 80022c8:	601a      	str	r2, [r3, #0]
 80022ca:	605a      	str	r2, [r3, #4]
 80022cc:	609a      	str	r2, [r3, #8]
 80022ce:	60da      	str	r2, [r3, #12]
	TIM_MasterConfigTypeDef sMasterConfig = {0};
 80022d0:	463b      	mov	r3, r7
 80022d2:	2200      	movs	r2, #0
 80022d4:	601a      	str	r2, [r3, #0]
 80022d6:	605a      	str	r2, [r3, #4]

	/* USER CODE BEGIN TIM2_Init 1 */

	/* USER CODE END TIM2_Init 1 */
	htim2.Instance = TIM2;
 80022d8:	4b1e      	ldr	r3, [pc, #120]	; (8002354 <MX_TIM2_Init+0x98>)
 80022da:	f04f 4280 	mov.w	r2, #1073741824	; 0x40000000
 80022de:	601a      	str	r2, [r3, #0]
	htim2.Init.Prescaler = 36000;
 80022e0:	4b1c      	ldr	r3, [pc, #112]	; (8002354 <MX_TIM2_Init+0x98>)
 80022e2:	f648 42a0 	movw	r2, #36000	; 0x8ca0
 80022e6:	605a      	str	r2, [r3, #4]
	htim2.Init.CounterMode = TIM_COUNTERMODE_UP;
 80022e8:	4b1a      	ldr	r3, [pc, #104]	; (8002354 <MX_TIM2_Init+0x98>)
 80022ea:	2200      	movs	r2, #0
 80022ec:	609a      	str	r2, [r3, #8]
	htim2.Init.Period = 65535;
 80022ee:	4b19      	ldr	r3, [pc, #100]	; (8002354 <MX_TIM2_Init+0x98>)
 80022f0:	f64f 72ff 	movw	r2, #65535	; 0xffff
 80022f4:	60da      	str	r2, [r3, #12]
	htim2.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 80022f6:	4b17      	ldr	r3, [pc, #92]	; (8002354 <MX_TIM2_Init+0x98>)
 80022f8:	2200      	movs	r2, #0
 80022fa:	611a      	str	r2, [r3, #16]
	htim2.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 80022fc:	4b15      	ldr	r3, [pc, #84]	; (8002354 <MX_TIM2_Init+0x98>)
 80022fe:	2200      	movs	r2, #0
 8002300:	619a      	str	r2, [r3, #24]
	if (HAL_TIM_Base_Init(&htim2) != HAL_OK)
 8002302:	4814      	ldr	r0, [pc, #80]	; (8002354 <MX_TIM2_Init+0x98>)
 8002304:	f002 ffcc 	bl	80052a0 <HAL_TIM_Base_Init>
 8002308:	4603      	mov	r3, r0
 800230a:	2b00      	cmp	r3, #0
 800230c:	d001      	beq.n	8002312 <MX_TIM2_Init+0x56>
	{
		Error_Handler();
 800230e:	f000 f8e7 	bl	80024e0 <Error_Handler>
	}
	sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 8002312:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8002316:	60bb      	str	r3, [r7, #8]
	if (HAL_TIM_ConfigClockSource(&htim2, &sClockSourceConfig) != HAL_OK)
 8002318:	f107 0308 	add.w	r3, r7, #8
 800231c:	4619      	mov	r1, r3
 800231e:	480d      	ldr	r0, [pc, #52]	; (8002354 <MX_TIM2_Init+0x98>)
 8002320:	f003 f80d 	bl	800533e <HAL_TIM_ConfigClockSource>
 8002324:	4603      	mov	r3, r0
 8002326:	2b00      	cmp	r3, #0
 8002328:	d001      	beq.n	800232e <MX_TIM2_Init+0x72>
	{
		Error_Handler();
 800232a:	f000 f8d9 	bl	80024e0 <Error_Handler>
	}
	sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 800232e:	2300      	movs	r3, #0
 8002330:	603b      	str	r3, [r7, #0]
	sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8002332:	2300      	movs	r3, #0
 8002334:	607b      	str	r3, [r7, #4]
	if (HAL_TIMEx_MasterConfigSynchronization(&htim2, &sMasterConfig) != HAL_OK)
 8002336:	463b      	mov	r3, r7
 8002338:	4619      	mov	r1, r3
 800233a:	4806      	ldr	r0, [pc, #24]	; (8002354 <MX_TIM2_Init+0x98>)
 800233c:	f003 f9ae 	bl	800569c <HAL_TIMEx_MasterConfigSynchronization>
 8002340:	4603      	mov	r3, r0
 8002342:	2b00      	cmp	r3, #0
 8002344:	d001      	beq.n	800234a <MX_TIM2_Init+0x8e>
	{
		Error_Handler();
 8002346:	f000 f8cb 	bl	80024e0 <Error_Handler>
	}
  /* USER CODE BEGIN TIM2_Init 2 */

  /* USER CODE END TIM2_Init 2 */

}
 800234a:	bf00      	nop
 800234c:	3718      	adds	r7, #24
 800234e:	46bd      	mov	sp, r7
 8002350:	bd80      	pop	{r7, pc}
 8002352:	bf00      	nop
 8002354:	20000378 	.word	0x20000378

08002358 <MX_USART2_UART_Init>:
  * @brief USART2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART2_UART_Init(void)
{
 8002358:	b580      	push	{r7, lr}
 800235a:	af00      	add	r7, sp, #0
  /* USER CODE END USART2_Init 0 */

  /* USER CODE BEGIN USART2_Init 1 */

  /* USER CODE END USART2_Init 1 */
	huart2.Instance = USART2;
 800235c:	4b11      	ldr	r3, [pc, #68]	; (80023a4 <MX_USART2_UART_Init+0x4c>)
 800235e:	4a12      	ldr	r2, [pc, #72]	; (80023a8 <MX_USART2_UART_Init+0x50>)
 8002360:	601a      	str	r2, [r3, #0]
	huart2.Init.BaudRate = 9600;
 8002362:	4b10      	ldr	r3, [pc, #64]	; (80023a4 <MX_USART2_UART_Init+0x4c>)
 8002364:	f44f 5216 	mov.w	r2, #9600	; 0x2580
 8002368:	605a      	str	r2, [r3, #4]
	huart2.Init.WordLength = UART_WORDLENGTH_8B;
 800236a:	4b0e      	ldr	r3, [pc, #56]	; (80023a4 <MX_USART2_UART_Init+0x4c>)
 800236c:	2200      	movs	r2, #0
 800236e:	609a      	str	r2, [r3, #8]
	huart2.Init.StopBits = UART_STOPBITS_1;
 8002370:	4b0c      	ldr	r3, [pc, #48]	; (80023a4 <MX_USART2_UART_Init+0x4c>)
 8002372:	2200      	movs	r2, #0
 8002374:	60da      	str	r2, [r3, #12]
	huart2.Init.Parity = UART_PARITY_NONE;
 8002376:	4b0b      	ldr	r3, [pc, #44]	; (80023a4 <MX_USART2_UART_Init+0x4c>)
 8002378:	2200      	movs	r2, #0
 800237a:	611a      	str	r2, [r3, #16]
	huart2.Init.Mode = UART_MODE_TX_RX;
 800237c:	4b09      	ldr	r3, [pc, #36]	; (80023a4 <MX_USART2_UART_Init+0x4c>)
 800237e:	220c      	movs	r2, #12
 8002380:	615a      	str	r2, [r3, #20]
	huart2.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8002382:	4b08      	ldr	r3, [pc, #32]	; (80023a4 <MX_USART2_UART_Init+0x4c>)
 8002384:	2200      	movs	r2, #0
 8002386:	619a      	str	r2, [r3, #24]
	huart2.Init.OverSampling = UART_OVERSAMPLING_16;
 8002388:	4b06      	ldr	r3, [pc, #24]	; (80023a4 <MX_USART2_UART_Init+0x4c>)
 800238a:	2200      	movs	r2, #0
 800238c:	61da      	str	r2, [r3, #28]
	if (HAL_UART_Init(&huart2) != HAL_OK)
 800238e:	4805      	ldr	r0, [pc, #20]	; (80023a4 <MX_USART2_UART_Init+0x4c>)
 8002390:	f003 f9e2 	bl	8005758 <HAL_UART_Init>
 8002394:	4603      	mov	r3, r0
 8002396:	2b00      	cmp	r3, #0
 8002398:	d001      	beq.n	800239e <MX_USART2_UART_Init+0x46>
	{
		Error_Handler();
 800239a:	f000 f8a1 	bl	80024e0 <Error_Handler>
	}
  /* USER CODE BEGIN USART2_Init 2 */

  /* USER CODE END USART2_Init 2 */

}
 800239e:	bf00      	nop
 80023a0:	bd80      	pop	{r7, pc}
 80023a2:	bf00      	nop
 80023a4:	200003c0 	.word	0x200003c0
 80023a8:	40004400 	.word	0x40004400

080023ac <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 80023ac:	b580      	push	{r7, lr}
 80023ae:	b088      	sub	sp, #32
 80023b0:	af00      	add	r7, sp, #0
	GPIO_InitTypeDef GPIO_InitStruct = {0};
 80023b2:	f107 0310 	add.w	r3, r7, #16
 80023b6:	2200      	movs	r2, #0
 80023b8:	601a      	str	r2, [r3, #0]
 80023ba:	605a      	str	r2, [r3, #4]
 80023bc:	609a      	str	r2, [r3, #8]
 80023be:	60da      	str	r2, [r3, #12]

	/* GPIO Ports Clock Enable */
	__HAL_RCC_GPIOC_CLK_ENABLE();
 80023c0:	4b42      	ldr	r3, [pc, #264]	; (80024cc <MX_GPIO_Init+0x120>)
 80023c2:	699b      	ldr	r3, [r3, #24]
 80023c4:	4a41      	ldr	r2, [pc, #260]	; (80024cc <MX_GPIO_Init+0x120>)
 80023c6:	f043 0310 	orr.w	r3, r3, #16
 80023ca:	6193      	str	r3, [r2, #24]
 80023cc:	4b3f      	ldr	r3, [pc, #252]	; (80024cc <MX_GPIO_Init+0x120>)
 80023ce:	699b      	ldr	r3, [r3, #24]
 80023d0:	f003 0310 	and.w	r3, r3, #16
 80023d4:	60fb      	str	r3, [r7, #12]
 80023d6:	68fb      	ldr	r3, [r7, #12]
	__HAL_RCC_GPIOD_CLK_ENABLE();
 80023d8:	4b3c      	ldr	r3, [pc, #240]	; (80024cc <MX_GPIO_Init+0x120>)
 80023da:	699b      	ldr	r3, [r3, #24]
 80023dc:	4a3b      	ldr	r2, [pc, #236]	; (80024cc <MX_GPIO_Init+0x120>)
 80023de:	f043 0320 	orr.w	r3, r3, #32
 80023e2:	6193      	str	r3, [r2, #24]
 80023e4:	4b39      	ldr	r3, [pc, #228]	; (80024cc <MX_GPIO_Init+0x120>)
 80023e6:	699b      	ldr	r3, [r3, #24]
 80023e8:	f003 0320 	and.w	r3, r3, #32
 80023ec:	60bb      	str	r3, [r7, #8]
 80023ee:	68bb      	ldr	r3, [r7, #8]
	__HAL_RCC_GPIOA_CLK_ENABLE();
 80023f0:	4b36      	ldr	r3, [pc, #216]	; (80024cc <MX_GPIO_Init+0x120>)
 80023f2:	699b      	ldr	r3, [r3, #24]
 80023f4:	4a35      	ldr	r2, [pc, #212]	; (80024cc <MX_GPIO_Init+0x120>)
 80023f6:	f043 0304 	orr.w	r3, r3, #4
 80023fa:	6193      	str	r3, [r2, #24]
 80023fc:	4b33      	ldr	r3, [pc, #204]	; (80024cc <MX_GPIO_Init+0x120>)
 80023fe:	699b      	ldr	r3, [r3, #24]
 8002400:	f003 0304 	and.w	r3, r3, #4
 8002404:	607b      	str	r3, [r7, #4]
 8002406:	687b      	ldr	r3, [r7, #4]
	__HAL_RCC_GPIOB_CLK_ENABLE();
 8002408:	4b30      	ldr	r3, [pc, #192]	; (80024cc <MX_GPIO_Init+0x120>)
 800240a:	699b      	ldr	r3, [r3, #24]
 800240c:	4a2f      	ldr	r2, [pc, #188]	; (80024cc <MX_GPIO_Init+0x120>)
 800240e:	f043 0308 	orr.w	r3, r3, #8
 8002412:	6193      	str	r3, [r2, #24]
 8002414:	4b2d      	ldr	r3, [pc, #180]	; (80024cc <MX_GPIO_Init+0x120>)
 8002416:	699b      	ldr	r3, [r3, #24]
 8002418:	f003 0308 	and.w	r3, r3, #8
 800241c:	603b      	str	r3, [r7, #0]
 800241e:	683b      	ldr	r3, [r7, #0]

	/*Configure GPIO pin Output Level */
	HAL_GPIO_WritePin(GPIOC, GPIO_PIN_13, GPIO_PIN_RESET);
 8002420:	2200      	movs	r2, #0
 8002422:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 8002426:	482a      	ldr	r0, [pc, #168]	; (80024d0 <MX_GPIO_Init+0x124>)
 8002428:	f000 fd8a 	bl	8002f40 <HAL_GPIO_WritePin>

	/*Configure GPIO pin Output Level */
	HAL_GPIO_WritePin(GPIOA, GPIO_PIN_5|GPIO_PIN_7, GPIO_PIN_RESET);
 800242c:	2200      	movs	r2, #0
 800242e:	21a0      	movs	r1, #160	; 0xa0
 8002430:	4828      	ldr	r0, [pc, #160]	; (80024d4 <MX_GPIO_Init+0x128>)
 8002432:	f000 fd85 	bl	8002f40 <HAL_GPIO_WritePin>

	/*Configure GPIO pin Output Level */
	HAL_GPIO_WritePin(GPIOB, GPIO_PIN_9, GPIO_PIN_RESET);
 8002436:	2200      	movs	r2, #0
 8002438:	f44f 7100 	mov.w	r1, #512	; 0x200
 800243c:	4826      	ldr	r0, [pc, #152]	; (80024d8 <MX_GPIO_Init+0x12c>)
 800243e:	f000 fd7f 	bl	8002f40 <HAL_GPIO_WritePin>

	/*Configure GPIO pin : PC13 */
	GPIO_InitStruct.Pin = GPIO_PIN_13;
 8002442:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 8002446:	613b      	str	r3, [r7, #16]
	GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8002448:	2301      	movs	r3, #1
 800244a:	617b      	str	r3, [r7, #20]
	GPIO_InitStruct.Pull = GPIO_NOPULL;
 800244c:	2300      	movs	r3, #0
 800244e:	61bb      	str	r3, [r7, #24]
	GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8002450:	2302      	movs	r3, #2
 8002452:	61fb      	str	r3, [r7, #28]
	HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8002454:	f107 0310 	add.w	r3, r7, #16
 8002458:	4619      	mov	r1, r3
 800245a:	481d      	ldr	r0, [pc, #116]	; (80024d0 <MX_GPIO_Init+0x124>)
 800245c:	f000 fc16 	bl	8002c8c <HAL_GPIO_Init>

	/*Configure GPIO pin : PA1 */
	GPIO_InitStruct.Pin = GPIO_PIN_1;
 8002460:	2302      	movs	r3, #2
 8002462:	613b      	str	r3, [r7, #16]
	GPIO_InitStruct.Mode = GPIO_MODE_IT_RISING;
 8002464:	4b1d      	ldr	r3, [pc, #116]	; (80024dc <MX_GPIO_Init+0x130>)
 8002466:	617b      	str	r3, [r7, #20]
	GPIO_InitStruct.Pull = GPIO_PULLUP;
 8002468:	2301      	movs	r3, #1
 800246a:	61bb      	str	r3, [r7, #24]
	HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800246c:	f107 0310 	add.w	r3, r7, #16
 8002470:	4619      	mov	r1, r3
 8002472:	4818      	ldr	r0, [pc, #96]	; (80024d4 <MX_GPIO_Init+0x128>)
 8002474:	f000 fc0a 	bl	8002c8c <HAL_GPIO_Init>

	/*Configure GPIO pins : PA5 PA7 */
	GPIO_InitStruct.Pin = GPIO_PIN_5|GPIO_PIN_7;
 8002478:	23a0      	movs	r3, #160	; 0xa0
 800247a:	613b      	str	r3, [r7, #16]
	GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 800247c:	2301      	movs	r3, #1
 800247e:	617b      	str	r3, [r7, #20]
	GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002480:	2300      	movs	r3, #0
 8002482:	61bb      	str	r3, [r7, #24]
	GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8002484:	2302      	movs	r3, #2
 8002486:	61fb      	str	r3, [r7, #28]
	HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8002488:	f107 0310 	add.w	r3, r7, #16
 800248c:	4619      	mov	r1, r3
 800248e:	4811      	ldr	r0, [pc, #68]	; (80024d4 <MX_GPIO_Init+0x128>)
 8002490:	f000 fbfc 	bl	8002c8c <HAL_GPIO_Init>

	/*Configure GPIO pin : PB9 */
	GPIO_InitStruct.Pin = GPIO_PIN_9;
 8002494:	f44f 7300 	mov.w	r3, #512	; 0x200
 8002498:	613b      	str	r3, [r7, #16]
	GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 800249a:	2301      	movs	r3, #1
 800249c:	617b      	str	r3, [r7, #20]
	GPIO_InitStruct.Pull = GPIO_NOPULL;
 800249e:	2300      	movs	r3, #0
 80024a0:	61bb      	str	r3, [r7, #24]
	GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80024a2:	2302      	movs	r3, #2
 80024a4:	61fb      	str	r3, [r7, #28]
	HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 80024a6:	f107 0310 	add.w	r3, r7, #16
 80024aa:	4619      	mov	r1, r3
 80024ac:	480a      	ldr	r0, [pc, #40]	; (80024d8 <MX_GPIO_Init+0x12c>)
 80024ae:	f000 fbed 	bl	8002c8c <HAL_GPIO_Init>

	/* EXTI interrupt init*/
	HAL_NVIC_SetPriority(EXTI1_IRQn, 0, 0);
 80024b2:	2200      	movs	r2, #0
 80024b4:	2100      	movs	r1, #0
 80024b6:	2007      	movs	r0, #7
 80024b8:	f000 fb3b 	bl	8002b32 <HAL_NVIC_SetPriority>
	HAL_NVIC_EnableIRQ(EXTI1_IRQn);
 80024bc:	2007      	movs	r0, #7
 80024be:	f000 fb54 	bl	8002b6a <HAL_NVIC_EnableIRQ>

}
 80024c2:	bf00      	nop
 80024c4:	3720      	adds	r7, #32
 80024c6:	46bd      	mov	sp, r7
 80024c8:	bd80      	pop	{r7, pc}
 80024ca:	bf00      	nop
 80024cc:	40021000 	.word	0x40021000
 80024d0:	40011000 	.word	0x40011000
 80024d4:	40010800 	.word	0x40010800
 80024d8:	40010c00 	.word	0x40010c00
 80024dc:	10110000 	.word	0x10110000

080024e0 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 80024e0:	b480      	push	{r7}
 80024e2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */

  /* USER CODE END Error_Handler_Debug */
}
 80024e4:	bf00      	nop
 80024e6:	46bd      	mov	sp, r7
 80024e8:	bc80      	pop	{r7}
 80024ea:	4770      	bx	lr

080024ec <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 80024ec:	b480      	push	{r7}
 80024ee:	b085      	sub	sp, #20
 80024f0:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_AFIO_CLK_ENABLE();
 80024f2:	4b15      	ldr	r3, [pc, #84]	; (8002548 <HAL_MspInit+0x5c>)
 80024f4:	699b      	ldr	r3, [r3, #24]
 80024f6:	4a14      	ldr	r2, [pc, #80]	; (8002548 <HAL_MspInit+0x5c>)
 80024f8:	f043 0301 	orr.w	r3, r3, #1
 80024fc:	6193      	str	r3, [r2, #24]
 80024fe:	4b12      	ldr	r3, [pc, #72]	; (8002548 <HAL_MspInit+0x5c>)
 8002500:	699b      	ldr	r3, [r3, #24]
 8002502:	f003 0301 	and.w	r3, r3, #1
 8002506:	60bb      	str	r3, [r7, #8]
 8002508:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_PWR_CLK_ENABLE();
 800250a:	4b0f      	ldr	r3, [pc, #60]	; (8002548 <HAL_MspInit+0x5c>)
 800250c:	69db      	ldr	r3, [r3, #28]
 800250e:	4a0e      	ldr	r2, [pc, #56]	; (8002548 <HAL_MspInit+0x5c>)
 8002510:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8002514:	61d3      	str	r3, [r2, #28]
 8002516:	4b0c      	ldr	r3, [pc, #48]	; (8002548 <HAL_MspInit+0x5c>)
 8002518:	69db      	ldr	r3, [r3, #28]
 800251a:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800251e:	607b      	str	r3, [r7, #4]
 8002520:	687b      	ldr	r3, [r7, #4]

  /* System interrupt init*/

  /** NOJTAG: JTAG-DP Disabled and SW-DP Enabled
  */
  __HAL_AFIO_REMAP_SWJ_NOJTAG();
 8002522:	4b0a      	ldr	r3, [pc, #40]	; (800254c <HAL_MspInit+0x60>)
 8002524:	685b      	ldr	r3, [r3, #4]
 8002526:	60fb      	str	r3, [r7, #12]
 8002528:	68fb      	ldr	r3, [r7, #12]
 800252a:	f023 63e0 	bic.w	r3, r3, #117440512	; 0x7000000
 800252e:	60fb      	str	r3, [r7, #12]
 8002530:	68fb      	ldr	r3, [r7, #12]
 8002532:	f043 7300 	orr.w	r3, r3, #33554432	; 0x2000000
 8002536:	60fb      	str	r3, [r7, #12]
 8002538:	4a04      	ldr	r2, [pc, #16]	; (800254c <HAL_MspInit+0x60>)
 800253a:	68fb      	ldr	r3, [r7, #12]
 800253c:	6053      	str	r3, [r2, #4]

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 800253e:	bf00      	nop
 8002540:	3714      	adds	r7, #20
 8002542:	46bd      	mov	sp, r7
 8002544:	bc80      	pop	{r7}
 8002546:	4770      	bx	lr
 8002548:	40021000 	.word	0x40021000
 800254c:	40010000 	.word	0x40010000

08002550 <HAL_I2C_MspInit>:
* This function configures the hardware resources used in this example
* @param hi2c: I2C handle pointer
* @retval None
*/
void HAL_I2C_MspInit(I2C_HandleTypeDef* hi2c)
{
 8002550:	b580      	push	{r7, lr}
 8002552:	b088      	sub	sp, #32
 8002554:	af00      	add	r7, sp, #0
 8002556:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8002558:	f107 0310 	add.w	r3, r7, #16
 800255c:	2200      	movs	r2, #0
 800255e:	601a      	str	r2, [r3, #0]
 8002560:	605a      	str	r2, [r3, #4]
 8002562:	609a      	str	r2, [r3, #8]
 8002564:	60da      	str	r2, [r3, #12]
  if(hi2c->Instance==I2C1)
 8002566:	687b      	ldr	r3, [r7, #4]
 8002568:	681b      	ldr	r3, [r3, #0]
 800256a:	4a15      	ldr	r2, [pc, #84]	; (80025c0 <HAL_I2C_MspInit+0x70>)
 800256c:	4293      	cmp	r3, r2
 800256e:	d123      	bne.n	80025b8 <HAL_I2C_MspInit+0x68>
  {
  /* USER CODE BEGIN I2C1_MspInit 0 */

  /* USER CODE END I2C1_MspInit 0 */

    __HAL_RCC_GPIOB_CLK_ENABLE();
 8002570:	4b14      	ldr	r3, [pc, #80]	; (80025c4 <HAL_I2C_MspInit+0x74>)
 8002572:	699b      	ldr	r3, [r3, #24]
 8002574:	4a13      	ldr	r2, [pc, #76]	; (80025c4 <HAL_I2C_MspInit+0x74>)
 8002576:	f043 0308 	orr.w	r3, r3, #8
 800257a:	6193      	str	r3, [r2, #24]
 800257c:	4b11      	ldr	r3, [pc, #68]	; (80025c4 <HAL_I2C_MspInit+0x74>)
 800257e:	699b      	ldr	r3, [r3, #24]
 8002580:	f003 0308 	and.w	r3, r3, #8
 8002584:	60fb      	str	r3, [r7, #12]
 8002586:	68fb      	ldr	r3, [r7, #12]
    /**I2C1 GPIO Configuration
    PB6     ------> I2C1_SCL
    PB7     ------> I2C1_SDA
    */
    GPIO_InitStruct.Pin = GPIO_PIN_6|GPIO_PIN_7;
 8002588:	23c0      	movs	r3, #192	; 0xc0
 800258a:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 800258c:	2312      	movs	r3, #18
 800258e:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 8002590:	2303      	movs	r3, #3
 8002592:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8002594:	f107 0310 	add.w	r3, r7, #16
 8002598:	4619      	mov	r1, r3
 800259a:	480b      	ldr	r0, [pc, #44]	; (80025c8 <HAL_I2C_MspInit+0x78>)
 800259c:	f000 fb76 	bl	8002c8c <HAL_GPIO_Init>

    /* Peripheral clock enable */
    __HAL_RCC_I2C1_CLK_ENABLE();
 80025a0:	4b08      	ldr	r3, [pc, #32]	; (80025c4 <HAL_I2C_MspInit+0x74>)
 80025a2:	69db      	ldr	r3, [r3, #28]
 80025a4:	4a07      	ldr	r2, [pc, #28]	; (80025c4 <HAL_I2C_MspInit+0x74>)
 80025a6:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 80025aa:	61d3      	str	r3, [r2, #28]
 80025ac:	4b05      	ldr	r3, [pc, #20]	; (80025c4 <HAL_I2C_MspInit+0x74>)
 80025ae:	69db      	ldr	r3, [r3, #28]
 80025b0:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 80025b4:	60bb      	str	r3, [r7, #8]
 80025b6:	68bb      	ldr	r3, [r7, #8]
  /* USER CODE BEGIN I2C1_MspInit 1 */

  /* USER CODE END I2C1_MspInit 1 */
  }

}
 80025b8:	bf00      	nop
 80025ba:	3720      	adds	r7, #32
 80025bc:	46bd      	mov	sp, r7
 80025be:	bd80      	pop	{r7, pc}
 80025c0:	40005400 	.word	0x40005400
 80025c4:	40021000 	.word	0x40021000
 80025c8:	40010c00 	.word	0x40010c00

080025cc <HAL_SPI_MspInit>:
* This function configures the hardware resources used in this example
* @param hspi: SPI handle pointer
* @retval None
*/
void HAL_SPI_MspInit(SPI_HandleTypeDef* hspi)
{
 80025cc:	b580      	push	{r7, lr}
 80025ce:	b088      	sub	sp, #32
 80025d0:	af00      	add	r7, sp, #0
 80025d2:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80025d4:	f107 0310 	add.w	r3, r7, #16
 80025d8:	2200      	movs	r2, #0
 80025da:	601a      	str	r2, [r3, #0]
 80025dc:	605a      	str	r2, [r3, #4]
 80025de:	609a      	str	r2, [r3, #8]
 80025e0:	60da      	str	r2, [r3, #12]
  if(hspi->Instance==SPI2)
 80025e2:	687b      	ldr	r3, [r7, #4]
 80025e4:	681b      	ldr	r3, [r3, #0]
 80025e6:	4a1c      	ldr	r2, [pc, #112]	; (8002658 <HAL_SPI_MspInit+0x8c>)
 80025e8:	4293      	cmp	r3, r2
 80025ea:	d131      	bne.n	8002650 <HAL_SPI_MspInit+0x84>
  {
  /* USER CODE BEGIN SPI2_MspInit 0 */

  /* USER CODE END SPI2_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_SPI2_CLK_ENABLE();
 80025ec:	4b1b      	ldr	r3, [pc, #108]	; (800265c <HAL_SPI_MspInit+0x90>)
 80025ee:	69db      	ldr	r3, [r3, #28]
 80025f0:	4a1a      	ldr	r2, [pc, #104]	; (800265c <HAL_SPI_MspInit+0x90>)
 80025f2:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 80025f6:	61d3      	str	r3, [r2, #28]
 80025f8:	4b18      	ldr	r3, [pc, #96]	; (800265c <HAL_SPI_MspInit+0x90>)
 80025fa:	69db      	ldr	r3, [r3, #28]
 80025fc:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8002600:	60fb      	str	r3, [r7, #12]
 8002602:	68fb      	ldr	r3, [r7, #12]

    __HAL_RCC_GPIOB_CLK_ENABLE();
 8002604:	4b15      	ldr	r3, [pc, #84]	; (800265c <HAL_SPI_MspInit+0x90>)
 8002606:	699b      	ldr	r3, [r3, #24]
 8002608:	4a14      	ldr	r2, [pc, #80]	; (800265c <HAL_SPI_MspInit+0x90>)
 800260a:	f043 0308 	orr.w	r3, r3, #8
 800260e:	6193      	str	r3, [r2, #24]
 8002610:	4b12      	ldr	r3, [pc, #72]	; (800265c <HAL_SPI_MspInit+0x90>)
 8002612:	699b      	ldr	r3, [r3, #24]
 8002614:	f003 0308 	and.w	r3, r3, #8
 8002618:	60bb      	str	r3, [r7, #8]
 800261a:	68bb      	ldr	r3, [r7, #8]
    /**SPI2 GPIO Configuration
    PB13     ------> SPI2_SCK
    PB14     ------> SPI2_MISO
    PB15     ------> SPI2_MOSI
    */
    GPIO_InitStruct.Pin = GPIO_PIN_13|GPIO_PIN_15;
 800261c:	f44f 4320 	mov.w	r3, #40960	; 0xa000
 8002620:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8002622:	2302      	movs	r3, #2
 8002624:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 8002626:	2303      	movs	r3, #3
 8002628:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 800262a:	f107 0310 	add.w	r3, r7, #16
 800262e:	4619      	mov	r1, r3
 8002630:	480b      	ldr	r0, [pc, #44]	; (8002660 <HAL_SPI_MspInit+0x94>)
 8002632:	f000 fb2b 	bl	8002c8c <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_14;
 8002636:	f44f 4380 	mov.w	r3, #16384	; 0x4000
 800263a:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 800263c:	2300      	movs	r3, #0
 800263e:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002640:	2300      	movs	r3, #0
 8002642:	61bb      	str	r3, [r7, #24]
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8002644:	f107 0310 	add.w	r3, r7, #16
 8002648:	4619      	mov	r1, r3
 800264a:	4805      	ldr	r0, [pc, #20]	; (8002660 <HAL_SPI_MspInit+0x94>)
 800264c:	f000 fb1e 	bl	8002c8c <HAL_GPIO_Init>
  /* USER CODE BEGIN SPI2_MspInit 1 */

  /* USER CODE END SPI2_MspInit 1 */
  }

}
 8002650:	bf00      	nop
 8002652:	3720      	adds	r7, #32
 8002654:	46bd      	mov	sp, r7
 8002656:	bd80      	pop	{r7, pc}
 8002658:	40003800 	.word	0x40003800
 800265c:	40021000 	.word	0x40021000
 8002660:	40010c00 	.word	0x40010c00

08002664 <HAL_TIM_Base_MspInit>:
* This function configures the hardware resources used in this example
* @param htim_base: TIM_Base handle pointer
* @retval None
*/
void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* htim_base)
{
 8002664:	b480      	push	{r7}
 8002666:	b085      	sub	sp, #20
 8002668:	af00      	add	r7, sp, #0
 800266a:	6078      	str	r0, [r7, #4]
  if(htim_base->Instance==TIM2)
 800266c:	687b      	ldr	r3, [r7, #4]
 800266e:	681b      	ldr	r3, [r3, #0]
 8002670:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8002674:	d10b      	bne.n	800268e <HAL_TIM_Base_MspInit+0x2a>
  {
  /* USER CODE BEGIN TIM2_MspInit 0 */

  /* USER CODE END TIM2_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM2_CLK_ENABLE();
 8002676:	4b08      	ldr	r3, [pc, #32]	; (8002698 <HAL_TIM_Base_MspInit+0x34>)
 8002678:	69db      	ldr	r3, [r3, #28]
 800267a:	4a07      	ldr	r2, [pc, #28]	; (8002698 <HAL_TIM_Base_MspInit+0x34>)
 800267c:	f043 0301 	orr.w	r3, r3, #1
 8002680:	61d3      	str	r3, [r2, #28]
 8002682:	4b05      	ldr	r3, [pc, #20]	; (8002698 <HAL_TIM_Base_MspInit+0x34>)
 8002684:	69db      	ldr	r3, [r3, #28]
 8002686:	f003 0301 	and.w	r3, r3, #1
 800268a:	60fb      	str	r3, [r7, #12]
 800268c:	68fb      	ldr	r3, [r7, #12]
  /* USER CODE BEGIN TIM2_MspInit 1 */

  /* USER CODE END TIM2_MspInit 1 */
  }

}
 800268e:	bf00      	nop
 8002690:	3714      	adds	r7, #20
 8002692:	46bd      	mov	sp, r7
 8002694:	bc80      	pop	{r7}
 8002696:	4770      	bx	lr
 8002698:	40021000 	.word	0x40021000

0800269c <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 800269c:	b580      	push	{r7, lr}
 800269e:	b088      	sub	sp, #32
 80026a0:	af00      	add	r7, sp, #0
 80026a2:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80026a4:	f107 0310 	add.w	r3, r7, #16
 80026a8:	2200      	movs	r2, #0
 80026aa:	601a      	str	r2, [r3, #0]
 80026ac:	605a      	str	r2, [r3, #4]
 80026ae:	609a      	str	r2, [r3, #8]
 80026b0:	60da      	str	r2, [r3, #12]
  if(huart->Instance==USART2)
 80026b2:	687b      	ldr	r3, [r7, #4]
 80026b4:	681b      	ldr	r3, [r3, #0]
 80026b6:	4a1f      	ldr	r2, [pc, #124]	; (8002734 <HAL_UART_MspInit+0x98>)
 80026b8:	4293      	cmp	r3, r2
 80026ba:	d137      	bne.n	800272c <HAL_UART_MspInit+0x90>
  {
  /* USER CODE BEGIN USART2_MspInit 0 */

  /* USER CODE END USART2_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_USART2_CLK_ENABLE();
 80026bc:	4b1e      	ldr	r3, [pc, #120]	; (8002738 <HAL_UART_MspInit+0x9c>)
 80026be:	69db      	ldr	r3, [r3, #28]
 80026c0:	4a1d      	ldr	r2, [pc, #116]	; (8002738 <HAL_UART_MspInit+0x9c>)
 80026c2:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 80026c6:	61d3      	str	r3, [r2, #28]
 80026c8:	4b1b      	ldr	r3, [pc, #108]	; (8002738 <HAL_UART_MspInit+0x9c>)
 80026ca:	69db      	ldr	r3, [r3, #28]
 80026cc:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80026d0:	60fb      	str	r3, [r7, #12]
 80026d2:	68fb      	ldr	r3, [r7, #12]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 80026d4:	4b18      	ldr	r3, [pc, #96]	; (8002738 <HAL_UART_MspInit+0x9c>)
 80026d6:	699b      	ldr	r3, [r3, #24]
 80026d8:	4a17      	ldr	r2, [pc, #92]	; (8002738 <HAL_UART_MspInit+0x9c>)
 80026da:	f043 0304 	orr.w	r3, r3, #4
 80026de:	6193      	str	r3, [r2, #24]
 80026e0:	4b15      	ldr	r3, [pc, #84]	; (8002738 <HAL_UART_MspInit+0x9c>)
 80026e2:	699b      	ldr	r3, [r3, #24]
 80026e4:	f003 0304 	and.w	r3, r3, #4
 80026e8:	60bb      	str	r3, [r7, #8]
 80026ea:	68bb      	ldr	r3, [r7, #8]
    /**USART2 GPIO Configuration
    PA2     ------> USART2_TX
    PA3     ------> USART2_RX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_2;
 80026ec:	2304      	movs	r3, #4
 80026ee:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80026f0:	2302      	movs	r3, #2
 80026f2:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 80026f4:	2303      	movs	r3, #3
 80026f6:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80026f8:	f107 0310 	add.w	r3, r7, #16
 80026fc:	4619      	mov	r1, r3
 80026fe:	480f      	ldr	r0, [pc, #60]	; (800273c <HAL_UART_MspInit+0xa0>)
 8002700:	f000 fac4 	bl	8002c8c <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_3;
 8002704:	2308      	movs	r3, #8
 8002706:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8002708:	2300      	movs	r3, #0
 800270a:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800270c:	2300      	movs	r3, #0
 800270e:	61bb      	str	r3, [r7, #24]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8002710:	f107 0310 	add.w	r3, r7, #16
 8002714:	4619      	mov	r1, r3
 8002716:	4809      	ldr	r0, [pc, #36]	; (800273c <HAL_UART_MspInit+0xa0>)
 8002718:	f000 fab8 	bl	8002c8c <HAL_GPIO_Init>

    /* USART2 interrupt Init */
    HAL_NVIC_SetPriority(USART2_IRQn, 0, 0);
 800271c:	2200      	movs	r2, #0
 800271e:	2100      	movs	r1, #0
 8002720:	2026      	movs	r0, #38	; 0x26
 8002722:	f000 fa06 	bl	8002b32 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(USART2_IRQn);
 8002726:	2026      	movs	r0, #38	; 0x26
 8002728:	f000 fa1f 	bl	8002b6a <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN USART2_MspInit 1 */

  /* USER CODE END USART2_MspInit 1 */
  }

}
 800272c:	bf00      	nop
 800272e:	3720      	adds	r7, #32
 8002730:	46bd      	mov	sp, r7
 8002732:	bd80      	pop	{r7, pc}
 8002734:	40004400 	.word	0x40004400
 8002738:	40021000 	.word	0x40021000
 800273c:	40010800 	.word	0x40010800

08002740 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8002740:	b480      	push	{r7}
 8002742:	af00      	add	r7, sp, #0

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */

  /* USER CODE END NonMaskableInt_IRQn 1 */
}
 8002744:	bf00      	nop
 8002746:	46bd      	mov	sp, r7
 8002748:	bc80      	pop	{r7}
 800274a:	4770      	bx	lr

0800274c <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 800274c:	b480      	push	{r7}
 800274e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8002750:	e7fe      	b.n	8002750 <HardFault_Handler+0x4>

08002752 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8002752:	b480      	push	{r7}
 8002754:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8002756:	e7fe      	b.n	8002756 <MemManage_Handler+0x4>

08002758 <BusFault_Handler>:

/**
  * @brief This function handles Prefetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8002758:	b480      	push	{r7}
 800275a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 800275c:	e7fe      	b.n	800275c <BusFault_Handler+0x4>

0800275e <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 800275e:	b480      	push	{r7}
 8002760:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8002762:	e7fe      	b.n	8002762 <UsageFault_Handler+0x4>

08002764 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8002764:	b480      	push	{r7}
 8002766:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 8002768:	bf00      	nop
 800276a:	46bd      	mov	sp, r7
 800276c:	bc80      	pop	{r7}
 800276e:	4770      	bx	lr

08002770 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8002770:	b480      	push	{r7}
 8002772:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8002774:	bf00      	nop
 8002776:	46bd      	mov	sp, r7
 8002778:	bc80      	pop	{r7}
 800277a:	4770      	bx	lr

0800277c <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 800277c:	b480      	push	{r7}
 800277e:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8002780:	bf00      	nop
 8002782:	46bd      	mov	sp, r7
 8002784:	bc80      	pop	{r7}
 8002786:	4770      	bx	lr

08002788 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8002788:	b580      	push	{r7, lr}
 800278a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 800278c:	f000 f8bc 	bl	8002908 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8002790:	bf00      	nop
 8002792:	bd80      	pop	{r7, pc}

08002794 <EXTI1_IRQHandler>:

/**
  * @brief This function handles EXTI line1 interrupt.
  */
void EXTI1_IRQHandler(void)
{
 8002794:	b580      	push	{r7, lr}
 8002796:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN EXTI1_IRQn 0 */

  /* USER CODE END EXTI1_IRQn 0 */
  HAL_GPIO_EXTI_IRQHandler(GPIO_PIN_1);
 8002798:	2002      	movs	r0, #2
 800279a:	f000 fbe9 	bl	8002f70 <HAL_GPIO_EXTI_IRQHandler>
  /* USER CODE BEGIN EXTI1_IRQn 1 */

  /* USER CODE END EXTI1_IRQn 1 */
}
 800279e:	bf00      	nop
 80027a0:	bd80      	pop	{r7, pc}
	...

080027a4 <USART2_IRQHandler>:

/**
  * @brief This function handles USART2 global interrupt.
  */
void USART2_IRQHandler(void)
{
 80027a4:	b580      	push	{r7, lr}
 80027a6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USART2_IRQn 0 */

  /* USER CODE END USART2_IRQn 0 */
  HAL_UART_IRQHandler(&huart2);
 80027a8:	4802      	ldr	r0, [pc, #8]	; (80027b4 <USART2_IRQHandler+0x10>)
 80027aa:	f003 f8b5 	bl	8005918 <HAL_UART_IRQHandler>
  /* USER CODE BEGIN USART2_IRQn 1 */

  /* USER CODE END USART2_IRQn 1 */
}
 80027ae:	bf00      	nop
 80027b0:	bd80      	pop	{r7, pc}
 80027b2:	bf00      	nop
 80027b4:	200003c0 	.word	0x200003c0

080027b8 <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 80027b8:	b580      	push	{r7, lr}
 80027ba:	b086      	sub	sp, #24
 80027bc:	af00      	add	r7, sp, #0
 80027be:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 80027c0:	4a14      	ldr	r2, [pc, #80]	; (8002814 <_sbrk+0x5c>)
 80027c2:	4b15      	ldr	r3, [pc, #84]	; (8002818 <_sbrk+0x60>)
 80027c4:	1ad3      	subs	r3, r2, r3
 80027c6:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 80027c8:	697b      	ldr	r3, [r7, #20]
 80027ca:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initalize heap end at first call */
  if (NULL == __sbrk_heap_end)
 80027cc:	4b13      	ldr	r3, [pc, #76]	; (800281c <_sbrk+0x64>)
 80027ce:	681b      	ldr	r3, [r3, #0]
 80027d0:	2b00      	cmp	r3, #0
 80027d2:	d102      	bne.n	80027da <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 80027d4:	4b11      	ldr	r3, [pc, #68]	; (800281c <_sbrk+0x64>)
 80027d6:	4a12      	ldr	r2, [pc, #72]	; (8002820 <_sbrk+0x68>)
 80027d8:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 80027da:	4b10      	ldr	r3, [pc, #64]	; (800281c <_sbrk+0x64>)
 80027dc:	681a      	ldr	r2, [r3, #0]
 80027de:	687b      	ldr	r3, [r7, #4]
 80027e0:	4413      	add	r3, r2
 80027e2:	693a      	ldr	r2, [r7, #16]
 80027e4:	429a      	cmp	r2, r3
 80027e6:	d207      	bcs.n	80027f8 <_sbrk+0x40>
  {
    errno = ENOMEM;
 80027e8:	f003 fbbe 	bl	8005f68 <__errno>
 80027ec:	4602      	mov	r2, r0
 80027ee:	230c      	movs	r3, #12
 80027f0:	6013      	str	r3, [r2, #0]
    return (void *)-1;
 80027f2:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 80027f6:	e009      	b.n	800280c <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 80027f8:	4b08      	ldr	r3, [pc, #32]	; (800281c <_sbrk+0x64>)
 80027fa:	681b      	ldr	r3, [r3, #0]
 80027fc:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 80027fe:	4b07      	ldr	r3, [pc, #28]	; (800281c <_sbrk+0x64>)
 8002800:	681a      	ldr	r2, [r3, #0]
 8002802:	687b      	ldr	r3, [r7, #4]
 8002804:	4413      	add	r3, r2
 8002806:	4a05      	ldr	r2, [pc, #20]	; (800281c <_sbrk+0x64>)
 8002808:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 800280a:	68fb      	ldr	r3, [r7, #12]
}
 800280c:	4618      	mov	r0, r3
 800280e:	3718      	adds	r7, #24
 8002810:	46bd      	mov	sp, r7
 8002812:	bd80      	pop	{r7, pc}
 8002814:	20005000 	.word	0x20005000
 8002818:	00000400 	.word	0x00000400
 800281c:	20000254 	.word	0x20000254
 8002820:	20000450 	.word	0x20000450

08002824 <SystemInit>:
  * @note   This function should be used only after reset.
  * @param  None
  * @retval None
  */
void SystemInit (void)
{
 8002824:	b480      	push	{r7}
 8002826:	af00      	add	r7, sp, #0

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM. */
#endif /* USER_VECT_TAB_ADDRESS */
}
 8002828:	bf00      	nop
 800282a:	46bd      	mov	sp, r7
 800282c:	bc80      	pop	{r7}
 800282e:	4770      	bx	lr

08002830 <Reset_Handler>:
 8002830:	2100      	movs	r1, #0
 8002832:	e003      	b.n	800283c <LoopCopyDataInit>

08002834 <CopyDataInit>:
 8002834:	4b0b      	ldr	r3, [pc, #44]	; (8002864 <LoopFillZerobss+0x14>)
 8002836:	585b      	ldr	r3, [r3, r1]
 8002838:	5043      	str	r3, [r0, r1]
 800283a:	3104      	adds	r1, #4

0800283c <LoopCopyDataInit>:
 800283c:	480a      	ldr	r0, [pc, #40]	; (8002868 <LoopFillZerobss+0x18>)
 800283e:	4b0b      	ldr	r3, [pc, #44]	; (800286c <LoopFillZerobss+0x1c>)
 8002840:	1842      	adds	r2, r0, r1
 8002842:	429a      	cmp	r2, r3
 8002844:	d3f6      	bcc.n	8002834 <CopyDataInit>
 8002846:	4a0a      	ldr	r2, [pc, #40]	; (8002870 <LoopFillZerobss+0x20>)
 8002848:	e002      	b.n	8002850 <LoopFillZerobss>

0800284a <FillZerobss>:
 800284a:	2300      	movs	r3, #0
 800284c:	f842 3b04 	str.w	r3, [r2], #4

08002850 <LoopFillZerobss>:
 8002850:	4b08      	ldr	r3, [pc, #32]	; (8002874 <LoopFillZerobss+0x24>)
 8002852:	429a      	cmp	r2, r3
 8002854:	d3f9      	bcc.n	800284a <FillZerobss>
 8002856:	f7ff ffe5 	bl	8002824 <SystemInit>
 800285a:	f003 fb8b 	bl	8005f74 <__libc_init_array>
 800285e:	f7ff fc2f 	bl	80020c0 <main>
 8002862:	4770      	bx	lr
 8002864:	08009df0 	.word	0x08009df0
 8002868:	20000000 	.word	0x20000000
 800286c:	200001e4 	.word	0x200001e4
 8002870:	200001e8 	.word	0x200001e8
 8002874:	2000044c 	.word	0x2000044c

08002878 <ADC1_2_IRQHandler>:
 8002878:	e7fe      	b.n	8002878 <ADC1_2_IRQHandler>
	...

0800287c <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 800287c:	b580      	push	{r7, lr}
 800287e:	af00      	add	r7, sp, #0
    defined(STM32F102x6) || defined(STM32F102xB) || \
    defined(STM32F103x6) || defined(STM32F103xB) || defined(STM32F103xE) || defined(STM32F103xG) || \
    defined(STM32F105xC) || defined(STM32F107xC)

  /* Prefetch buffer is not available on value line devices */
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8002880:	4b08      	ldr	r3, [pc, #32]	; (80028a4 <HAL_Init+0x28>)
 8002882:	681b      	ldr	r3, [r3, #0]
 8002884:	4a07      	ldr	r2, [pc, #28]	; (80028a4 <HAL_Init+0x28>)
 8002886:	f043 0310 	orr.w	r3, r3, #16
 800288a:	6013      	str	r3, [r2, #0]
#endif
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 800288c:	2003      	movs	r0, #3
 800288e:	f000 f945 	bl	8002b1c <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 8002892:	2000      	movs	r0, #0
 8002894:	f000 f808 	bl	80028a8 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 8002898:	f7ff fe28 	bl	80024ec <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 800289c:	2300      	movs	r3, #0
}
 800289e:	4618      	mov	r0, r3
 80028a0:	bd80      	pop	{r7, pc}
 80028a2:	bf00      	nop
 80028a4:	40022000 	.word	0x40022000

080028a8 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 80028a8:	b580      	push	{r7, lr}
 80028aa:	b082      	sub	sp, #8
 80028ac:	af00      	add	r7, sp, #0
 80028ae:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 80028b0:	4b12      	ldr	r3, [pc, #72]	; (80028fc <HAL_InitTick+0x54>)
 80028b2:	681a      	ldr	r2, [r3, #0]
 80028b4:	4b12      	ldr	r3, [pc, #72]	; (8002900 <HAL_InitTick+0x58>)
 80028b6:	781b      	ldrb	r3, [r3, #0]
 80028b8:	4619      	mov	r1, r3
 80028ba:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 80028be:	fbb3 f3f1 	udiv	r3, r3, r1
 80028c2:	fbb2 f3f3 	udiv	r3, r2, r3
 80028c6:	4618      	mov	r0, r3
 80028c8:	f000 f95d 	bl	8002b86 <HAL_SYSTICK_Config>
 80028cc:	4603      	mov	r3, r0
 80028ce:	2b00      	cmp	r3, #0
 80028d0:	d001      	beq.n	80028d6 <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 80028d2:	2301      	movs	r3, #1
 80028d4:	e00e      	b.n	80028f4 <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 80028d6:	687b      	ldr	r3, [r7, #4]
 80028d8:	2b0f      	cmp	r3, #15
 80028da:	d80a      	bhi.n	80028f2 <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 80028dc:	2200      	movs	r2, #0
 80028de:	6879      	ldr	r1, [r7, #4]
 80028e0:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 80028e4:	f000 f925 	bl	8002b32 <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 80028e8:	4a06      	ldr	r2, [pc, #24]	; (8002904 <HAL_InitTick+0x5c>)
 80028ea:	687b      	ldr	r3, [r7, #4]
 80028ec:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 80028ee:	2300      	movs	r3, #0
 80028f0:	e000      	b.n	80028f4 <HAL_InitTick+0x4c>
    return HAL_ERROR;
 80028f2:	2301      	movs	r3, #1
}
 80028f4:	4618      	mov	r0, r3
 80028f6:	3708      	adds	r7, #8
 80028f8:	46bd      	mov	sp, r7
 80028fa:	bd80      	pop	{r7, pc}
 80028fc:	20000008 	.word	0x20000008
 8002900:	20000010 	.word	0x20000010
 8002904:	2000000c 	.word	0x2000000c

08002908 <HAL_IncTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8002908:	b480      	push	{r7}
 800290a:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 800290c:	4b05      	ldr	r3, [pc, #20]	; (8002924 <HAL_IncTick+0x1c>)
 800290e:	781b      	ldrb	r3, [r3, #0]
 8002910:	461a      	mov	r2, r3
 8002912:	4b05      	ldr	r3, [pc, #20]	; (8002928 <HAL_IncTick+0x20>)
 8002914:	681b      	ldr	r3, [r3, #0]
 8002916:	4413      	add	r3, r2
 8002918:	4a03      	ldr	r2, [pc, #12]	; (8002928 <HAL_IncTick+0x20>)
 800291a:	6013      	str	r3, [r2, #0]
}
 800291c:	bf00      	nop
 800291e:	46bd      	mov	sp, r7
 8002920:	bc80      	pop	{r7}
 8002922:	4770      	bx	lr
 8002924:	20000010 	.word	0x20000010
 8002928:	20000444 	.word	0x20000444

0800292c <HAL_GetTick>:
  * @note  This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 800292c:	b480      	push	{r7}
 800292e:	af00      	add	r7, sp, #0
  return uwTick;
 8002930:	4b02      	ldr	r3, [pc, #8]	; (800293c <HAL_GetTick+0x10>)
 8002932:	681b      	ldr	r3, [r3, #0]
}
 8002934:	4618      	mov	r0, r3
 8002936:	46bd      	mov	sp, r7
 8002938:	bc80      	pop	{r7}
 800293a:	4770      	bx	lr
 800293c:	20000444 	.word	0x20000444

08002940 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8002940:	b580      	push	{r7, lr}
 8002942:	b084      	sub	sp, #16
 8002944:	af00      	add	r7, sp, #0
 8002946:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 8002948:	f7ff fff0 	bl	800292c <HAL_GetTick>
 800294c:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 800294e:	687b      	ldr	r3, [r7, #4]
 8002950:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 8002952:	68fb      	ldr	r3, [r7, #12]
 8002954:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8002958:	d005      	beq.n	8002966 <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 800295a:	4b09      	ldr	r3, [pc, #36]	; (8002980 <HAL_Delay+0x40>)
 800295c:	781b      	ldrb	r3, [r3, #0]
 800295e:	461a      	mov	r2, r3
 8002960:	68fb      	ldr	r3, [r7, #12]
 8002962:	4413      	add	r3, r2
 8002964:	60fb      	str	r3, [r7, #12]
  }

  while ((HAL_GetTick() - tickstart) < wait)
 8002966:	bf00      	nop
 8002968:	f7ff ffe0 	bl	800292c <HAL_GetTick>
 800296c:	4602      	mov	r2, r0
 800296e:	68bb      	ldr	r3, [r7, #8]
 8002970:	1ad3      	subs	r3, r2, r3
 8002972:	68fa      	ldr	r2, [r7, #12]
 8002974:	429a      	cmp	r2, r3
 8002976:	d8f7      	bhi.n	8002968 <HAL_Delay+0x28>
  {
  }
}
 8002978:	bf00      	nop
 800297a:	3710      	adds	r7, #16
 800297c:	46bd      	mov	sp, r7
 800297e:	bd80      	pop	{r7, pc}
 8002980:	20000010 	.word	0x20000010

08002984 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8002984:	b480      	push	{r7}
 8002986:	b085      	sub	sp, #20
 8002988:	af00      	add	r7, sp, #0
 800298a:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 800298c:	687b      	ldr	r3, [r7, #4]
 800298e:	f003 0307 	and.w	r3, r3, #7
 8002992:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8002994:	4b0c      	ldr	r3, [pc, #48]	; (80029c8 <__NVIC_SetPriorityGrouping+0x44>)
 8002996:	68db      	ldr	r3, [r3, #12]
 8002998:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 800299a:	68ba      	ldr	r2, [r7, #8]
 800299c:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 80029a0:	4013      	ands	r3, r2
 80029a2:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos) );               /* Insert write key and priority group */
 80029a4:	68fb      	ldr	r3, [r7, #12]
 80029a6:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 80029a8:	68bb      	ldr	r3, [r7, #8]
 80029aa:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 80029ac:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 80029b0:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 80029b4:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 80029b6:	4a04      	ldr	r2, [pc, #16]	; (80029c8 <__NVIC_SetPriorityGrouping+0x44>)
 80029b8:	68bb      	ldr	r3, [r7, #8]
 80029ba:	60d3      	str	r3, [r2, #12]
}
 80029bc:	bf00      	nop
 80029be:	3714      	adds	r7, #20
 80029c0:	46bd      	mov	sp, r7
 80029c2:	bc80      	pop	{r7}
 80029c4:	4770      	bx	lr
 80029c6:	bf00      	nop
 80029c8:	e000ed00 	.word	0xe000ed00

080029cc <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 80029cc:	b480      	push	{r7}
 80029ce:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 80029d0:	4b04      	ldr	r3, [pc, #16]	; (80029e4 <__NVIC_GetPriorityGrouping+0x18>)
 80029d2:	68db      	ldr	r3, [r3, #12]
 80029d4:	0a1b      	lsrs	r3, r3, #8
 80029d6:	f003 0307 	and.w	r3, r3, #7
}
 80029da:	4618      	mov	r0, r3
 80029dc:	46bd      	mov	sp, r7
 80029de:	bc80      	pop	{r7}
 80029e0:	4770      	bx	lr
 80029e2:	bf00      	nop
 80029e4:	e000ed00 	.word	0xe000ed00

080029e8 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 80029e8:	b480      	push	{r7}
 80029ea:	b083      	sub	sp, #12
 80029ec:	af00      	add	r7, sp, #0
 80029ee:	4603      	mov	r3, r0
 80029f0:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 80029f2:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80029f6:	2b00      	cmp	r3, #0
 80029f8:	db0b      	blt.n	8002a12 <__NVIC_EnableIRQ+0x2a>
  {
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 80029fa:	79fb      	ldrb	r3, [r7, #7]
 80029fc:	f003 021f 	and.w	r2, r3, #31
 8002a00:	4906      	ldr	r1, [pc, #24]	; (8002a1c <__NVIC_EnableIRQ+0x34>)
 8002a02:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002a06:	095b      	lsrs	r3, r3, #5
 8002a08:	2001      	movs	r0, #1
 8002a0a:	fa00 f202 	lsl.w	r2, r0, r2
 8002a0e:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  }
}
 8002a12:	bf00      	nop
 8002a14:	370c      	adds	r7, #12
 8002a16:	46bd      	mov	sp, r7
 8002a18:	bc80      	pop	{r7}
 8002a1a:	4770      	bx	lr
 8002a1c:	e000e100 	.word	0xe000e100

08002a20 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8002a20:	b480      	push	{r7}
 8002a22:	b083      	sub	sp, #12
 8002a24:	af00      	add	r7, sp, #0
 8002a26:	4603      	mov	r3, r0
 8002a28:	6039      	str	r1, [r7, #0]
 8002a2a:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8002a2c:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002a30:	2b00      	cmp	r3, #0
 8002a32:	db0a      	blt.n	8002a4a <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8002a34:	683b      	ldr	r3, [r7, #0]
 8002a36:	b2da      	uxtb	r2, r3
 8002a38:	490c      	ldr	r1, [pc, #48]	; (8002a6c <__NVIC_SetPriority+0x4c>)
 8002a3a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002a3e:	0112      	lsls	r2, r2, #4
 8002a40:	b2d2      	uxtb	r2, r2
 8002a42:	440b      	add	r3, r1
 8002a44:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8002a48:	e00a      	b.n	8002a60 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8002a4a:	683b      	ldr	r3, [r7, #0]
 8002a4c:	b2da      	uxtb	r2, r3
 8002a4e:	4908      	ldr	r1, [pc, #32]	; (8002a70 <__NVIC_SetPriority+0x50>)
 8002a50:	79fb      	ldrb	r3, [r7, #7]
 8002a52:	f003 030f 	and.w	r3, r3, #15
 8002a56:	3b04      	subs	r3, #4
 8002a58:	0112      	lsls	r2, r2, #4
 8002a5a:	b2d2      	uxtb	r2, r2
 8002a5c:	440b      	add	r3, r1
 8002a5e:	761a      	strb	r2, [r3, #24]
}
 8002a60:	bf00      	nop
 8002a62:	370c      	adds	r7, #12
 8002a64:	46bd      	mov	sp, r7
 8002a66:	bc80      	pop	{r7}
 8002a68:	4770      	bx	lr
 8002a6a:	bf00      	nop
 8002a6c:	e000e100 	.word	0xe000e100
 8002a70:	e000ed00 	.word	0xe000ed00

08002a74 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8002a74:	b480      	push	{r7}
 8002a76:	b089      	sub	sp, #36	; 0x24
 8002a78:	af00      	add	r7, sp, #0
 8002a7a:	60f8      	str	r0, [r7, #12]
 8002a7c:	60b9      	str	r1, [r7, #8]
 8002a7e:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8002a80:	68fb      	ldr	r3, [r7, #12]
 8002a82:	f003 0307 	and.w	r3, r3, #7
 8002a86:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8002a88:	69fb      	ldr	r3, [r7, #28]
 8002a8a:	f1c3 0307 	rsb	r3, r3, #7
 8002a8e:	2b04      	cmp	r3, #4
 8002a90:	bf28      	it	cs
 8002a92:	2304      	movcs	r3, #4
 8002a94:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8002a96:	69fb      	ldr	r3, [r7, #28]
 8002a98:	3304      	adds	r3, #4
 8002a9a:	2b06      	cmp	r3, #6
 8002a9c:	d902      	bls.n	8002aa4 <NVIC_EncodePriority+0x30>
 8002a9e:	69fb      	ldr	r3, [r7, #28]
 8002aa0:	3b03      	subs	r3, #3
 8002aa2:	e000      	b.n	8002aa6 <NVIC_EncodePriority+0x32>
 8002aa4:	2300      	movs	r3, #0
 8002aa6:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8002aa8:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 8002aac:	69bb      	ldr	r3, [r7, #24]
 8002aae:	fa02 f303 	lsl.w	r3, r2, r3
 8002ab2:	43da      	mvns	r2, r3
 8002ab4:	68bb      	ldr	r3, [r7, #8]
 8002ab6:	401a      	ands	r2, r3
 8002ab8:	697b      	ldr	r3, [r7, #20]
 8002aba:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8002abc:	f04f 31ff 	mov.w	r1, #4294967295	; 0xffffffff
 8002ac0:	697b      	ldr	r3, [r7, #20]
 8002ac2:	fa01 f303 	lsl.w	r3, r1, r3
 8002ac6:	43d9      	mvns	r1, r3
 8002ac8:	687b      	ldr	r3, [r7, #4]
 8002aca:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8002acc:	4313      	orrs	r3, r2
         );
}
 8002ace:	4618      	mov	r0, r3
 8002ad0:	3724      	adds	r7, #36	; 0x24
 8002ad2:	46bd      	mov	sp, r7
 8002ad4:	bc80      	pop	{r7}
 8002ad6:	4770      	bx	lr

08002ad8 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8002ad8:	b580      	push	{r7, lr}
 8002ada:	b082      	sub	sp, #8
 8002adc:	af00      	add	r7, sp, #0
 8002ade:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8002ae0:	687b      	ldr	r3, [r7, #4]
 8002ae2:	3b01      	subs	r3, #1
 8002ae4:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8002ae8:	d301      	bcc.n	8002aee <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 8002aea:	2301      	movs	r3, #1
 8002aec:	e00f      	b.n	8002b0e <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8002aee:	4a0a      	ldr	r2, [pc, #40]	; (8002b18 <SysTick_Config+0x40>)
 8002af0:	687b      	ldr	r3, [r7, #4]
 8002af2:	3b01      	subs	r3, #1
 8002af4:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8002af6:	210f      	movs	r1, #15
 8002af8:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8002afc:	f7ff ff90 	bl	8002a20 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8002b00:	4b05      	ldr	r3, [pc, #20]	; (8002b18 <SysTick_Config+0x40>)
 8002b02:	2200      	movs	r2, #0
 8002b04:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8002b06:	4b04      	ldr	r3, [pc, #16]	; (8002b18 <SysTick_Config+0x40>)
 8002b08:	2207      	movs	r2, #7
 8002b0a:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8002b0c:	2300      	movs	r3, #0
}
 8002b0e:	4618      	mov	r0, r3
 8002b10:	3708      	adds	r7, #8
 8002b12:	46bd      	mov	sp, r7
 8002b14:	bd80      	pop	{r7, pc}
 8002b16:	bf00      	nop
 8002b18:	e000e010 	.word	0xe000e010

08002b1c <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8002b1c:	b580      	push	{r7, lr}
 8002b1e:	b082      	sub	sp, #8
 8002b20:	af00      	add	r7, sp, #0
 8002b22:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8002b24:	6878      	ldr	r0, [r7, #4]
 8002b26:	f7ff ff2d 	bl	8002984 <__NVIC_SetPriorityGrouping>
}
 8002b2a:	bf00      	nop
 8002b2c:	3708      	adds	r7, #8
 8002b2e:	46bd      	mov	sp, r7
 8002b30:	bd80      	pop	{r7, pc}

08002b32 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 8002b32:	b580      	push	{r7, lr}
 8002b34:	b086      	sub	sp, #24
 8002b36:	af00      	add	r7, sp, #0
 8002b38:	4603      	mov	r3, r0
 8002b3a:	60b9      	str	r1, [r7, #8]
 8002b3c:	607a      	str	r2, [r7, #4]
 8002b3e:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 8002b40:	2300      	movs	r3, #0
 8002b42:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 8002b44:	f7ff ff42 	bl	80029cc <__NVIC_GetPriorityGrouping>
 8002b48:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8002b4a:	687a      	ldr	r2, [r7, #4]
 8002b4c:	68b9      	ldr	r1, [r7, #8]
 8002b4e:	6978      	ldr	r0, [r7, #20]
 8002b50:	f7ff ff90 	bl	8002a74 <NVIC_EncodePriority>
 8002b54:	4602      	mov	r2, r0
 8002b56:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8002b5a:	4611      	mov	r1, r2
 8002b5c:	4618      	mov	r0, r3
 8002b5e:	f7ff ff5f 	bl	8002a20 <__NVIC_SetPriority>
}
 8002b62:	bf00      	nop
 8002b64:	3718      	adds	r7, #24
 8002b66:	46bd      	mov	sp, r7
 8002b68:	bd80      	pop	{r7, pc}

08002b6a <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f10xxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8002b6a:	b580      	push	{r7, lr}
 8002b6c:	b082      	sub	sp, #8
 8002b6e:	af00      	add	r7, sp, #0
 8002b70:	4603      	mov	r3, r0
 8002b72:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));

  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8002b74:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002b78:	4618      	mov	r0, r3
 8002b7a:	f7ff ff35 	bl	80029e8 <__NVIC_EnableIRQ>
}
 8002b7e:	bf00      	nop
 8002b80:	3708      	adds	r7, #8
 8002b82:	46bd      	mov	sp, r7
 8002b84:	bd80      	pop	{r7, pc}

08002b86 <HAL_SYSTICK_Config>:
  * @param  TicksNumb: Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8002b86:	b580      	push	{r7, lr}
 8002b88:	b082      	sub	sp, #8
 8002b8a:	af00      	add	r7, sp, #0
 8002b8c:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 8002b8e:	6878      	ldr	r0, [r7, #4]
 8002b90:	f7ff ffa2 	bl	8002ad8 <SysTick_Config>
 8002b94:	4603      	mov	r3, r0
}
 8002b96:	4618      	mov	r0, r3
 8002b98:	3708      	adds	r7, #8
 8002b9a:	46bd      	mov	sp, r7
 8002b9c:	bd80      	pop	{r7, pc}
	...

08002ba0 <HAL_DMA_Abort_IT>:
  * @param  hdma  : pointer to a DMA_HandleTypeDef structure that contains
  *                 the configuration information for the specified DMA Channel.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort_IT(DMA_HandleTypeDef *hdma)
{  
 8002ba0:	b580      	push	{r7, lr}
 8002ba2:	b084      	sub	sp, #16
 8002ba4:	af00      	add	r7, sp, #0
 8002ba6:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8002ba8:	2300      	movs	r3, #0
 8002baa:	73fb      	strb	r3, [r7, #15]
  
  if(HAL_DMA_STATE_BUSY != hdma->State)
 8002bac:	687b      	ldr	r3, [r7, #4]
 8002bae:	f893 3021 	ldrb.w	r3, [r3, #33]	; 0x21
 8002bb2:	2b02      	cmp	r3, #2
 8002bb4:	d005      	beq.n	8002bc2 <HAL_DMA_Abort_IT+0x22>
  {
    /* no transfer ongoing */
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 8002bb6:	687b      	ldr	r3, [r7, #4]
 8002bb8:	2204      	movs	r2, #4
 8002bba:	639a      	str	r2, [r3, #56]	; 0x38
        
    status = HAL_ERROR;
 8002bbc:	2301      	movs	r3, #1
 8002bbe:	73fb      	strb	r3, [r7, #15]
 8002bc0:	e051      	b.n	8002c66 <HAL_DMA_Abort_IT+0xc6>
  }
  else
  { 
    /* Disable DMA IT */
    __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 8002bc2:	687b      	ldr	r3, [r7, #4]
 8002bc4:	681b      	ldr	r3, [r3, #0]
 8002bc6:	681a      	ldr	r2, [r3, #0]
 8002bc8:	687b      	ldr	r3, [r7, #4]
 8002bca:	681b      	ldr	r3, [r3, #0]
 8002bcc:	f022 020e 	bic.w	r2, r2, #14
 8002bd0:	601a      	str	r2, [r3, #0]

    /* Disable the channel */
    __HAL_DMA_DISABLE(hdma);
 8002bd2:	687b      	ldr	r3, [r7, #4]
 8002bd4:	681b      	ldr	r3, [r3, #0]
 8002bd6:	681a      	ldr	r2, [r3, #0]
 8002bd8:	687b      	ldr	r3, [r7, #4]
 8002bda:	681b      	ldr	r3, [r3, #0]
 8002bdc:	f022 0201 	bic.w	r2, r2, #1
 8002be0:	601a      	str	r2, [r3, #0]

    /* Clear all flags */
    __HAL_DMA_CLEAR_FLAG(hdma, __HAL_DMA_GET_GI_FLAG_INDEX(hdma));
 8002be2:	687b      	ldr	r3, [r7, #4]
 8002be4:	681b      	ldr	r3, [r3, #0]
 8002be6:	4a22      	ldr	r2, [pc, #136]	; (8002c70 <HAL_DMA_Abort_IT+0xd0>)
 8002be8:	4293      	cmp	r3, r2
 8002bea:	d029      	beq.n	8002c40 <HAL_DMA_Abort_IT+0xa0>
 8002bec:	687b      	ldr	r3, [r7, #4]
 8002bee:	681b      	ldr	r3, [r3, #0]
 8002bf0:	4a20      	ldr	r2, [pc, #128]	; (8002c74 <HAL_DMA_Abort_IT+0xd4>)
 8002bf2:	4293      	cmp	r3, r2
 8002bf4:	d022      	beq.n	8002c3c <HAL_DMA_Abort_IT+0x9c>
 8002bf6:	687b      	ldr	r3, [r7, #4]
 8002bf8:	681b      	ldr	r3, [r3, #0]
 8002bfa:	4a1f      	ldr	r2, [pc, #124]	; (8002c78 <HAL_DMA_Abort_IT+0xd8>)
 8002bfc:	4293      	cmp	r3, r2
 8002bfe:	d01a      	beq.n	8002c36 <HAL_DMA_Abort_IT+0x96>
 8002c00:	687b      	ldr	r3, [r7, #4]
 8002c02:	681b      	ldr	r3, [r3, #0]
 8002c04:	4a1d      	ldr	r2, [pc, #116]	; (8002c7c <HAL_DMA_Abort_IT+0xdc>)
 8002c06:	4293      	cmp	r3, r2
 8002c08:	d012      	beq.n	8002c30 <HAL_DMA_Abort_IT+0x90>
 8002c0a:	687b      	ldr	r3, [r7, #4]
 8002c0c:	681b      	ldr	r3, [r3, #0]
 8002c0e:	4a1c      	ldr	r2, [pc, #112]	; (8002c80 <HAL_DMA_Abort_IT+0xe0>)
 8002c10:	4293      	cmp	r3, r2
 8002c12:	d00a      	beq.n	8002c2a <HAL_DMA_Abort_IT+0x8a>
 8002c14:	687b      	ldr	r3, [r7, #4]
 8002c16:	681b      	ldr	r3, [r3, #0]
 8002c18:	4a1a      	ldr	r2, [pc, #104]	; (8002c84 <HAL_DMA_Abort_IT+0xe4>)
 8002c1a:	4293      	cmp	r3, r2
 8002c1c:	d102      	bne.n	8002c24 <HAL_DMA_Abort_IT+0x84>
 8002c1e:	f44f 1380 	mov.w	r3, #1048576	; 0x100000
 8002c22:	e00e      	b.n	8002c42 <HAL_DMA_Abort_IT+0xa2>
 8002c24:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
 8002c28:	e00b      	b.n	8002c42 <HAL_DMA_Abort_IT+0xa2>
 8002c2a:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 8002c2e:	e008      	b.n	8002c42 <HAL_DMA_Abort_IT+0xa2>
 8002c30:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8002c34:	e005      	b.n	8002c42 <HAL_DMA_Abort_IT+0xa2>
 8002c36:	f44f 7380 	mov.w	r3, #256	; 0x100
 8002c3a:	e002      	b.n	8002c42 <HAL_DMA_Abort_IT+0xa2>
 8002c3c:	2310      	movs	r3, #16
 8002c3e:	e000      	b.n	8002c42 <HAL_DMA_Abort_IT+0xa2>
 8002c40:	2301      	movs	r3, #1
 8002c42:	4a11      	ldr	r2, [pc, #68]	; (8002c88 <HAL_DMA_Abort_IT+0xe8>)
 8002c44:	6053      	str	r3, [r2, #4]

    /* Change the DMA state */
    hdma->State = HAL_DMA_STATE_READY;
 8002c46:	687b      	ldr	r3, [r7, #4]
 8002c48:	2201      	movs	r2, #1
 8002c4a:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8002c4e:	687b      	ldr	r3, [r7, #4]
 8002c50:	2200      	movs	r2, #0
 8002c52:	f883 2020 	strb.w	r2, [r3, #32]

    /* Call User Abort callback */
    if(hdma->XferAbortCallback != NULL)
 8002c56:	687b      	ldr	r3, [r7, #4]
 8002c58:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8002c5a:	2b00      	cmp	r3, #0
 8002c5c:	d003      	beq.n	8002c66 <HAL_DMA_Abort_IT+0xc6>
    {
      hdma->XferAbortCallback(hdma);
 8002c5e:	687b      	ldr	r3, [r7, #4]
 8002c60:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8002c62:	6878      	ldr	r0, [r7, #4]
 8002c64:	4798      	blx	r3
    } 
  }
  return status;
 8002c66:	7bfb      	ldrb	r3, [r7, #15]
}
 8002c68:	4618      	mov	r0, r3
 8002c6a:	3710      	adds	r7, #16
 8002c6c:	46bd      	mov	sp, r7
 8002c6e:	bd80      	pop	{r7, pc}
 8002c70:	40020008 	.word	0x40020008
 8002c74:	4002001c 	.word	0x4002001c
 8002c78:	40020030 	.word	0x40020030
 8002c7c:	40020044 	.word	0x40020044
 8002c80:	40020058 	.word	0x40020058
 8002c84:	4002006c 	.word	0x4002006c
 8002c88:	40020000 	.word	0x40020000

08002c8c <HAL_GPIO_Init>:
  * @param  GPIO_Init: pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8002c8c:	b480      	push	{r7}
 8002c8e:	b08b      	sub	sp, #44	; 0x2c
 8002c90:	af00      	add	r7, sp, #0
 8002c92:	6078      	str	r0, [r7, #4]
 8002c94:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00u;
 8002c96:	2300      	movs	r3, #0
 8002c98:	627b      	str	r3, [r7, #36]	; 0x24
  uint32_t ioposition;
  uint32_t iocurrent;
  uint32_t temp;
  uint32_t config = 0x00u;
 8002c9a:	2300      	movs	r3, #0
 8002c9c:	623b      	str	r3, [r7, #32]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8002c9e:	e127      	b.n	8002ef0 <HAL_GPIO_Init+0x264>
  {
    /* Get the IO position */
    ioposition = (0x01uL << position);
 8002ca0:	2201      	movs	r2, #1
 8002ca2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002ca4:	fa02 f303 	lsl.w	r3, r2, r3
 8002ca8:	61fb      	str	r3, [r7, #28]

    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 8002caa:	683b      	ldr	r3, [r7, #0]
 8002cac:	681b      	ldr	r3, [r3, #0]
 8002cae:	69fa      	ldr	r2, [r7, #28]
 8002cb0:	4013      	ands	r3, r2
 8002cb2:	61bb      	str	r3, [r7, #24]

    if (iocurrent == ioposition)
 8002cb4:	69ba      	ldr	r2, [r7, #24]
 8002cb6:	69fb      	ldr	r3, [r7, #28]
 8002cb8:	429a      	cmp	r2, r3
 8002cba:	f040 8116 	bne.w	8002eea <HAL_GPIO_Init+0x25e>
    {
      /* Check the Alternate function parameters */
      assert_param(IS_GPIO_AF_INSTANCE(GPIOx));

      /* Based on the required mode, filling config variable with MODEy[1:0] and CNFy[3:2] corresponding bits */
      switch (GPIO_Init->Mode)
 8002cbe:	683b      	ldr	r3, [r7, #0]
 8002cc0:	685b      	ldr	r3, [r3, #4]
 8002cc2:	2b12      	cmp	r3, #18
 8002cc4:	d034      	beq.n	8002d30 <HAL_GPIO_Init+0xa4>
 8002cc6:	2b12      	cmp	r3, #18
 8002cc8:	d80d      	bhi.n	8002ce6 <HAL_GPIO_Init+0x5a>
 8002cca:	2b02      	cmp	r3, #2
 8002ccc:	d02b      	beq.n	8002d26 <HAL_GPIO_Init+0x9a>
 8002cce:	2b02      	cmp	r3, #2
 8002cd0:	d804      	bhi.n	8002cdc <HAL_GPIO_Init+0x50>
 8002cd2:	2b00      	cmp	r3, #0
 8002cd4:	d031      	beq.n	8002d3a <HAL_GPIO_Init+0xae>
 8002cd6:	2b01      	cmp	r3, #1
 8002cd8:	d01c      	beq.n	8002d14 <HAL_GPIO_Init+0x88>
          config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_ANALOG;
          break;

        /* Parameters are checked with assert_param */
        default:
          break;
 8002cda:	e048      	b.n	8002d6e <HAL_GPIO_Init+0xe2>
      switch (GPIO_Init->Mode)
 8002cdc:	2b03      	cmp	r3, #3
 8002cde:	d043      	beq.n	8002d68 <HAL_GPIO_Init+0xdc>
 8002ce0:	2b11      	cmp	r3, #17
 8002ce2:	d01b      	beq.n	8002d1c <HAL_GPIO_Init+0x90>
          break;
 8002ce4:	e043      	b.n	8002d6e <HAL_GPIO_Init+0xe2>
      switch (GPIO_Init->Mode)
 8002ce6:	4a89      	ldr	r2, [pc, #548]	; (8002f0c <HAL_GPIO_Init+0x280>)
 8002ce8:	4293      	cmp	r3, r2
 8002cea:	d026      	beq.n	8002d3a <HAL_GPIO_Init+0xae>
 8002cec:	4a87      	ldr	r2, [pc, #540]	; (8002f0c <HAL_GPIO_Init+0x280>)
 8002cee:	4293      	cmp	r3, r2
 8002cf0:	d806      	bhi.n	8002d00 <HAL_GPIO_Init+0x74>
 8002cf2:	4a87      	ldr	r2, [pc, #540]	; (8002f10 <HAL_GPIO_Init+0x284>)
 8002cf4:	4293      	cmp	r3, r2
 8002cf6:	d020      	beq.n	8002d3a <HAL_GPIO_Init+0xae>
 8002cf8:	4a86      	ldr	r2, [pc, #536]	; (8002f14 <HAL_GPIO_Init+0x288>)
 8002cfa:	4293      	cmp	r3, r2
 8002cfc:	d01d      	beq.n	8002d3a <HAL_GPIO_Init+0xae>
          break;
 8002cfe:	e036      	b.n	8002d6e <HAL_GPIO_Init+0xe2>
      switch (GPIO_Init->Mode)
 8002d00:	4a85      	ldr	r2, [pc, #532]	; (8002f18 <HAL_GPIO_Init+0x28c>)
 8002d02:	4293      	cmp	r3, r2
 8002d04:	d019      	beq.n	8002d3a <HAL_GPIO_Init+0xae>
 8002d06:	4a85      	ldr	r2, [pc, #532]	; (8002f1c <HAL_GPIO_Init+0x290>)
 8002d08:	4293      	cmp	r3, r2
 8002d0a:	d016      	beq.n	8002d3a <HAL_GPIO_Init+0xae>
 8002d0c:	4a84      	ldr	r2, [pc, #528]	; (8002f20 <HAL_GPIO_Init+0x294>)
 8002d0e:	4293      	cmp	r3, r2
 8002d10:	d013      	beq.n	8002d3a <HAL_GPIO_Init+0xae>
          break;
 8002d12:	e02c      	b.n	8002d6e <HAL_GPIO_Init+0xe2>
          config = GPIO_Init->Speed + GPIO_CR_CNF_GP_OUTPUT_PP;
 8002d14:	683b      	ldr	r3, [r7, #0]
 8002d16:	68db      	ldr	r3, [r3, #12]
 8002d18:	623b      	str	r3, [r7, #32]
          break;
 8002d1a:	e028      	b.n	8002d6e <HAL_GPIO_Init+0xe2>
          config = GPIO_Init->Speed + GPIO_CR_CNF_GP_OUTPUT_OD;
 8002d1c:	683b      	ldr	r3, [r7, #0]
 8002d1e:	68db      	ldr	r3, [r3, #12]
 8002d20:	3304      	adds	r3, #4
 8002d22:	623b      	str	r3, [r7, #32]
          break;
 8002d24:	e023      	b.n	8002d6e <HAL_GPIO_Init+0xe2>
          config = GPIO_Init->Speed + GPIO_CR_CNF_AF_OUTPUT_PP;
 8002d26:	683b      	ldr	r3, [r7, #0]
 8002d28:	68db      	ldr	r3, [r3, #12]
 8002d2a:	3308      	adds	r3, #8
 8002d2c:	623b      	str	r3, [r7, #32]
          break;
 8002d2e:	e01e      	b.n	8002d6e <HAL_GPIO_Init+0xe2>
          config = GPIO_Init->Speed + GPIO_CR_CNF_AF_OUTPUT_OD;
 8002d30:	683b      	ldr	r3, [r7, #0]
 8002d32:	68db      	ldr	r3, [r3, #12]
 8002d34:	330c      	adds	r3, #12
 8002d36:	623b      	str	r3, [r7, #32]
          break;
 8002d38:	e019      	b.n	8002d6e <HAL_GPIO_Init+0xe2>
          if (GPIO_Init->Pull == GPIO_NOPULL)
 8002d3a:	683b      	ldr	r3, [r7, #0]
 8002d3c:	689b      	ldr	r3, [r3, #8]
 8002d3e:	2b00      	cmp	r3, #0
 8002d40:	d102      	bne.n	8002d48 <HAL_GPIO_Init+0xbc>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_FLOATING;
 8002d42:	2304      	movs	r3, #4
 8002d44:	623b      	str	r3, [r7, #32]
          break;
 8002d46:	e012      	b.n	8002d6e <HAL_GPIO_Init+0xe2>
          else if (GPIO_Init->Pull == GPIO_PULLUP)
 8002d48:	683b      	ldr	r3, [r7, #0]
 8002d4a:	689b      	ldr	r3, [r3, #8]
 8002d4c:	2b01      	cmp	r3, #1
 8002d4e:	d105      	bne.n	8002d5c <HAL_GPIO_Init+0xd0>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_PU_PD;
 8002d50:	2308      	movs	r3, #8
 8002d52:	623b      	str	r3, [r7, #32]
            GPIOx->BSRR = ioposition;
 8002d54:	687b      	ldr	r3, [r7, #4]
 8002d56:	69fa      	ldr	r2, [r7, #28]
 8002d58:	611a      	str	r2, [r3, #16]
          break;
 8002d5a:	e008      	b.n	8002d6e <HAL_GPIO_Init+0xe2>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_PU_PD;
 8002d5c:	2308      	movs	r3, #8
 8002d5e:	623b      	str	r3, [r7, #32]
            GPIOx->BRR = ioposition;
 8002d60:	687b      	ldr	r3, [r7, #4]
 8002d62:	69fa      	ldr	r2, [r7, #28]
 8002d64:	615a      	str	r2, [r3, #20]
          break;
 8002d66:	e002      	b.n	8002d6e <HAL_GPIO_Init+0xe2>
          config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_ANALOG;
 8002d68:	2300      	movs	r3, #0
 8002d6a:	623b      	str	r3, [r7, #32]
          break;
 8002d6c:	bf00      	nop
      }

      /* Check if the current bit belongs to first half or last half of the pin count number
       in order to address CRH or CRL register*/
      configregister = (iocurrent < GPIO_PIN_8) ? &GPIOx->CRL     : &GPIOx->CRH;
 8002d6e:	69bb      	ldr	r3, [r7, #24]
 8002d70:	2bff      	cmp	r3, #255	; 0xff
 8002d72:	d801      	bhi.n	8002d78 <HAL_GPIO_Init+0xec>
 8002d74:	687b      	ldr	r3, [r7, #4]
 8002d76:	e001      	b.n	8002d7c <HAL_GPIO_Init+0xf0>
 8002d78:	687b      	ldr	r3, [r7, #4]
 8002d7a:	3304      	adds	r3, #4
 8002d7c:	617b      	str	r3, [r7, #20]
      registeroffset = (iocurrent < GPIO_PIN_8) ? (position << 2u) : ((position - 8u) << 2u);
 8002d7e:	69bb      	ldr	r3, [r7, #24]
 8002d80:	2bff      	cmp	r3, #255	; 0xff
 8002d82:	d802      	bhi.n	8002d8a <HAL_GPIO_Init+0xfe>
 8002d84:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002d86:	009b      	lsls	r3, r3, #2
 8002d88:	e002      	b.n	8002d90 <HAL_GPIO_Init+0x104>
 8002d8a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002d8c:	3b08      	subs	r3, #8
 8002d8e:	009b      	lsls	r3, r3, #2
 8002d90:	613b      	str	r3, [r7, #16]

      /* Apply the new configuration of the pin to the register */
      MODIFY_REG((*configregister), ((GPIO_CRL_MODE0 | GPIO_CRL_CNF0) << registeroffset), (config << registeroffset));
 8002d92:	697b      	ldr	r3, [r7, #20]
 8002d94:	681a      	ldr	r2, [r3, #0]
 8002d96:	210f      	movs	r1, #15
 8002d98:	693b      	ldr	r3, [r7, #16]
 8002d9a:	fa01 f303 	lsl.w	r3, r1, r3
 8002d9e:	43db      	mvns	r3, r3
 8002da0:	401a      	ands	r2, r3
 8002da2:	6a39      	ldr	r1, [r7, #32]
 8002da4:	693b      	ldr	r3, [r7, #16]
 8002da6:	fa01 f303 	lsl.w	r3, r1, r3
 8002daa:	431a      	orrs	r2, r3
 8002dac:	697b      	ldr	r3, [r7, #20]
 8002dae:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) == EXTI_MODE)
 8002db0:	683b      	ldr	r3, [r7, #0]
 8002db2:	685b      	ldr	r3, [r3, #4]
 8002db4:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8002db8:	2b00      	cmp	r3, #0
 8002dba:	f000 8096 	beq.w	8002eea <HAL_GPIO_Init+0x25e>
      {
        /* Enable AFIO Clock */
        __HAL_RCC_AFIO_CLK_ENABLE();
 8002dbe:	4b59      	ldr	r3, [pc, #356]	; (8002f24 <HAL_GPIO_Init+0x298>)
 8002dc0:	699b      	ldr	r3, [r3, #24]
 8002dc2:	4a58      	ldr	r2, [pc, #352]	; (8002f24 <HAL_GPIO_Init+0x298>)
 8002dc4:	f043 0301 	orr.w	r3, r3, #1
 8002dc8:	6193      	str	r3, [r2, #24]
 8002dca:	4b56      	ldr	r3, [pc, #344]	; (8002f24 <HAL_GPIO_Init+0x298>)
 8002dcc:	699b      	ldr	r3, [r3, #24]
 8002dce:	f003 0301 	and.w	r3, r3, #1
 8002dd2:	60bb      	str	r3, [r7, #8]
 8002dd4:	68bb      	ldr	r3, [r7, #8]
        temp = AFIO->EXTICR[position >> 2u];
 8002dd6:	4a54      	ldr	r2, [pc, #336]	; (8002f28 <HAL_GPIO_Init+0x29c>)
 8002dd8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002dda:	089b      	lsrs	r3, r3, #2
 8002ddc:	3302      	adds	r3, #2
 8002dde:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8002de2:	60fb      	str	r3, [r7, #12]
        CLEAR_BIT(temp, (0x0Fu) << (4u * (position & 0x03u)));
 8002de4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002de6:	f003 0303 	and.w	r3, r3, #3
 8002dea:	009b      	lsls	r3, r3, #2
 8002dec:	220f      	movs	r2, #15
 8002dee:	fa02 f303 	lsl.w	r3, r2, r3
 8002df2:	43db      	mvns	r3, r3
 8002df4:	68fa      	ldr	r2, [r7, #12]
 8002df6:	4013      	ands	r3, r2
 8002df8:	60fb      	str	r3, [r7, #12]
        SET_BIT(temp, (GPIO_GET_INDEX(GPIOx)) << (4u * (position & 0x03u)));
 8002dfa:	687b      	ldr	r3, [r7, #4]
 8002dfc:	4a4b      	ldr	r2, [pc, #300]	; (8002f2c <HAL_GPIO_Init+0x2a0>)
 8002dfe:	4293      	cmp	r3, r2
 8002e00:	d013      	beq.n	8002e2a <HAL_GPIO_Init+0x19e>
 8002e02:	687b      	ldr	r3, [r7, #4]
 8002e04:	4a4a      	ldr	r2, [pc, #296]	; (8002f30 <HAL_GPIO_Init+0x2a4>)
 8002e06:	4293      	cmp	r3, r2
 8002e08:	d00d      	beq.n	8002e26 <HAL_GPIO_Init+0x19a>
 8002e0a:	687b      	ldr	r3, [r7, #4]
 8002e0c:	4a49      	ldr	r2, [pc, #292]	; (8002f34 <HAL_GPIO_Init+0x2a8>)
 8002e0e:	4293      	cmp	r3, r2
 8002e10:	d007      	beq.n	8002e22 <HAL_GPIO_Init+0x196>
 8002e12:	687b      	ldr	r3, [r7, #4]
 8002e14:	4a48      	ldr	r2, [pc, #288]	; (8002f38 <HAL_GPIO_Init+0x2ac>)
 8002e16:	4293      	cmp	r3, r2
 8002e18:	d101      	bne.n	8002e1e <HAL_GPIO_Init+0x192>
 8002e1a:	2303      	movs	r3, #3
 8002e1c:	e006      	b.n	8002e2c <HAL_GPIO_Init+0x1a0>
 8002e1e:	2304      	movs	r3, #4
 8002e20:	e004      	b.n	8002e2c <HAL_GPIO_Init+0x1a0>
 8002e22:	2302      	movs	r3, #2
 8002e24:	e002      	b.n	8002e2c <HAL_GPIO_Init+0x1a0>
 8002e26:	2301      	movs	r3, #1
 8002e28:	e000      	b.n	8002e2c <HAL_GPIO_Init+0x1a0>
 8002e2a:	2300      	movs	r3, #0
 8002e2c:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8002e2e:	f002 0203 	and.w	r2, r2, #3
 8002e32:	0092      	lsls	r2, r2, #2
 8002e34:	4093      	lsls	r3, r2
 8002e36:	68fa      	ldr	r2, [r7, #12]
 8002e38:	4313      	orrs	r3, r2
 8002e3a:	60fb      	str	r3, [r7, #12]
        AFIO->EXTICR[position >> 2u] = temp;
 8002e3c:	493a      	ldr	r1, [pc, #232]	; (8002f28 <HAL_GPIO_Init+0x29c>)
 8002e3e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002e40:	089b      	lsrs	r3, r3, #2
 8002e42:	3302      	adds	r3, #2
 8002e44:	68fa      	ldr	r2, [r7, #12]
 8002e46:	f841 2023 	str.w	r2, [r1, r3, lsl #2]


        /* Configure the interrupt mask */
        if ((GPIO_Init->Mode & GPIO_MODE_IT) == GPIO_MODE_IT)
 8002e4a:	683b      	ldr	r3, [r7, #0]
 8002e4c:	685b      	ldr	r3, [r3, #4]
 8002e4e:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8002e52:	2b00      	cmp	r3, #0
 8002e54:	d006      	beq.n	8002e64 <HAL_GPIO_Init+0x1d8>
        {
          SET_BIT(EXTI->IMR, iocurrent);
 8002e56:	4b39      	ldr	r3, [pc, #228]	; (8002f3c <HAL_GPIO_Init+0x2b0>)
 8002e58:	681a      	ldr	r2, [r3, #0]
 8002e5a:	4938      	ldr	r1, [pc, #224]	; (8002f3c <HAL_GPIO_Init+0x2b0>)
 8002e5c:	69bb      	ldr	r3, [r7, #24]
 8002e5e:	4313      	orrs	r3, r2
 8002e60:	600b      	str	r3, [r1, #0]
 8002e62:	e006      	b.n	8002e72 <HAL_GPIO_Init+0x1e6>
        }
        else
        {
          CLEAR_BIT(EXTI->IMR, iocurrent);
 8002e64:	4b35      	ldr	r3, [pc, #212]	; (8002f3c <HAL_GPIO_Init+0x2b0>)
 8002e66:	681a      	ldr	r2, [r3, #0]
 8002e68:	69bb      	ldr	r3, [r7, #24]
 8002e6a:	43db      	mvns	r3, r3
 8002e6c:	4933      	ldr	r1, [pc, #204]	; (8002f3c <HAL_GPIO_Init+0x2b0>)
 8002e6e:	4013      	ands	r3, r2
 8002e70:	600b      	str	r3, [r1, #0]
        }

        /* Configure the event mask */
        if ((GPIO_Init->Mode & GPIO_MODE_EVT) == GPIO_MODE_EVT)
 8002e72:	683b      	ldr	r3, [r7, #0]
 8002e74:	685b      	ldr	r3, [r3, #4]
 8002e76:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002e7a:	2b00      	cmp	r3, #0
 8002e7c:	d006      	beq.n	8002e8c <HAL_GPIO_Init+0x200>
        {
          SET_BIT(EXTI->EMR, iocurrent);
 8002e7e:	4b2f      	ldr	r3, [pc, #188]	; (8002f3c <HAL_GPIO_Init+0x2b0>)
 8002e80:	685a      	ldr	r2, [r3, #4]
 8002e82:	492e      	ldr	r1, [pc, #184]	; (8002f3c <HAL_GPIO_Init+0x2b0>)
 8002e84:	69bb      	ldr	r3, [r7, #24]
 8002e86:	4313      	orrs	r3, r2
 8002e88:	604b      	str	r3, [r1, #4]
 8002e8a:	e006      	b.n	8002e9a <HAL_GPIO_Init+0x20e>
        }
        else
        {
          CLEAR_BIT(EXTI->EMR, iocurrent);
 8002e8c:	4b2b      	ldr	r3, [pc, #172]	; (8002f3c <HAL_GPIO_Init+0x2b0>)
 8002e8e:	685a      	ldr	r2, [r3, #4]
 8002e90:	69bb      	ldr	r3, [r7, #24]
 8002e92:	43db      	mvns	r3, r3
 8002e94:	4929      	ldr	r1, [pc, #164]	; (8002f3c <HAL_GPIO_Init+0x2b0>)
 8002e96:	4013      	ands	r3, r2
 8002e98:	604b      	str	r3, [r1, #4]
        }

        /* Enable or disable the rising trigger */
        if ((GPIO_Init->Mode & RISING_EDGE) == RISING_EDGE)
 8002e9a:	683b      	ldr	r3, [r7, #0]
 8002e9c:	685b      	ldr	r3, [r3, #4]
 8002e9e:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8002ea2:	2b00      	cmp	r3, #0
 8002ea4:	d006      	beq.n	8002eb4 <HAL_GPIO_Init+0x228>
        {
          SET_BIT(EXTI->RTSR, iocurrent);
 8002ea6:	4b25      	ldr	r3, [pc, #148]	; (8002f3c <HAL_GPIO_Init+0x2b0>)
 8002ea8:	689a      	ldr	r2, [r3, #8]
 8002eaa:	4924      	ldr	r1, [pc, #144]	; (8002f3c <HAL_GPIO_Init+0x2b0>)
 8002eac:	69bb      	ldr	r3, [r7, #24]
 8002eae:	4313      	orrs	r3, r2
 8002eb0:	608b      	str	r3, [r1, #8]
 8002eb2:	e006      	b.n	8002ec2 <HAL_GPIO_Init+0x236>
        }
        else
        {
          CLEAR_BIT(EXTI->RTSR, iocurrent);
 8002eb4:	4b21      	ldr	r3, [pc, #132]	; (8002f3c <HAL_GPIO_Init+0x2b0>)
 8002eb6:	689a      	ldr	r2, [r3, #8]
 8002eb8:	69bb      	ldr	r3, [r7, #24]
 8002eba:	43db      	mvns	r3, r3
 8002ebc:	491f      	ldr	r1, [pc, #124]	; (8002f3c <HAL_GPIO_Init+0x2b0>)
 8002ebe:	4013      	ands	r3, r2
 8002ec0:	608b      	str	r3, [r1, #8]
        }

        /* Enable or disable the falling trigger */
        if ((GPIO_Init->Mode & FALLING_EDGE) == FALLING_EDGE)
 8002ec2:	683b      	ldr	r3, [r7, #0]
 8002ec4:	685b      	ldr	r3, [r3, #4]
 8002ec6:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8002eca:	2b00      	cmp	r3, #0
 8002ecc:	d006      	beq.n	8002edc <HAL_GPIO_Init+0x250>
        {
          SET_BIT(EXTI->FTSR, iocurrent);
 8002ece:	4b1b      	ldr	r3, [pc, #108]	; (8002f3c <HAL_GPIO_Init+0x2b0>)
 8002ed0:	68da      	ldr	r2, [r3, #12]
 8002ed2:	491a      	ldr	r1, [pc, #104]	; (8002f3c <HAL_GPIO_Init+0x2b0>)
 8002ed4:	69bb      	ldr	r3, [r7, #24]
 8002ed6:	4313      	orrs	r3, r2
 8002ed8:	60cb      	str	r3, [r1, #12]
 8002eda:	e006      	b.n	8002eea <HAL_GPIO_Init+0x25e>
        }
        else
        {
          CLEAR_BIT(EXTI->FTSR, iocurrent);
 8002edc:	4b17      	ldr	r3, [pc, #92]	; (8002f3c <HAL_GPIO_Init+0x2b0>)
 8002ede:	68da      	ldr	r2, [r3, #12]
 8002ee0:	69bb      	ldr	r3, [r7, #24]
 8002ee2:	43db      	mvns	r3, r3
 8002ee4:	4915      	ldr	r1, [pc, #84]	; (8002f3c <HAL_GPIO_Init+0x2b0>)
 8002ee6:	4013      	ands	r3, r2
 8002ee8:	60cb      	str	r3, [r1, #12]
        }
      }
    }

	position++;
 8002eea:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002eec:	3301      	adds	r3, #1
 8002eee:	627b      	str	r3, [r7, #36]	; 0x24
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8002ef0:	683b      	ldr	r3, [r7, #0]
 8002ef2:	681a      	ldr	r2, [r3, #0]
 8002ef4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002ef6:	fa22 f303 	lsr.w	r3, r2, r3
 8002efa:	2b00      	cmp	r3, #0
 8002efc:	f47f aed0 	bne.w	8002ca0 <HAL_GPIO_Init+0x14>
  }
}
 8002f00:	bf00      	nop
 8002f02:	372c      	adds	r7, #44	; 0x2c
 8002f04:	46bd      	mov	sp, r7
 8002f06:	bc80      	pop	{r7}
 8002f08:	4770      	bx	lr
 8002f0a:	bf00      	nop
 8002f0c:	10210000 	.word	0x10210000
 8002f10:	10110000 	.word	0x10110000
 8002f14:	10120000 	.word	0x10120000
 8002f18:	10310000 	.word	0x10310000
 8002f1c:	10320000 	.word	0x10320000
 8002f20:	10220000 	.word	0x10220000
 8002f24:	40021000 	.word	0x40021000
 8002f28:	40010000 	.word	0x40010000
 8002f2c:	40010800 	.word	0x40010800
 8002f30:	40010c00 	.word	0x40010c00
 8002f34:	40011000 	.word	0x40011000
 8002f38:	40011400 	.word	0x40011400
 8002f3c:	40010400 	.word	0x40010400

08002f40 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8002f40:	b480      	push	{r7}
 8002f42:	b083      	sub	sp, #12
 8002f44:	af00      	add	r7, sp, #0
 8002f46:	6078      	str	r0, [r7, #4]
 8002f48:	460b      	mov	r3, r1
 8002f4a:	807b      	strh	r3, [r7, #2]
 8002f4c:	4613      	mov	r3, r2
 8002f4e:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if (PinState != GPIO_PIN_RESET)
 8002f50:	787b      	ldrb	r3, [r7, #1]
 8002f52:	2b00      	cmp	r3, #0
 8002f54:	d003      	beq.n	8002f5e <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 8002f56:	887a      	ldrh	r2, [r7, #2]
 8002f58:	687b      	ldr	r3, [r7, #4]
 8002f5a:	611a      	str	r2, [r3, #16]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16u;
  }
}
 8002f5c:	e003      	b.n	8002f66 <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16u;
 8002f5e:	887b      	ldrh	r3, [r7, #2]
 8002f60:	041a      	lsls	r2, r3, #16
 8002f62:	687b      	ldr	r3, [r7, #4]
 8002f64:	611a      	str	r2, [r3, #16]
}
 8002f66:	bf00      	nop
 8002f68:	370c      	adds	r7, #12
 8002f6a:	46bd      	mov	sp, r7
 8002f6c:	bc80      	pop	{r7}
 8002f6e:	4770      	bx	lr

08002f70 <HAL_GPIO_EXTI_IRQHandler>:
  * @brief  This function handles EXTI interrupt request.
  * @param  GPIO_Pin: Specifies the pins connected EXTI line
  * @retval None
  */
void HAL_GPIO_EXTI_IRQHandler(uint16_t GPIO_Pin)
{
 8002f70:	b580      	push	{r7, lr}
 8002f72:	b082      	sub	sp, #8
 8002f74:	af00      	add	r7, sp, #0
 8002f76:	4603      	mov	r3, r0
 8002f78:	80fb      	strh	r3, [r7, #6]
  /* EXTI line interrupt detected */
  if (__HAL_GPIO_EXTI_GET_IT(GPIO_Pin) != 0x00u)
 8002f7a:	4b08      	ldr	r3, [pc, #32]	; (8002f9c <HAL_GPIO_EXTI_IRQHandler+0x2c>)
 8002f7c:	695a      	ldr	r2, [r3, #20]
 8002f7e:	88fb      	ldrh	r3, [r7, #6]
 8002f80:	4013      	ands	r3, r2
 8002f82:	2b00      	cmp	r3, #0
 8002f84:	d006      	beq.n	8002f94 <HAL_GPIO_EXTI_IRQHandler+0x24>
  {
    __HAL_GPIO_EXTI_CLEAR_IT(GPIO_Pin);
 8002f86:	4a05      	ldr	r2, [pc, #20]	; (8002f9c <HAL_GPIO_EXTI_IRQHandler+0x2c>)
 8002f88:	88fb      	ldrh	r3, [r7, #6]
 8002f8a:	6153      	str	r3, [r2, #20]
    HAL_GPIO_EXTI_Callback(GPIO_Pin);
 8002f8c:	88fb      	ldrh	r3, [r7, #6]
 8002f8e:	4618      	mov	r0, r3
 8002f90:	f000 f806 	bl	8002fa0 <HAL_GPIO_EXTI_Callback>
  }
}
 8002f94:	bf00      	nop
 8002f96:	3708      	adds	r7, #8
 8002f98:	46bd      	mov	sp, r7
 8002f9a:	bd80      	pop	{r7, pc}
 8002f9c:	40010400 	.word	0x40010400

08002fa0 <HAL_GPIO_EXTI_Callback>:
  * @brief  EXTI line detection callbacks.
  * @param  GPIO_Pin: Specifies the pins connected EXTI line
  * @retval None
  */
__weak void HAL_GPIO_EXTI_Callback(uint16_t GPIO_Pin)
{
 8002fa0:	b480      	push	{r7}
 8002fa2:	b083      	sub	sp, #12
 8002fa4:	af00      	add	r7, sp, #0
 8002fa6:	4603      	mov	r3, r0
 8002fa8:	80fb      	strh	r3, [r7, #6]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(GPIO_Pin);
  /* NOTE: This function Should not be modified, when the callback is needed,
           the HAL_GPIO_EXTI_Callback could be implemented in the user file
   */
}
 8002faa:	bf00      	nop
 8002fac:	370c      	adds	r7, #12
 8002fae:	46bd      	mov	sp, r7
 8002fb0:	bc80      	pop	{r7}
 8002fb2:	4770      	bx	lr

08002fb4 <HAL_I2C_Init>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Init(I2C_HandleTypeDef *hi2c)
{
 8002fb4:	b580      	push	{r7, lr}
 8002fb6:	b084      	sub	sp, #16
 8002fb8:	af00      	add	r7, sp, #0
 8002fba:	6078      	str	r0, [r7, #4]
  uint32_t freqrange;
  uint32_t pclk1;

  /* Check the I2C handle allocation */
  if (hi2c == NULL)
 8002fbc:	687b      	ldr	r3, [r7, #4]
 8002fbe:	2b00      	cmp	r3, #0
 8002fc0:	d101      	bne.n	8002fc6 <HAL_I2C_Init+0x12>
  {
    return HAL_ERROR;
 8002fc2:	2301      	movs	r3, #1
 8002fc4:	e11f      	b.n	8003206 <HAL_I2C_Init+0x252>
  assert_param(IS_I2C_DUAL_ADDRESS(hi2c->Init.DualAddressMode));
  assert_param(IS_I2C_OWN_ADDRESS2(hi2c->Init.OwnAddress2));
  assert_param(IS_I2C_GENERAL_CALL(hi2c->Init.GeneralCallMode));
  assert_param(IS_I2C_NO_STRETCH(hi2c->Init.NoStretchMode));

  if (hi2c->State == HAL_I2C_STATE_RESET)
 8002fc6:	687b      	ldr	r3, [r7, #4]
 8002fc8:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8002fcc:	b2db      	uxtb	r3, r3
 8002fce:	2b00      	cmp	r3, #0
 8002fd0:	d106      	bne.n	8002fe0 <HAL_I2C_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hi2c->Lock = HAL_UNLOCKED;
 8002fd2:	687b      	ldr	r3, [r7, #4]
 8002fd4:	2200      	movs	r2, #0
 8002fd6:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    hi2c->MspInitCallback(hi2c);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_I2C_MspInit(hi2c);
 8002fda:	6878      	ldr	r0, [r7, #4]
 8002fdc:	f7ff fab8 	bl	8002550 <HAL_I2C_MspInit>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }

  hi2c->State = HAL_I2C_STATE_BUSY;
 8002fe0:	687b      	ldr	r3, [r7, #4]
 8002fe2:	2224      	movs	r2, #36	; 0x24
 8002fe4:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Disable the selected I2C peripheral */
  __HAL_I2C_DISABLE(hi2c);
 8002fe8:	687b      	ldr	r3, [r7, #4]
 8002fea:	681b      	ldr	r3, [r3, #0]
 8002fec:	681a      	ldr	r2, [r3, #0]
 8002fee:	687b      	ldr	r3, [r7, #4]
 8002ff0:	681b      	ldr	r3, [r3, #0]
 8002ff2:	f022 0201 	bic.w	r2, r2, #1
 8002ff6:	601a      	str	r2, [r3, #0]

  /*Reset I2C*/
  hi2c->Instance->CR1 |= I2C_CR1_SWRST;
 8002ff8:	687b      	ldr	r3, [r7, #4]
 8002ffa:	681b      	ldr	r3, [r3, #0]
 8002ffc:	681a      	ldr	r2, [r3, #0]
 8002ffe:	687b      	ldr	r3, [r7, #4]
 8003000:	681b      	ldr	r3, [r3, #0]
 8003002:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 8003006:	601a      	str	r2, [r3, #0]
  hi2c->Instance->CR1 &= ~I2C_CR1_SWRST;
 8003008:	687b      	ldr	r3, [r7, #4]
 800300a:	681b      	ldr	r3, [r3, #0]
 800300c:	681a      	ldr	r2, [r3, #0]
 800300e:	687b      	ldr	r3, [r7, #4]
 8003010:	681b      	ldr	r3, [r3, #0]
 8003012:	f422 4200 	bic.w	r2, r2, #32768	; 0x8000
 8003016:	601a      	str	r2, [r3, #0]

  /* Get PCLK1 frequency */
  pclk1 = HAL_RCC_GetPCLK1Freq();
 8003018:	f001 fb90 	bl	800473c <HAL_RCC_GetPCLK1Freq>
 800301c:	60f8      	str	r0, [r7, #12]

  /* Check the minimum allowed PCLK1 frequency */
  if (I2C_MIN_PCLK_FREQ(pclk1, hi2c->Init.ClockSpeed) == 1U)
 800301e:	687b      	ldr	r3, [r7, #4]
 8003020:	685b      	ldr	r3, [r3, #4]
 8003022:	4a7b      	ldr	r2, [pc, #492]	; (8003210 <HAL_I2C_Init+0x25c>)
 8003024:	4293      	cmp	r3, r2
 8003026:	d807      	bhi.n	8003038 <HAL_I2C_Init+0x84>
 8003028:	68fb      	ldr	r3, [r7, #12]
 800302a:	4a7a      	ldr	r2, [pc, #488]	; (8003214 <HAL_I2C_Init+0x260>)
 800302c:	4293      	cmp	r3, r2
 800302e:	bf94      	ite	ls
 8003030:	2301      	movls	r3, #1
 8003032:	2300      	movhi	r3, #0
 8003034:	b2db      	uxtb	r3, r3
 8003036:	e006      	b.n	8003046 <HAL_I2C_Init+0x92>
 8003038:	68fb      	ldr	r3, [r7, #12]
 800303a:	4a77      	ldr	r2, [pc, #476]	; (8003218 <HAL_I2C_Init+0x264>)
 800303c:	4293      	cmp	r3, r2
 800303e:	bf94      	ite	ls
 8003040:	2301      	movls	r3, #1
 8003042:	2300      	movhi	r3, #0
 8003044:	b2db      	uxtb	r3, r3
 8003046:	2b00      	cmp	r3, #0
 8003048:	d001      	beq.n	800304e <HAL_I2C_Init+0x9a>
  {
    return HAL_ERROR;
 800304a:	2301      	movs	r3, #1
 800304c:	e0db      	b.n	8003206 <HAL_I2C_Init+0x252>
  }

  /* Calculate frequency range */
  freqrange = I2C_FREQRANGE(pclk1);
 800304e:	68fb      	ldr	r3, [r7, #12]
 8003050:	4a72      	ldr	r2, [pc, #456]	; (800321c <HAL_I2C_Init+0x268>)
 8003052:	fba2 2303 	umull	r2, r3, r2, r3
 8003056:	0c9b      	lsrs	r3, r3, #18
 8003058:	60bb      	str	r3, [r7, #8]

  /*---------------------------- I2Cx CR2 Configuration ----------------------*/
  /* Configure I2Cx: Frequency range */
  MODIFY_REG(hi2c->Instance->CR2, I2C_CR2_FREQ, freqrange);
 800305a:	687b      	ldr	r3, [r7, #4]
 800305c:	681b      	ldr	r3, [r3, #0]
 800305e:	685b      	ldr	r3, [r3, #4]
 8003060:	f023 013f 	bic.w	r1, r3, #63	; 0x3f
 8003064:	687b      	ldr	r3, [r7, #4]
 8003066:	681b      	ldr	r3, [r3, #0]
 8003068:	68ba      	ldr	r2, [r7, #8]
 800306a:	430a      	orrs	r2, r1
 800306c:	605a      	str	r2, [r3, #4]

  /*---------------------------- I2Cx TRISE Configuration --------------------*/
  /* Configure I2Cx: Rise Time */
  MODIFY_REG(hi2c->Instance->TRISE, I2C_TRISE_TRISE, I2C_RISE_TIME(freqrange, hi2c->Init.ClockSpeed));
 800306e:	687b      	ldr	r3, [r7, #4]
 8003070:	681b      	ldr	r3, [r3, #0]
 8003072:	6a1b      	ldr	r3, [r3, #32]
 8003074:	f023 013f 	bic.w	r1, r3, #63	; 0x3f
 8003078:	687b      	ldr	r3, [r7, #4]
 800307a:	685b      	ldr	r3, [r3, #4]
 800307c:	4a64      	ldr	r2, [pc, #400]	; (8003210 <HAL_I2C_Init+0x25c>)
 800307e:	4293      	cmp	r3, r2
 8003080:	d802      	bhi.n	8003088 <HAL_I2C_Init+0xd4>
 8003082:	68bb      	ldr	r3, [r7, #8]
 8003084:	3301      	adds	r3, #1
 8003086:	e009      	b.n	800309c <HAL_I2C_Init+0xe8>
 8003088:	68bb      	ldr	r3, [r7, #8]
 800308a:	f44f 7296 	mov.w	r2, #300	; 0x12c
 800308e:	fb02 f303 	mul.w	r3, r2, r3
 8003092:	4a63      	ldr	r2, [pc, #396]	; (8003220 <HAL_I2C_Init+0x26c>)
 8003094:	fba2 2303 	umull	r2, r3, r2, r3
 8003098:	099b      	lsrs	r3, r3, #6
 800309a:	3301      	adds	r3, #1
 800309c:	687a      	ldr	r2, [r7, #4]
 800309e:	6812      	ldr	r2, [r2, #0]
 80030a0:	430b      	orrs	r3, r1
 80030a2:	6213      	str	r3, [r2, #32]

  /*---------------------------- I2Cx CCR Configuration ----------------------*/
  /* Configure I2Cx: Speed */
  MODIFY_REG(hi2c->Instance->CCR, (I2C_CCR_FS | I2C_CCR_DUTY | I2C_CCR_CCR), I2C_SPEED(pclk1, hi2c->Init.ClockSpeed, hi2c->Init.DutyCycle));
 80030a4:	687b      	ldr	r3, [r7, #4]
 80030a6:	681b      	ldr	r3, [r3, #0]
 80030a8:	69db      	ldr	r3, [r3, #28]
 80030aa:	f423 424f 	bic.w	r2, r3, #52992	; 0xcf00
 80030ae:	f022 02ff 	bic.w	r2, r2, #255	; 0xff
 80030b2:	687b      	ldr	r3, [r7, #4]
 80030b4:	685b      	ldr	r3, [r3, #4]
 80030b6:	4956      	ldr	r1, [pc, #344]	; (8003210 <HAL_I2C_Init+0x25c>)
 80030b8:	428b      	cmp	r3, r1
 80030ba:	d80d      	bhi.n	80030d8 <HAL_I2C_Init+0x124>
 80030bc:	68fb      	ldr	r3, [r7, #12]
 80030be:	1e59      	subs	r1, r3, #1
 80030c0:	687b      	ldr	r3, [r7, #4]
 80030c2:	685b      	ldr	r3, [r3, #4]
 80030c4:	005b      	lsls	r3, r3, #1
 80030c6:	fbb1 f3f3 	udiv	r3, r1, r3
 80030ca:	3301      	adds	r3, #1
 80030cc:	f3c3 030b 	ubfx	r3, r3, #0, #12
 80030d0:	2b04      	cmp	r3, #4
 80030d2:	bf38      	it	cc
 80030d4:	2304      	movcc	r3, #4
 80030d6:	e04f      	b.n	8003178 <HAL_I2C_Init+0x1c4>
 80030d8:	687b      	ldr	r3, [r7, #4]
 80030da:	689b      	ldr	r3, [r3, #8]
 80030dc:	2b00      	cmp	r3, #0
 80030de:	d111      	bne.n	8003104 <HAL_I2C_Init+0x150>
 80030e0:	68fb      	ldr	r3, [r7, #12]
 80030e2:	1e58      	subs	r0, r3, #1
 80030e4:	687b      	ldr	r3, [r7, #4]
 80030e6:	6859      	ldr	r1, [r3, #4]
 80030e8:	460b      	mov	r3, r1
 80030ea:	005b      	lsls	r3, r3, #1
 80030ec:	440b      	add	r3, r1
 80030ee:	fbb0 f3f3 	udiv	r3, r0, r3
 80030f2:	3301      	adds	r3, #1
 80030f4:	f3c3 030b 	ubfx	r3, r3, #0, #12
 80030f8:	2b00      	cmp	r3, #0
 80030fa:	bf0c      	ite	eq
 80030fc:	2301      	moveq	r3, #1
 80030fe:	2300      	movne	r3, #0
 8003100:	b2db      	uxtb	r3, r3
 8003102:	e012      	b.n	800312a <HAL_I2C_Init+0x176>
 8003104:	68fb      	ldr	r3, [r7, #12]
 8003106:	1e58      	subs	r0, r3, #1
 8003108:	687b      	ldr	r3, [r7, #4]
 800310a:	6859      	ldr	r1, [r3, #4]
 800310c:	460b      	mov	r3, r1
 800310e:	009b      	lsls	r3, r3, #2
 8003110:	440b      	add	r3, r1
 8003112:	0099      	lsls	r1, r3, #2
 8003114:	440b      	add	r3, r1
 8003116:	fbb0 f3f3 	udiv	r3, r0, r3
 800311a:	3301      	adds	r3, #1
 800311c:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8003120:	2b00      	cmp	r3, #0
 8003122:	bf0c      	ite	eq
 8003124:	2301      	moveq	r3, #1
 8003126:	2300      	movne	r3, #0
 8003128:	b2db      	uxtb	r3, r3
 800312a:	2b00      	cmp	r3, #0
 800312c:	d001      	beq.n	8003132 <HAL_I2C_Init+0x17e>
 800312e:	2301      	movs	r3, #1
 8003130:	e022      	b.n	8003178 <HAL_I2C_Init+0x1c4>
 8003132:	687b      	ldr	r3, [r7, #4]
 8003134:	689b      	ldr	r3, [r3, #8]
 8003136:	2b00      	cmp	r3, #0
 8003138:	d10e      	bne.n	8003158 <HAL_I2C_Init+0x1a4>
 800313a:	68fb      	ldr	r3, [r7, #12]
 800313c:	1e58      	subs	r0, r3, #1
 800313e:	687b      	ldr	r3, [r7, #4]
 8003140:	6859      	ldr	r1, [r3, #4]
 8003142:	460b      	mov	r3, r1
 8003144:	005b      	lsls	r3, r3, #1
 8003146:	440b      	add	r3, r1
 8003148:	fbb0 f3f3 	udiv	r3, r0, r3
 800314c:	3301      	adds	r3, #1
 800314e:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8003152:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8003156:	e00f      	b.n	8003178 <HAL_I2C_Init+0x1c4>
 8003158:	68fb      	ldr	r3, [r7, #12]
 800315a:	1e58      	subs	r0, r3, #1
 800315c:	687b      	ldr	r3, [r7, #4]
 800315e:	6859      	ldr	r1, [r3, #4]
 8003160:	460b      	mov	r3, r1
 8003162:	009b      	lsls	r3, r3, #2
 8003164:	440b      	add	r3, r1
 8003166:	0099      	lsls	r1, r3, #2
 8003168:	440b      	add	r3, r1
 800316a:	fbb0 f3f3 	udiv	r3, r0, r3
 800316e:	3301      	adds	r3, #1
 8003170:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8003174:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 8003178:	6879      	ldr	r1, [r7, #4]
 800317a:	6809      	ldr	r1, [r1, #0]
 800317c:	4313      	orrs	r3, r2
 800317e:	61cb      	str	r3, [r1, #28]

  /*---------------------------- I2Cx CR1 Configuration ----------------------*/
  /* Configure I2Cx: Generalcall and NoStretch mode */
  MODIFY_REG(hi2c->Instance->CR1, (I2C_CR1_ENGC | I2C_CR1_NOSTRETCH), (hi2c->Init.GeneralCallMode | hi2c->Init.NoStretchMode));
 8003180:	687b      	ldr	r3, [r7, #4]
 8003182:	681b      	ldr	r3, [r3, #0]
 8003184:	681b      	ldr	r3, [r3, #0]
 8003186:	f023 01c0 	bic.w	r1, r3, #192	; 0xc0
 800318a:	687b      	ldr	r3, [r7, #4]
 800318c:	69da      	ldr	r2, [r3, #28]
 800318e:	687b      	ldr	r3, [r7, #4]
 8003190:	6a1b      	ldr	r3, [r3, #32]
 8003192:	431a      	orrs	r2, r3
 8003194:	687b      	ldr	r3, [r7, #4]
 8003196:	681b      	ldr	r3, [r3, #0]
 8003198:	430a      	orrs	r2, r1
 800319a:	601a      	str	r2, [r3, #0]

  /*---------------------------- I2Cx OAR1 Configuration ---------------------*/
  /* Configure I2Cx: Own Address1 and addressing mode */
  MODIFY_REG(hi2c->Instance->OAR1, (I2C_OAR1_ADDMODE | I2C_OAR1_ADD8_9 | I2C_OAR1_ADD1_7 | I2C_OAR1_ADD0), (hi2c->Init.AddressingMode | hi2c->Init.OwnAddress1));
 800319c:	687b      	ldr	r3, [r7, #4]
 800319e:	681b      	ldr	r3, [r3, #0]
 80031a0:	689b      	ldr	r3, [r3, #8]
 80031a2:	f423 4303 	bic.w	r3, r3, #33536	; 0x8300
 80031a6:	f023 03ff 	bic.w	r3, r3, #255	; 0xff
 80031aa:	687a      	ldr	r2, [r7, #4]
 80031ac:	6911      	ldr	r1, [r2, #16]
 80031ae:	687a      	ldr	r2, [r7, #4]
 80031b0:	68d2      	ldr	r2, [r2, #12]
 80031b2:	4311      	orrs	r1, r2
 80031b4:	687a      	ldr	r2, [r7, #4]
 80031b6:	6812      	ldr	r2, [r2, #0]
 80031b8:	430b      	orrs	r3, r1
 80031ba:	6093      	str	r3, [r2, #8]

  /*---------------------------- I2Cx OAR2 Configuration ---------------------*/
  /* Configure I2Cx: Dual mode and Own Address2 */
  MODIFY_REG(hi2c->Instance->OAR2, (I2C_OAR2_ENDUAL | I2C_OAR2_ADD2), (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2));
 80031bc:	687b      	ldr	r3, [r7, #4]
 80031be:	681b      	ldr	r3, [r3, #0]
 80031c0:	68db      	ldr	r3, [r3, #12]
 80031c2:	f023 01ff 	bic.w	r1, r3, #255	; 0xff
 80031c6:	687b      	ldr	r3, [r7, #4]
 80031c8:	695a      	ldr	r2, [r3, #20]
 80031ca:	687b      	ldr	r3, [r7, #4]
 80031cc:	699b      	ldr	r3, [r3, #24]
 80031ce:	431a      	orrs	r2, r3
 80031d0:	687b      	ldr	r3, [r7, #4]
 80031d2:	681b      	ldr	r3, [r3, #0]
 80031d4:	430a      	orrs	r2, r1
 80031d6:	60da      	str	r2, [r3, #12]

  /* Enable the selected I2C peripheral */
  __HAL_I2C_ENABLE(hi2c);
 80031d8:	687b      	ldr	r3, [r7, #4]
 80031da:	681b      	ldr	r3, [r3, #0]
 80031dc:	681a      	ldr	r2, [r3, #0]
 80031de:	687b      	ldr	r3, [r7, #4]
 80031e0:	681b      	ldr	r3, [r3, #0]
 80031e2:	f042 0201 	orr.w	r2, r2, #1
 80031e6:	601a      	str	r2, [r3, #0]

  hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 80031e8:	687b      	ldr	r3, [r7, #4]
 80031ea:	2200      	movs	r2, #0
 80031ec:	641a      	str	r2, [r3, #64]	; 0x40
  hi2c->State = HAL_I2C_STATE_READY;
 80031ee:	687b      	ldr	r3, [r7, #4]
 80031f0:	2220      	movs	r2, #32
 80031f2:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
  hi2c->PreviousState = I2C_STATE_NONE;
 80031f6:	687b      	ldr	r3, [r7, #4]
 80031f8:	2200      	movs	r2, #0
 80031fa:	631a      	str	r2, [r3, #48]	; 0x30
  hi2c->Mode = HAL_I2C_MODE_NONE;
 80031fc:	687b      	ldr	r3, [r7, #4]
 80031fe:	2200      	movs	r2, #0
 8003200:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

  return HAL_OK;
 8003204:	2300      	movs	r3, #0
}
 8003206:	4618      	mov	r0, r3
 8003208:	3710      	adds	r7, #16
 800320a:	46bd      	mov	sp, r7
 800320c:	bd80      	pop	{r7, pc}
 800320e:	bf00      	nop
 8003210:	000186a0 	.word	0x000186a0
 8003214:	001e847f 	.word	0x001e847f
 8003218:	003d08ff 	.word	0x003d08ff
 800321c:	431bde83 	.word	0x431bde83
 8003220:	10624dd3 	.word	0x10624dd3

08003224 <HAL_I2C_Mem_Write>:
  * @param  Size Amount of data to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Mem_Write(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint16_t MemAddress, uint16_t MemAddSize, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8003224:	b580      	push	{r7, lr}
 8003226:	b088      	sub	sp, #32
 8003228:	af02      	add	r7, sp, #8
 800322a:	60f8      	str	r0, [r7, #12]
 800322c:	4608      	mov	r0, r1
 800322e:	4611      	mov	r1, r2
 8003230:	461a      	mov	r2, r3
 8003232:	4603      	mov	r3, r0
 8003234:	817b      	strh	r3, [r7, #10]
 8003236:	460b      	mov	r3, r1
 8003238:	813b      	strh	r3, [r7, #8]
 800323a:	4613      	mov	r3, r2
 800323c:	80fb      	strh	r3, [r7, #6]
  /* Init tickstart for timeout management*/
  uint32_t tickstart = HAL_GetTick();
 800323e:	f7ff fb75 	bl	800292c <HAL_GetTick>
 8003242:	6178      	str	r0, [r7, #20]

  /* Check the parameters */
  assert_param(IS_I2C_MEMADD_SIZE(MemAddSize));

  if (hi2c->State == HAL_I2C_STATE_READY)
 8003244:	68fb      	ldr	r3, [r7, #12]
 8003246:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 800324a:	b2db      	uxtb	r3, r3
 800324c:	2b20      	cmp	r3, #32
 800324e:	f040 80d9 	bne.w	8003404 <HAL_I2C_Mem_Write+0x1e0>
  {
    /* Wait until BUSY flag is reset */
    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY_FLAG, tickstart) != HAL_OK)
 8003252:	697b      	ldr	r3, [r7, #20]
 8003254:	9300      	str	r3, [sp, #0]
 8003256:	2319      	movs	r3, #25
 8003258:	2201      	movs	r2, #1
 800325a:	496d      	ldr	r1, [pc, #436]	; (8003410 <HAL_I2C_Mem_Write+0x1ec>)
 800325c:	68f8      	ldr	r0, [r7, #12]
 800325e:	f000 fcbb 	bl	8003bd8 <I2C_WaitOnFlagUntilTimeout>
 8003262:	4603      	mov	r3, r0
 8003264:	2b00      	cmp	r3, #0
 8003266:	d001      	beq.n	800326c <HAL_I2C_Mem_Write+0x48>
    {
      return HAL_BUSY;
 8003268:	2302      	movs	r3, #2
 800326a:	e0cc      	b.n	8003406 <HAL_I2C_Mem_Write+0x1e2>
    }

    /* Process Locked */
    __HAL_LOCK(hi2c);
 800326c:	68fb      	ldr	r3, [r7, #12]
 800326e:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8003272:	2b01      	cmp	r3, #1
 8003274:	d101      	bne.n	800327a <HAL_I2C_Mem_Write+0x56>
 8003276:	2302      	movs	r3, #2
 8003278:	e0c5      	b.n	8003406 <HAL_I2C_Mem_Write+0x1e2>
 800327a:	68fb      	ldr	r3, [r7, #12]
 800327c:	2201      	movs	r2, #1
 800327e:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Check if the I2C is already enabled */
    if ((hi2c->Instance->CR1 & I2C_CR1_PE) != I2C_CR1_PE)
 8003282:	68fb      	ldr	r3, [r7, #12]
 8003284:	681b      	ldr	r3, [r3, #0]
 8003286:	681b      	ldr	r3, [r3, #0]
 8003288:	f003 0301 	and.w	r3, r3, #1
 800328c:	2b01      	cmp	r3, #1
 800328e:	d007      	beq.n	80032a0 <HAL_I2C_Mem_Write+0x7c>
    {
      /* Enable I2C peripheral */
      __HAL_I2C_ENABLE(hi2c);
 8003290:	68fb      	ldr	r3, [r7, #12]
 8003292:	681b      	ldr	r3, [r3, #0]
 8003294:	681a      	ldr	r2, [r3, #0]
 8003296:	68fb      	ldr	r3, [r7, #12]
 8003298:	681b      	ldr	r3, [r3, #0]
 800329a:	f042 0201 	orr.w	r2, r2, #1
 800329e:	601a      	str	r2, [r3, #0]
    }

    /* Disable Pos */
    CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 80032a0:	68fb      	ldr	r3, [r7, #12]
 80032a2:	681b      	ldr	r3, [r3, #0]
 80032a4:	681a      	ldr	r2, [r3, #0]
 80032a6:	68fb      	ldr	r3, [r7, #12]
 80032a8:	681b      	ldr	r3, [r3, #0]
 80032aa:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 80032ae:	601a      	str	r2, [r3, #0]

    hi2c->State     = HAL_I2C_STATE_BUSY_TX;
 80032b0:	68fb      	ldr	r3, [r7, #12]
 80032b2:	2221      	movs	r2, #33	; 0x21
 80032b4:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode      = HAL_I2C_MODE_MEM;
 80032b8:	68fb      	ldr	r3, [r7, #12]
 80032ba:	2240      	movs	r2, #64	; 0x40
 80032bc:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 80032c0:	68fb      	ldr	r3, [r7, #12]
 80032c2:	2200      	movs	r2, #0
 80032c4:	641a      	str	r2, [r3, #64]	; 0x40

    /* Prepare transfer parameters */
    hi2c->pBuffPtr    = pData;
 80032c6:	68fb      	ldr	r3, [r7, #12]
 80032c8:	6a3a      	ldr	r2, [r7, #32]
 80032ca:	625a      	str	r2, [r3, #36]	; 0x24
    hi2c->XferCount   = Size;
 80032cc:	68fb      	ldr	r3, [r7, #12]
 80032ce:	8cba      	ldrh	r2, [r7, #36]	; 0x24
 80032d0:	855a      	strh	r2, [r3, #42]	; 0x2a
    hi2c->XferSize    = hi2c->XferCount;
 80032d2:	68fb      	ldr	r3, [r7, #12]
 80032d4:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80032d6:	b29a      	uxth	r2, r3
 80032d8:	68fb      	ldr	r3, [r7, #12]
 80032da:	851a      	strh	r2, [r3, #40]	; 0x28
    hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 80032dc:	68fb      	ldr	r3, [r7, #12]
 80032de:	4a4d      	ldr	r2, [pc, #308]	; (8003414 <HAL_I2C_Mem_Write+0x1f0>)
 80032e0:	62da      	str	r2, [r3, #44]	; 0x2c

    /* Send Slave Address and Memory Address */
    if (I2C_RequestMemoryWrite(hi2c, DevAddress, MemAddress, MemAddSize, Timeout, tickstart) != HAL_OK)
 80032e2:	88f8      	ldrh	r0, [r7, #6]
 80032e4:	893a      	ldrh	r2, [r7, #8]
 80032e6:	8979      	ldrh	r1, [r7, #10]
 80032e8:	697b      	ldr	r3, [r7, #20]
 80032ea:	9301      	str	r3, [sp, #4]
 80032ec:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80032ee:	9300      	str	r3, [sp, #0]
 80032f0:	4603      	mov	r3, r0
 80032f2:	68f8      	ldr	r0, [r7, #12]
 80032f4:	f000 faf2 	bl	80038dc <I2C_RequestMemoryWrite>
 80032f8:	4603      	mov	r3, r0
 80032fa:	2b00      	cmp	r3, #0
 80032fc:	d052      	beq.n	80033a4 <HAL_I2C_Mem_Write+0x180>
    {
      return HAL_ERROR;
 80032fe:	2301      	movs	r3, #1
 8003300:	e081      	b.n	8003406 <HAL_I2C_Mem_Write+0x1e2>
    }

    while (hi2c->XferSize > 0U)
    {
      /* Wait until TXE flag is set */
      if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8003302:	697a      	ldr	r2, [r7, #20]
 8003304:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 8003306:	68f8      	ldr	r0, [r7, #12]
 8003308:	f000 fd3c 	bl	8003d84 <I2C_WaitOnTXEFlagUntilTimeout>
 800330c:	4603      	mov	r3, r0
 800330e:	2b00      	cmp	r3, #0
 8003310:	d00d      	beq.n	800332e <HAL_I2C_Mem_Write+0x10a>
      {
        if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 8003312:	68fb      	ldr	r3, [r7, #12]
 8003314:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003316:	2b04      	cmp	r3, #4
 8003318:	d107      	bne.n	800332a <HAL_I2C_Mem_Write+0x106>
        {
          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 800331a:	68fb      	ldr	r3, [r7, #12]
 800331c:	681b      	ldr	r3, [r3, #0]
 800331e:	681a      	ldr	r2, [r3, #0]
 8003320:	68fb      	ldr	r3, [r7, #12]
 8003322:	681b      	ldr	r3, [r3, #0]
 8003324:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8003328:	601a      	str	r2, [r3, #0]
        }
        return HAL_ERROR;
 800332a:	2301      	movs	r3, #1
 800332c:	e06b      	b.n	8003406 <HAL_I2C_Mem_Write+0x1e2>
      }

      /* Write data to DR */
      hi2c->Instance->DR = *hi2c->pBuffPtr;
 800332e:	68fb      	ldr	r3, [r7, #12]
 8003330:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003332:	781a      	ldrb	r2, [r3, #0]
 8003334:	68fb      	ldr	r3, [r7, #12]
 8003336:	681b      	ldr	r3, [r3, #0]
 8003338:	611a      	str	r2, [r3, #16]

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 800333a:	68fb      	ldr	r3, [r7, #12]
 800333c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800333e:	1c5a      	adds	r2, r3, #1
 8003340:	68fb      	ldr	r3, [r7, #12]
 8003342:	625a      	str	r2, [r3, #36]	; 0x24

      /* Update counter */
      hi2c->XferSize--;
 8003344:	68fb      	ldr	r3, [r7, #12]
 8003346:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8003348:	3b01      	subs	r3, #1
 800334a:	b29a      	uxth	r2, r3
 800334c:	68fb      	ldr	r3, [r7, #12]
 800334e:	851a      	strh	r2, [r3, #40]	; 0x28
      hi2c->XferCount--;
 8003350:	68fb      	ldr	r3, [r7, #12]
 8003352:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8003354:	b29b      	uxth	r3, r3
 8003356:	3b01      	subs	r3, #1
 8003358:	b29a      	uxth	r2, r3
 800335a:	68fb      	ldr	r3, [r7, #12]
 800335c:	855a      	strh	r2, [r3, #42]	; 0x2a

      if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == SET) && (hi2c->XferSize != 0U))
 800335e:	68fb      	ldr	r3, [r7, #12]
 8003360:	681b      	ldr	r3, [r3, #0]
 8003362:	695b      	ldr	r3, [r3, #20]
 8003364:	f003 0304 	and.w	r3, r3, #4
 8003368:	2b04      	cmp	r3, #4
 800336a:	d11b      	bne.n	80033a4 <HAL_I2C_Mem_Write+0x180>
 800336c:	68fb      	ldr	r3, [r7, #12]
 800336e:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8003370:	2b00      	cmp	r3, #0
 8003372:	d017      	beq.n	80033a4 <HAL_I2C_Mem_Write+0x180>
      {
        /* Write data to DR */
        hi2c->Instance->DR = *hi2c->pBuffPtr;
 8003374:	68fb      	ldr	r3, [r7, #12]
 8003376:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003378:	781a      	ldrb	r2, [r3, #0]
 800337a:	68fb      	ldr	r3, [r7, #12]
 800337c:	681b      	ldr	r3, [r3, #0]
 800337e:	611a      	str	r2, [r3, #16]

        /* Increment Buffer pointer */
        hi2c->pBuffPtr++;
 8003380:	68fb      	ldr	r3, [r7, #12]
 8003382:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003384:	1c5a      	adds	r2, r3, #1
 8003386:	68fb      	ldr	r3, [r7, #12]
 8003388:	625a      	str	r2, [r3, #36]	; 0x24

        /* Update counter */
        hi2c->XferSize--;
 800338a:	68fb      	ldr	r3, [r7, #12]
 800338c:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800338e:	3b01      	subs	r3, #1
 8003390:	b29a      	uxth	r2, r3
 8003392:	68fb      	ldr	r3, [r7, #12]
 8003394:	851a      	strh	r2, [r3, #40]	; 0x28
        hi2c->XferCount--;
 8003396:	68fb      	ldr	r3, [r7, #12]
 8003398:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800339a:	b29b      	uxth	r3, r3
 800339c:	3b01      	subs	r3, #1
 800339e:	b29a      	uxth	r2, r3
 80033a0:	68fb      	ldr	r3, [r7, #12]
 80033a2:	855a      	strh	r2, [r3, #42]	; 0x2a
    while (hi2c->XferSize > 0U)
 80033a4:	68fb      	ldr	r3, [r7, #12]
 80033a6:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80033a8:	2b00      	cmp	r3, #0
 80033aa:	d1aa      	bne.n	8003302 <HAL_I2C_Mem_Write+0xde>
      }
    }

    /* Wait until BTF flag is set */
    if (I2C_WaitOnBTFFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 80033ac:	697a      	ldr	r2, [r7, #20]
 80033ae:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 80033b0:	68f8      	ldr	r0, [r7, #12]
 80033b2:	f000 fd28 	bl	8003e06 <I2C_WaitOnBTFFlagUntilTimeout>
 80033b6:	4603      	mov	r3, r0
 80033b8:	2b00      	cmp	r3, #0
 80033ba:	d00d      	beq.n	80033d8 <HAL_I2C_Mem_Write+0x1b4>
    {
      if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 80033bc:	68fb      	ldr	r3, [r7, #12]
 80033be:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80033c0:	2b04      	cmp	r3, #4
 80033c2:	d107      	bne.n	80033d4 <HAL_I2C_Mem_Write+0x1b0>
      {
        /* Generate Stop */
        SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 80033c4:	68fb      	ldr	r3, [r7, #12]
 80033c6:	681b      	ldr	r3, [r3, #0]
 80033c8:	681a      	ldr	r2, [r3, #0]
 80033ca:	68fb      	ldr	r3, [r7, #12]
 80033cc:	681b      	ldr	r3, [r3, #0]
 80033ce:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 80033d2:	601a      	str	r2, [r3, #0]
      }
      return HAL_ERROR;
 80033d4:	2301      	movs	r3, #1
 80033d6:	e016      	b.n	8003406 <HAL_I2C_Mem_Write+0x1e2>
    }

    /* Generate Stop */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 80033d8:	68fb      	ldr	r3, [r7, #12]
 80033da:	681b      	ldr	r3, [r3, #0]
 80033dc:	681a      	ldr	r2, [r3, #0]
 80033de:	68fb      	ldr	r3, [r7, #12]
 80033e0:	681b      	ldr	r3, [r3, #0]
 80033e2:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 80033e6:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 80033e8:	68fb      	ldr	r3, [r7, #12]
 80033ea:	2220      	movs	r2, #32
 80033ec:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode = HAL_I2C_MODE_NONE;
 80033f0:	68fb      	ldr	r3, [r7, #12]
 80033f2:	2200      	movs	r2, #0
 80033f4:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 80033f8:	68fb      	ldr	r3, [r7, #12]
 80033fa:	2200      	movs	r2, #0
 80033fc:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    return HAL_OK;
 8003400:	2300      	movs	r3, #0
 8003402:	e000      	b.n	8003406 <HAL_I2C_Mem_Write+0x1e2>
  }
  else
  {
    return HAL_BUSY;
 8003404:	2302      	movs	r3, #2
  }
}
 8003406:	4618      	mov	r0, r3
 8003408:	3718      	adds	r7, #24
 800340a:	46bd      	mov	sp, r7
 800340c:	bd80      	pop	{r7, pc}
 800340e:	bf00      	nop
 8003410:	00100002 	.word	0x00100002
 8003414:	ffff0000 	.word	0xffff0000

08003418 <HAL_I2C_Mem_Read>:
  * @param  Size Amount of data to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Mem_Read(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint16_t MemAddress, uint16_t MemAddSize, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8003418:	b580      	push	{r7, lr}
 800341a:	b08c      	sub	sp, #48	; 0x30
 800341c:	af02      	add	r7, sp, #8
 800341e:	60f8      	str	r0, [r7, #12]
 8003420:	4608      	mov	r0, r1
 8003422:	4611      	mov	r1, r2
 8003424:	461a      	mov	r2, r3
 8003426:	4603      	mov	r3, r0
 8003428:	817b      	strh	r3, [r7, #10]
 800342a:	460b      	mov	r3, r1
 800342c:	813b      	strh	r3, [r7, #8]
 800342e:	4613      	mov	r3, r2
 8003430:	80fb      	strh	r3, [r7, #6]
  __IO uint32_t count = 0U;
 8003432:	2300      	movs	r3, #0
 8003434:	623b      	str	r3, [r7, #32]

  /* Init tickstart for timeout management*/
  uint32_t tickstart = HAL_GetTick();
 8003436:	f7ff fa79 	bl	800292c <HAL_GetTick>
 800343a:	6278      	str	r0, [r7, #36]	; 0x24

  /* Check the parameters */
  assert_param(IS_I2C_MEMADD_SIZE(MemAddSize));

  if (hi2c->State == HAL_I2C_STATE_READY)
 800343c:	68fb      	ldr	r3, [r7, #12]
 800343e:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8003442:	b2db      	uxtb	r3, r3
 8003444:	2b20      	cmp	r3, #32
 8003446:	f040 823d 	bne.w	80038c4 <HAL_I2C_Mem_Read+0x4ac>
  {
    /* Wait until BUSY flag is reset */
    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY_FLAG, tickstart) != HAL_OK)
 800344a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800344c:	9300      	str	r3, [sp, #0]
 800344e:	2319      	movs	r3, #25
 8003450:	2201      	movs	r2, #1
 8003452:	4981      	ldr	r1, [pc, #516]	; (8003658 <HAL_I2C_Mem_Read+0x240>)
 8003454:	68f8      	ldr	r0, [r7, #12]
 8003456:	f000 fbbf 	bl	8003bd8 <I2C_WaitOnFlagUntilTimeout>
 800345a:	4603      	mov	r3, r0
 800345c:	2b00      	cmp	r3, #0
 800345e:	d001      	beq.n	8003464 <HAL_I2C_Mem_Read+0x4c>
    {
      return HAL_BUSY;
 8003460:	2302      	movs	r3, #2
 8003462:	e230      	b.n	80038c6 <HAL_I2C_Mem_Read+0x4ae>
    }

    /* Process Locked */
    __HAL_LOCK(hi2c);
 8003464:	68fb      	ldr	r3, [r7, #12]
 8003466:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 800346a:	2b01      	cmp	r3, #1
 800346c:	d101      	bne.n	8003472 <HAL_I2C_Mem_Read+0x5a>
 800346e:	2302      	movs	r3, #2
 8003470:	e229      	b.n	80038c6 <HAL_I2C_Mem_Read+0x4ae>
 8003472:	68fb      	ldr	r3, [r7, #12]
 8003474:	2201      	movs	r2, #1
 8003476:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Check if the I2C is already enabled */
    if ((hi2c->Instance->CR1 & I2C_CR1_PE) != I2C_CR1_PE)
 800347a:	68fb      	ldr	r3, [r7, #12]
 800347c:	681b      	ldr	r3, [r3, #0]
 800347e:	681b      	ldr	r3, [r3, #0]
 8003480:	f003 0301 	and.w	r3, r3, #1
 8003484:	2b01      	cmp	r3, #1
 8003486:	d007      	beq.n	8003498 <HAL_I2C_Mem_Read+0x80>
    {
      /* Enable I2C peripheral */
      __HAL_I2C_ENABLE(hi2c);
 8003488:	68fb      	ldr	r3, [r7, #12]
 800348a:	681b      	ldr	r3, [r3, #0]
 800348c:	681a      	ldr	r2, [r3, #0]
 800348e:	68fb      	ldr	r3, [r7, #12]
 8003490:	681b      	ldr	r3, [r3, #0]
 8003492:	f042 0201 	orr.w	r2, r2, #1
 8003496:	601a      	str	r2, [r3, #0]
    }

    /* Disable Pos */
    CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 8003498:	68fb      	ldr	r3, [r7, #12]
 800349a:	681b      	ldr	r3, [r3, #0]
 800349c:	681a      	ldr	r2, [r3, #0]
 800349e:	68fb      	ldr	r3, [r7, #12]
 80034a0:	681b      	ldr	r3, [r3, #0]
 80034a2:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 80034a6:	601a      	str	r2, [r3, #0]

    hi2c->State     = HAL_I2C_STATE_BUSY_RX;
 80034a8:	68fb      	ldr	r3, [r7, #12]
 80034aa:	2222      	movs	r2, #34	; 0x22
 80034ac:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode      = HAL_I2C_MODE_MEM;
 80034b0:	68fb      	ldr	r3, [r7, #12]
 80034b2:	2240      	movs	r2, #64	; 0x40
 80034b4:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 80034b8:	68fb      	ldr	r3, [r7, #12]
 80034ba:	2200      	movs	r2, #0
 80034bc:	641a      	str	r2, [r3, #64]	; 0x40

    /* Prepare transfer parameters */
    hi2c->pBuffPtr    = pData;
 80034be:	68fb      	ldr	r3, [r7, #12]
 80034c0:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 80034c2:	625a      	str	r2, [r3, #36]	; 0x24
    hi2c->XferCount   = Size;
 80034c4:	68fb      	ldr	r3, [r7, #12]
 80034c6:	8eba      	ldrh	r2, [r7, #52]	; 0x34
 80034c8:	855a      	strh	r2, [r3, #42]	; 0x2a
    hi2c->XferSize    = hi2c->XferCount;
 80034ca:	68fb      	ldr	r3, [r7, #12]
 80034cc:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80034ce:	b29a      	uxth	r2, r3
 80034d0:	68fb      	ldr	r3, [r7, #12]
 80034d2:	851a      	strh	r2, [r3, #40]	; 0x28
    hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 80034d4:	68fb      	ldr	r3, [r7, #12]
 80034d6:	4a61      	ldr	r2, [pc, #388]	; (800365c <HAL_I2C_Mem_Read+0x244>)
 80034d8:	62da      	str	r2, [r3, #44]	; 0x2c

    /* Send Slave Address and Memory Address */
    if (I2C_RequestMemoryRead(hi2c, DevAddress, MemAddress, MemAddSize, Timeout, tickstart) != HAL_OK)
 80034da:	88f8      	ldrh	r0, [r7, #6]
 80034dc:	893a      	ldrh	r2, [r7, #8]
 80034de:	8979      	ldrh	r1, [r7, #10]
 80034e0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80034e2:	9301      	str	r3, [sp, #4]
 80034e4:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80034e6:	9300      	str	r3, [sp, #0]
 80034e8:	4603      	mov	r3, r0
 80034ea:	68f8      	ldr	r0, [r7, #12]
 80034ec:	f000 fa8c 	bl	8003a08 <I2C_RequestMemoryRead>
 80034f0:	4603      	mov	r3, r0
 80034f2:	2b00      	cmp	r3, #0
 80034f4:	d001      	beq.n	80034fa <HAL_I2C_Mem_Read+0xe2>
    {
      return HAL_ERROR;
 80034f6:	2301      	movs	r3, #1
 80034f8:	e1e5      	b.n	80038c6 <HAL_I2C_Mem_Read+0x4ae>
    }

    if (hi2c->XferSize == 0U)
 80034fa:	68fb      	ldr	r3, [r7, #12]
 80034fc:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80034fe:	2b00      	cmp	r3, #0
 8003500:	d113      	bne.n	800352a <HAL_I2C_Mem_Read+0x112>
    {
      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8003502:	2300      	movs	r3, #0
 8003504:	61fb      	str	r3, [r7, #28]
 8003506:	68fb      	ldr	r3, [r7, #12]
 8003508:	681b      	ldr	r3, [r3, #0]
 800350a:	695b      	ldr	r3, [r3, #20]
 800350c:	61fb      	str	r3, [r7, #28]
 800350e:	68fb      	ldr	r3, [r7, #12]
 8003510:	681b      	ldr	r3, [r3, #0]
 8003512:	699b      	ldr	r3, [r3, #24]
 8003514:	61fb      	str	r3, [r7, #28]
 8003516:	69fb      	ldr	r3, [r7, #28]

      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8003518:	68fb      	ldr	r3, [r7, #12]
 800351a:	681b      	ldr	r3, [r3, #0]
 800351c:	681a      	ldr	r2, [r3, #0]
 800351e:	68fb      	ldr	r3, [r7, #12]
 8003520:	681b      	ldr	r3, [r3, #0]
 8003522:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8003526:	601a      	str	r2, [r3, #0]
 8003528:	e1b9      	b.n	800389e <HAL_I2C_Mem_Read+0x486>
    }
    else if (hi2c->XferSize == 1U)
 800352a:	68fb      	ldr	r3, [r7, #12]
 800352c:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800352e:	2b01      	cmp	r3, #1
 8003530:	d11d      	bne.n	800356e <HAL_I2C_Mem_Read+0x156>
    {
      /* Disable Acknowledge */
      CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8003532:	68fb      	ldr	r3, [r7, #12]
 8003534:	681b      	ldr	r3, [r3, #0]
 8003536:	681a      	ldr	r2, [r3, #0]
 8003538:	68fb      	ldr	r3, [r7, #12]
 800353a:	681b      	ldr	r3, [r3, #0]
 800353c:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8003540:	601a      	str	r2, [r3, #0]
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8003542:	b672      	cpsid	i
      /* Disable all active IRQs around ADDR clearing and STOP programming because the EV6_3
         software sequence must complete before the current byte end of transfer */
      __disable_irq();

      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8003544:	2300      	movs	r3, #0
 8003546:	61bb      	str	r3, [r7, #24]
 8003548:	68fb      	ldr	r3, [r7, #12]
 800354a:	681b      	ldr	r3, [r3, #0]
 800354c:	695b      	ldr	r3, [r3, #20]
 800354e:	61bb      	str	r3, [r7, #24]
 8003550:	68fb      	ldr	r3, [r7, #12]
 8003552:	681b      	ldr	r3, [r3, #0]
 8003554:	699b      	ldr	r3, [r3, #24]
 8003556:	61bb      	str	r3, [r7, #24]
 8003558:	69bb      	ldr	r3, [r7, #24]

      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 800355a:	68fb      	ldr	r3, [r7, #12]
 800355c:	681b      	ldr	r3, [r3, #0]
 800355e:	681a      	ldr	r2, [r3, #0]
 8003560:	68fb      	ldr	r3, [r7, #12]
 8003562:	681b      	ldr	r3, [r3, #0]
 8003564:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8003568:	601a      	str	r2, [r3, #0]
  __ASM volatile ("cpsie i" : : : "memory");
 800356a:	b662      	cpsie	i
 800356c:	e197      	b.n	800389e <HAL_I2C_Mem_Read+0x486>

      /* Re-enable IRQs */
      __enable_irq();
    }
    else if (hi2c->XferSize == 2U)
 800356e:	68fb      	ldr	r3, [r7, #12]
 8003570:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8003572:	2b02      	cmp	r3, #2
 8003574:	d11d      	bne.n	80035b2 <HAL_I2C_Mem_Read+0x19a>
    {
      /* Enable Pos */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 8003576:	68fb      	ldr	r3, [r7, #12]
 8003578:	681b      	ldr	r3, [r3, #0]
 800357a:	681a      	ldr	r2, [r3, #0]
 800357c:	68fb      	ldr	r3, [r7, #12]
 800357e:	681b      	ldr	r3, [r3, #0]
 8003580:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 8003584:	601a      	str	r2, [r3, #0]
  __ASM volatile ("cpsid i" : : : "memory");
 8003586:	b672      	cpsid	i
      /* Disable all active IRQs around ADDR clearing and STOP programming because the EV6_3
         software sequence must complete before the current byte end of transfer */
      __disable_irq();

      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8003588:	2300      	movs	r3, #0
 800358a:	617b      	str	r3, [r7, #20]
 800358c:	68fb      	ldr	r3, [r7, #12]
 800358e:	681b      	ldr	r3, [r3, #0]
 8003590:	695b      	ldr	r3, [r3, #20]
 8003592:	617b      	str	r3, [r7, #20]
 8003594:	68fb      	ldr	r3, [r7, #12]
 8003596:	681b      	ldr	r3, [r3, #0]
 8003598:	699b      	ldr	r3, [r3, #24]
 800359a:	617b      	str	r3, [r7, #20]
 800359c:	697b      	ldr	r3, [r7, #20]

      /* Disable Acknowledge */
      CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 800359e:	68fb      	ldr	r3, [r7, #12]
 80035a0:	681b      	ldr	r3, [r3, #0]
 80035a2:	681a      	ldr	r2, [r3, #0]
 80035a4:	68fb      	ldr	r3, [r7, #12]
 80035a6:	681b      	ldr	r3, [r3, #0]
 80035a8:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 80035ac:	601a      	str	r2, [r3, #0]
  __ASM volatile ("cpsie i" : : : "memory");
 80035ae:	b662      	cpsie	i
 80035b0:	e175      	b.n	800389e <HAL_I2C_Mem_Read+0x486>
      __enable_irq();
    }
    else
    {
      /* Enable Acknowledge */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 80035b2:	68fb      	ldr	r3, [r7, #12]
 80035b4:	681b      	ldr	r3, [r3, #0]
 80035b6:	681a      	ldr	r2, [r3, #0]
 80035b8:	68fb      	ldr	r3, [r7, #12]
 80035ba:	681b      	ldr	r3, [r3, #0]
 80035bc:	f442 6280 	orr.w	r2, r2, #1024	; 0x400
 80035c0:	601a      	str	r2, [r3, #0]
      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 80035c2:	2300      	movs	r3, #0
 80035c4:	613b      	str	r3, [r7, #16]
 80035c6:	68fb      	ldr	r3, [r7, #12]
 80035c8:	681b      	ldr	r3, [r3, #0]
 80035ca:	695b      	ldr	r3, [r3, #20]
 80035cc:	613b      	str	r3, [r7, #16]
 80035ce:	68fb      	ldr	r3, [r7, #12]
 80035d0:	681b      	ldr	r3, [r3, #0]
 80035d2:	699b      	ldr	r3, [r3, #24]
 80035d4:	613b      	str	r3, [r7, #16]
 80035d6:	693b      	ldr	r3, [r7, #16]
    }

    while (hi2c->XferSize > 0U)
 80035d8:	e161      	b.n	800389e <HAL_I2C_Mem_Read+0x486>
    {
      if (hi2c->XferSize <= 3U)
 80035da:	68fb      	ldr	r3, [r7, #12]
 80035dc:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80035de:	2b03      	cmp	r3, #3
 80035e0:	f200 811a 	bhi.w	8003818 <HAL_I2C_Mem_Read+0x400>
      {
        /* One byte */
        if (hi2c->XferSize == 1U)
 80035e4:	68fb      	ldr	r3, [r7, #12]
 80035e6:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80035e8:	2b01      	cmp	r3, #1
 80035ea:	d123      	bne.n	8003634 <HAL_I2C_Mem_Read+0x21c>
        {
          /* Wait until RXNE flag is set */
          if (I2C_WaitOnRXNEFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 80035ec:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80035ee:	6bb9      	ldr	r1, [r7, #56]	; 0x38
 80035f0:	68f8      	ldr	r0, [r7, #12]
 80035f2:	f000 fc49 	bl	8003e88 <I2C_WaitOnRXNEFlagUntilTimeout>
 80035f6:	4603      	mov	r3, r0
 80035f8:	2b00      	cmp	r3, #0
 80035fa:	d001      	beq.n	8003600 <HAL_I2C_Mem_Read+0x1e8>
          {
            return HAL_ERROR;
 80035fc:	2301      	movs	r3, #1
 80035fe:	e162      	b.n	80038c6 <HAL_I2C_Mem_Read+0x4ae>
          }

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8003600:	68fb      	ldr	r3, [r7, #12]
 8003602:	681b      	ldr	r3, [r3, #0]
 8003604:	691a      	ldr	r2, [r3, #16]
 8003606:	68fb      	ldr	r3, [r7, #12]
 8003608:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800360a:	b2d2      	uxtb	r2, r2
 800360c:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 800360e:	68fb      	ldr	r3, [r7, #12]
 8003610:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003612:	1c5a      	adds	r2, r3, #1
 8003614:	68fb      	ldr	r3, [r7, #12]
 8003616:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 8003618:	68fb      	ldr	r3, [r7, #12]
 800361a:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800361c:	3b01      	subs	r3, #1
 800361e:	b29a      	uxth	r2, r3
 8003620:	68fb      	ldr	r3, [r7, #12]
 8003622:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 8003624:	68fb      	ldr	r3, [r7, #12]
 8003626:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8003628:	b29b      	uxth	r3, r3
 800362a:	3b01      	subs	r3, #1
 800362c:	b29a      	uxth	r2, r3
 800362e:	68fb      	ldr	r3, [r7, #12]
 8003630:	855a      	strh	r2, [r3, #42]	; 0x2a
 8003632:	e134      	b.n	800389e <HAL_I2C_Mem_Read+0x486>
        }
        /* Two bytes */
        else if (hi2c->XferSize == 2U)
 8003634:	68fb      	ldr	r3, [r7, #12]
 8003636:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8003638:	2b02      	cmp	r3, #2
 800363a:	d150      	bne.n	80036de <HAL_I2C_Mem_Read+0x2c6>
        {
          /* Wait until BTF flag is set */
          if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BTF, RESET, Timeout, tickstart) != HAL_OK)
 800363c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800363e:	9300      	str	r3, [sp, #0]
 8003640:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8003642:	2200      	movs	r2, #0
 8003644:	4906      	ldr	r1, [pc, #24]	; (8003660 <HAL_I2C_Mem_Read+0x248>)
 8003646:	68f8      	ldr	r0, [r7, #12]
 8003648:	f000 fac6 	bl	8003bd8 <I2C_WaitOnFlagUntilTimeout>
 800364c:	4603      	mov	r3, r0
 800364e:	2b00      	cmp	r3, #0
 8003650:	d008      	beq.n	8003664 <HAL_I2C_Mem_Read+0x24c>
          {
            return HAL_ERROR;
 8003652:	2301      	movs	r3, #1
 8003654:	e137      	b.n	80038c6 <HAL_I2C_Mem_Read+0x4ae>
 8003656:	bf00      	nop
 8003658:	00100002 	.word	0x00100002
 800365c:	ffff0000 	.word	0xffff0000
 8003660:	00010004 	.word	0x00010004
  __ASM volatile ("cpsid i" : : : "memory");
 8003664:	b672      	cpsid	i
          /* Disable all active IRQs around ADDR clearing and STOP programming because the EV6_3
             software sequence must complete before the current byte end of transfer */
          __disable_irq();

          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8003666:	68fb      	ldr	r3, [r7, #12]
 8003668:	681b      	ldr	r3, [r3, #0]
 800366a:	681a      	ldr	r2, [r3, #0]
 800366c:	68fb      	ldr	r3, [r7, #12]
 800366e:	681b      	ldr	r3, [r3, #0]
 8003670:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8003674:	601a      	str	r2, [r3, #0]

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8003676:	68fb      	ldr	r3, [r7, #12]
 8003678:	681b      	ldr	r3, [r3, #0]
 800367a:	691a      	ldr	r2, [r3, #16]
 800367c:	68fb      	ldr	r3, [r7, #12]
 800367e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003680:	b2d2      	uxtb	r2, r2
 8003682:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 8003684:	68fb      	ldr	r3, [r7, #12]
 8003686:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003688:	1c5a      	adds	r2, r3, #1
 800368a:	68fb      	ldr	r3, [r7, #12]
 800368c:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 800368e:	68fb      	ldr	r3, [r7, #12]
 8003690:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8003692:	3b01      	subs	r3, #1
 8003694:	b29a      	uxth	r2, r3
 8003696:	68fb      	ldr	r3, [r7, #12]
 8003698:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 800369a:	68fb      	ldr	r3, [r7, #12]
 800369c:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800369e:	b29b      	uxth	r3, r3
 80036a0:	3b01      	subs	r3, #1
 80036a2:	b29a      	uxth	r2, r3
 80036a4:	68fb      	ldr	r3, [r7, #12]
 80036a6:	855a      	strh	r2, [r3, #42]	; 0x2a
  __ASM volatile ("cpsie i" : : : "memory");
 80036a8:	b662      	cpsie	i

          /* Re-enable IRQs */
          __enable_irq();

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 80036aa:	68fb      	ldr	r3, [r7, #12]
 80036ac:	681b      	ldr	r3, [r3, #0]
 80036ae:	691a      	ldr	r2, [r3, #16]
 80036b0:	68fb      	ldr	r3, [r7, #12]
 80036b2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80036b4:	b2d2      	uxtb	r2, r2
 80036b6:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 80036b8:	68fb      	ldr	r3, [r7, #12]
 80036ba:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80036bc:	1c5a      	adds	r2, r3, #1
 80036be:	68fb      	ldr	r3, [r7, #12]
 80036c0:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 80036c2:	68fb      	ldr	r3, [r7, #12]
 80036c4:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80036c6:	3b01      	subs	r3, #1
 80036c8:	b29a      	uxth	r2, r3
 80036ca:	68fb      	ldr	r3, [r7, #12]
 80036cc:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 80036ce:	68fb      	ldr	r3, [r7, #12]
 80036d0:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80036d2:	b29b      	uxth	r3, r3
 80036d4:	3b01      	subs	r3, #1
 80036d6:	b29a      	uxth	r2, r3
 80036d8:	68fb      	ldr	r3, [r7, #12]
 80036da:	855a      	strh	r2, [r3, #42]	; 0x2a
 80036dc:	e0df      	b.n	800389e <HAL_I2C_Mem_Read+0x486>
        }
        /* 3 Last bytes */
        else
        {
          /* Wait until BTF flag is set */
          if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BTF, RESET, Timeout, tickstart) != HAL_OK)
 80036de:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80036e0:	9300      	str	r3, [sp, #0]
 80036e2:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80036e4:	2200      	movs	r2, #0
 80036e6:	497a      	ldr	r1, [pc, #488]	; (80038d0 <HAL_I2C_Mem_Read+0x4b8>)
 80036e8:	68f8      	ldr	r0, [r7, #12]
 80036ea:	f000 fa75 	bl	8003bd8 <I2C_WaitOnFlagUntilTimeout>
 80036ee:	4603      	mov	r3, r0
 80036f0:	2b00      	cmp	r3, #0
 80036f2:	d001      	beq.n	80036f8 <HAL_I2C_Mem_Read+0x2e0>
          {
            return HAL_ERROR;
 80036f4:	2301      	movs	r3, #1
 80036f6:	e0e6      	b.n	80038c6 <HAL_I2C_Mem_Read+0x4ae>
          }

          /* Disable Acknowledge */
          CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 80036f8:	68fb      	ldr	r3, [r7, #12]
 80036fa:	681b      	ldr	r3, [r3, #0]
 80036fc:	681a      	ldr	r2, [r3, #0]
 80036fe:	68fb      	ldr	r3, [r7, #12]
 8003700:	681b      	ldr	r3, [r3, #0]
 8003702:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8003706:	601a      	str	r2, [r3, #0]
  __ASM volatile ("cpsid i" : : : "memory");
 8003708:	b672      	cpsid	i
          /* Disable all active IRQs around ADDR clearing and STOP programming because the EV6_3
             software sequence must complete before the current byte end of transfer */
          __disable_irq();

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 800370a:	68fb      	ldr	r3, [r7, #12]
 800370c:	681b      	ldr	r3, [r3, #0]
 800370e:	691a      	ldr	r2, [r3, #16]
 8003710:	68fb      	ldr	r3, [r7, #12]
 8003712:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003714:	b2d2      	uxtb	r2, r2
 8003716:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 8003718:	68fb      	ldr	r3, [r7, #12]
 800371a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800371c:	1c5a      	adds	r2, r3, #1
 800371e:	68fb      	ldr	r3, [r7, #12]
 8003720:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 8003722:	68fb      	ldr	r3, [r7, #12]
 8003724:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8003726:	3b01      	subs	r3, #1
 8003728:	b29a      	uxth	r2, r3
 800372a:	68fb      	ldr	r3, [r7, #12]
 800372c:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 800372e:	68fb      	ldr	r3, [r7, #12]
 8003730:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8003732:	b29b      	uxth	r3, r3
 8003734:	3b01      	subs	r3, #1
 8003736:	b29a      	uxth	r2, r3
 8003738:	68fb      	ldr	r3, [r7, #12]
 800373a:	855a      	strh	r2, [r3, #42]	; 0x2a

          /* Wait until BTF flag is set */
          count = I2C_TIMEOUT_FLAG * (SystemCoreClock / 25U / 1000U);
 800373c:	4b65      	ldr	r3, [pc, #404]	; (80038d4 <HAL_I2C_Mem_Read+0x4bc>)
 800373e:	681b      	ldr	r3, [r3, #0]
 8003740:	08db      	lsrs	r3, r3, #3
 8003742:	4a65      	ldr	r2, [pc, #404]	; (80038d8 <HAL_I2C_Mem_Read+0x4c0>)
 8003744:	fba2 2303 	umull	r2, r3, r2, r3
 8003748:	0a1a      	lsrs	r2, r3, #8
 800374a:	4613      	mov	r3, r2
 800374c:	009b      	lsls	r3, r3, #2
 800374e:	4413      	add	r3, r2
 8003750:	00da      	lsls	r2, r3, #3
 8003752:	1ad3      	subs	r3, r2, r3
 8003754:	623b      	str	r3, [r7, #32]
          do
          {
            count--;
 8003756:	6a3b      	ldr	r3, [r7, #32]
 8003758:	3b01      	subs	r3, #1
 800375a:	623b      	str	r3, [r7, #32]
            if (count == 0U)
 800375c:	6a3b      	ldr	r3, [r7, #32]
 800375e:	2b00      	cmp	r3, #0
 8003760:	d117      	bne.n	8003792 <HAL_I2C_Mem_Read+0x37a>
            {
              hi2c->PreviousState       = I2C_STATE_NONE;
 8003762:	68fb      	ldr	r3, [r7, #12]
 8003764:	2200      	movs	r2, #0
 8003766:	631a      	str	r2, [r3, #48]	; 0x30
              hi2c->State               = HAL_I2C_STATE_READY;
 8003768:	68fb      	ldr	r3, [r7, #12]
 800376a:	2220      	movs	r2, #32
 800376c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
              hi2c->Mode                = HAL_I2C_MODE_NONE;
 8003770:	68fb      	ldr	r3, [r7, #12]
 8003772:	2200      	movs	r2, #0
 8003774:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
              hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 8003778:	68fb      	ldr	r3, [r7, #12]
 800377a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800377c:	f043 0220 	orr.w	r2, r3, #32
 8003780:	68fb      	ldr	r3, [r7, #12]
 8003782:	641a      	str	r2, [r3, #64]	; 0x40
  __ASM volatile ("cpsie i" : : : "memory");
 8003784:	b662      	cpsie	i

              /* Re-enable IRQs */
              __enable_irq();

              /* Process Unlocked */
              __HAL_UNLOCK(hi2c);
 8003786:	68fb      	ldr	r3, [r7, #12]
 8003788:	2200      	movs	r2, #0
 800378a:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

              return HAL_ERROR;
 800378e:	2301      	movs	r3, #1
 8003790:	e099      	b.n	80038c6 <HAL_I2C_Mem_Read+0x4ae>
            }
          }
          while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == RESET);
 8003792:	68fb      	ldr	r3, [r7, #12]
 8003794:	681b      	ldr	r3, [r3, #0]
 8003796:	695b      	ldr	r3, [r3, #20]
 8003798:	f003 0304 	and.w	r3, r3, #4
 800379c:	2b04      	cmp	r3, #4
 800379e:	d1da      	bne.n	8003756 <HAL_I2C_Mem_Read+0x33e>

          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 80037a0:	68fb      	ldr	r3, [r7, #12]
 80037a2:	681b      	ldr	r3, [r3, #0]
 80037a4:	681a      	ldr	r2, [r3, #0]
 80037a6:	68fb      	ldr	r3, [r7, #12]
 80037a8:	681b      	ldr	r3, [r3, #0]
 80037aa:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 80037ae:	601a      	str	r2, [r3, #0]

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 80037b0:	68fb      	ldr	r3, [r7, #12]
 80037b2:	681b      	ldr	r3, [r3, #0]
 80037b4:	691a      	ldr	r2, [r3, #16]
 80037b6:	68fb      	ldr	r3, [r7, #12]
 80037b8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80037ba:	b2d2      	uxtb	r2, r2
 80037bc:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 80037be:	68fb      	ldr	r3, [r7, #12]
 80037c0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80037c2:	1c5a      	adds	r2, r3, #1
 80037c4:	68fb      	ldr	r3, [r7, #12]
 80037c6:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 80037c8:	68fb      	ldr	r3, [r7, #12]
 80037ca:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80037cc:	3b01      	subs	r3, #1
 80037ce:	b29a      	uxth	r2, r3
 80037d0:	68fb      	ldr	r3, [r7, #12]
 80037d2:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 80037d4:	68fb      	ldr	r3, [r7, #12]
 80037d6:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80037d8:	b29b      	uxth	r3, r3
 80037da:	3b01      	subs	r3, #1
 80037dc:	b29a      	uxth	r2, r3
 80037de:	68fb      	ldr	r3, [r7, #12]
 80037e0:	855a      	strh	r2, [r3, #42]	; 0x2a
 80037e2:	b662      	cpsie	i

          /* Re-enable IRQs */
          __enable_irq();

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 80037e4:	68fb      	ldr	r3, [r7, #12]
 80037e6:	681b      	ldr	r3, [r3, #0]
 80037e8:	691a      	ldr	r2, [r3, #16]
 80037ea:	68fb      	ldr	r3, [r7, #12]
 80037ec:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80037ee:	b2d2      	uxtb	r2, r2
 80037f0:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 80037f2:	68fb      	ldr	r3, [r7, #12]
 80037f4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80037f6:	1c5a      	adds	r2, r3, #1
 80037f8:	68fb      	ldr	r3, [r7, #12]
 80037fa:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 80037fc:	68fb      	ldr	r3, [r7, #12]
 80037fe:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8003800:	3b01      	subs	r3, #1
 8003802:	b29a      	uxth	r2, r3
 8003804:	68fb      	ldr	r3, [r7, #12]
 8003806:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 8003808:	68fb      	ldr	r3, [r7, #12]
 800380a:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800380c:	b29b      	uxth	r3, r3
 800380e:	3b01      	subs	r3, #1
 8003810:	b29a      	uxth	r2, r3
 8003812:	68fb      	ldr	r3, [r7, #12]
 8003814:	855a      	strh	r2, [r3, #42]	; 0x2a
 8003816:	e042      	b.n	800389e <HAL_I2C_Mem_Read+0x486>
        }
      }
      else
      {
        /* Wait until RXNE flag is set */
        if (I2C_WaitOnRXNEFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8003818:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800381a:	6bb9      	ldr	r1, [r7, #56]	; 0x38
 800381c:	68f8      	ldr	r0, [r7, #12]
 800381e:	f000 fb33 	bl	8003e88 <I2C_WaitOnRXNEFlagUntilTimeout>
 8003822:	4603      	mov	r3, r0
 8003824:	2b00      	cmp	r3, #0
 8003826:	d001      	beq.n	800382c <HAL_I2C_Mem_Read+0x414>
        {
          return HAL_ERROR;
 8003828:	2301      	movs	r3, #1
 800382a:	e04c      	b.n	80038c6 <HAL_I2C_Mem_Read+0x4ae>
        }

        /* Read data from DR */
        *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 800382c:	68fb      	ldr	r3, [r7, #12]
 800382e:	681b      	ldr	r3, [r3, #0]
 8003830:	691a      	ldr	r2, [r3, #16]
 8003832:	68fb      	ldr	r3, [r7, #12]
 8003834:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003836:	b2d2      	uxtb	r2, r2
 8003838:	701a      	strb	r2, [r3, #0]

        /* Increment Buffer pointer */
        hi2c->pBuffPtr++;
 800383a:	68fb      	ldr	r3, [r7, #12]
 800383c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800383e:	1c5a      	adds	r2, r3, #1
 8003840:	68fb      	ldr	r3, [r7, #12]
 8003842:	625a      	str	r2, [r3, #36]	; 0x24

        /* Update counter */
        hi2c->XferSize--;
 8003844:	68fb      	ldr	r3, [r7, #12]
 8003846:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8003848:	3b01      	subs	r3, #1
 800384a:	b29a      	uxth	r2, r3
 800384c:	68fb      	ldr	r3, [r7, #12]
 800384e:	851a      	strh	r2, [r3, #40]	; 0x28
        hi2c->XferCount--;
 8003850:	68fb      	ldr	r3, [r7, #12]
 8003852:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8003854:	b29b      	uxth	r3, r3
 8003856:	3b01      	subs	r3, #1
 8003858:	b29a      	uxth	r2, r3
 800385a:	68fb      	ldr	r3, [r7, #12]
 800385c:	855a      	strh	r2, [r3, #42]	; 0x2a

        if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == SET)
 800385e:	68fb      	ldr	r3, [r7, #12]
 8003860:	681b      	ldr	r3, [r3, #0]
 8003862:	695b      	ldr	r3, [r3, #20]
 8003864:	f003 0304 	and.w	r3, r3, #4
 8003868:	2b04      	cmp	r3, #4
 800386a:	d118      	bne.n	800389e <HAL_I2C_Mem_Read+0x486>
        {
          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 800386c:	68fb      	ldr	r3, [r7, #12]
 800386e:	681b      	ldr	r3, [r3, #0]
 8003870:	691a      	ldr	r2, [r3, #16]
 8003872:	68fb      	ldr	r3, [r7, #12]
 8003874:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003876:	b2d2      	uxtb	r2, r2
 8003878:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 800387a:	68fb      	ldr	r3, [r7, #12]
 800387c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800387e:	1c5a      	adds	r2, r3, #1
 8003880:	68fb      	ldr	r3, [r7, #12]
 8003882:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 8003884:	68fb      	ldr	r3, [r7, #12]
 8003886:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8003888:	3b01      	subs	r3, #1
 800388a:	b29a      	uxth	r2, r3
 800388c:	68fb      	ldr	r3, [r7, #12]
 800388e:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 8003890:	68fb      	ldr	r3, [r7, #12]
 8003892:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8003894:	b29b      	uxth	r3, r3
 8003896:	3b01      	subs	r3, #1
 8003898:	b29a      	uxth	r2, r3
 800389a:	68fb      	ldr	r3, [r7, #12]
 800389c:	855a      	strh	r2, [r3, #42]	; 0x2a
    while (hi2c->XferSize > 0U)
 800389e:	68fb      	ldr	r3, [r7, #12]
 80038a0:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80038a2:	2b00      	cmp	r3, #0
 80038a4:	f47f ae99 	bne.w	80035da <HAL_I2C_Mem_Read+0x1c2>
        }
      }
    }

    hi2c->State = HAL_I2C_STATE_READY;
 80038a8:	68fb      	ldr	r3, [r7, #12]
 80038aa:	2220      	movs	r2, #32
 80038ac:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode = HAL_I2C_MODE_NONE;
 80038b0:	68fb      	ldr	r3, [r7, #12]
 80038b2:	2200      	movs	r2, #0
 80038b4:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 80038b8:	68fb      	ldr	r3, [r7, #12]
 80038ba:	2200      	movs	r2, #0
 80038bc:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    return HAL_OK;
 80038c0:	2300      	movs	r3, #0
 80038c2:	e000      	b.n	80038c6 <HAL_I2C_Mem_Read+0x4ae>
  }
  else
  {
    return HAL_BUSY;
 80038c4:	2302      	movs	r3, #2
  }
}
 80038c6:	4618      	mov	r0, r3
 80038c8:	3728      	adds	r7, #40	; 0x28
 80038ca:	46bd      	mov	sp, r7
 80038cc:	bd80      	pop	{r7, pc}
 80038ce:	bf00      	nop
 80038d0:	00010004 	.word	0x00010004
 80038d4:	20000008 	.word	0x20000008
 80038d8:	14f8b589 	.word	0x14f8b589

080038dc <I2C_RequestMemoryWrite>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_RequestMemoryWrite(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint16_t MemAddress, uint16_t MemAddSize, uint32_t Timeout, uint32_t Tickstart)
{
 80038dc:	b580      	push	{r7, lr}
 80038de:	b088      	sub	sp, #32
 80038e0:	af02      	add	r7, sp, #8
 80038e2:	60f8      	str	r0, [r7, #12]
 80038e4:	4608      	mov	r0, r1
 80038e6:	4611      	mov	r1, r2
 80038e8:	461a      	mov	r2, r3
 80038ea:	4603      	mov	r3, r0
 80038ec:	817b      	strh	r3, [r7, #10]
 80038ee:	460b      	mov	r3, r1
 80038f0:	813b      	strh	r3, [r7, #8]
 80038f2:	4613      	mov	r3, r2
 80038f4:	80fb      	strh	r3, [r7, #6]
  /* Generate Start */
  SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 80038f6:	68fb      	ldr	r3, [r7, #12]
 80038f8:	681b      	ldr	r3, [r3, #0]
 80038fa:	681a      	ldr	r2, [r3, #0]
 80038fc:	68fb      	ldr	r3, [r7, #12]
 80038fe:	681b      	ldr	r3, [r3, #0]
 8003900:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8003904:	601a      	str	r2, [r3, #0]

  /* Wait until SB flag is set */
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_SB, RESET, Timeout, Tickstart) != HAL_OK)
 8003906:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003908:	9300      	str	r3, [sp, #0]
 800390a:	6a3b      	ldr	r3, [r7, #32]
 800390c:	2200      	movs	r2, #0
 800390e:	f04f 1101 	mov.w	r1, #65537	; 0x10001
 8003912:	68f8      	ldr	r0, [r7, #12]
 8003914:	f000 f960 	bl	8003bd8 <I2C_WaitOnFlagUntilTimeout>
 8003918:	4603      	mov	r3, r0
 800391a:	2b00      	cmp	r3, #0
 800391c:	d00d      	beq.n	800393a <I2C_RequestMemoryWrite+0x5e>
  {
    if (READ_BIT(hi2c->Instance->CR1, I2C_CR1_START) == I2C_CR1_START)
 800391e:	68fb      	ldr	r3, [r7, #12]
 8003920:	681b      	ldr	r3, [r3, #0]
 8003922:	681b      	ldr	r3, [r3, #0]
 8003924:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8003928:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 800392c:	d103      	bne.n	8003936 <I2C_RequestMemoryWrite+0x5a>
    {
      hi2c->ErrorCode = HAL_I2C_WRONG_START;
 800392e:	68fb      	ldr	r3, [r7, #12]
 8003930:	f44f 7200 	mov.w	r2, #512	; 0x200
 8003934:	641a      	str	r2, [r3, #64]	; 0x40
    }
    return HAL_TIMEOUT;
 8003936:	2303      	movs	r3, #3
 8003938:	e05f      	b.n	80039fa <I2C_RequestMemoryWrite+0x11e>
  }

  /* Send slave address */
  hi2c->Instance->DR = I2C_7BIT_ADD_WRITE(DevAddress);
 800393a:	897b      	ldrh	r3, [r7, #10]
 800393c:	b2db      	uxtb	r3, r3
 800393e:	461a      	mov	r2, r3
 8003940:	68fb      	ldr	r3, [r7, #12]
 8003942:	681b      	ldr	r3, [r3, #0]
 8003944:	f002 02fe 	and.w	r2, r2, #254	; 0xfe
 8003948:	611a      	str	r2, [r3, #16]

  /* Wait until ADDR flag is set */
  if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADDR, Timeout, Tickstart) != HAL_OK)
 800394a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800394c:	6a3a      	ldr	r2, [r7, #32]
 800394e:	492d      	ldr	r1, [pc, #180]	; (8003a04 <I2C_RequestMemoryWrite+0x128>)
 8003950:	68f8      	ldr	r0, [r7, #12]
 8003952:	f000 f998 	bl	8003c86 <I2C_WaitOnMasterAddressFlagUntilTimeout>
 8003956:	4603      	mov	r3, r0
 8003958:	2b00      	cmp	r3, #0
 800395a:	d001      	beq.n	8003960 <I2C_RequestMemoryWrite+0x84>
  {
    return HAL_ERROR;
 800395c:	2301      	movs	r3, #1
 800395e:	e04c      	b.n	80039fa <I2C_RequestMemoryWrite+0x11e>
  }

  /* Clear ADDR flag */
  __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8003960:	2300      	movs	r3, #0
 8003962:	617b      	str	r3, [r7, #20]
 8003964:	68fb      	ldr	r3, [r7, #12]
 8003966:	681b      	ldr	r3, [r3, #0]
 8003968:	695b      	ldr	r3, [r3, #20]
 800396a:	617b      	str	r3, [r7, #20]
 800396c:	68fb      	ldr	r3, [r7, #12]
 800396e:	681b      	ldr	r3, [r3, #0]
 8003970:	699b      	ldr	r3, [r3, #24]
 8003972:	617b      	str	r3, [r7, #20]
 8003974:	697b      	ldr	r3, [r7, #20]

  /* Wait until TXE flag is set */
  if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 8003976:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8003978:	6a39      	ldr	r1, [r7, #32]
 800397a:	68f8      	ldr	r0, [r7, #12]
 800397c:	f000 fa02 	bl	8003d84 <I2C_WaitOnTXEFlagUntilTimeout>
 8003980:	4603      	mov	r3, r0
 8003982:	2b00      	cmp	r3, #0
 8003984:	d00d      	beq.n	80039a2 <I2C_RequestMemoryWrite+0xc6>
  {
    if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 8003986:	68fb      	ldr	r3, [r7, #12]
 8003988:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800398a:	2b04      	cmp	r3, #4
 800398c:	d107      	bne.n	800399e <I2C_RequestMemoryWrite+0xc2>
    {
      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 800398e:	68fb      	ldr	r3, [r7, #12]
 8003990:	681b      	ldr	r3, [r3, #0]
 8003992:	681a      	ldr	r2, [r3, #0]
 8003994:	68fb      	ldr	r3, [r7, #12]
 8003996:	681b      	ldr	r3, [r3, #0]
 8003998:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 800399c:	601a      	str	r2, [r3, #0]
    }
    return HAL_ERROR;
 800399e:	2301      	movs	r3, #1
 80039a0:	e02b      	b.n	80039fa <I2C_RequestMemoryWrite+0x11e>
  }

  /* If Memory address size is 8Bit */
  if (MemAddSize == I2C_MEMADD_SIZE_8BIT)
 80039a2:	88fb      	ldrh	r3, [r7, #6]
 80039a4:	2b01      	cmp	r3, #1
 80039a6:	d105      	bne.n	80039b4 <I2C_RequestMemoryWrite+0xd8>
  {
    /* Send Memory Address */
    hi2c->Instance->DR = I2C_MEM_ADD_LSB(MemAddress);
 80039a8:	893b      	ldrh	r3, [r7, #8]
 80039aa:	b2da      	uxtb	r2, r3
 80039ac:	68fb      	ldr	r3, [r7, #12]
 80039ae:	681b      	ldr	r3, [r3, #0]
 80039b0:	611a      	str	r2, [r3, #16]
 80039b2:	e021      	b.n	80039f8 <I2C_RequestMemoryWrite+0x11c>
  }
  /* If Memory address size is 16Bit */
  else
  {
    /* Send MSB of Memory Address */
    hi2c->Instance->DR = I2C_MEM_ADD_MSB(MemAddress);
 80039b4:	893b      	ldrh	r3, [r7, #8]
 80039b6:	0a1b      	lsrs	r3, r3, #8
 80039b8:	b29b      	uxth	r3, r3
 80039ba:	b2da      	uxtb	r2, r3
 80039bc:	68fb      	ldr	r3, [r7, #12]
 80039be:	681b      	ldr	r3, [r3, #0]
 80039c0:	611a      	str	r2, [r3, #16]

    /* Wait until TXE flag is set */
    if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 80039c2:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80039c4:	6a39      	ldr	r1, [r7, #32]
 80039c6:	68f8      	ldr	r0, [r7, #12]
 80039c8:	f000 f9dc 	bl	8003d84 <I2C_WaitOnTXEFlagUntilTimeout>
 80039cc:	4603      	mov	r3, r0
 80039ce:	2b00      	cmp	r3, #0
 80039d0:	d00d      	beq.n	80039ee <I2C_RequestMemoryWrite+0x112>
    {
      if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 80039d2:	68fb      	ldr	r3, [r7, #12]
 80039d4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80039d6:	2b04      	cmp	r3, #4
 80039d8:	d107      	bne.n	80039ea <I2C_RequestMemoryWrite+0x10e>
      {
        /* Generate Stop */
        SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 80039da:	68fb      	ldr	r3, [r7, #12]
 80039dc:	681b      	ldr	r3, [r3, #0]
 80039de:	681a      	ldr	r2, [r3, #0]
 80039e0:	68fb      	ldr	r3, [r7, #12]
 80039e2:	681b      	ldr	r3, [r3, #0]
 80039e4:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 80039e8:	601a      	str	r2, [r3, #0]
      }
      return HAL_ERROR;
 80039ea:	2301      	movs	r3, #1
 80039ec:	e005      	b.n	80039fa <I2C_RequestMemoryWrite+0x11e>
    }

    /* Send LSB of Memory Address */
    hi2c->Instance->DR = I2C_MEM_ADD_LSB(MemAddress);
 80039ee:	893b      	ldrh	r3, [r7, #8]
 80039f0:	b2da      	uxtb	r2, r3
 80039f2:	68fb      	ldr	r3, [r7, #12]
 80039f4:	681b      	ldr	r3, [r3, #0]
 80039f6:	611a      	str	r2, [r3, #16]
  }

  return HAL_OK;
 80039f8:	2300      	movs	r3, #0
}
 80039fa:	4618      	mov	r0, r3
 80039fc:	3718      	adds	r7, #24
 80039fe:	46bd      	mov	sp, r7
 8003a00:	bd80      	pop	{r7, pc}
 8003a02:	bf00      	nop
 8003a04:	00010002 	.word	0x00010002

08003a08 <I2C_RequestMemoryRead>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_RequestMemoryRead(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint16_t MemAddress, uint16_t MemAddSize, uint32_t Timeout, uint32_t Tickstart)
{
 8003a08:	b580      	push	{r7, lr}
 8003a0a:	b088      	sub	sp, #32
 8003a0c:	af02      	add	r7, sp, #8
 8003a0e:	60f8      	str	r0, [r7, #12]
 8003a10:	4608      	mov	r0, r1
 8003a12:	4611      	mov	r1, r2
 8003a14:	461a      	mov	r2, r3
 8003a16:	4603      	mov	r3, r0
 8003a18:	817b      	strh	r3, [r7, #10]
 8003a1a:	460b      	mov	r3, r1
 8003a1c:	813b      	strh	r3, [r7, #8]
 8003a1e:	4613      	mov	r3, r2
 8003a20:	80fb      	strh	r3, [r7, #6]
  /* Enable Acknowledge */
  SET_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8003a22:	68fb      	ldr	r3, [r7, #12]
 8003a24:	681b      	ldr	r3, [r3, #0]
 8003a26:	681a      	ldr	r2, [r3, #0]
 8003a28:	68fb      	ldr	r3, [r7, #12]
 8003a2a:	681b      	ldr	r3, [r3, #0]
 8003a2c:	f442 6280 	orr.w	r2, r2, #1024	; 0x400
 8003a30:	601a      	str	r2, [r3, #0]

  /* Generate Start */
  SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 8003a32:	68fb      	ldr	r3, [r7, #12]
 8003a34:	681b      	ldr	r3, [r3, #0]
 8003a36:	681a      	ldr	r2, [r3, #0]
 8003a38:	68fb      	ldr	r3, [r7, #12]
 8003a3a:	681b      	ldr	r3, [r3, #0]
 8003a3c:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8003a40:	601a      	str	r2, [r3, #0]

  /* Wait until SB flag is set */
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_SB, RESET, Timeout, Tickstart) != HAL_OK)
 8003a42:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003a44:	9300      	str	r3, [sp, #0]
 8003a46:	6a3b      	ldr	r3, [r7, #32]
 8003a48:	2200      	movs	r2, #0
 8003a4a:	f04f 1101 	mov.w	r1, #65537	; 0x10001
 8003a4e:	68f8      	ldr	r0, [r7, #12]
 8003a50:	f000 f8c2 	bl	8003bd8 <I2C_WaitOnFlagUntilTimeout>
 8003a54:	4603      	mov	r3, r0
 8003a56:	2b00      	cmp	r3, #0
 8003a58:	d00d      	beq.n	8003a76 <I2C_RequestMemoryRead+0x6e>
  {
    if (READ_BIT(hi2c->Instance->CR1, I2C_CR1_START) == I2C_CR1_START)
 8003a5a:	68fb      	ldr	r3, [r7, #12]
 8003a5c:	681b      	ldr	r3, [r3, #0]
 8003a5e:	681b      	ldr	r3, [r3, #0]
 8003a60:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8003a64:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8003a68:	d103      	bne.n	8003a72 <I2C_RequestMemoryRead+0x6a>
    {
      hi2c->ErrorCode = HAL_I2C_WRONG_START;
 8003a6a:	68fb      	ldr	r3, [r7, #12]
 8003a6c:	f44f 7200 	mov.w	r2, #512	; 0x200
 8003a70:	641a      	str	r2, [r3, #64]	; 0x40
    }
    return HAL_TIMEOUT;
 8003a72:	2303      	movs	r3, #3
 8003a74:	e0aa      	b.n	8003bcc <I2C_RequestMemoryRead+0x1c4>
  }

  /* Send slave address */
  hi2c->Instance->DR = I2C_7BIT_ADD_WRITE(DevAddress);
 8003a76:	897b      	ldrh	r3, [r7, #10]
 8003a78:	b2db      	uxtb	r3, r3
 8003a7a:	461a      	mov	r2, r3
 8003a7c:	68fb      	ldr	r3, [r7, #12]
 8003a7e:	681b      	ldr	r3, [r3, #0]
 8003a80:	f002 02fe 	and.w	r2, r2, #254	; 0xfe
 8003a84:	611a      	str	r2, [r3, #16]

  /* Wait until ADDR flag is set */
  if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADDR, Timeout, Tickstart) != HAL_OK)
 8003a86:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003a88:	6a3a      	ldr	r2, [r7, #32]
 8003a8a:	4952      	ldr	r1, [pc, #328]	; (8003bd4 <I2C_RequestMemoryRead+0x1cc>)
 8003a8c:	68f8      	ldr	r0, [r7, #12]
 8003a8e:	f000 f8fa 	bl	8003c86 <I2C_WaitOnMasterAddressFlagUntilTimeout>
 8003a92:	4603      	mov	r3, r0
 8003a94:	2b00      	cmp	r3, #0
 8003a96:	d001      	beq.n	8003a9c <I2C_RequestMemoryRead+0x94>
  {
    return HAL_ERROR;
 8003a98:	2301      	movs	r3, #1
 8003a9a:	e097      	b.n	8003bcc <I2C_RequestMemoryRead+0x1c4>
  }

  /* Clear ADDR flag */
  __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8003a9c:	2300      	movs	r3, #0
 8003a9e:	617b      	str	r3, [r7, #20]
 8003aa0:	68fb      	ldr	r3, [r7, #12]
 8003aa2:	681b      	ldr	r3, [r3, #0]
 8003aa4:	695b      	ldr	r3, [r3, #20]
 8003aa6:	617b      	str	r3, [r7, #20]
 8003aa8:	68fb      	ldr	r3, [r7, #12]
 8003aaa:	681b      	ldr	r3, [r3, #0]
 8003aac:	699b      	ldr	r3, [r3, #24]
 8003aae:	617b      	str	r3, [r7, #20]
 8003ab0:	697b      	ldr	r3, [r7, #20]

  /* Wait until TXE flag is set */
  if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 8003ab2:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8003ab4:	6a39      	ldr	r1, [r7, #32]
 8003ab6:	68f8      	ldr	r0, [r7, #12]
 8003ab8:	f000 f964 	bl	8003d84 <I2C_WaitOnTXEFlagUntilTimeout>
 8003abc:	4603      	mov	r3, r0
 8003abe:	2b00      	cmp	r3, #0
 8003ac0:	d00d      	beq.n	8003ade <I2C_RequestMemoryRead+0xd6>
  {
    if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 8003ac2:	68fb      	ldr	r3, [r7, #12]
 8003ac4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003ac6:	2b04      	cmp	r3, #4
 8003ac8:	d107      	bne.n	8003ada <I2C_RequestMemoryRead+0xd2>
    {
      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8003aca:	68fb      	ldr	r3, [r7, #12]
 8003acc:	681b      	ldr	r3, [r3, #0]
 8003ace:	681a      	ldr	r2, [r3, #0]
 8003ad0:	68fb      	ldr	r3, [r7, #12]
 8003ad2:	681b      	ldr	r3, [r3, #0]
 8003ad4:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8003ad8:	601a      	str	r2, [r3, #0]
    }
    return HAL_ERROR;
 8003ada:	2301      	movs	r3, #1
 8003adc:	e076      	b.n	8003bcc <I2C_RequestMemoryRead+0x1c4>
  }

  /* If Memory address size is 8Bit */
  if (MemAddSize == I2C_MEMADD_SIZE_8BIT)
 8003ade:	88fb      	ldrh	r3, [r7, #6]
 8003ae0:	2b01      	cmp	r3, #1
 8003ae2:	d105      	bne.n	8003af0 <I2C_RequestMemoryRead+0xe8>
  {
    /* Send Memory Address */
    hi2c->Instance->DR = I2C_MEM_ADD_LSB(MemAddress);
 8003ae4:	893b      	ldrh	r3, [r7, #8]
 8003ae6:	b2da      	uxtb	r2, r3
 8003ae8:	68fb      	ldr	r3, [r7, #12]
 8003aea:	681b      	ldr	r3, [r3, #0]
 8003aec:	611a      	str	r2, [r3, #16]
 8003aee:	e021      	b.n	8003b34 <I2C_RequestMemoryRead+0x12c>
  }
  /* If Memory address size is 16Bit */
  else
  {
    /* Send MSB of Memory Address */
    hi2c->Instance->DR = I2C_MEM_ADD_MSB(MemAddress);
 8003af0:	893b      	ldrh	r3, [r7, #8]
 8003af2:	0a1b      	lsrs	r3, r3, #8
 8003af4:	b29b      	uxth	r3, r3
 8003af6:	b2da      	uxtb	r2, r3
 8003af8:	68fb      	ldr	r3, [r7, #12]
 8003afa:	681b      	ldr	r3, [r3, #0]
 8003afc:	611a      	str	r2, [r3, #16]

    /* Wait until TXE flag is set */
    if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 8003afe:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8003b00:	6a39      	ldr	r1, [r7, #32]
 8003b02:	68f8      	ldr	r0, [r7, #12]
 8003b04:	f000 f93e 	bl	8003d84 <I2C_WaitOnTXEFlagUntilTimeout>
 8003b08:	4603      	mov	r3, r0
 8003b0a:	2b00      	cmp	r3, #0
 8003b0c:	d00d      	beq.n	8003b2a <I2C_RequestMemoryRead+0x122>
    {
      if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 8003b0e:	68fb      	ldr	r3, [r7, #12]
 8003b10:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003b12:	2b04      	cmp	r3, #4
 8003b14:	d107      	bne.n	8003b26 <I2C_RequestMemoryRead+0x11e>
      {
        /* Generate Stop */
        SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8003b16:	68fb      	ldr	r3, [r7, #12]
 8003b18:	681b      	ldr	r3, [r3, #0]
 8003b1a:	681a      	ldr	r2, [r3, #0]
 8003b1c:	68fb      	ldr	r3, [r7, #12]
 8003b1e:	681b      	ldr	r3, [r3, #0]
 8003b20:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8003b24:	601a      	str	r2, [r3, #0]
      }
      return HAL_ERROR;
 8003b26:	2301      	movs	r3, #1
 8003b28:	e050      	b.n	8003bcc <I2C_RequestMemoryRead+0x1c4>
    }

    /* Send LSB of Memory Address */
    hi2c->Instance->DR = I2C_MEM_ADD_LSB(MemAddress);
 8003b2a:	893b      	ldrh	r3, [r7, #8]
 8003b2c:	b2da      	uxtb	r2, r3
 8003b2e:	68fb      	ldr	r3, [r7, #12]
 8003b30:	681b      	ldr	r3, [r3, #0]
 8003b32:	611a      	str	r2, [r3, #16]
  }

  /* Wait until TXE flag is set */
  if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 8003b34:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8003b36:	6a39      	ldr	r1, [r7, #32]
 8003b38:	68f8      	ldr	r0, [r7, #12]
 8003b3a:	f000 f923 	bl	8003d84 <I2C_WaitOnTXEFlagUntilTimeout>
 8003b3e:	4603      	mov	r3, r0
 8003b40:	2b00      	cmp	r3, #0
 8003b42:	d00d      	beq.n	8003b60 <I2C_RequestMemoryRead+0x158>
  {
    if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 8003b44:	68fb      	ldr	r3, [r7, #12]
 8003b46:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003b48:	2b04      	cmp	r3, #4
 8003b4a:	d107      	bne.n	8003b5c <I2C_RequestMemoryRead+0x154>
    {
      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8003b4c:	68fb      	ldr	r3, [r7, #12]
 8003b4e:	681b      	ldr	r3, [r3, #0]
 8003b50:	681a      	ldr	r2, [r3, #0]
 8003b52:	68fb      	ldr	r3, [r7, #12]
 8003b54:	681b      	ldr	r3, [r3, #0]
 8003b56:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8003b5a:	601a      	str	r2, [r3, #0]
    }
    return HAL_ERROR;
 8003b5c:	2301      	movs	r3, #1
 8003b5e:	e035      	b.n	8003bcc <I2C_RequestMemoryRead+0x1c4>
  }

  /* Generate Restart */
  SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 8003b60:	68fb      	ldr	r3, [r7, #12]
 8003b62:	681b      	ldr	r3, [r3, #0]
 8003b64:	681a      	ldr	r2, [r3, #0]
 8003b66:	68fb      	ldr	r3, [r7, #12]
 8003b68:	681b      	ldr	r3, [r3, #0]
 8003b6a:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8003b6e:	601a      	str	r2, [r3, #0]

  /* Wait until SB flag is set */
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_SB, RESET, Timeout, Tickstart) != HAL_OK)
 8003b70:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003b72:	9300      	str	r3, [sp, #0]
 8003b74:	6a3b      	ldr	r3, [r7, #32]
 8003b76:	2200      	movs	r2, #0
 8003b78:	f04f 1101 	mov.w	r1, #65537	; 0x10001
 8003b7c:	68f8      	ldr	r0, [r7, #12]
 8003b7e:	f000 f82b 	bl	8003bd8 <I2C_WaitOnFlagUntilTimeout>
 8003b82:	4603      	mov	r3, r0
 8003b84:	2b00      	cmp	r3, #0
 8003b86:	d00d      	beq.n	8003ba4 <I2C_RequestMemoryRead+0x19c>
  {
    if (READ_BIT(hi2c->Instance->CR1, I2C_CR1_START) == I2C_CR1_START)
 8003b88:	68fb      	ldr	r3, [r7, #12]
 8003b8a:	681b      	ldr	r3, [r3, #0]
 8003b8c:	681b      	ldr	r3, [r3, #0]
 8003b8e:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8003b92:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8003b96:	d103      	bne.n	8003ba0 <I2C_RequestMemoryRead+0x198>
    {
      hi2c->ErrorCode = HAL_I2C_WRONG_START;
 8003b98:	68fb      	ldr	r3, [r7, #12]
 8003b9a:	f44f 7200 	mov.w	r2, #512	; 0x200
 8003b9e:	641a      	str	r2, [r3, #64]	; 0x40
    }
    return HAL_TIMEOUT;
 8003ba0:	2303      	movs	r3, #3
 8003ba2:	e013      	b.n	8003bcc <I2C_RequestMemoryRead+0x1c4>
  }

  /* Send slave address */
  hi2c->Instance->DR = I2C_7BIT_ADD_READ(DevAddress);
 8003ba4:	897b      	ldrh	r3, [r7, #10]
 8003ba6:	b2db      	uxtb	r3, r3
 8003ba8:	f043 0301 	orr.w	r3, r3, #1
 8003bac:	b2da      	uxtb	r2, r3
 8003bae:	68fb      	ldr	r3, [r7, #12]
 8003bb0:	681b      	ldr	r3, [r3, #0]
 8003bb2:	611a      	str	r2, [r3, #16]

  /* Wait until ADDR flag is set */
  if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADDR, Timeout, Tickstart) != HAL_OK)
 8003bb4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003bb6:	6a3a      	ldr	r2, [r7, #32]
 8003bb8:	4906      	ldr	r1, [pc, #24]	; (8003bd4 <I2C_RequestMemoryRead+0x1cc>)
 8003bba:	68f8      	ldr	r0, [r7, #12]
 8003bbc:	f000 f863 	bl	8003c86 <I2C_WaitOnMasterAddressFlagUntilTimeout>
 8003bc0:	4603      	mov	r3, r0
 8003bc2:	2b00      	cmp	r3, #0
 8003bc4:	d001      	beq.n	8003bca <I2C_RequestMemoryRead+0x1c2>
  {
    return HAL_ERROR;
 8003bc6:	2301      	movs	r3, #1
 8003bc8:	e000      	b.n	8003bcc <I2C_RequestMemoryRead+0x1c4>
  }

  return HAL_OK;
 8003bca:	2300      	movs	r3, #0
}
 8003bcc:	4618      	mov	r0, r3
 8003bce:	3718      	adds	r7, #24
 8003bd0:	46bd      	mov	sp, r7
 8003bd2:	bd80      	pop	{r7, pc}
 8003bd4:	00010002 	.word	0x00010002

08003bd8 <I2C_WaitOnFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Flag, FlagStatus Status, uint32_t Timeout, uint32_t Tickstart)
{
 8003bd8:	b580      	push	{r7, lr}
 8003bda:	b084      	sub	sp, #16
 8003bdc:	af00      	add	r7, sp, #0
 8003bde:	60f8      	str	r0, [r7, #12]
 8003be0:	60b9      	str	r1, [r7, #8]
 8003be2:	603b      	str	r3, [r7, #0]
 8003be4:	4613      	mov	r3, r2
 8003be6:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 8003be8:	e025      	b.n	8003c36 <I2C_WaitOnFlagUntilTimeout+0x5e>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8003bea:	683b      	ldr	r3, [r7, #0]
 8003bec:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8003bf0:	d021      	beq.n	8003c36 <I2C_WaitOnFlagUntilTimeout+0x5e>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8003bf2:	f7fe fe9b 	bl	800292c <HAL_GetTick>
 8003bf6:	4602      	mov	r2, r0
 8003bf8:	69bb      	ldr	r3, [r7, #24]
 8003bfa:	1ad3      	subs	r3, r2, r3
 8003bfc:	683a      	ldr	r2, [r7, #0]
 8003bfe:	429a      	cmp	r2, r3
 8003c00:	d302      	bcc.n	8003c08 <I2C_WaitOnFlagUntilTimeout+0x30>
 8003c02:	683b      	ldr	r3, [r7, #0]
 8003c04:	2b00      	cmp	r3, #0
 8003c06:	d116      	bne.n	8003c36 <I2C_WaitOnFlagUntilTimeout+0x5e>
      {
        hi2c->PreviousState     = I2C_STATE_NONE;
 8003c08:	68fb      	ldr	r3, [r7, #12]
 8003c0a:	2200      	movs	r2, #0
 8003c0c:	631a      	str	r2, [r3, #48]	; 0x30
        hi2c->State             = HAL_I2C_STATE_READY;
 8003c0e:	68fb      	ldr	r3, [r7, #12]
 8003c10:	2220      	movs	r2, #32
 8003c12:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        hi2c->Mode              = HAL_I2C_MODE_NONE;
 8003c16:	68fb      	ldr	r3, [r7, #12]
 8003c18:	2200      	movs	r2, #0
 8003c1a:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        hi2c->ErrorCode         |= HAL_I2C_ERROR_TIMEOUT;
 8003c1e:	68fb      	ldr	r3, [r7, #12]
 8003c20:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003c22:	f043 0220 	orr.w	r2, r3, #32
 8003c26:	68fb      	ldr	r3, [r7, #12]
 8003c28:	641a      	str	r2, [r3, #64]	; 0x40

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 8003c2a:	68fb      	ldr	r3, [r7, #12]
 8003c2c:	2200      	movs	r2, #0
 8003c2e:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_ERROR;
 8003c32:	2301      	movs	r3, #1
 8003c34:	e023      	b.n	8003c7e <I2C_WaitOnFlagUntilTimeout+0xa6>
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 8003c36:	68bb      	ldr	r3, [r7, #8]
 8003c38:	0c1b      	lsrs	r3, r3, #16
 8003c3a:	b2db      	uxtb	r3, r3
 8003c3c:	2b01      	cmp	r3, #1
 8003c3e:	d10d      	bne.n	8003c5c <I2C_WaitOnFlagUntilTimeout+0x84>
 8003c40:	68fb      	ldr	r3, [r7, #12]
 8003c42:	681b      	ldr	r3, [r3, #0]
 8003c44:	695b      	ldr	r3, [r3, #20]
 8003c46:	43da      	mvns	r2, r3
 8003c48:	68bb      	ldr	r3, [r7, #8]
 8003c4a:	4013      	ands	r3, r2
 8003c4c:	b29b      	uxth	r3, r3
 8003c4e:	2b00      	cmp	r3, #0
 8003c50:	bf0c      	ite	eq
 8003c52:	2301      	moveq	r3, #1
 8003c54:	2300      	movne	r3, #0
 8003c56:	b2db      	uxtb	r3, r3
 8003c58:	461a      	mov	r2, r3
 8003c5a:	e00c      	b.n	8003c76 <I2C_WaitOnFlagUntilTimeout+0x9e>
 8003c5c:	68fb      	ldr	r3, [r7, #12]
 8003c5e:	681b      	ldr	r3, [r3, #0]
 8003c60:	699b      	ldr	r3, [r3, #24]
 8003c62:	43da      	mvns	r2, r3
 8003c64:	68bb      	ldr	r3, [r7, #8]
 8003c66:	4013      	ands	r3, r2
 8003c68:	b29b      	uxth	r3, r3
 8003c6a:	2b00      	cmp	r3, #0
 8003c6c:	bf0c      	ite	eq
 8003c6e:	2301      	moveq	r3, #1
 8003c70:	2300      	movne	r3, #0
 8003c72:	b2db      	uxtb	r3, r3
 8003c74:	461a      	mov	r2, r3
 8003c76:	79fb      	ldrb	r3, [r7, #7]
 8003c78:	429a      	cmp	r2, r3
 8003c7a:	d0b6      	beq.n	8003bea <I2C_WaitOnFlagUntilTimeout+0x12>
      }
    }
  }
  return HAL_OK;
 8003c7c:	2300      	movs	r3, #0
}
 8003c7e:	4618      	mov	r0, r3
 8003c80:	3710      	adds	r7, #16
 8003c82:	46bd      	mov	sp, r7
 8003c84:	bd80      	pop	{r7, pc}

08003c86 <I2C_WaitOnMasterAddressFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnMasterAddressFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Flag, uint32_t Timeout, uint32_t Tickstart)
{
 8003c86:	b580      	push	{r7, lr}
 8003c88:	b084      	sub	sp, #16
 8003c8a:	af00      	add	r7, sp, #0
 8003c8c:	60f8      	str	r0, [r7, #12]
 8003c8e:	60b9      	str	r1, [r7, #8]
 8003c90:	607a      	str	r2, [r7, #4]
 8003c92:	603b      	str	r3, [r7, #0]
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == RESET)
 8003c94:	e051      	b.n	8003d3a <I2C_WaitOnMasterAddressFlagUntilTimeout+0xb4>
  {
    if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF) == SET)
 8003c96:	68fb      	ldr	r3, [r7, #12]
 8003c98:	681b      	ldr	r3, [r3, #0]
 8003c9a:	695b      	ldr	r3, [r3, #20]
 8003c9c:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8003ca0:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8003ca4:	d123      	bne.n	8003cee <I2C_WaitOnMasterAddressFlagUntilTimeout+0x68>
    {
      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8003ca6:	68fb      	ldr	r3, [r7, #12]
 8003ca8:	681b      	ldr	r3, [r3, #0]
 8003caa:	681a      	ldr	r2, [r3, #0]
 8003cac:	68fb      	ldr	r3, [r7, #12]
 8003cae:	681b      	ldr	r3, [r3, #0]
 8003cb0:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8003cb4:	601a      	str	r2, [r3, #0]

      /* Clear AF Flag */
      __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8003cb6:	68fb      	ldr	r3, [r7, #12]
 8003cb8:	681b      	ldr	r3, [r3, #0]
 8003cba:	f46f 6280 	mvn.w	r2, #1024	; 0x400
 8003cbe:	615a      	str	r2, [r3, #20]

      hi2c->PreviousState       = I2C_STATE_NONE;
 8003cc0:	68fb      	ldr	r3, [r7, #12]
 8003cc2:	2200      	movs	r2, #0
 8003cc4:	631a      	str	r2, [r3, #48]	; 0x30
      hi2c->State               = HAL_I2C_STATE_READY;
 8003cc6:	68fb      	ldr	r3, [r7, #12]
 8003cc8:	2220      	movs	r2, #32
 8003cca:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
      hi2c->Mode                = HAL_I2C_MODE_NONE;
 8003cce:	68fb      	ldr	r3, [r7, #12]
 8003cd0:	2200      	movs	r2, #0
 8003cd2:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
      hi2c->ErrorCode           |= HAL_I2C_ERROR_AF;
 8003cd6:	68fb      	ldr	r3, [r7, #12]
 8003cd8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003cda:	f043 0204 	orr.w	r2, r3, #4
 8003cde:	68fb      	ldr	r3, [r7, #12]
 8003ce0:	641a      	str	r2, [r3, #64]	; 0x40

      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 8003ce2:	68fb      	ldr	r3, [r7, #12]
 8003ce4:	2200      	movs	r2, #0
 8003ce6:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

      return HAL_ERROR;
 8003cea:	2301      	movs	r3, #1
 8003cec:	e046      	b.n	8003d7c <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf6>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8003cee:	687b      	ldr	r3, [r7, #4]
 8003cf0:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8003cf4:	d021      	beq.n	8003d3a <I2C_WaitOnMasterAddressFlagUntilTimeout+0xb4>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8003cf6:	f7fe fe19 	bl	800292c <HAL_GetTick>
 8003cfa:	4602      	mov	r2, r0
 8003cfc:	683b      	ldr	r3, [r7, #0]
 8003cfe:	1ad3      	subs	r3, r2, r3
 8003d00:	687a      	ldr	r2, [r7, #4]
 8003d02:	429a      	cmp	r2, r3
 8003d04:	d302      	bcc.n	8003d0c <I2C_WaitOnMasterAddressFlagUntilTimeout+0x86>
 8003d06:	687b      	ldr	r3, [r7, #4]
 8003d08:	2b00      	cmp	r3, #0
 8003d0a:	d116      	bne.n	8003d3a <I2C_WaitOnMasterAddressFlagUntilTimeout+0xb4>
      {
        hi2c->PreviousState       = I2C_STATE_NONE;
 8003d0c:	68fb      	ldr	r3, [r7, #12]
 8003d0e:	2200      	movs	r2, #0
 8003d10:	631a      	str	r2, [r3, #48]	; 0x30
        hi2c->State               = HAL_I2C_STATE_READY;
 8003d12:	68fb      	ldr	r3, [r7, #12]
 8003d14:	2220      	movs	r2, #32
 8003d16:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        hi2c->Mode                = HAL_I2C_MODE_NONE;
 8003d1a:	68fb      	ldr	r3, [r7, #12]
 8003d1c:	2200      	movs	r2, #0
 8003d1e:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 8003d22:	68fb      	ldr	r3, [r7, #12]
 8003d24:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003d26:	f043 0220 	orr.w	r2, r3, #32
 8003d2a:	68fb      	ldr	r3, [r7, #12]
 8003d2c:	641a      	str	r2, [r3, #64]	; 0x40

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 8003d2e:	68fb      	ldr	r3, [r7, #12]
 8003d30:	2200      	movs	r2, #0
 8003d32:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_ERROR;
 8003d36:	2301      	movs	r3, #1
 8003d38:	e020      	b.n	8003d7c <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf6>
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == RESET)
 8003d3a:	68bb      	ldr	r3, [r7, #8]
 8003d3c:	0c1b      	lsrs	r3, r3, #16
 8003d3e:	b2db      	uxtb	r3, r3
 8003d40:	2b01      	cmp	r3, #1
 8003d42:	d10c      	bne.n	8003d5e <I2C_WaitOnMasterAddressFlagUntilTimeout+0xd8>
 8003d44:	68fb      	ldr	r3, [r7, #12]
 8003d46:	681b      	ldr	r3, [r3, #0]
 8003d48:	695b      	ldr	r3, [r3, #20]
 8003d4a:	43da      	mvns	r2, r3
 8003d4c:	68bb      	ldr	r3, [r7, #8]
 8003d4e:	4013      	ands	r3, r2
 8003d50:	b29b      	uxth	r3, r3
 8003d52:	2b00      	cmp	r3, #0
 8003d54:	bf14      	ite	ne
 8003d56:	2301      	movne	r3, #1
 8003d58:	2300      	moveq	r3, #0
 8003d5a:	b2db      	uxtb	r3, r3
 8003d5c:	e00b      	b.n	8003d76 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf0>
 8003d5e:	68fb      	ldr	r3, [r7, #12]
 8003d60:	681b      	ldr	r3, [r3, #0]
 8003d62:	699b      	ldr	r3, [r3, #24]
 8003d64:	43da      	mvns	r2, r3
 8003d66:	68bb      	ldr	r3, [r7, #8]
 8003d68:	4013      	ands	r3, r2
 8003d6a:	b29b      	uxth	r3, r3
 8003d6c:	2b00      	cmp	r3, #0
 8003d6e:	bf14      	ite	ne
 8003d70:	2301      	movne	r3, #1
 8003d72:	2300      	moveq	r3, #0
 8003d74:	b2db      	uxtb	r3, r3
 8003d76:	2b00      	cmp	r3, #0
 8003d78:	d18d      	bne.n	8003c96 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x10>
      }
    }
  }
  return HAL_OK;
 8003d7a:	2300      	movs	r3, #0
}
 8003d7c:	4618      	mov	r0, r3
 8003d7e:	3710      	adds	r7, #16
 8003d80:	46bd      	mov	sp, r7
 8003d82:	bd80      	pop	{r7, pc}

08003d84 <I2C_WaitOnTXEFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnTXEFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 8003d84:	b580      	push	{r7, lr}
 8003d86:	b084      	sub	sp, #16
 8003d88:	af00      	add	r7, sp, #0
 8003d8a:	60f8      	str	r0, [r7, #12]
 8003d8c:	60b9      	str	r1, [r7, #8]
 8003d8e:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET)
 8003d90:	e02d      	b.n	8003dee <I2C_WaitOnTXEFlagUntilTimeout+0x6a>
  {
    /* Check if a NACK is detected */
    if (I2C_IsAcknowledgeFailed(hi2c) != HAL_OK)
 8003d92:	68f8      	ldr	r0, [r7, #12]
 8003d94:	f000 f8ce 	bl	8003f34 <I2C_IsAcknowledgeFailed>
 8003d98:	4603      	mov	r3, r0
 8003d9a:	2b00      	cmp	r3, #0
 8003d9c:	d001      	beq.n	8003da2 <I2C_WaitOnTXEFlagUntilTimeout+0x1e>
    {
      return HAL_ERROR;
 8003d9e:	2301      	movs	r3, #1
 8003da0:	e02d      	b.n	8003dfe <I2C_WaitOnTXEFlagUntilTimeout+0x7a>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8003da2:	68bb      	ldr	r3, [r7, #8]
 8003da4:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8003da8:	d021      	beq.n	8003dee <I2C_WaitOnTXEFlagUntilTimeout+0x6a>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8003daa:	f7fe fdbf 	bl	800292c <HAL_GetTick>
 8003dae:	4602      	mov	r2, r0
 8003db0:	687b      	ldr	r3, [r7, #4]
 8003db2:	1ad3      	subs	r3, r2, r3
 8003db4:	68ba      	ldr	r2, [r7, #8]
 8003db6:	429a      	cmp	r2, r3
 8003db8:	d302      	bcc.n	8003dc0 <I2C_WaitOnTXEFlagUntilTimeout+0x3c>
 8003dba:	68bb      	ldr	r3, [r7, #8]
 8003dbc:	2b00      	cmp	r3, #0
 8003dbe:	d116      	bne.n	8003dee <I2C_WaitOnTXEFlagUntilTimeout+0x6a>
      {
        hi2c->PreviousState       = I2C_STATE_NONE;
 8003dc0:	68fb      	ldr	r3, [r7, #12]
 8003dc2:	2200      	movs	r2, #0
 8003dc4:	631a      	str	r2, [r3, #48]	; 0x30
        hi2c->State               = HAL_I2C_STATE_READY;
 8003dc6:	68fb      	ldr	r3, [r7, #12]
 8003dc8:	2220      	movs	r2, #32
 8003dca:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        hi2c->Mode                = HAL_I2C_MODE_NONE;
 8003dce:	68fb      	ldr	r3, [r7, #12]
 8003dd0:	2200      	movs	r2, #0
 8003dd2:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 8003dd6:	68fb      	ldr	r3, [r7, #12]
 8003dd8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003dda:	f043 0220 	orr.w	r2, r3, #32
 8003dde:	68fb      	ldr	r3, [r7, #12]
 8003de0:	641a      	str	r2, [r3, #64]	; 0x40

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 8003de2:	68fb      	ldr	r3, [r7, #12]
 8003de4:	2200      	movs	r2, #0
 8003de6:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_ERROR;
 8003dea:	2301      	movs	r3, #1
 8003dec:	e007      	b.n	8003dfe <I2C_WaitOnTXEFlagUntilTimeout+0x7a>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET)
 8003dee:	68fb      	ldr	r3, [r7, #12]
 8003df0:	681b      	ldr	r3, [r3, #0]
 8003df2:	695b      	ldr	r3, [r3, #20]
 8003df4:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8003df8:	2b80      	cmp	r3, #128	; 0x80
 8003dfa:	d1ca      	bne.n	8003d92 <I2C_WaitOnTXEFlagUntilTimeout+0xe>
      }
    }
  }
  return HAL_OK;
 8003dfc:	2300      	movs	r3, #0
}
 8003dfe:	4618      	mov	r0, r3
 8003e00:	3710      	adds	r7, #16
 8003e02:	46bd      	mov	sp, r7
 8003e04:	bd80      	pop	{r7, pc}

08003e06 <I2C_WaitOnBTFFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnBTFFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 8003e06:	b580      	push	{r7, lr}
 8003e08:	b084      	sub	sp, #16
 8003e0a:	af00      	add	r7, sp, #0
 8003e0c:	60f8      	str	r0, [r7, #12]
 8003e0e:	60b9      	str	r1, [r7, #8]
 8003e10:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == RESET)
 8003e12:	e02d      	b.n	8003e70 <I2C_WaitOnBTFFlagUntilTimeout+0x6a>
  {
    /* Check if a NACK is detected */
    if (I2C_IsAcknowledgeFailed(hi2c) != HAL_OK)
 8003e14:	68f8      	ldr	r0, [r7, #12]
 8003e16:	f000 f88d 	bl	8003f34 <I2C_IsAcknowledgeFailed>
 8003e1a:	4603      	mov	r3, r0
 8003e1c:	2b00      	cmp	r3, #0
 8003e1e:	d001      	beq.n	8003e24 <I2C_WaitOnBTFFlagUntilTimeout+0x1e>
    {
      return HAL_ERROR;
 8003e20:	2301      	movs	r3, #1
 8003e22:	e02d      	b.n	8003e80 <I2C_WaitOnBTFFlagUntilTimeout+0x7a>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8003e24:	68bb      	ldr	r3, [r7, #8]
 8003e26:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8003e2a:	d021      	beq.n	8003e70 <I2C_WaitOnBTFFlagUntilTimeout+0x6a>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8003e2c:	f7fe fd7e 	bl	800292c <HAL_GetTick>
 8003e30:	4602      	mov	r2, r0
 8003e32:	687b      	ldr	r3, [r7, #4]
 8003e34:	1ad3      	subs	r3, r2, r3
 8003e36:	68ba      	ldr	r2, [r7, #8]
 8003e38:	429a      	cmp	r2, r3
 8003e3a:	d302      	bcc.n	8003e42 <I2C_WaitOnBTFFlagUntilTimeout+0x3c>
 8003e3c:	68bb      	ldr	r3, [r7, #8]
 8003e3e:	2b00      	cmp	r3, #0
 8003e40:	d116      	bne.n	8003e70 <I2C_WaitOnBTFFlagUntilTimeout+0x6a>
      {
        hi2c->PreviousState       = I2C_STATE_NONE;
 8003e42:	68fb      	ldr	r3, [r7, #12]
 8003e44:	2200      	movs	r2, #0
 8003e46:	631a      	str	r2, [r3, #48]	; 0x30
        hi2c->State               = HAL_I2C_STATE_READY;
 8003e48:	68fb      	ldr	r3, [r7, #12]
 8003e4a:	2220      	movs	r2, #32
 8003e4c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        hi2c->Mode                = HAL_I2C_MODE_NONE;
 8003e50:	68fb      	ldr	r3, [r7, #12]
 8003e52:	2200      	movs	r2, #0
 8003e54:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 8003e58:	68fb      	ldr	r3, [r7, #12]
 8003e5a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003e5c:	f043 0220 	orr.w	r2, r3, #32
 8003e60:	68fb      	ldr	r3, [r7, #12]
 8003e62:	641a      	str	r2, [r3, #64]	; 0x40

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 8003e64:	68fb      	ldr	r3, [r7, #12]
 8003e66:	2200      	movs	r2, #0
 8003e68:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_ERROR;
 8003e6c:	2301      	movs	r3, #1
 8003e6e:	e007      	b.n	8003e80 <I2C_WaitOnBTFFlagUntilTimeout+0x7a>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == RESET)
 8003e70:	68fb      	ldr	r3, [r7, #12]
 8003e72:	681b      	ldr	r3, [r3, #0]
 8003e74:	695b      	ldr	r3, [r3, #20]
 8003e76:	f003 0304 	and.w	r3, r3, #4
 8003e7a:	2b04      	cmp	r3, #4
 8003e7c:	d1ca      	bne.n	8003e14 <I2C_WaitOnBTFFlagUntilTimeout+0xe>
      }
    }
  }
  return HAL_OK;
 8003e7e:	2300      	movs	r3, #0
}
 8003e80:	4618      	mov	r0, r3
 8003e82:	3710      	adds	r7, #16
 8003e84:	46bd      	mov	sp, r7
 8003e86:	bd80      	pop	{r7, pc}

08003e88 <I2C_WaitOnRXNEFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnRXNEFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 8003e88:	b580      	push	{r7, lr}
 8003e8a:	b084      	sub	sp, #16
 8003e8c:	af00      	add	r7, sp, #0
 8003e8e:	60f8      	str	r0, [r7, #12]
 8003e90:	60b9      	str	r1, [r7, #8]
 8003e92:	607a      	str	r2, [r7, #4]

  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == RESET)
 8003e94:	e042      	b.n	8003f1c <I2C_WaitOnRXNEFlagUntilTimeout+0x94>
  {
    /* Check if a STOPF is detected */
    if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == SET)
 8003e96:	68fb      	ldr	r3, [r7, #12]
 8003e98:	681b      	ldr	r3, [r3, #0]
 8003e9a:	695b      	ldr	r3, [r3, #20]
 8003e9c:	f003 0310 	and.w	r3, r3, #16
 8003ea0:	2b10      	cmp	r3, #16
 8003ea2:	d119      	bne.n	8003ed8 <I2C_WaitOnRXNEFlagUntilTimeout+0x50>
    {
      /* Clear STOP Flag */
      __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 8003ea4:	68fb      	ldr	r3, [r7, #12]
 8003ea6:	681b      	ldr	r3, [r3, #0]
 8003ea8:	f06f 0210 	mvn.w	r2, #16
 8003eac:	615a      	str	r2, [r3, #20]

      hi2c->PreviousState       = I2C_STATE_NONE;
 8003eae:	68fb      	ldr	r3, [r7, #12]
 8003eb0:	2200      	movs	r2, #0
 8003eb2:	631a      	str	r2, [r3, #48]	; 0x30
      hi2c->State               = HAL_I2C_STATE_READY;
 8003eb4:	68fb      	ldr	r3, [r7, #12]
 8003eb6:	2220      	movs	r2, #32
 8003eb8:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
      hi2c->Mode                = HAL_I2C_MODE_NONE;
 8003ebc:	68fb      	ldr	r3, [r7, #12]
 8003ebe:	2200      	movs	r2, #0
 8003ec0:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
      hi2c->ErrorCode           |= HAL_I2C_ERROR_NONE;
 8003ec4:	68fb      	ldr	r3, [r7, #12]
 8003ec6:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8003ec8:	68fb      	ldr	r3, [r7, #12]
 8003eca:	641a      	str	r2, [r3, #64]	; 0x40

      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 8003ecc:	68fb      	ldr	r3, [r7, #12]
 8003ece:	2200      	movs	r2, #0
 8003ed0:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

      return HAL_ERROR;
 8003ed4:	2301      	movs	r3, #1
 8003ed6:	e029      	b.n	8003f2c <I2C_WaitOnRXNEFlagUntilTimeout+0xa4>
    }

    /* Check for the Timeout */
    if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8003ed8:	f7fe fd28 	bl	800292c <HAL_GetTick>
 8003edc:	4602      	mov	r2, r0
 8003ede:	687b      	ldr	r3, [r7, #4]
 8003ee0:	1ad3      	subs	r3, r2, r3
 8003ee2:	68ba      	ldr	r2, [r7, #8]
 8003ee4:	429a      	cmp	r2, r3
 8003ee6:	d302      	bcc.n	8003eee <I2C_WaitOnRXNEFlagUntilTimeout+0x66>
 8003ee8:	68bb      	ldr	r3, [r7, #8]
 8003eea:	2b00      	cmp	r3, #0
 8003eec:	d116      	bne.n	8003f1c <I2C_WaitOnRXNEFlagUntilTimeout+0x94>
    {
      hi2c->PreviousState       = I2C_STATE_NONE;
 8003eee:	68fb      	ldr	r3, [r7, #12]
 8003ef0:	2200      	movs	r2, #0
 8003ef2:	631a      	str	r2, [r3, #48]	; 0x30
      hi2c->State               = HAL_I2C_STATE_READY;
 8003ef4:	68fb      	ldr	r3, [r7, #12]
 8003ef6:	2220      	movs	r2, #32
 8003ef8:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
      hi2c->Mode                = HAL_I2C_MODE_NONE;
 8003efc:	68fb      	ldr	r3, [r7, #12]
 8003efe:	2200      	movs	r2, #0
 8003f00:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
      hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 8003f04:	68fb      	ldr	r3, [r7, #12]
 8003f06:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003f08:	f043 0220 	orr.w	r2, r3, #32
 8003f0c:	68fb      	ldr	r3, [r7, #12]
 8003f0e:	641a      	str	r2, [r3, #64]	; 0x40

      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 8003f10:	68fb      	ldr	r3, [r7, #12]
 8003f12:	2200      	movs	r2, #0
 8003f14:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

      return HAL_ERROR;
 8003f18:	2301      	movs	r3, #1
 8003f1a:	e007      	b.n	8003f2c <I2C_WaitOnRXNEFlagUntilTimeout+0xa4>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == RESET)
 8003f1c:	68fb      	ldr	r3, [r7, #12]
 8003f1e:	681b      	ldr	r3, [r3, #0]
 8003f20:	695b      	ldr	r3, [r3, #20]
 8003f22:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8003f26:	2b40      	cmp	r3, #64	; 0x40
 8003f28:	d1b5      	bne.n	8003e96 <I2C_WaitOnRXNEFlagUntilTimeout+0xe>
    }
  }
  return HAL_OK;
 8003f2a:	2300      	movs	r3, #0
}
 8003f2c:	4618      	mov	r0, r3
 8003f2e:	3710      	adds	r7, #16
 8003f30:	46bd      	mov	sp, r7
 8003f32:	bd80      	pop	{r7, pc}

08003f34 <I2C_IsAcknowledgeFailed>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_IsAcknowledgeFailed(I2C_HandleTypeDef *hi2c)
{
 8003f34:	b480      	push	{r7}
 8003f36:	b083      	sub	sp, #12
 8003f38:	af00      	add	r7, sp, #0
 8003f3a:	6078      	str	r0, [r7, #4]
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF) == SET)
 8003f3c:	687b      	ldr	r3, [r7, #4]
 8003f3e:	681b      	ldr	r3, [r3, #0]
 8003f40:	695b      	ldr	r3, [r3, #20]
 8003f42:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8003f46:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8003f4a:	d11b      	bne.n	8003f84 <I2C_IsAcknowledgeFailed+0x50>
  {
    /* Clear NACKF Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8003f4c:	687b      	ldr	r3, [r7, #4]
 8003f4e:	681b      	ldr	r3, [r3, #0]
 8003f50:	f46f 6280 	mvn.w	r2, #1024	; 0x400
 8003f54:	615a      	str	r2, [r3, #20]

    hi2c->PreviousState       = I2C_STATE_NONE;
 8003f56:	687b      	ldr	r3, [r7, #4]
 8003f58:	2200      	movs	r2, #0
 8003f5a:	631a      	str	r2, [r3, #48]	; 0x30
    hi2c->State               = HAL_I2C_STATE_READY;
 8003f5c:	687b      	ldr	r3, [r7, #4]
 8003f5e:	2220      	movs	r2, #32
 8003f60:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode                = HAL_I2C_MODE_NONE;
 8003f64:	687b      	ldr	r3, [r7, #4]
 8003f66:	2200      	movs	r2, #0
 8003f68:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
    hi2c->ErrorCode           |= HAL_I2C_ERROR_AF;
 8003f6c:	687b      	ldr	r3, [r7, #4]
 8003f6e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003f70:	f043 0204 	orr.w	r2, r3, #4
 8003f74:	687b      	ldr	r3, [r7, #4]
 8003f76:	641a      	str	r2, [r3, #64]	; 0x40

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8003f78:	687b      	ldr	r3, [r7, #4]
 8003f7a:	2200      	movs	r2, #0
 8003f7c:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    return HAL_ERROR;
 8003f80:	2301      	movs	r3, #1
 8003f82:	e000      	b.n	8003f86 <I2C_IsAcknowledgeFailed+0x52>
  }
  return HAL_OK;
 8003f84:	2300      	movs	r3, #0
}
 8003f86:	4618      	mov	r0, r3
 8003f88:	370c      	adds	r7, #12
 8003f8a:	46bd      	mov	sp, r7
 8003f8c:	bc80      	pop	{r7}
 8003f8e:	4770      	bx	lr

08003f90 <HAL_RCC_OscConfig>:
  *         supported by this macro. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8003f90:	b580      	push	{r7, lr}
 8003f92:	b086      	sub	sp, #24
 8003f94:	af00      	add	r7, sp, #0
 8003f96:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t pll_config;

  /* Check Null pointer */
  if (RCC_OscInitStruct == NULL)
 8003f98:	687b      	ldr	r3, [r7, #4]
 8003f9a:	2b00      	cmp	r3, #0
 8003f9c:	d101      	bne.n	8003fa2 <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 8003f9e:	2301      	movs	r3, #1
 8003fa0:	e26c      	b.n	800447c <HAL_RCC_OscConfig+0x4ec>

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  /*------------------------------- HSE Configuration ------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8003fa2:	687b      	ldr	r3, [r7, #4]
 8003fa4:	681b      	ldr	r3, [r3, #0]
 8003fa6:	f003 0301 	and.w	r3, r3, #1
 8003faa:	2b00      	cmp	r3, #0
 8003fac:	f000 8087 	beq.w	80040be <HAL_RCC_OscConfig+0x12e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSE)
 8003fb0:	4b92      	ldr	r3, [pc, #584]	; (80041fc <HAL_RCC_OscConfig+0x26c>)
 8003fb2:	685b      	ldr	r3, [r3, #4]
 8003fb4:	f003 030c 	and.w	r3, r3, #12
 8003fb8:	2b04      	cmp	r3, #4
 8003fba:	d00c      	beq.n	8003fd6 <HAL_RCC_OscConfig+0x46>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSE)))
 8003fbc:	4b8f      	ldr	r3, [pc, #572]	; (80041fc <HAL_RCC_OscConfig+0x26c>)
 8003fbe:	685b      	ldr	r3, [r3, #4]
 8003fc0:	f003 030c 	and.w	r3, r3, #12
 8003fc4:	2b08      	cmp	r3, #8
 8003fc6:	d112      	bne.n	8003fee <HAL_RCC_OscConfig+0x5e>
 8003fc8:	4b8c      	ldr	r3, [pc, #560]	; (80041fc <HAL_RCC_OscConfig+0x26c>)
 8003fca:	685b      	ldr	r3, [r3, #4]
 8003fcc:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8003fd0:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8003fd4:	d10b      	bne.n	8003fee <HAL_RCC_OscConfig+0x5e>
    {
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8003fd6:	4b89      	ldr	r3, [pc, #548]	; (80041fc <HAL_RCC_OscConfig+0x26c>)
 8003fd8:	681b      	ldr	r3, [r3, #0]
 8003fda:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8003fde:	2b00      	cmp	r3, #0
 8003fe0:	d06c      	beq.n	80040bc <HAL_RCC_OscConfig+0x12c>
 8003fe2:	687b      	ldr	r3, [r7, #4]
 8003fe4:	685b      	ldr	r3, [r3, #4]
 8003fe6:	2b00      	cmp	r3, #0
 8003fe8:	d168      	bne.n	80040bc <HAL_RCC_OscConfig+0x12c>
      {
        return HAL_ERROR;
 8003fea:	2301      	movs	r3, #1
 8003fec:	e246      	b.n	800447c <HAL_RCC_OscConfig+0x4ec>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8003fee:	687b      	ldr	r3, [r7, #4]
 8003ff0:	685b      	ldr	r3, [r3, #4]
 8003ff2:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8003ff6:	d106      	bne.n	8004006 <HAL_RCC_OscConfig+0x76>
 8003ff8:	4b80      	ldr	r3, [pc, #512]	; (80041fc <HAL_RCC_OscConfig+0x26c>)
 8003ffa:	681b      	ldr	r3, [r3, #0]
 8003ffc:	4a7f      	ldr	r2, [pc, #508]	; (80041fc <HAL_RCC_OscConfig+0x26c>)
 8003ffe:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8004002:	6013      	str	r3, [r2, #0]
 8004004:	e02e      	b.n	8004064 <HAL_RCC_OscConfig+0xd4>
 8004006:	687b      	ldr	r3, [r7, #4]
 8004008:	685b      	ldr	r3, [r3, #4]
 800400a:	2b00      	cmp	r3, #0
 800400c:	d10c      	bne.n	8004028 <HAL_RCC_OscConfig+0x98>
 800400e:	4b7b      	ldr	r3, [pc, #492]	; (80041fc <HAL_RCC_OscConfig+0x26c>)
 8004010:	681b      	ldr	r3, [r3, #0]
 8004012:	4a7a      	ldr	r2, [pc, #488]	; (80041fc <HAL_RCC_OscConfig+0x26c>)
 8004014:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8004018:	6013      	str	r3, [r2, #0]
 800401a:	4b78      	ldr	r3, [pc, #480]	; (80041fc <HAL_RCC_OscConfig+0x26c>)
 800401c:	681b      	ldr	r3, [r3, #0]
 800401e:	4a77      	ldr	r2, [pc, #476]	; (80041fc <HAL_RCC_OscConfig+0x26c>)
 8004020:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8004024:	6013      	str	r3, [r2, #0]
 8004026:	e01d      	b.n	8004064 <HAL_RCC_OscConfig+0xd4>
 8004028:	687b      	ldr	r3, [r7, #4]
 800402a:	685b      	ldr	r3, [r3, #4]
 800402c:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8004030:	d10c      	bne.n	800404c <HAL_RCC_OscConfig+0xbc>
 8004032:	4b72      	ldr	r3, [pc, #456]	; (80041fc <HAL_RCC_OscConfig+0x26c>)
 8004034:	681b      	ldr	r3, [r3, #0]
 8004036:	4a71      	ldr	r2, [pc, #452]	; (80041fc <HAL_RCC_OscConfig+0x26c>)
 8004038:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 800403c:	6013      	str	r3, [r2, #0]
 800403e:	4b6f      	ldr	r3, [pc, #444]	; (80041fc <HAL_RCC_OscConfig+0x26c>)
 8004040:	681b      	ldr	r3, [r3, #0]
 8004042:	4a6e      	ldr	r2, [pc, #440]	; (80041fc <HAL_RCC_OscConfig+0x26c>)
 8004044:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8004048:	6013      	str	r3, [r2, #0]
 800404a:	e00b      	b.n	8004064 <HAL_RCC_OscConfig+0xd4>
 800404c:	4b6b      	ldr	r3, [pc, #428]	; (80041fc <HAL_RCC_OscConfig+0x26c>)
 800404e:	681b      	ldr	r3, [r3, #0]
 8004050:	4a6a      	ldr	r2, [pc, #424]	; (80041fc <HAL_RCC_OscConfig+0x26c>)
 8004052:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8004056:	6013      	str	r3, [r2, #0]
 8004058:	4b68      	ldr	r3, [pc, #416]	; (80041fc <HAL_RCC_OscConfig+0x26c>)
 800405a:	681b      	ldr	r3, [r3, #0]
 800405c:	4a67      	ldr	r2, [pc, #412]	; (80041fc <HAL_RCC_OscConfig+0x26c>)
 800405e:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8004062:	6013      	str	r3, [r2, #0]


      /* Check the HSE State */
      if (RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 8004064:	687b      	ldr	r3, [r7, #4]
 8004066:	685b      	ldr	r3, [r3, #4]
 8004068:	2b00      	cmp	r3, #0
 800406a:	d013      	beq.n	8004094 <HAL_RCC_OscConfig+0x104>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800406c:	f7fe fc5e 	bl	800292c <HAL_GetTick>
 8004070:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8004072:	e008      	b.n	8004086 <HAL_RCC_OscConfig+0xf6>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8004074:	f7fe fc5a 	bl	800292c <HAL_GetTick>
 8004078:	4602      	mov	r2, r0
 800407a:	693b      	ldr	r3, [r7, #16]
 800407c:	1ad3      	subs	r3, r2, r3
 800407e:	2b64      	cmp	r3, #100	; 0x64
 8004080:	d901      	bls.n	8004086 <HAL_RCC_OscConfig+0xf6>
          {
            return HAL_TIMEOUT;
 8004082:	2303      	movs	r3, #3
 8004084:	e1fa      	b.n	800447c <HAL_RCC_OscConfig+0x4ec>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8004086:	4b5d      	ldr	r3, [pc, #372]	; (80041fc <HAL_RCC_OscConfig+0x26c>)
 8004088:	681b      	ldr	r3, [r3, #0]
 800408a:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800408e:	2b00      	cmp	r3, #0
 8004090:	d0f0      	beq.n	8004074 <HAL_RCC_OscConfig+0xe4>
 8004092:	e014      	b.n	80040be <HAL_RCC_OscConfig+0x12e>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8004094:	f7fe fc4a 	bl	800292c <HAL_GetTick>
 8004098:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 800409a:	e008      	b.n	80040ae <HAL_RCC_OscConfig+0x11e>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 800409c:	f7fe fc46 	bl	800292c <HAL_GetTick>
 80040a0:	4602      	mov	r2, r0
 80040a2:	693b      	ldr	r3, [r7, #16]
 80040a4:	1ad3      	subs	r3, r2, r3
 80040a6:	2b64      	cmp	r3, #100	; 0x64
 80040a8:	d901      	bls.n	80040ae <HAL_RCC_OscConfig+0x11e>
          {
            return HAL_TIMEOUT;
 80040aa:	2303      	movs	r3, #3
 80040ac:	e1e6      	b.n	800447c <HAL_RCC_OscConfig+0x4ec>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 80040ae:	4b53      	ldr	r3, [pc, #332]	; (80041fc <HAL_RCC_OscConfig+0x26c>)
 80040b0:	681b      	ldr	r3, [r3, #0]
 80040b2:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80040b6:	2b00      	cmp	r3, #0
 80040b8:	d1f0      	bne.n	800409c <HAL_RCC_OscConfig+0x10c>
 80040ba:	e000      	b.n	80040be <HAL_RCC_OscConfig+0x12e>
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 80040bc:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 80040be:	687b      	ldr	r3, [r7, #4]
 80040c0:	681b      	ldr	r3, [r3, #0]
 80040c2:	f003 0302 	and.w	r3, r3, #2
 80040c6:	2b00      	cmp	r3, #0
 80040c8:	d063      	beq.n	8004192 <HAL_RCC_OscConfig+0x202>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSI)
 80040ca:	4b4c      	ldr	r3, [pc, #304]	; (80041fc <HAL_RCC_OscConfig+0x26c>)
 80040cc:	685b      	ldr	r3, [r3, #4]
 80040ce:	f003 030c 	and.w	r3, r3, #12
 80040d2:	2b00      	cmp	r3, #0
 80040d4:	d00b      	beq.n	80040ee <HAL_RCC_OscConfig+0x15e>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSI_DIV2)))
 80040d6:	4b49      	ldr	r3, [pc, #292]	; (80041fc <HAL_RCC_OscConfig+0x26c>)
 80040d8:	685b      	ldr	r3, [r3, #4]
 80040da:	f003 030c 	and.w	r3, r3, #12
 80040de:	2b08      	cmp	r3, #8
 80040e0:	d11c      	bne.n	800411c <HAL_RCC_OscConfig+0x18c>
 80040e2:	4b46      	ldr	r3, [pc, #280]	; (80041fc <HAL_RCC_OscConfig+0x26c>)
 80040e4:	685b      	ldr	r3, [r3, #4]
 80040e6:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 80040ea:	2b00      	cmp	r3, #0
 80040ec:	d116      	bne.n	800411c <HAL_RCC_OscConfig+0x18c>
    {
      /* When HSI is used as system clock it will not disabled */
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 80040ee:	4b43      	ldr	r3, [pc, #268]	; (80041fc <HAL_RCC_OscConfig+0x26c>)
 80040f0:	681b      	ldr	r3, [r3, #0]
 80040f2:	f003 0302 	and.w	r3, r3, #2
 80040f6:	2b00      	cmp	r3, #0
 80040f8:	d005      	beq.n	8004106 <HAL_RCC_OscConfig+0x176>
 80040fa:	687b      	ldr	r3, [r7, #4]
 80040fc:	691b      	ldr	r3, [r3, #16]
 80040fe:	2b01      	cmp	r3, #1
 8004100:	d001      	beq.n	8004106 <HAL_RCC_OscConfig+0x176>
      {
        return HAL_ERROR;
 8004102:	2301      	movs	r3, #1
 8004104:	e1ba      	b.n	800447c <HAL_RCC_OscConfig+0x4ec>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8004106:	4b3d      	ldr	r3, [pc, #244]	; (80041fc <HAL_RCC_OscConfig+0x26c>)
 8004108:	681b      	ldr	r3, [r3, #0]
 800410a:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 800410e:	687b      	ldr	r3, [r7, #4]
 8004110:	695b      	ldr	r3, [r3, #20]
 8004112:	00db      	lsls	r3, r3, #3
 8004114:	4939      	ldr	r1, [pc, #228]	; (80041fc <HAL_RCC_OscConfig+0x26c>)
 8004116:	4313      	orrs	r3, r2
 8004118:	600b      	str	r3, [r1, #0]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 800411a:	e03a      	b.n	8004192 <HAL_RCC_OscConfig+0x202>
      }
    }
    else
    {
      /* Check the HSI State */
      if (RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 800411c:	687b      	ldr	r3, [r7, #4]
 800411e:	691b      	ldr	r3, [r3, #16]
 8004120:	2b00      	cmp	r3, #0
 8004122:	d020      	beq.n	8004166 <HAL_RCC_OscConfig+0x1d6>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8004124:	4b36      	ldr	r3, [pc, #216]	; (8004200 <HAL_RCC_OscConfig+0x270>)
 8004126:	2201      	movs	r2, #1
 8004128:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800412a:	f7fe fbff 	bl	800292c <HAL_GetTick>
 800412e:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8004130:	e008      	b.n	8004144 <HAL_RCC_OscConfig+0x1b4>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8004132:	f7fe fbfb 	bl	800292c <HAL_GetTick>
 8004136:	4602      	mov	r2, r0
 8004138:	693b      	ldr	r3, [r7, #16]
 800413a:	1ad3      	subs	r3, r2, r3
 800413c:	2b02      	cmp	r3, #2
 800413e:	d901      	bls.n	8004144 <HAL_RCC_OscConfig+0x1b4>
          {
            return HAL_TIMEOUT;
 8004140:	2303      	movs	r3, #3
 8004142:	e19b      	b.n	800447c <HAL_RCC_OscConfig+0x4ec>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8004144:	4b2d      	ldr	r3, [pc, #180]	; (80041fc <HAL_RCC_OscConfig+0x26c>)
 8004146:	681b      	ldr	r3, [r3, #0]
 8004148:	f003 0302 	and.w	r3, r3, #2
 800414c:	2b00      	cmp	r3, #0
 800414e:	d0f0      	beq.n	8004132 <HAL_RCC_OscConfig+0x1a2>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8004150:	4b2a      	ldr	r3, [pc, #168]	; (80041fc <HAL_RCC_OscConfig+0x26c>)
 8004152:	681b      	ldr	r3, [r3, #0]
 8004154:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8004158:	687b      	ldr	r3, [r7, #4]
 800415a:	695b      	ldr	r3, [r3, #20]
 800415c:	00db      	lsls	r3, r3, #3
 800415e:	4927      	ldr	r1, [pc, #156]	; (80041fc <HAL_RCC_OscConfig+0x26c>)
 8004160:	4313      	orrs	r3, r2
 8004162:	600b      	str	r3, [r1, #0]
 8004164:	e015      	b.n	8004192 <HAL_RCC_OscConfig+0x202>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8004166:	4b26      	ldr	r3, [pc, #152]	; (8004200 <HAL_RCC_OscConfig+0x270>)
 8004168:	2200      	movs	r2, #0
 800416a:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800416c:	f7fe fbde 	bl	800292c <HAL_GetTick>
 8004170:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8004172:	e008      	b.n	8004186 <HAL_RCC_OscConfig+0x1f6>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8004174:	f7fe fbda 	bl	800292c <HAL_GetTick>
 8004178:	4602      	mov	r2, r0
 800417a:	693b      	ldr	r3, [r7, #16]
 800417c:	1ad3      	subs	r3, r2, r3
 800417e:	2b02      	cmp	r3, #2
 8004180:	d901      	bls.n	8004186 <HAL_RCC_OscConfig+0x1f6>
          {
            return HAL_TIMEOUT;
 8004182:	2303      	movs	r3, #3
 8004184:	e17a      	b.n	800447c <HAL_RCC_OscConfig+0x4ec>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8004186:	4b1d      	ldr	r3, [pc, #116]	; (80041fc <HAL_RCC_OscConfig+0x26c>)
 8004188:	681b      	ldr	r3, [r3, #0]
 800418a:	f003 0302 	and.w	r3, r3, #2
 800418e:	2b00      	cmp	r3, #0
 8004190:	d1f0      	bne.n	8004174 <HAL_RCC_OscConfig+0x1e4>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8004192:	687b      	ldr	r3, [r7, #4]
 8004194:	681b      	ldr	r3, [r3, #0]
 8004196:	f003 0308 	and.w	r3, r3, #8
 800419a:	2b00      	cmp	r3, #0
 800419c:	d03a      	beq.n	8004214 <HAL_RCC_OscConfig+0x284>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if (RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 800419e:	687b      	ldr	r3, [r7, #4]
 80041a0:	699b      	ldr	r3, [r3, #24]
 80041a2:	2b00      	cmp	r3, #0
 80041a4:	d019      	beq.n	80041da <HAL_RCC_OscConfig+0x24a>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 80041a6:	4b17      	ldr	r3, [pc, #92]	; (8004204 <HAL_RCC_OscConfig+0x274>)
 80041a8:	2201      	movs	r2, #1
 80041aa:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 80041ac:	f7fe fbbe 	bl	800292c <HAL_GetTick>
 80041b0:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 80041b2:	e008      	b.n	80041c6 <HAL_RCC_OscConfig+0x236>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 80041b4:	f7fe fbba 	bl	800292c <HAL_GetTick>
 80041b8:	4602      	mov	r2, r0
 80041ba:	693b      	ldr	r3, [r7, #16]
 80041bc:	1ad3      	subs	r3, r2, r3
 80041be:	2b02      	cmp	r3, #2
 80041c0:	d901      	bls.n	80041c6 <HAL_RCC_OscConfig+0x236>
        {
          return HAL_TIMEOUT;
 80041c2:	2303      	movs	r3, #3
 80041c4:	e15a      	b.n	800447c <HAL_RCC_OscConfig+0x4ec>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 80041c6:	4b0d      	ldr	r3, [pc, #52]	; (80041fc <HAL_RCC_OscConfig+0x26c>)
 80041c8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80041ca:	f003 0302 	and.w	r3, r3, #2
 80041ce:	2b00      	cmp	r3, #0
 80041d0:	d0f0      	beq.n	80041b4 <HAL_RCC_OscConfig+0x224>
        }
      }
      /*  To have a fully stabilized clock in the specified range, a software delay of 1ms
          should be added.*/
      RCC_Delay(1);
 80041d2:	2001      	movs	r0, #1
 80041d4:	f000 fada 	bl	800478c <RCC_Delay>
 80041d8:	e01c      	b.n	8004214 <HAL_RCC_OscConfig+0x284>
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 80041da:	4b0a      	ldr	r3, [pc, #40]	; (8004204 <HAL_RCC_OscConfig+0x274>)
 80041dc:	2200      	movs	r2, #0
 80041de:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 80041e0:	f7fe fba4 	bl	800292c <HAL_GetTick>
 80041e4:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is disabled */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 80041e6:	e00f      	b.n	8004208 <HAL_RCC_OscConfig+0x278>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 80041e8:	f7fe fba0 	bl	800292c <HAL_GetTick>
 80041ec:	4602      	mov	r2, r0
 80041ee:	693b      	ldr	r3, [r7, #16]
 80041f0:	1ad3      	subs	r3, r2, r3
 80041f2:	2b02      	cmp	r3, #2
 80041f4:	d908      	bls.n	8004208 <HAL_RCC_OscConfig+0x278>
        {
          return HAL_TIMEOUT;
 80041f6:	2303      	movs	r3, #3
 80041f8:	e140      	b.n	800447c <HAL_RCC_OscConfig+0x4ec>
 80041fa:	bf00      	nop
 80041fc:	40021000 	.word	0x40021000
 8004200:	42420000 	.word	0x42420000
 8004204:	42420480 	.word	0x42420480
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8004208:	4b9e      	ldr	r3, [pc, #632]	; (8004484 <HAL_RCC_OscConfig+0x4f4>)
 800420a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800420c:	f003 0302 	and.w	r3, r3, #2
 8004210:	2b00      	cmp	r3, #0
 8004212:	d1e9      	bne.n	80041e8 <HAL_RCC_OscConfig+0x258>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8004214:	687b      	ldr	r3, [r7, #4]
 8004216:	681b      	ldr	r3, [r3, #0]
 8004218:	f003 0304 	and.w	r3, r3, #4
 800421c:	2b00      	cmp	r3, #0
 800421e:	f000 80a6 	beq.w	800436e <HAL_RCC_OscConfig+0x3de>
  {
    FlagStatus       pwrclkchanged = RESET;
 8004222:	2300      	movs	r3, #0
 8004224:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if (__HAL_RCC_PWR_IS_CLK_DISABLED())
 8004226:	4b97      	ldr	r3, [pc, #604]	; (8004484 <HAL_RCC_OscConfig+0x4f4>)
 8004228:	69db      	ldr	r3, [r3, #28]
 800422a:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800422e:	2b00      	cmp	r3, #0
 8004230:	d10d      	bne.n	800424e <HAL_RCC_OscConfig+0x2be>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8004232:	4b94      	ldr	r3, [pc, #592]	; (8004484 <HAL_RCC_OscConfig+0x4f4>)
 8004234:	69db      	ldr	r3, [r3, #28]
 8004236:	4a93      	ldr	r2, [pc, #588]	; (8004484 <HAL_RCC_OscConfig+0x4f4>)
 8004238:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 800423c:	61d3      	str	r3, [r2, #28]
 800423e:	4b91      	ldr	r3, [pc, #580]	; (8004484 <HAL_RCC_OscConfig+0x4f4>)
 8004240:	69db      	ldr	r3, [r3, #28]
 8004242:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8004246:	60bb      	str	r3, [r7, #8]
 8004248:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 800424a:	2301      	movs	r3, #1
 800424c:	75fb      	strb	r3, [r7, #23]
    }

    if (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 800424e:	4b8e      	ldr	r3, [pc, #568]	; (8004488 <HAL_RCC_OscConfig+0x4f8>)
 8004250:	681b      	ldr	r3, [r3, #0]
 8004252:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8004256:	2b00      	cmp	r3, #0
 8004258:	d118      	bne.n	800428c <HAL_RCC_OscConfig+0x2fc>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 800425a:	4b8b      	ldr	r3, [pc, #556]	; (8004488 <HAL_RCC_OscConfig+0x4f8>)
 800425c:	681b      	ldr	r3, [r3, #0]
 800425e:	4a8a      	ldr	r2, [pc, #552]	; (8004488 <HAL_RCC_OscConfig+0x4f8>)
 8004260:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8004264:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8004266:	f7fe fb61 	bl	800292c <HAL_GetTick>
 800426a:	6138      	str	r0, [r7, #16]

      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 800426c:	e008      	b.n	8004280 <HAL_RCC_OscConfig+0x2f0>
      {
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 800426e:	f7fe fb5d 	bl	800292c <HAL_GetTick>
 8004272:	4602      	mov	r2, r0
 8004274:	693b      	ldr	r3, [r7, #16]
 8004276:	1ad3      	subs	r3, r2, r3
 8004278:	2b64      	cmp	r3, #100	; 0x64
 800427a:	d901      	bls.n	8004280 <HAL_RCC_OscConfig+0x2f0>
        {
          return HAL_TIMEOUT;
 800427c:	2303      	movs	r3, #3
 800427e:	e0fd      	b.n	800447c <HAL_RCC_OscConfig+0x4ec>
      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8004280:	4b81      	ldr	r3, [pc, #516]	; (8004488 <HAL_RCC_OscConfig+0x4f8>)
 8004282:	681b      	ldr	r3, [r3, #0]
 8004284:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8004288:	2b00      	cmp	r3, #0
 800428a:	d0f0      	beq.n	800426e <HAL_RCC_OscConfig+0x2de>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 800428c:	687b      	ldr	r3, [r7, #4]
 800428e:	68db      	ldr	r3, [r3, #12]
 8004290:	2b01      	cmp	r3, #1
 8004292:	d106      	bne.n	80042a2 <HAL_RCC_OscConfig+0x312>
 8004294:	4b7b      	ldr	r3, [pc, #492]	; (8004484 <HAL_RCC_OscConfig+0x4f4>)
 8004296:	6a1b      	ldr	r3, [r3, #32]
 8004298:	4a7a      	ldr	r2, [pc, #488]	; (8004484 <HAL_RCC_OscConfig+0x4f4>)
 800429a:	f043 0301 	orr.w	r3, r3, #1
 800429e:	6213      	str	r3, [r2, #32]
 80042a0:	e02d      	b.n	80042fe <HAL_RCC_OscConfig+0x36e>
 80042a2:	687b      	ldr	r3, [r7, #4]
 80042a4:	68db      	ldr	r3, [r3, #12]
 80042a6:	2b00      	cmp	r3, #0
 80042a8:	d10c      	bne.n	80042c4 <HAL_RCC_OscConfig+0x334>
 80042aa:	4b76      	ldr	r3, [pc, #472]	; (8004484 <HAL_RCC_OscConfig+0x4f4>)
 80042ac:	6a1b      	ldr	r3, [r3, #32]
 80042ae:	4a75      	ldr	r2, [pc, #468]	; (8004484 <HAL_RCC_OscConfig+0x4f4>)
 80042b0:	f023 0301 	bic.w	r3, r3, #1
 80042b4:	6213      	str	r3, [r2, #32]
 80042b6:	4b73      	ldr	r3, [pc, #460]	; (8004484 <HAL_RCC_OscConfig+0x4f4>)
 80042b8:	6a1b      	ldr	r3, [r3, #32]
 80042ba:	4a72      	ldr	r2, [pc, #456]	; (8004484 <HAL_RCC_OscConfig+0x4f4>)
 80042bc:	f023 0304 	bic.w	r3, r3, #4
 80042c0:	6213      	str	r3, [r2, #32]
 80042c2:	e01c      	b.n	80042fe <HAL_RCC_OscConfig+0x36e>
 80042c4:	687b      	ldr	r3, [r7, #4]
 80042c6:	68db      	ldr	r3, [r3, #12]
 80042c8:	2b05      	cmp	r3, #5
 80042ca:	d10c      	bne.n	80042e6 <HAL_RCC_OscConfig+0x356>
 80042cc:	4b6d      	ldr	r3, [pc, #436]	; (8004484 <HAL_RCC_OscConfig+0x4f4>)
 80042ce:	6a1b      	ldr	r3, [r3, #32]
 80042d0:	4a6c      	ldr	r2, [pc, #432]	; (8004484 <HAL_RCC_OscConfig+0x4f4>)
 80042d2:	f043 0304 	orr.w	r3, r3, #4
 80042d6:	6213      	str	r3, [r2, #32]
 80042d8:	4b6a      	ldr	r3, [pc, #424]	; (8004484 <HAL_RCC_OscConfig+0x4f4>)
 80042da:	6a1b      	ldr	r3, [r3, #32]
 80042dc:	4a69      	ldr	r2, [pc, #420]	; (8004484 <HAL_RCC_OscConfig+0x4f4>)
 80042de:	f043 0301 	orr.w	r3, r3, #1
 80042e2:	6213      	str	r3, [r2, #32]
 80042e4:	e00b      	b.n	80042fe <HAL_RCC_OscConfig+0x36e>
 80042e6:	4b67      	ldr	r3, [pc, #412]	; (8004484 <HAL_RCC_OscConfig+0x4f4>)
 80042e8:	6a1b      	ldr	r3, [r3, #32]
 80042ea:	4a66      	ldr	r2, [pc, #408]	; (8004484 <HAL_RCC_OscConfig+0x4f4>)
 80042ec:	f023 0301 	bic.w	r3, r3, #1
 80042f0:	6213      	str	r3, [r2, #32]
 80042f2:	4b64      	ldr	r3, [pc, #400]	; (8004484 <HAL_RCC_OscConfig+0x4f4>)
 80042f4:	6a1b      	ldr	r3, [r3, #32]
 80042f6:	4a63      	ldr	r2, [pc, #396]	; (8004484 <HAL_RCC_OscConfig+0x4f4>)
 80042f8:	f023 0304 	bic.w	r3, r3, #4
 80042fc:	6213      	str	r3, [r2, #32]
    /* Check the LSE State */
    if (RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 80042fe:	687b      	ldr	r3, [r7, #4]
 8004300:	68db      	ldr	r3, [r3, #12]
 8004302:	2b00      	cmp	r3, #0
 8004304:	d015      	beq.n	8004332 <HAL_RCC_OscConfig+0x3a2>
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8004306:	f7fe fb11 	bl	800292c <HAL_GetTick>
 800430a:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 800430c:	e00a      	b.n	8004324 <HAL_RCC_OscConfig+0x394>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 800430e:	f7fe fb0d 	bl	800292c <HAL_GetTick>
 8004312:	4602      	mov	r2, r0
 8004314:	693b      	ldr	r3, [r7, #16]
 8004316:	1ad3      	subs	r3, r2, r3
 8004318:	f241 3288 	movw	r2, #5000	; 0x1388
 800431c:	4293      	cmp	r3, r2
 800431e:	d901      	bls.n	8004324 <HAL_RCC_OscConfig+0x394>
        {
          return HAL_TIMEOUT;
 8004320:	2303      	movs	r3, #3
 8004322:	e0ab      	b.n	800447c <HAL_RCC_OscConfig+0x4ec>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8004324:	4b57      	ldr	r3, [pc, #348]	; (8004484 <HAL_RCC_OscConfig+0x4f4>)
 8004326:	6a1b      	ldr	r3, [r3, #32]
 8004328:	f003 0302 	and.w	r3, r3, #2
 800432c:	2b00      	cmp	r3, #0
 800432e:	d0ee      	beq.n	800430e <HAL_RCC_OscConfig+0x37e>
 8004330:	e014      	b.n	800435c <HAL_RCC_OscConfig+0x3cc>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8004332:	f7fe fafb 	bl	800292c <HAL_GetTick>
 8004336:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is disabled */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8004338:	e00a      	b.n	8004350 <HAL_RCC_OscConfig+0x3c0>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 800433a:	f7fe faf7 	bl	800292c <HAL_GetTick>
 800433e:	4602      	mov	r2, r0
 8004340:	693b      	ldr	r3, [r7, #16]
 8004342:	1ad3      	subs	r3, r2, r3
 8004344:	f241 3288 	movw	r2, #5000	; 0x1388
 8004348:	4293      	cmp	r3, r2
 800434a:	d901      	bls.n	8004350 <HAL_RCC_OscConfig+0x3c0>
        {
          return HAL_TIMEOUT;
 800434c:	2303      	movs	r3, #3
 800434e:	e095      	b.n	800447c <HAL_RCC_OscConfig+0x4ec>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8004350:	4b4c      	ldr	r3, [pc, #304]	; (8004484 <HAL_RCC_OscConfig+0x4f4>)
 8004352:	6a1b      	ldr	r3, [r3, #32]
 8004354:	f003 0302 	and.w	r3, r3, #2
 8004358:	2b00      	cmp	r3, #0
 800435a:	d1ee      	bne.n	800433a <HAL_RCC_OscConfig+0x3aa>
        }
      }
    }

    /* Require to disable power clock if necessary */
    if (pwrclkchanged == SET)
 800435c:	7dfb      	ldrb	r3, [r7, #23]
 800435e:	2b01      	cmp	r3, #1
 8004360:	d105      	bne.n	800436e <HAL_RCC_OscConfig+0x3de>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8004362:	4b48      	ldr	r3, [pc, #288]	; (8004484 <HAL_RCC_OscConfig+0x4f4>)
 8004364:	69db      	ldr	r3, [r3, #28]
 8004366:	4a47      	ldr	r2, [pc, #284]	; (8004484 <HAL_RCC_OscConfig+0x4f4>)
 8004368:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 800436c:	61d3      	str	r3, [r2, #28]

#endif /* RCC_CR_PLL2ON */
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 800436e:	687b      	ldr	r3, [r7, #4]
 8004370:	69db      	ldr	r3, [r3, #28]
 8004372:	2b00      	cmp	r3, #0
 8004374:	f000 8081 	beq.w	800447a <HAL_RCC_OscConfig+0x4ea>
  {
    /* Check if the PLL is used as system clock or not */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 8004378:	4b42      	ldr	r3, [pc, #264]	; (8004484 <HAL_RCC_OscConfig+0x4f4>)
 800437a:	685b      	ldr	r3, [r3, #4]
 800437c:	f003 030c 	and.w	r3, r3, #12
 8004380:	2b08      	cmp	r3, #8
 8004382:	d061      	beq.n	8004448 <HAL_RCC_OscConfig+0x4b8>
    {
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8004384:	687b      	ldr	r3, [r7, #4]
 8004386:	69db      	ldr	r3, [r3, #28]
 8004388:	2b02      	cmp	r3, #2
 800438a:	d146      	bne.n	800441a <HAL_RCC_OscConfig+0x48a>
        /* Check the parameters */
        assert_param(IS_RCC_PLLSOURCE(RCC_OscInitStruct->PLL.PLLSource));
        assert_param(IS_RCC_PLL_MUL(RCC_OscInitStruct->PLL.PLLMUL));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 800438c:	4b3f      	ldr	r3, [pc, #252]	; (800448c <HAL_RCC_OscConfig+0x4fc>)
 800438e:	2200      	movs	r2, #0
 8004390:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8004392:	f7fe facb 	bl	800292c <HAL_GetTick>
 8004396:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8004398:	e008      	b.n	80043ac <HAL_RCC_OscConfig+0x41c>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 800439a:	f7fe fac7 	bl	800292c <HAL_GetTick>
 800439e:	4602      	mov	r2, r0
 80043a0:	693b      	ldr	r3, [r7, #16]
 80043a2:	1ad3      	subs	r3, r2, r3
 80043a4:	2b02      	cmp	r3, #2
 80043a6:	d901      	bls.n	80043ac <HAL_RCC_OscConfig+0x41c>
          {
            return HAL_TIMEOUT;
 80043a8:	2303      	movs	r3, #3
 80043aa:	e067      	b.n	800447c <HAL_RCC_OscConfig+0x4ec>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 80043ac:	4b35      	ldr	r3, [pc, #212]	; (8004484 <HAL_RCC_OscConfig+0x4f4>)
 80043ae:	681b      	ldr	r3, [r3, #0]
 80043b0:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80043b4:	2b00      	cmp	r3, #0
 80043b6:	d1f0      	bne.n	800439a <HAL_RCC_OscConfig+0x40a>
          }
        }

        /* Configure the HSE prediv factor --------------------------------*/
        /* It can be written only when the PLL is disabled. Not used in PLL source is different than HSE */
        if (RCC_OscInitStruct->PLL.PLLSource == RCC_PLLSOURCE_HSE)
 80043b8:	687b      	ldr	r3, [r7, #4]
 80043ba:	6a1b      	ldr	r3, [r3, #32]
 80043bc:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 80043c0:	d108      	bne.n	80043d4 <HAL_RCC_OscConfig+0x444>
          /* Set PREDIV1 source */
          SET_BIT(RCC->CFGR2, RCC_OscInitStruct->Prediv1Source);
#endif /* RCC_CFGR2_PREDIV1SRC */

          /* Set PREDIV1 Value */
          __HAL_RCC_HSE_PREDIV_CONFIG(RCC_OscInitStruct->HSEPredivValue);
 80043c2:	4b30      	ldr	r3, [pc, #192]	; (8004484 <HAL_RCC_OscConfig+0x4f4>)
 80043c4:	685b      	ldr	r3, [r3, #4]
 80043c6:	f423 3200 	bic.w	r2, r3, #131072	; 0x20000
 80043ca:	687b      	ldr	r3, [r7, #4]
 80043cc:	689b      	ldr	r3, [r3, #8]
 80043ce:	492d      	ldr	r1, [pc, #180]	; (8004484 <HAL_RCC_OscConfig+0x4f4>)
 80043d0:	4313      	orrs	r3, r2
 80043d2:	604b      	str	r3, [r1, #4]
        }

        /* Configure the main PLL clock source and multiplication factors. */
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 80043d4:	4b2b      	ldr	r3, [pc, #172]	; (8004484 <HAL_RCC_OscConfig+0x4f4>)
 80043d6:	685b      	ldr	r3, [r3, #4]
 80043d8:	f423 1274 	bic.w	r2, r3, #3997696	; 0x3d0000
 80043dc:	687b      	ldr	r3, [r7, #4]
 80043de:	6a19      	ldr	r1, [r3, #32]
 80043e0:	687b      	ldr	r3, [r7, #4]
 80043e2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80043e4:	430b      	orrs	r3, r1
 80043e6:	4927      	ldr	r1, [pc, #156]	; (8004484 <HAL_RCC_OscConfig+0x4f4>)
 80043e8:	4313      	orrs	r3, r2
 80043ea:	604b      	str	r3, [r1, #4]
                             RCC_OscInitStruct->PLL.PLLMUL);
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 80043ec:	4b27      	ldr	r3, [pc, #156]	; (800448c <HAL_RCC_OscConfig+0x4fc>)
 80043ee:	2201      	movs	r2, #1
 80043f0:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80043f2:	f7fe fa9b 	bl	800292c <HAL_GetTick>
 80043f6:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 80043f8:	e008      	b.n	800440c <HAL_RCC_OscConfig+0x47c>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 80043fa:	f7fe fa97 	bl	800292c <HAL_GetTick>
 80043fe:	4602      	mov	r2, r0
 8004400:	693b      	ldr	r3, [r7, #16]
 8004402:	1ad3      	subs	r3, r2, r3
 8004404:	2b02      	cmp	r3, #2
 8004406:	d901      	bls.n	800440c <HAL_RCC_OscConfig+0x47c>
          {
            return HAL_TIMEOUT;
 8004408:	2303      	movs	r3, #3
 800440a:	e037      	b.n	800447c <HAL_RCC_OscConfig+0x4ec>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 800440c:	4b1d      	ldr	r3, [pc, #116]	; (8004484 <HAL_RCC_OscConfig+0x4f4>)
 800440e:	681b      	ldr	r3, [r3, #0]
 8004410:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8004414:	2b00      	cmp	r3, #0
 8004416:	d0f0      	beq.n	80043fa <HAL_RCC_OscConfig+0x46a>
 8004418:	e02f      	b.n	800447a <HAL_RCC_OscConfig+0x4ea>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 800441a:	4b1c      	ldr	r3, [pc, #112]	; (800448c <HAL_RCC_OscConfig+0x4fc>)
 800441c:	2200      	movs	r2, #0
 800441e:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8004420:	f7fe fa84 	bl	800292c <HAL_GetTick>
 8004424:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8004426:	e008      	b.n	800443a <HAL_RCC_OscConfig+0x4aa>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8004428:	f7fe fa80 	bl	800292c <HAL_GetTick>
 800442c:	4602      	mov	r2, r0
 800442e:	693b      	ldr	r3, [r7, #16]
 8004430:	1ad3      	subs	r3, r2, r3
 8004432:	2b02      	cmp	r3, #2
 8004434:	d901      	bls.n	800443a <HAL_RCC_OscConfig+0x4aa>
          {
            return HAL_TIMEOUT;
 8004436:	2303      	movs	r3, #3
 8004438:	e020      	b.n	800447c <HAL_RCC_OscConfig+0x4ec>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 800443a:	4b12      	ldr	r3, [pc, #72]	; (8004484 <HAL_RCC_OscConfig+0x4f4>)
 800443c:	681b      	ldr	r3, [r3, #0]
 800443e:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8004442:	2b00      	cmp	r3, #0
 8004444:	d1f0      	bne.n	8004428 <HAL_RCC_OscConfig+0x498>
 8004446:	e018      	b.n	800447a <HAL_RCC_OscConfig+0x4ea>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 8004448:	687b      	ldr	r3, [r7, #4]
 800444a:	69db      	ldr	r3, [r3, #28]
 800444c:	2b01      	cmp	r3, #1
 800444e:	d101      	bne.n	8004454 <HAL_RCC_OscConfig+0x4c4>
      {
        return HAL_ERROR;
 8004450:	2301      	movs	r3, #1
 8004452:	e013      	b.n	800447c <HAL_RCC_OscConfig+0x4ec>
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->CFGR;
 8004454:	4b0b      	ldr	r3, [pc, #44]	; (8004484 <HAL_RCC_OscConfig+0x4f4>)
 8004456:	685b      	ldr	r3, [r3, #4]
 8004458:	60fb      	str	r3, [r7, #12]
        if ((READ_BIT(pll_config, RCC_CFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 800445a:	68fb      	ldr	r3, [r7, #12]
 800445c:	f403 3280 	and.w	r2, r3, #65536	; 0x10000
 8004460:	687b      	ldr	r3, [r7, #4]
 8004462:	6a1b      	ldr	r3, [r3, #32]
 8004464:	429a      	cmp	r2, r3
 8004466:	d106      	bne.n	8004476 <HAL_RCC_OscConfig+0x4e6>
            (READ_BIT(pll_config, RCC_CFGR_PLLMULL) != RCC_OscInitStruct->PLL.PLLMUL))
 8004468:	68fb      	ldr	r3, [r7, #12]
 800446a:	f403 1270 	and.w	r2, r3, #3932160	; 0x3c0000
 800446e:	687b      	ldr	r3, [r7, #4]
 8004470:	6a5b      	ldr	r3, [r3, #36]	; 0x24
        if ((READ_BIT(pll_config, RCC_CFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8004472:	429a      	cmp	r2, r3
 8004474:	d001      	beq.n	800447a <HAL_RCC_OscConfig+0x4ea>
        {
          return HAL_ERROR;
 8004476:	2301      	movs	r3, #1
 8004478:	e000      	b.n	800447c <HAL_RCC_OscConfig+0x4ec>
        }
      }
    }
  }

  return HAL_OK;
 800447a:	2300      	movs	r3, #0
}
 800447c:	4618      	mov	r0, r3
 800447e:	3718      	adds	r7, #24
 8004480:	46bd      	mov	sp, r7
 8004482:	bd80      	pop	{r7, pc}
 8004484:	40021000 	.word	0x40021000
 8004488:	40007000 	.word	0x40007000
 800448c:	42420060 	.word	0x42420060

08004490 <HAL_RCC_ClockConfig>:
  *         You can use @ref HAL_RCC_GetClockConfig() function to know which clock is
  *         currently used as system clock source.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8004490:	b580      	push	{r7, lr}
 8004492:	b084      	sub	sp, #16
 8004494:	af00      	add	r7, sp, #0
 8004496:	6078      	str	r0, [r7, #4]
 8004498:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if (RCC_ClkInitStruct == NULL)
 800449a:	687b      	ldr	r3, [r7, #4]
 800449c:	2b00      	cmp	r3, #0
 800449e:	d101      	bne.n	80044a4 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 80044a0:	2301      	movs	r3, #1
 80044a2:	e0d0      	b.n	8004646 <HAL_RCC_ClockConfig+0x1b6>
  must be correctly programmed according to the frequency of the CPU clock
    (HCLK) of the device. */

#if defined(FLASH_ACR_LATENCY)
  /* Increasing the number of wait states because of higher CPU frequency */
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 80044a4:	4b6a      	ldr	r3, [pc, #424]	; (8004650 <HAL_RCC_ClockConfig+0x1c0>)
 80044a6:	681b      	ldr	r3, [r3, #0]
 80044a8:	f003 0307 	and.w	r3, r3, #7
 80044ac:	683a      	ldr	r2, [r7, #0]
 80044ae:	429a      	cmp	r2, r3
 80044b0:	d910      	bls.n	80044d4 <HAL_RCC_ClockConfig+0x44>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 80044b2:	4b67      	ldr	r3, [pc, #412]	; (8004650 <HAL_RCC_ClockConfig+0x1c0>)
 80044b4:	681b      	ldr	r3, [r3, #0]
 80044b6:	f023 0207 	bic.w	r2, r3, #7
 80044ba:	4965      	ldr	r1, [pc, #404]	; (8004650 <HAL_RCC_ClockConfig+0x1c0>)
 80044bc:	683b      	ldr	r3, [r7, #0]
 80044be:	4313      	orrs	r3, r2
 80044c0:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 80044c2:	4b63      	ldr	r3, [pc, #396]	; (8004650 <HAL_RCC_ClockConfig+0x1c0>)
 80044c4:	681b      	ldr	r3, [r3, #0]
 80044c6:	f003 0307 	and.w	r3, r3, #7
 80044ca:	683a      	ldr	r2, [r7, #0]
 80044cc:	429a      	cmp	r2, r3
 80044ce:	d001      	beq.n	80044d4 <HAL_RCC_ClockConfig+0x44>
  {
    return HAL_ERROR;
 80044d0:	2301      	movs	r3, #1
 80044d2:	e0b8      	b.n	8004646 <HAL_RCC_ClockConfig+0x1b6>
  }
}

#endif /* FLASH_ACR_LATENCY */
/*-------------------------- HCLK Configuration --------------------------*/
if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 80044d4:	687b      	ldr	r3, [r7, #4]
 80044d6:	681b      	ldr	r3, [r3, #0]
 80044d8:	f003 0302 	and.w	r3, r3, #2
 80044dc:	2b00      	cmp	r3, #0
 80044de:	d020      	beq.n	8004522 <HAL_RCC_ClockConfig+0x92>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
    a non-spec phase whatever we decrease or increase HCLK. */
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 80044e0:	687b      	ldr	r3, [r7, #4]
 80044e2:	681b      	ldr	r3, [r3, #0]
 80044e4:	f003 0304 	and.w	r3, r3, #4
 80044e8:	2b00      	cmp	r3, #0
 80044ea:	d005      	beq.n	80044f8 <HAL_RCC_ClockConfig+0x68>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 80044ec:	4b59      	ldr	r3, [pc, #356]	; (8004654 <HAL_RCC_ClockConfig+0x1c4>)
 80044ee:	685b      	ldr	r3, [r3, #4]
 80044f0:	4a58      	ldr	r2, [pc, #352]	; (8004654 <HAL_RCC_ClockConfig+0x1c4>)
 80044f2:	f443 63e0 	orr.w	r3, r3, #1792	; 0x700
 80044f6:	6053      	str	r3, [r2, #4]
    }

    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 80044f8:	687b      	ldr	r3, [r7, #4]
 80044fa:	681b      	ldr	r3, [r3, #0]
 80044fc:	f003 0308 	and.w	r3, r3, #8
 8004500:	2b00      	cmp	r3, #0
 8004502:	d005      	beq.n	8004510 <HAL_RCC_ClockConfig+0x80>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 8004504:	4b53      	ldr	r3, [pc, #332]	; (8004654 <HAL_RCC_ClockConfig+0x1c4>)
 8004506:	685b      	ldr	r3, [r3, #4]
 8004508:	4a52      	ldr	r2, [pc, #328]	; (8004654 <HAL_RCC_ClockConfig+0x1c4>)
 800450a:	f443 5360 	orr.w	r3, r3, #14336	; 0x3800
 800450e:	6053      	str	r3, [r2, #4]
    }

    /* Set the new HCLK clock divider */
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8004510:	4b50      	ldr	r3, [pc, #320]	; (8004654 <HAL_RCC_ClockConfig+0x1c4>)
 8004512:	685b      	ldr	r3, [r3, #4]
 8004514:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8004518:	687b      	ldr	r3, [r7, #4]
 800451a:	689b      	ldr	r3, [r3, #8]
 800451c:	494d      	ldr	r1, [pc, #308]	; (8004654 <HAL_RCC_ClockConfig+0x1c4>)
 800451e:	4313      	orrs	r3, r2
 8004520:	604b      	str	r3, [r1, #4]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8004522:	687b      	ldr	r3, [r7, #4]
 8004524:	681b      	ldr	r3, [r3, #0]
 8004526:	f003 0301 	and.w	r3, r3, #1
 800452a:	2b00      	cmp	r3, #0
 800452c:	d040      	beq.n	80045b0 <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 800452e:	687b      	ldr	r3, [r7, #4]
 8004530:	685b      	ldr	r3, [r3, #4]
 8004532:	2b01      	cmp	r3, #1
 8004534:	d107      	bne.n	8004546 <HAL_RCC_ClockConfig+0xb6>
    {
      /* Check the HSE ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8004536:	4b47      	ldr	r3, [pc, #284]	; (8004654 <HAL_RCC_ClockConfig+0x1c4>)
 8004538:	681b      	ldr	r3, [r3, #0]
 800453a:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800453e:	2b00      	cmp	r3, #0
 8004540:	d115      	bne.n	800456e <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8004542:	2301      	movs	r3, #1
 8004544:	e07f      	b.n	8004646 <HAL_RCC_ClockConfig+0x1b6>
      }
    }
    /* PLL is selected as System Clock Source */
    else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 8004546:	687b      	ldr	r3, [r7, #4]
 8004548:	685b      	ldr	r3, [r3, #4]
 800454a:	2b02      	cmp	r3, #2
 800454c:	d107      	bne.n	800455e <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 800454e:	4b41      	ldr	r3, [pc, #260]	; (8004654 <HAL_RCC_ClockConfig+0x1c4>)
 8004550:	681b      	ldr	r3, [r3, #0]
 8004552:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8004556:	2b00      	cmp	r3, #0
 8004558:	d109      	bne.n	800456e <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 800455a:	2301      	movs	r3, #1
 800455c:	e073      	b.n	8004646 <HAL_RCC_ClockConfig+0x1b6>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 800455e:	4b3d      	ldr	r3, [pc, #244]	; (8004654 <HAL_RCC_ClockConfig+0x1c4>)
 8004560:	681b      	ldr	r3, [r3, #0]
 8004562:	f003 0302 	and.w	r3, r3, #2
 8004566:	2b00      	cmp	r3, #0
 8004568:	d101      	bne.n	800456e <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 800456a:	2301      	movs	r3, #1
 800456c:	e06b      	b.n	8004646 <HAL_RCC_ClockConfig+0x1b6>
      }
    }
    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 800456e:	4b39      	ldr	r3, [pc, #228]	; (8004654 <HAL_RCC_ClockConfig+0x1c4>)
 8004570:	685b      	ldr	r3, [r3, #4]
 8004572:	f023 0203 	bic.w	r2, r3, #3
 8004576:	687b      	ldr	r3, [r7, #4]
 8004578:	685b      	ldr	r3, [r3, #4]
 800457a:	4936      	ldr	r1, [pc, #216]	; (8004654 <HAL_RCC_ClockConfig+0x1c4>)
 800457c:	4313      	orrs	r3, r2
 800457e:	604b      	str	r3, [r1, #4]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 8004580:	f7fe f9d4 	bl	800292c <HAL_GetTick>
 8004584:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8004586:	e00a      	b.n	800459e <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8004588:	f7fe f9d0 	bl	800292c <HAL_GetTick>
 800458c:	4602      	mov	r2, r0
 800458e:	68fb      	ldr	r3, [r7, #12]
 8004590:	1ad3      	subs	r3, r2, r3
 8004592:	f241 3288 	movw	r2, #5000	; 0x1388
 8004596:	4293      	cmp	r3, r2
 8004598:	d901      	bls.n	800459e <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 800459a:	2303      	movs	r3, #3
 800459c:	e053      	b.n	8004646 <HAL_RCC_ClockConfig+0x1b6>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 800459e:	4b2d      	ldr	r3, [pc, #180]	; (8004654 <HAL_RCC_ClockConfig+0x1c4>)
 80045a0:	685b      	ldr	r3, [r3, #4]
 80045a2:	f003 020c 	and.w	r2, r3, #12
 80045a6:	687b      	ldr	r3, [r7, #4]
 80045a8:	685b      	ldr	r3, [r3, #4]
 80045aa:	009b      	lsls	r3, r3, #2
 80045ac:	429a      	cmp	r2, r3
 80045ae:	d1eb      	bne.n	8004588 <HAL_RCC_ClockConfig+0xf8>
    }
  }

#if defined(FLASH_ACR_LATENCY)
  /* Decreasing the number of wait states because of lower CPU frequency */
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 80045b0:	4b27      	ldr	r3, [pc, #156]	; (8004650 <HAL_RCC_ClockConfig+0x1c0>)
 80045b2:	681b      	ldr	r3, [r3, #0]
 80045b4:	f003 0307 	and.w	r3, r3, #7
 80045b8:	683a      	ldr	r2, [r7, #0]
 80045ba:	429a      	cmp	r2, r3
 80045bc:	d210      	bcs.n	80045e0 <HAL_RCC_ClockConfig+0x150>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 80045be:	4b24      	ldr	r3, [pc, #144]	; (8004650 <HAL_RCC_ClockConfig+0x1c0>)
 80045c0:	681b      	ldr	r3, [r3, #0]
 80045c2:	f023 0207 	bic.w	r2, r3, #7
 80045c6:	4922      	ldr	r1, [pc, #136]	; (8004650 <HAL_RCC_ClockConfig+0x1c0>)
 80045c8:	683b      	ldr	r3, [r7, #0]
 80045ca:	4313      	orrs	r3, r2
 80045cc:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 80045ce:	4b20      	ldr	r3, [pc, #128]	; (8004650 <HAL_RCC_ClockConfig+0x1c0>)
 80045d0:	681b      	ldr	r3, [r3, #0]
 80045d2:	f003 0307 	and.w	r3, r3, #7
 80045d6:	683a      	ldr	r2, [r7, #0]
 80045d8:	429a      	cmp	r2, r3
 80045da:	d001      	beq.n	80045e0 <HAL_RCC_ClockConfig+0x150>
  {
    return HAL_ERROR;
 80045dc:	2301      	movs	r3, #1
 80045de:	e032      	b.n	8004646 <HAL_RCC_ClockConfig+0x1b6>
  }
}
#endif /* FLASH_ACR_LATENCY */

/*-------------------------- PCLK1 Configuration ---------------------------*/
if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 80045e0:	687b      	ldr	r3, [r7, #4]
 80045e2:	681b      	ldr	r3, [r3, #0]
 80045e4:	f003 0304 	and.w	r3, r3, #4
 80045e8:	2b00      	cmp	r3, #0
 80045ea:	d008      	beq.n	80045fe <HAL_RCC_ClockConfig+0x16e>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 80045ec:	4b19      	ldr	r3, [pc, #100]	; (8004654 <HAL_RCC_ClockConfig+0x1c4>)
 80045ee:	685b      	ldr	r3, [r3, #4]
 80045f0:	f423 62e0 	bic.w	r2, r3, #1792	; 0x700
 80045f4:	687b      	ldr	r3, [r7, #4]
 80045f6:	68db      	ldr	r3, [r3, #12]
 80045f8:	4916      	ldr	r1, [pc, #88]	; (8004654 <HAL_RCC_ClockConfig+0x1c4>)
 80045fa:	4313      	orrs	r3, r2
 80045fc:	604b      	str	r3, [r1, #4]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 80045fe:	687b      	ldr	r3, [r7, #4]
 8004600:	681b      	ldr	r3, [r3, #0]
 8004602:	f003 0308 	and.w	r3, r3, #8
 8004606:	2b00      	cmp	r3, #0
 8004608:	d009      	beq.n	800461e <HAL_RCC_ClockConfig+0x18e>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3));
 800460a:	4b12      	ldr	r3, [pc, #72]	; (8004654 <HAL_RCC_ClockConfig+0x1c4>)
 800460c:	685b      	ldr	r3, [r3, #4]
 800460e:	f423 5260 	bic.w	r2, r3, #14336	; 0x3800
 8004612:	687b      	ldr	r3, [r7, #4]
 8004614:	691b      	ldr	r3, [r3, #16]
 8004616:	00db      	lsls	r3, r3, #3
 8004618:	490e      	ldr	r1, [pc, #56]	; (8004654 <HAL_RCC_ClockConfig+0x1c4>)
 800461a:	4313      	orrs	r3, r2
 800461c:	604b      	str	r3, [r1, #4]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos];
 800461e:	f000 f821 	bl	8004664 <HAL_RCC_GetSysClockFreq>
 8004622:	4601      	mov	r1, r0
 8004624:	4b0b      	ldr	r3, [pc, #44]	; (8004654 <HAL_RCC_ClockConfig+0x1c4>)
 8004626:	685b      	ldr	r3, [r3, #4]
 8004628:	091b      	lsrs	r3, r3, #4
 800462a:	f003 030f 	and.w	r3, r3, #15
 800462e:	4a0a      	ldr	r2, [pc, #40]	; (8004658 <HAL_RCC_ClockConfig+0x1c8>)
 8004630:	5cd3      	ldrb	r3, [r2, r3]
 8004632:	fa21 f303 	lsr.w	r3, r1, r3
 8004636:	4a09      	ldr	r2, [pc, #36]	; (800465c <HAL_RCC_ClockConfig+0x1cc>)
 8004638:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  HAL_InitTick(uwTickPrio);
 800463a:	4b09      	ldr	r3, [pc, #36]	; (8004660 <HAL_RCC_ClockConfig+0x1d0>)
 800463c:	681b      	ldr	r3, [r3, #0]
 800463e:	4618      	mov	r0, r3
 8004640:	f7fe f932 	bl	80028a8 <HAL_InitTick>

  return HAL_OK;
 8004644:	2300      	movs	r3, #0
}
 8004646:	4618      	mov	r0, r3
 8004648:	3710      	adds	r7, #16
 800464a:	46bd      	mov	sp, r7
 800464c:	bd80      	pop	{r7, pc}
 800464e:	bf00      	nop
 8004650:	40022000 	.word	0x40022000
 8004654:	40021000 	.word	0x40021000
 8004658:	08009b1c 	.word	0x08009b1c
 800465c:	20000008 	.word	0x20000008
 8004660:	2000000c 	.word	0x2000000c

08004664 <HAL_RCC_GetSysClockFreq>:
  *         right SYSCLK value. Otherwise, any configuration based on this function will be incorrect.
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8004664:	b490      	push	{r4, r7}
 8004666:	b08a      	sub	sp, #40	; 0x28
 8004668:	af00      	add	r7, sp, #0
#if defined(RCC_CFGR2_PREDIV1SRC)
  const uint8_t aPLLMULFactorTable[14] = {0, 0, 4, 5, 6, 7, 8, 9, 0, 0, 0, 0, 0, 13};
  const uint8_t aPredivFactorTable[16] = {1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16};
#else
  const uint8_t aPLLMULFactorTable[16] = {2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 16};
 800466a:	4b2a      	ldr	r3, [pc, #168]	; (8004714 <HAL_RCC_GetSysClockFreq+0xb0>)
 800466c:	1d3c      	adds	r4, r7, #4
 800466e:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 8004670:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}
#if defined(RCC_CFGR2_PREDIV1)
  const uint8_t aPredivFactorTable[16] = {1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16};
#else
  const uint8_t aPredivFactorTable[2] = {1, 2};
 8004674:	4b28      	ldr	r3, [pc, #160]	; (8004718 <HAL_RCC_GetSysClockFreq+0xb4>)
 8004676:	881b      	ldrh	r3, [r3, #0]
 8004678:	803b      	strh	r3, [r7, #0]
#endif /*RCC_CFGR2_PREDIV1*/

#endif
  uint32_t tmpreg = 0U, prediv = 0U, pllclk = 0U, pllmul = 0U;
 800467a:	2300      	movs	r3, #0
 800467c:	61fb      	str	r3, [r7, #28]
 800467e:	2300      	movs	r3, #0
 8004680:	61bb      	str	r3, [r7, #24]
 8004682:	2300      	movs	r3, #0
 8004684:	627b      	str	r3, [r7, #36]	; 0x24
 8004686:	2300      	movs	r3, #0
 8004688:	617b      	str	r3, [r7, #20]
  uint32_t sysclockfreq = 0U;
 800468a:	2300      	movs	r3, #0
 800468c:	623b      	str	r3, [r7, #32]
#if defined(RCC_CFGR2_PREDIV1SRC)
  uint32_t prediv2 = 0U, pll2mul = 0U;
#endif /*RCC_CFGR2_PREDIV1SRC*/

  tmpreg = RCC->CFGR;
 800468e:	4b23      	ldr	r3, [pc, #140]	; (800471c <HAL_RCC_GetSysClockFreq+0xb8>)
 8004690:	685b      	ldr	r3, [r3, #4]
 8004692:	61fb      	str	r3, [r7, #28]

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (tmpreg & RCC_CFGR_SWS)
 8004694:	69fb      	ldr	r3, [r7, #28]
 8004696:	f003 030c 	and.w	r3, r3, #12
 800469a:	2b04      	cmp	r3, #4
 800469c:	d002      	beq.n	80046a4 <HAL_RCC_GetSysClockFreq+0x40>
 800469e:	2b08      	cmp	r3, #8
 80046a0:	d003      	beq.n	80046aa <HAL_RCC_GetSysClockFreq+0x46>
 80046a2:	e02d      	b.n	8004700 <HAL_RCC_GetSysClockFreq+0x9c>
  {
    case RCC_SYSCLKSOURCE_STATUS_HSE:  /* HSE used as system clock */
    {
      sysclockfreq = HSE_VALUE;
 80046a4:	4b1e      	ldr	r3, [pc, #120]	; (8004720 <HAL_RCC_GetSysClockFreq+0xbc>)
 80046a6:	623b      	str	r3, [r7, #32]
      break;
 80046a8:	e02d      	b.n	8004706 <HAL_RCC_GetSysClockFreq+0xa2>
    }
    case RCC_SYSCLKSOURCE_STATUS_PLLCLK:  /* PLL used as system clock */
    {
      pllmul = aPLLMULFactorTable[(uint32_t)(tmpreg & RCC_CFGR_PLLMULL) >> RCC_CFGR_PLLMULL_Pos];
 80046aa:	69fb      	ldr	r3, [r7, #28]
 80046ac:	0c9b      	lsrs	r3, r3, #18
 80046ae:	f003 030f 	and.w	r3, r3, #15
 80046b2:	f107 0228 	add.w	r2, r7, #40	; 0x28
 80046b6:	4413      	add	r3, r2
 80046b8:	f813 3c24 	ldrb.w	r3, [r3, #-36]
 80046bc:	617b      	str	r3, [r7, #20]
      if ((tmpreg & RCC_CFGR_PLLSRC) != RCC_PLLSOURCE_HSI_DIV2)
 80046be:	69fb      	ldr	r3, [r7, #28]
 80046c0:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 80046c4:	2b00      	cmp	r3, #0
 80046c6:	d013      	beq.n	80046f0 <HAL_RCC_GetSysClockFreq+0x8c>
      {
#if defined(RCC_CFGR2_PREDIV1)
        prediv = aPredivFactorTable[(uint32_t)(RCC->CFGR2 & RCC_CFGR2_PREDIV1) >> RCC_CFGR2_PREDIV1_Pos];
#else
        prediv = aPredivFactorTable[(uint32_t)(RCC->CFGR & RCC_CFGR_PLLXTPRE) >> RCC_CFGR_PLLXTPRE_Pos];
 80046c8:	4b14      	ldr	r3, [pc, #80]	; (800471c <HAL_RCC_GetSysClockFreq+0xb8>)
 80046ca:	685b      	ldr	r3, [r3, #4]
 80046cc:	0c5b      	lsrs	r3, r3, #17
 80046ce:	f003 0301 	and.w	r3, r3, #1
 80046d2:	f107 0228 	add.w	r2, r7, #40	; 0x28
 80046d6:	4413      	add	r3, r2
 80046d8:	f813 3c28 	ldrb.w	r3, [r3, #-40]
 80046dc:	61bb      	str	r3, [r7, #24]
        {
          pllclk = pllclk / 2;
        }
#else
        /* HSE used as PLL clock source : PLLCLK = HSE/PREDIV1 * PLLMUL */
        pllclk = (uint32_t)((HSE_VALUE  * pllmul) / prediv);
 80046de:	697b      	ldr	r3, [r7, #20]
 80046e0:	4a0f      	ldr	r2, [pc, #60]	; (8004720 <HAL_RCC_GetSysClockFreq+0xbc>)
 80046e2:	fb02 f203 	mul.w	r2, r2, r3
 80046e6:	69bb      	ldr	r3, [r7, #24]
 80046e8:	fbb2 f3f3 	udiv	r3, r2, r3
 80046ec:	627b      	str	r3, [r7, #36]	; 0x24
 80046ee:	e004      	b.n	80046fa <HAL_RCC_GetSysClockFreq+0x96>
#endif /*RCC_CFGR2_PREDIV1SRC*/
      }
      else
      {
        /* HSI used as PLL clock source : PLLCLK = HSI/2 * PLLMUL */
        pllclk = (uint32_t)((HSI_VALUE >> 1) * pllmul);
 80046f0:	697b      	ldr	r3, [r7, #20]
 80046f2:	4a0c      	ldr	r2, [pc, #48]	; (8004724 <HAL_RCC_GetSysClockFreq+0xc0>)
 80046f4:	fb02 f303 	mul.w	r3, r2, r3
 80046f8:	627b      	str	r3, [r7, #36]	; 0x24
      }
      sysclockfreq = pllclk;
 80046fa:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80046fc:	623b      	str	r3, [r7, #32]
      break;
 80046fe:	e002      	b.n	8004706 <HAL_RCC_GetSysClockFreq+0xa2>
    }
    case RCC_SYSCLKSOURCE_STATUS_HSI:  /* HSI used as system clock source */
    default: /* HSI used as system clock */
    {
      sysclockfreq = HSI_VALUE;
 8004700:	4b07      	ldr	r3, [pc, #28]	; (8004720 <HAL_RCC_GetSysClockFreq+0xbc>)
 8004702:	623b      	str	r3, [r7, #32]
      break;
 8004704:	bf00      	nop
    }
  }
  return sysclockfreq;
 8004706:	6a3b      	ldr	r3, [r7, #32]
}
 8004708:	4618      	mov	r0, r3
 800470a:	3728      	adds	r7, #40	; 0x28
 800470c:	46bd      	mov	sp, r7
 800470e:	bc90      	pop	{r4, r7}
 8004710:	4770      	bx	lr
 8004712:	bf00      	nop
 8004714:	08009b08 	.word	0x08009b08
 8004718:	08009b18 	.word	0x08009b18
 800471c:	40021000 	.word	0x40021000
 8004720:	007a1200 	.word	0x007a1200
 8004724:	003d0900 	.word	0x003d0900

08004728 <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8004728:	b480      	push	{r7}
 800472a:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 800472c:	4b02      	ldr	r3, [pc, #8]	; (8004738 <HAL_RCC_GetHCLKFreq+0x10>)
 800472e:	681b      	ldr	r3, [r3, #0]
}
 8004730:	4618      	mov	r0, r3
 8004732:	46bd      	mov	sp, r7
 8004734:	bc80      	pop	{r7}
 8004736:	4770      	bx	lr
 8004738:	20000008 	.word	0x20000008

0800473c <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 800473c:	b580      	push	{r7, lr}
 800473e:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1) >> RCC_CFGR_PPRE1_Pos]);
 8004740:	f7ff fff2 	bl	8004728 <HAL_RCC_GetHCLKFreq>
 8004744:	4601      	mov	r1, r0
 8004746:	4b05      	ldr	r3, [pc, #20]	; (800475c <HAL_RCC_GetPCLK1Freq+0x20>)
 8004748:	685b      	ldr	r3, [r3, #4]
 800474a:	0a1b      	lsrs	r3, r3, #8
 800474c:	f003 0307 	and.w	r3, r3, #7
 8004750:	4a03      	ldr	r2, [pc, #12]	; (8004760 <HAL_RCC_GetPCLK1Freq+0x24>)
 8004752:	5cd3      	ldrb	r3, [r2, r3]
 8004754:	fa21 f303 	lsr.w	r3, r1, r3
}
 8004758:	4618      	mov	r0, r3
 800475a:	bd80      	pop	{r7, pc}
 800475c:	40021000 	.word	0x40021000
 8004760:	08009b2c 	.word	0x08009b2c

08004764 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 8004764:	b580      	push	{r7, lr}
 8004766:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2) >> RCC_CFGR_PPRE2_Pos]);
 8004768:	f7ff ffde 	bl	8004728 <HAL_RCC_GetHCLKFreq>
 800476c:	4601      	mov	r1, r0
 800476e:	4b05      	ldr	r3, [pc, #20]	; (8004784 <HAL_RCC_GetPCLK2Freq+0x20>)
 8004770:	685b      	ldr	r3, [r3, #4]
 8004772:	0adb      	lsrs	r3, r3, #11
 8004774:	f003 0307 	and.w	r3, r3, #7
 8004778:	4a03      	ldr	r2, [pc, #12]	; (8004788 <HAL_RCC_GetPCLK2Freq+0x24>)
 800477a:	5cd3      	ldrb	r3, [r2, r3]
 800477c:	fa21 f303 	lsr.w	r3, r1, r3
}
 8004780:	4618      	mov	r0, r3
 8004782:	bd80      	pop	{r7, pc}
 8004784:	40021000 	.word	0x40021000
 8004788:	08009b2c 	.word	0x08009b2c

0800478c <RCC_Delay>:
  * @brief  This function provides delay (in milliseconds) based on CPU cycles method.
  * @param  mdelay: specifies the delay time length, in milliseconds.
  * @retval None
  */
static void RCC_Delay(uint32_t mdelay)
{
 800478c:	b480      	push	{r7}
 800478e:	b085      	sub	sp, #20
 8004790:	af00      	add	r7, sp, #0
 8004792:	6078      	str	r0, [r7, #4]
  __IO uint32_t Delay = mdelay * (SystemCoreClock / 8U / 1000U);
 8004794:	4b0a      	ldr	r3, [pc, #40]	; (80047c0 <RCC_Delay+0x34>)
 8004796:	681b      	ldr	r3, [r3, #0]
 8004798:	4a0a      	ldr	r2, [pc, #40]	; (80047c4 <RCC_Delay+0x38>)
 800479a:	fba2 2303 	umull	r2, r3, r2, r3
 800479e:	0a5b      	lsrs	r3, r3, #9
 80047a0:	687a      	ldr	r2, [r7, #4]
 80047a2:	fb02 f303 	mul.w	r3, r2, r3
 80047a6:	60fb      	str	r3, [r7, #12]
  do
  {
    __NOP();
 80047a8:	bf00      	nop
  }
  while (Delay --);
 80047aa:	68fb      	ldr	r3, [r7, #12]
 80047ac:	1e5a      	subs	r2, r3, #1
 80047ae:	60fa      	str	r2, [r7, #12]
 80047b0:	2b00      	cmp	r3, #0
 80047b2:	d1f9      	bne.n	80047a8 <RCC_Delay+0x1c>
}
 80047b4:	bf00      	nop
 80047b6:	3714      	adds	r7, #20
 80047b8:	46bd      	mov	sp, r7
 80047ba:	bc80      	pop	{r7}
 80047bc:	4770      	bx	lr
 80047be:	bf00      	nop
 80047c0:	20000008 	.word	0x20000008
 80047c4:	10624dd3 	.word	0x10624dd3

080047c8 <HAL_SPI_Init>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Init(SPI_HandleTypeDef *hspi)
{
 80047c8:	b580      	push	{r7, lr}
 80047ca:	b082      	sub	sp, #8
 80047cc:	af00      	add	r7, sp, #0
 80047ce:	6078      	str	r0, [r7, #4]
  /* Check the SPI handle allocation */
  if (hspi == NULL)
 80047d0:	687b      	ldr	r3, [r7, #4]
 80047d2:	2b00      	cmp	r3, #0
 80047d4:	d101      	bne.n	80047da <HAL_SPI_Init+0x12>
  {
    return HAL_ERROR;
 80047d6:	2301      	movs	r3, #1
 80047d8:	e076      	b.n	80048c8 <HAL_SPI_Init+0x100>
  assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
  assert_param(IS_SPI_FIRST_BIT(hspi->Init.FirstBit));
  /* TI mode is not supported on this device.
     TIMode parameter is mandatory equal to SPI_TIMODE_DISABLE */
  assert_param(IS_SPI_TIMODE(hspi->Init.TIMode));
  if (hspi->Init.TIMode == SPI_TIMODE_DISABLE)
 80047da:	687b      	ldr	r3, [r7, #4]
 80047dc:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80047de:	2b00      	cmp	r3, #0
 80047e0:	d108      	bne.n	80047f4 <HAL_SPI_Init+0x2c>
  {
    assert_param(IS_SPI_CPOL(hspi->Init.CLKPolarity));
    assert_param(IS_SPI_CPHA(hspi->Init.CLKPhase));

    if (hspi->Init.Mode == SPI_MODE_MASTER)
 80047e2:	687b      	ldr	r3, [r7, #4]
 80047e4:	685b      	ldr	r3, [r3, #4]
 80047e6:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 80047ea:	d009      	beq.n	8004800 <HAL_SPI_Init+0x38>
      assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
    }
    else
    {
      /* Baudrate prescaler not use in Motoraola Slave mode. force to default value */
      hspi->Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_2;
 80047ec:	687b      	ldr	r3, [r7, #4]
 80047ee:	2200      	movs	r2, #0
 80047f0:	61da      	str	r2, [r3, #28]
 80047f2:	e005      	b.n	8004800 <HAL_SPI_Init+0x38>
  else
  {
    assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));

    /* Force polarity and phase to TI protocaol requirements */
    hspi->Init.CLKPolarity = SPI_POLARITY_LOW;
 80047f4:	687b      	ldr	r3, [r7, #4]
 80047f6:	2200      	movs	r2, #0
 80047f8:	611a      	str	r2, [r3, #16]
    hspi->Init.CLKPhase    = SPI_PHASE_1EDGE;
 80047fa:	687b      	ldr	r3, [r7, #4]
 80047fc:	2200      	movs	r2, #0
 80047fe:	615a      	str	r2, [r3, #20]
  if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
  {
    assert_param(IS_SPI_CRC_POLYNOMIAL(hspi->Init.CRCPolynomial));
  }
#else
  hspi->Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8004800:	687b      	ldr	r3, [r7, #4]
 8004802:	2200      	movs	r2, #0
 8004804:	629a      	str	r2, [r3, #40]	; 0x28
#endif /* USE_SPI_CRC */

  if (hspi->State == HAL_SPI_STATE_RESET)
 8004806:	687b      	ldr	r3, [r7, #4]
 8004808:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 800480c:	b2db      	uxtb	r3, r3
 800480e:	2b00      	cmp	r3, #0
 8004810:	d106      	bne.n	8004820 <HAL_SPI_Init+0x58>
  {
    /* Allocate lock resource and initialize it */
    hspi->Lock = HAL_UNLOCKED;
 8004812:	687b      	ldr	r3, [r7, #4]
 8004814:	2200      	movs	r2, #0
 8004816:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    hspi->MspInitCallback(hspi);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_SPI_MspInit(hspi);
 800481a:	6878      	ldr	r0, [r7, #4]
 800481c:	f7fd fed6 	bl	80025cc <HAL_SPI_MspInit>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
  }

  hspi->State = HAL_SPI_STATE_BUSY;
 8004820:	687b      	ldr	r3, [r7, #4]
 8004822:	2202      	movs	r2, #2
 8004824:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51

  /* Disable the selected SPI peripheral */
  __HAL_SPI_DISABLE(hspi);
 8004828:	687b      	ldr	r3, [r7, #4]
 800482a:	681b      	ldr	r3, [r3, #0]
 800482c:	681a      	ldr	r2, [r3, #0]
 800482e:	687b      	ldr	r3, [r7, #4]
 8004830:	681b      	ldr	r3, [r3, #0]
 8004832:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8004836:	601a      	str	r2, [r3, #0]

  /*----------------------- SPIx CR1 & CR2 Configuration ---------------------*/
  /* Configure : SPI Mode, Communication Mode, Data size, Clock polarity and phase, NSS management,
  Communication speed, First bit and CRC calculation state */
  WRITE_REG(hspi->Instance->CR1, ((hspi->Init.Mode & (SPI_CR1_MSTR | SPI_CR1_SSI)) |
 8004838:	687b      	ldr	r3, [r7, #4]
 800483a:	685b      	ldr	r3, [r3, #4]
 800483c:	f403 7282 	and.w	r2, r3, #260	; 0x104
 8004840:	687b      	ldr	r3, [r7, #4]
 8004842:	689b      	ldr	r3, [r3, #8]
 8004844:	f403 4304 	and.w	r3, r3, #33792	; 0x8400
 8004848:	431a      	orrs	r2, r3
 800484a:	687b      	ldr	r3, [r7, #4]
 800484c:	68db      	ldr	r3, [r3, #12]
 800484e:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8004852:	431a      	orrs	r2, r3
 8004854:	687b      	ldr	r3, [r7, #4]
 8004856:	691b      	ldr	r3, [r3, #16]
 8004858:	f003 0302 	and.w	r3, r3, #2
 800485c:	431a      	orrs	r2, r3
 800485e:	687b      	ldr	r3, [r7, #4]
 8004860:	695b      	ldr	r3, [r3, #20]
 8004862:	f003 0301 	and.w	r3, r3, #1
 8004866:	431a      	orrs	r2, r3
 8004868:	687b      	ldr	r3, [r7, #4]
 800486a:	699b      	ldr	r3, [r3, #24]
 800486c:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8004870:	431a      	orrs	r2, r3
 8004872:	687b      	ldr	r3, [r7, #4]
 8004874:	69db      	ldr	r3, [r3, #28]
 8004876:	f003 0338 	and.w	r3, r3, #56	; 0x38
 800487a:	431a      	orrs	r2, r3
 800487c:	687b      	ldr	r3, [r7, #4]
 800487e:	6a1b      	ldr	r3, [r3, #32]
 8004880:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8004884:	ea42 0103 	orr.w	r1, r2, r3
 8004888:	687b      	ldr	r3, [r7, #4]
 800488a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800488c:	f403 5200 	and.w	r2, r3, #8192	; 0x2000
 8004890:	687b      	ldr	r3, [r7, #4]
 8004892:	681b      	ldr	r3, [r3, #0]
 8004894:	430a      	orrs	r2, r1
 8004896:	601a      	str	r2, [r3, #0]
                                  (hspi->Init.BaudRatePrescaler & SPI_CR1_BR_Msk) |
                                  (hspi->Init.FirstBit  & SPI_CR1_LSBFIRST) |
                                  (hspi->Init.CRCCalculation & SPI_CR1_CRCEN)));

  /* Configure : NSS management */
  WRITE_REG(hspi->Instance->CR2, ((hspi->Init.NSS >> 16U) & SPI_CR2_SSOE));
 8004898:	687b      	ldr	r3, [r7, #4]
 800489a:	699b      	ldr	r3, [r3, #24]
 800489c:	0c1a      	lsrs	r2, r3, #16
 800489e:	687b      	ldr	r3, [r7, #4]
 80048a0:	681b      	ldr	r3, [r3, #0]
 80048a2:	f002 0204 	and.w	r2, r2, #4
 80048a6:	605a      	str	r2, [r3, #4]
  }
#endif /* USE_SPI_CRC */

#if defined(SPI_I2SCFGR_I2SMOD)
  /* Activate the SPI mode (Make sure that I2SMOD bit in I2SCFGR register is reset) */
  CLEAR_BIT(hspi->Instance->I2SCFGR, SPI_I2SCFGR_I2SMOD);
 80048a8:	687b      	ldr	r3, [r7, #4]
 80048aa:	681b      	ldr	r3, [r3, #0]
 80048ac:	69da      	ldr	r2, [r3, #28]
 80048ae:	687b      	ldr	r3, [r7, #4]
 80048b0:	681b      	ldr	r3, [r3, #0]
 80048b2:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 80048b6:	61da      	str	r2, [r3, #28]
#endif /* SPI_I2SCFGR_I2SMOD */

  hspi->ErrorCode = HAL_SPI_ERROR_NONE;
 80048b8:	687b      	ldr	r3, [r7, #4]
 80048ba:	2200      	movs	r2, #0
 80048bc:	655a      	str	r2, [r3, #84]	; 0x54
  hspi->State     = HAL_SPI_STATE_READY;
 80048be:	687b      	ldr	r3, [r7, #4]
 80048c0:	2201      	movs	r2, #1
 80048c2:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51

  return HAL_OK;
 80048c6:	2300      	movs	r3, #0
}
 80048c8:	4618      	mov	r0, r3
 80048ca:	3708      	adds	r7, #8
 80048cc:	46bd      	mov	sp, r7
 80048ce:	bd80      	pop	{r7, pc}

080048d0 <HAL_SPI_Transmit>:
  * @param  Size amount of data to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Transmit(SPI_HandleTypeDef *hspi, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 80048d0:	b580      	push	{r7, lr}
 80048d2:	b088      	sub	sp, #32
 80048d4:	af00      	add	r7, sp, #0
 80048d6:	60f8      	str	r0, [r7, #12]
 80048d8:	60b9      	str	r1, [r7, #8]
 80048da:	603b      	str	r3, [r7, #0]
 80048dc:	4613      	mov	r3, r2
 80048de:	80fb      	strh	r3, [r7, #6]
  uint32_t tickstart;
  HAL_StatusTypeDef errorcode = HAL_OK;
 80048e0:	2300      	movs	r3, #0
 80048e2:	77fb      	strb	r3, [r7, #31]

  /* Check Direction parameter */
  assert_param(IS_SPI_DIRECTION_2LINES_OR_1LINE(hspi->Init.Direction));

  /* Process Locked */
  __HAL_LOCK(hspi);
 80048e4:	68fb      	ldr	r3, [r7, #12]
 80048e6:	f893 3050 	ldrb.w	r3, [r3, #80]	; 0x50
 80048ea:	2b01      	cmp	r3, #1
 80048ec:	d101      	bne.n	80048f2 <HAL_SPI_Transmit+0x22>
 80048ee:	2302      	movs	r3, #2
 80048f0:	e126      	b.n	8004b40 <HAL_SPI_Transmit+0x270>
 80048f2:	68fb      	ldr	r3, [r7, #12]
 80048f4:	2201      	movs	r2, #1
 80048f6:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

  /* Init tickstart for timeout management*/
  tickstart = HAL_GetTick();
 80048fa:	f7fe f817 	bl	800292c <HAL_GetTick>
 80048fe:	61b8      	str	r0, [r7, #24]
  initial_TxXferCount = Size;
 8004900:	88fb      	ldrh	r3, [r7, #6]
 8004902:	82fb      	strh	r3, [r7, #22]

  if (hspi->State != HAL_SPI_STATE_READY)
 8004904:	68fb      	ldr	r3, [r7, #12]
 8004906:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 800490a:	b2db      	uxtb	r3, r3
 800490c:	2b01      	cmp	r3, #1
 800490e:	d002      	beq.n	8004916 <HAL_SPI_Transmit+0x46>
  {
    errorcode = HAL_BUSY;
 8004910:	2302      	movs	r3, #2
 8004912:	77fb      	strb	r3, [r7, #31]
    goto error;
 8004914:	e10b      	b.n	8004b2e <HAL_SPI_Transmit+0x25e>
  }

  if ((pData == NULL) || (Size == 0U))
 8004916:	68bb      	ldr	r3, [r7, #8]
 8004918:	2b00      	cmp	r3, #0
 800491a:	d002      	beq.n	8004922 <HAL_SPI_Transmit+0x52>
 800491c:	88fb      	ldrh	r3, [r7, #6]
 800491e:	2b00      	cmp	r3, #0
 8004920:	d102      	bne.n	8004928 <HAL_SPI_Transmit+0x58>
  {
    errorcode = HAL_ERROR;
 8004922:	2301      	movs	r3, #1
 8004924:	77fb      	strb	r3, [r7, #31]
    goto error;
 8004926:	e102      	b.n	8004b2e <HAL_SPI_Transmit+0x25e>
  }

  /* Set the transaction information */
  hspi->State       = HAL_SPI_STATE_BUSY_TX;
 8004928:	68fb      	ldr	r3, [r7, #12]
 800492a:	2203      	movs	r2, #3
 800492c:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 8004930:	68fb      	ldr	r3, [r7, #12]
 8004932:	2200      	movs	r2, #0
 8004934:	655a      	str	r2, [r3, #84]	; 0x54
  hspi->pTxBuffPtr  = (uint8_t *)pData;
 8004936:	68fb      	ldr	r3, [r7, #12]
 8004938:	68ba      	ldr	r2, [r7, #8]
 800493a:	631a      	str	r2, [r3, #48]	; 0x30
  hspi->TxXferSize  = Size;
 800493c:	68fb      	ldr	r3, [r7, #12]
 800493e:	88fa      	ldrh	r2, [r7, #6]
 8004940:	869a      	strh	r2, [r3, #52]	; 0x34
  hspi->TxXferCount = Size;
 8004942:	68fb      	ldr	r3, [r7, #12]
 8004944:	88fa      	ldrh	r2, [r7, #6]
 8004946:	86da      	strh	r2, [r3, #54]	; 0x36

  /*Init field not used in handle to zero */
  hspi->pRxBuffPtr  = (uint8_t *)NULL;
 8004948:	68fb      	ldr	r3, [r7, #12]
 800494a:	2200      	movs	r2, #0
 800494c:	639a      	str	r2, [r3, #56]	; 0x38
  hspi->RxXferSize  = 0U;
 800494e:	68fb      	ldr	r3, [r7, #12]
 8004950:	2200      	movs	r2, #0
 8004952:	879a      	strh	r2, [r3, #60]	; 0x3c
  hspi->RxXferCount = 0U;
 8004954:	68fb      	ldr	r3, [r7, #12]
 8004956:	2200      	movs	r2, #0
 8004958:	87da      	strh	r2, [r3, #62]	; 0x3e
  hspi->TxISR       = NULL;
 800495a:	68fb      	ldr	r3, [r7, #12]
 800495c:	2200      	movs	r2, #0
 800495e:	645a      	str	r2, [r3, #68]	; 0x44
  hspi->RxISR       = NULL;
 8004960:	68fb      	ldr	r3, [r7, #12]
 8004962:	2200      	movs	r2, #0
 8004964:	641a      	str	r2, [r3, #64]	; 0x40

  /* Configure communication direction : 1Line */
  if (hspi->Init.Direction == SPI_DIRECTION_1LINE)
 8004966:	68fb      	ldr	r3, [r7, #12]
 8004968:	689b      	ldr	r3, [r3, #8]
 800496a:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 800496e:	d10f      	bne.n	8004990 <HAL_SPI_Transmit+0xc0>
  {
    /* Disable SPI Peripheral before set 1Line direction (BIDIOE bit) */
    __HAL_SPI_DISABLE(hspi);
 8004970:	68fb      	ldr	r3, [r7, #12]
 8004972:	681b      	ldr	r3, [r3, #0]
 8004974:	681a      	ldr	r2, [r3, #0]
 8004976:	68fb      	ldr	r3, [r7, #12]
 8004978:	681b      	ldr	r3, [r3, #0]
 800497a:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 800497e:	601a      	str	r2, [r3, #0]
    SPI_1LINE_TX(hspi);
 8004980:	68fb      	ldr	r3, [r7, #12]
 8004982:	681b      	ldr	r3, [r3, #0]
 8004984:	681a      	ldr	r2, [r3, #0]
 8004986:	68fb      	ldr	r3, [r7, #12]
 8004988:	681b      	ldr	r3, [r3, #0]
 800498a:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 800498e:	601a      	str	r2, [r3, #0]
    SPI_RESET_CRC(hspi);
  }
#endif /* USE_SPI_CRC */

  /* Check if the SPI is already enabled */
  if ((hspi->Instance->CR1 & SPI_CR1_SPE) != SPI_CR1_SPE)
 8004990:	68fb      	ldr	r3, [r7, #12]
 8004992:	681b      	ldr	r3, [r3, #0]
 8004994:	681b      	ldr	r3, [r3, #0]
 8004996:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800499a:	2b40      	cmp	r3, #64	; 0x40
 800499c:	d007      	beq.n	80049ae <HAL_SPI_Transmit+0xde>
  {
    /* Enable SPI peripheral */
    __HAL_SPI_ENABLE(hspi);
 800499e:	68fb      	ldr	r3, [r7, #12]
 80049a0:	681b      	ldr	r3, [r3, #0]
 80049a2:	681a      	ldr	r2, [r3, #0]
 80049a4:	68fb      	ldr	r3, [r7, #12]
 80049a6:	681b      	ldr	r3, [r3, #0]
 80049a8:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 80049ac:	601a      	str	r2, [r3, #0]
  }

  /* Transmit data in 16 Bit mode */
  if (hspi->Init.DataSize == SPI_DATASIZE_16BIT)
 80049ae:	68fb      	ldr	r3, [r7, #12]
 80049b0:	68db      	ldr	r3, [r3, #12]
 80049b2:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 80049b6:	d14b      	bne.n	8004a50 <HAL_SPI_Transmit+0x180>
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 80049b8:	68fb      	ldr	r3, [r7, #12]
 80049ba:	685b      	ldr	r3, [r3, #4]
 80049bc:	2b00      	cmp	r3, #0
 80049be:	d002      	beq.n	80049c6 <HAL_SPI_Transmit+0xf6>
 80049c0:	8afb      	ldrh	r3, [r7, #22]
 80049c2:	2b01      	cmp	r3, #1
 80049c4:	d13e      	bne.n	8004a44 <HAL_SPI_Transmit+0x174>
    {
      hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 80049c6:	68fb      	ldr	r3, [r7, #12]
 80049c8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80049ca:	881a      	ldrh	r2, [r3, #0]
 80049cc:	68fb      	ldr	r3, [r7, #12]
 80049ce:	681b      	ldr	r3, [r3, #0]
 80049d0:	60da      	str	r2, [r3, #12]
      hspi->pTxBuffPtr += sizeof(uint16_t);
 80049d2:	68fb      	ldr	r3, [r7, #12]
 80049d4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80049d6:	1c9a      	adds	r2, r3, #2
 80049d8:	68fb      	ldr	r3, [r7, #12]
 80049da:	631a      	str	r2, [r3, #48]	; 0x30
      hspi->TxXferCount--;
 80049dc:	68fb      	ldr	r3, [r7, #12]
 80049de:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 80049e0:	b29b      	uxth	r3, r3
 80049e2:	3b01      	subs	r3, #1
 80049e4:	b29a      	uxth	r2, r3
 80049e6:	68fb      	ldr	r3, [r7, #12]
 80049e8:	86da      	strh	r2, [r3, #54]	; 0x36
    }
    /* Transmit data in 16 Bit mode */
    while (hspi->TxXferCount > 0U)
 80049ea:	e02b      	b.n	8004a44 <HAL_SPI_Transmit+0x174>
    {
      /* Wait until TXE flag is set to send data */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE))
 80049ec:	68fb      	ldr	r3, [r7, #12]
 80049ee:	681b      	ldr	r3, [r3, #0]
 80049f0:	689b      	ldr	r3, [r3, #8]
 80049f2:	f003 0302 	and.w	r3, r3, #2
 80049f6:	2b02      	cmp	r3, #2
 80049f8:	d112      	bne.n	8004a20 <HAL_SPI_Transmit+0x150>
      {
        hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 80049fa:	68fb      	ldr	r3, [r7, #12]
 80049fc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80049fe:	881a      	ldrh	r2, [r3, #0]
 8004a00:	68fb      	ldr	r3, [r7, #12]
 8004a02:	681b      	ldr	r3, [r3, #0]
 8004a04:	60da      	str	r2, [r3, #12]
        hspi->pTxBuffPtr += sizeof(uint16_t);
 8004a06:	68fb      	ldr	r3, [r7, #12]
 8004a08:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004a0a:	1c9a      	adds	r2, r3, #2
 8004a0c:	68fb      	ldr	r3, [r7, #12]
 8004a0e:	631a      	str	r2, [r3, #48]	; 0x30
        hspi->TxXferCount--;
 8004a10:	68fb      	ldr	r3, [r7, #12]
 8004a12:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8004a14:	b29b      	uxth	r3, r3
 8004a16:	3b01      	subs	r3, #1
 8004a18:	b29a      	uxth	r2, r3
 8004a1a:	68fb      	ldr	r3, [r7, #12]
 8004a1c:	86da      	strh	r2, [r3, #54]	; 0x36
 8004a1e:	e011      	b.n	8004a44 <HAL_SPI_Transmit+0x174>
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 8004a20:	f7fd ff84 	bl	800292c <HAL_GetTick>
 8004a24:	4602      	mov	r2, r0
 8004a26:	69bb      	ldr	r3, [r7, #24]
 8004a28:	1ad3      	subs	r3, r2, r3
 8004a2a:	683a      	ldr	r2, [r7, #0]
 8004a2c:	429a      	cmp	r2, r3
 8004a2e:	d803      	bhi.n	8004a38 <HAL_SPI_Transmit+0x168>
 8004a30:	683b      	ldr	r3, [r7, #0]
 8004a32:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8004a36:	d102      	bne.n	8004a3e <HAL_SPI_Transmit+0x16e>
 8004a38:	683b      	ldr	r3, [r7, #0]
 8004a3a:	2b00      	cmp	r3, #0
 8004a3c:	d102      	bne.n	8004a44 <HAL_SPI_Transmit+0x174>
        {
          errorcode = HAL_TIMEOUT;
 8004a3e:	2303      	movs	r3, #3
 8004a40:	77fb      	strb	r3, [r7, #31]
          goto error;
 8004a42:	e074      	b.n	8004b2e <HAL_SPI_Transmit+0x25e>
    while (hspi->TxXferCount > 0U)
 8004a44:	68fb      	ldr	r3, [r7, #12]
 8004a46:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8004a48:	b29b      	uxth	r3, r3
 8004a4a:	2b00      	cmp	r3, #0
 8004a4c:	d1ce      	bne.n	80049ec <HAL_SPI_Transmit+0x11c>
 8004a4e:	e04c      	b.n	8004aea <HAL_SPI_Transmit+0x21a>
    }
  }
  /* Transmit data in 8 Bit mode */
  else
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 8004a50:	68fb      	ldr	r3, [r7, #12]
 8004a52:	685b      	ldr	r3, [r3, #4]
 8004a54:	2b00      	cmp	r3, #0
 8004a56:	d002      	beq.n	8004a5e <HAL_SPI_Transmit+0x18e>
 8004a58:	8afb      	ldrh	r3, [r7, #22]
 8004a5a:	2b01      	cmp	r3, #1
 8004a5c:	d140      	bne.n	8004ae0 <HAL_SPI_Transmit+0x210>
    {
      *((__IO uint8_t *)&hspi->Instance->DR) = (*hspi->pTxBuffPtr);
 8004a5e:	68fb      	ldr	r3, [r7, #12]
 8004a60:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8004a62:	68fb      	ldr	r3, [r7, #12]
 8004a64:	681b      	ldr	r3, [r3, #0]
 8004a66:	330c      	adds	r3, #12
 8004a68:	7812      	ldrb	r2, [r2, #0]
 8004a6a:	701a      	strb	r2, [r3, #0]
      hspi->pTxBuffPtr += sizeof(uint8_t);
 8004a6c:	68fb      	ldr	r3, [r7, #12]
 8004a6e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004a70:	1c5a      	adds	r2, r3, #1
 8004a72:	68fb      	ldr	r3, [r7, #12]
 8004a74:	631a      	str	r2, [r3, #48]	; 0x30
      hspi->TxXferCount--;
 8004a76:	68fb      	ldr	r3, [r7, #12]
 8004a78:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8004a7a:	b29b      	uxth	r3, r3
 8004a7c:	3b01      	subs	r3, #1
 8004a7e:	b29a      	uxth	r2, r3
 8004a80:	68fb      	ldr	r3, [r7, #12]
 8004a82:	86da      	strh	r2, [r3, #54]	; 0x36
    }
    while (hspi->TxXferCount > 0U)
 8004a84:	e02c      	b.n	8004ae0 <HAL_SPI_Transmit+0x210>
    {
      /* Wait until TXE flag is set to send data */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE))
 8004a86:	68fb      	ldr	r3, [r7, #12]
 8004a88:	681b      	ldr	r3, [r3, #0]
 8004a8a:	689b      	ldr	r3, [r3, #8]
 8004a8c:	f003 0302 	and.w	r3, r3, #2
 8004a90:	2b02      	cmp	r3, #2
 8004a92:	d113      	bne.n	8004abc <HAL_SPI_Transmit+0x1ec>
      {
        *((__IO uint8_t *)&hspi->Instance->DR) = (*hspi->pTxBuffPtr);
 8004a94:	68fb      	ldr	r3, [r7, #12]
 8004a96:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8004a98:	68fb      	ldr	r3, [r7, #12]
 8004a9a:	681b      	ldr	r3, [r3, #0]
 8004a9c:	330c      	adds	r3, #12
 8004a9e:	7812      	ldrb	r2, [r2, #0]
 8004aa0:	701a      	strb	r2, [r3, #0]
        hspi->pTxBuffPtr += sizeof(uint8_t);
 8004aa2:	68fb      	ldr	r3, [r7, #12]
 8004aa4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004aa6:	1c5a      	adds	r2, r3, #1
 8004aa8:	68fb      	ldr	r3, [r7, #12]
 8004aaa:	631a      	str	r2, [r3, #48]	; 0x30
        hspi->TxXferCount--;
 8004aac:	68fb      	ldr	r3, [r7, #12]
 8004aae:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8004ab0:	b29b      	uxth	r3, r3
 8004ab2:	3b01      	subs	r3, #1
 8004ab4:	b29a      	uxth	r2, r3
 8004ab6:	68fb      	ldr	r3, [r7, #12]
 8004ab8:	86da      	strh	r2, [r3, #54]	; 0x36
 8004aba:	e011      	b.n	8004ae0 <HAL_SPI_Transmit+0x210>
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 8004abc:	f7fd ff36 	bl	800292c <HAL_GetTick>
 8004ac0:	4602      	mov	r2, r0
 8004ac2:	69bb      	ldr	r3, [r7, #24]
 8004ac4:	1ad3      	subs	r3, r2, r3
 8004ac6:	683a      	ldr	r2, [r7, #0]
 8004ac8:	429a      	cmp	r2, r3
 8004aca:	d803      	bhi.n	8004ad4 <HAL_SPI_Transmit+0x204>
 8004acc:	683b      	ldr	r3, [r7, #0]
 8004ace:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8004ad2:	d102      	bne.n	8004ada <HAL_SPI_Transmit+0x20a>
 8004ad4:	683b      	ldr	r3, [r7, #0]
 8004ad6:	2b00      	cmp	r3, #0
 8004ad8:	d102      	bne.n	8004ae0 <HAL_SPI_Transmit+0x210>
        {
          errorcode = HAL_TIMEOUT;
 8004ada:	2303      	movs	r3, #3
 8004adc:	77fb      	strb	r3, [r7, #31]
          goto error;
 8004ade:	e026      	b.n	8004b2e <HAL_SPI_Transmit+0x25e>
    while (hspi->TxXferCount > 0U)
 8004ae0:	68fb      	ldr	r3, [r7, #12]
 8004ae2:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8004ae4:	b29b      	uxth	r3, r3
 8004ae6:	2b00      	cmp	r3, #0
 8004ae8:	d1cd      	bne.n	8004a86 <HAL_SPI_Transmit+0x1b6>
    SET_BIT(hspi->Instance->CR1, SPI_CR1_CRCNEXT);
  }
#endif /* USE_SPI_CRC */

  /* Check the end of the transaction */
  if (SPI_EndRxTxTransaction(hspi, Timeout, tickstart) != HAL_OK)
 8004aea:	69ba      	ldr	r2, [r7, #24]
 8004aec:	6839      	ldr	r1, [r7, #0]
 8004aee:	68f8      	ldr	r0, [r7, #12]
 8004af0:	f000 fbb8 	bl	8005264 <SPI_EndRxTxTransaction>
 8004af4:	4603      	mov	r3, r0
 8004af6:	2b00      	cmp	r3, #0
 8004af8:	d002      	beq.n	8004b00 <HAL_SPI_Transmit+0x230>
  {
    hspi->ErrorCode = HAL_SPI_ERROR_FLAG;
 8004afa:	68fb      	ldr	r3, [r7, #12]
 8004afc:	2220      	movs	r2, #32
 8004afe:	655a      	str	r2, [r3, #84]	; 0x54
  }

  /* Clear overrun flag in 2 Lines communication mode because received is not read */
  if (hspi->Init.Direction == SPI_DIRECTION_2LINES)
 8004b00:	68fb      	ldr	r3, [r7, #12]
 8004b02:	689b      	ldr	r3, [r3, #8]
 8004b04:	2b00      	cmp	r3, #0
 8004b06:	d10a      	bne.n	8004b1e <HAL_SPI_Transmit+0x24e>
  {
    __HAL_SPI_CLEAR_OVRFLAG(hspi);
 8004b08:	2300      	movs	r3, #0
 8004b0a:	613b      	str	r3, [r7, #16]
 8004b0c:	68fb      	ldr	r3, [r7, #12]
 8004b0e:	681b      	ldr	r3, [r3, #0]
 8004b10:	68db      	ldr	r3, [r3, #12]
 8004b12:	613b      	str	r3, [r7, #16]
 8004b14:	68fb      	ldr	r3, [r7, #12]
 8004b16:	681b      	ldr	r3, [r3, #0]
 8004b18:	689b      	ldr	r3, [r3, #8]
 8004b1a:	613b      	str	r3, [r7, #16]
 8004b1c:	693b      	ldr	r3, [r7, #16]
  }

  if (hspi->ErrorCode != HAL_SPI_ERROR_NONE)
 8004b1e:	68fb      	ldr	r3, [r7, #12]
 8004b20:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8004b22:	2b00      	cmp	r3, #0
 8004b24:	d002      	beq.n	8004b2c <HAL_SPI_Transmit+0x25c>
  {
    errorcode = HAL_ERROR;
 8004b26:	2301      	movs	r3, #1
 8004b28:	77fb      	strb	r3, [r7, #31]
 8004b2a:	e000      	b.n	8004b2e <HAL_SPI_Transmit+0x25e>
  }

error:
 8004b2c:	bf00      	nop
  hspi->State = HAL_SPI_STATE_READY;
 8004b2e:	68fb      	ldr	r3, [r7, #12]
 8004b30:	2201      	movs	r2, #1
 8004b32:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
  /* Process Unlocked */
  __HAL_UNLOCK(hspi);
 8004b36:	68fb      	ldr	r3, [r7, #12]
 8004b38:	2200      	movs	r2, #0
 8004b3a:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50
  return errorcode;
 8004b3e:	7ffb      	ldrb	r3, [r7, #31]
}
 8004b40:	4618      	mov	r0, r3
 8004b42:	3720      	adds	r7, #32
 8004b44:	46bd      	mov	sp, r7
 8004b46:	bd80      	pop	{r7, pc}

08004b48 <HAL_SPI_Receive>:
  * @param  Size amount of data to be received
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Receive(SPI_HandleTypeDef *hspi, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8004b48:	b580      	push	{r7, lr}
 8004b4a:	b088      	sub	sp, #32
 8004b4c:	af02      	add	r7, sp, #8
 8004b4e:	60f8      	str	r0, [r7, #12]
 8004b50:	60b9      	str	r1, [r7, #8]
 8004b52:	603b      	str	r3, [r7, #0]
 8004b54:	4613      	mov	r3, r2
 8004b56:	80fb      	strh	r3, [r7, #6]
  uint32_t tickstart;
  HAL_StatusTypeDef errorcode = HAL_OK;
 8004b58:	2300      	movs	r3, #0
 8004b5a:	75fb      	strb	r3, [r7, #23]

  if ((hspi->Init.Mode == SPI_MODE_MASTER) && (hspi->Init.Direction == SPI_DIRECTION_2LINES))
 8004b5c:	68fb      	ldr	r3, [r7, #12]
 8004b5e:	685b      	ldr	r3, [r3, #4]
 8004b60:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 8004b64:	d112      	bne.n	8004b8c <HAL_SPI_Receive+0x44>
 8004b66:	68fb      	ldr	r3, [r7, #12]
 8004b68:	689b      	ldr	r3, [r3, #8]
 8004b6a:	2b00      	cmp	r3, #0
 8004b6c:	d10e      	bne.n	8004b8c <HAL_SPI_Receive+0x44>
  {
    hspi->State = HAL_SPI_STATE_BUSY_RX;
 8004b6e:	68fb      	ldr	r3, [r7, #12]
 8004b70:	2204      	movs	r2, #4
 8004b72:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
    /* Call transmit-receive function to send Dummy data on Tx line and generate clock on CLK line */
    return HAL_SPI_TransmitReceive(hspi, pData, pData, Size, Timeout);
 8004b76:	88fa      	ldrh	r2, [r7, #6]
 8004b78:	683b      	ldr	r3, [r7, #0]
 8004b7a:	9300      	str	r3, [sp, #0]
 8004b7c:	4613      	mov	r3, r2
 8004b7e:	68ba      	ldr	r2, [r7, #8]
 8004b80:	68b9      	ldr	r1, [r7, #8]
 8004b82:	68f8      	ldr	r0, [r7, #12]
 8004b84:	f000 f8f1 	bl	8004d6a <HAL_SPI_TransmitReceive>
 8004b88:	4603      	mov	r3, r0
 8004b8a:	e0ea      	b.n	8004d62 <HAL_SPI_Receive+0x21a>
  }

  /* Process Locked */
  __HAL_LOCK(hspi);
 8004b8c:	68fb      	ldr	r3, [r7, #12]
 8004b8e:	f893 3050 	ldrb.w	r3, [r3, #80]	; 0x50
 8004b92:	2b01      	cmp	r3, #1
 8004b94:	d101      	bne.n	8004b9a <HAL_SPI_Receive+0x52>
 8004b96:	2302      	movs	r3, #2
 8004b98:	e0e3      	b.n	8004d62 <HAL_SPI_Receive+0x21a>
 8004b9a:	68fb      	ldr	r3, [r7, #12]
 8004b9c:	2201      	movs	r2, #1
 8004b9e:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

  /* Init tickstart for timeout management*/
  tickstart = HAL_GetTick();
 8004ba2:	f7fd fec3 	bl	800292c <HAL_GetTick>
 8004ba6:	6138      	str	r0, [r7, #16]

  if (hspi->State != HAL_SPI_STATE_READY)
 8004ba8:	68fb      	ldr	r3, [r7, #12]
 8004baa:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 8004bae:	b2db      	uxtb	r3, r3
 8004bb0:	2b01      	cmp	r3, #1
 8004bb2:	d002      	beq.n	8004bba <HAL_SPI_Receive+0x72>
  {
    errorcode = HAL_BUSY;
 8004bb4:	2302      	movs	r3, #2
 8004bb6:	75fb      	strb	r3, [r7, #23]
    goto error;
 8004bb8:	e0ca      	b.n	8004d50 <HAL_SPI_Receive+0x208>
  }

  if ((pData == NULL) || (Size == 0U))
 8004bba:	68bb      	ldr	r3, [r7, #8]
 8004bbc:	2b00      	cmp	r3, #0
 8004bbe:	d002      	beq.n	8004bc6 <HAL_SPI_Receive+0x7e>
 8004bc0:	88fb      	ldrh	r3, [r7, #6]
 8004bc2:	2b00      	cmp	r3, #0
 8004bc4:	d102      	bne.n	8004bcc <HAL_SPI_Receive+0x84>
  {
    errorcode = HAL_ERROR;
 8004bc6:	2301      	movs	r3, #1
 8004bc8:	75fb      	strb	r3, [r7, #23]
    goto error;
 8004bca:	e0c1      	b.n	8004d50 <HAL_SPI_Receive+0x208>
  }

  /* Set the transaction information */
  hspi->State       = HAL_SPI_STATE_BUSY_RX;
 8004bcc:	68fb      	ldr	r3, [r7, #12]
 8004bce:	2204      	movs	r2, #4
 8004bd0:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 8004bd4:	68fb      	ldr	r3, [r7, #12]
 8004bd6:	2200      	movs	r2, #0
 8004bd8:	655a      	str	r2, [r3, #84]	; 0x54
  hspi->pRxBuffPtr  = (uint8_t *)pData;
 8004bda:	68fb      	ldr	r3, [r7, #12]
 8004bdc:	68ba      	ldr	r2, [r7, #8]
 8004bde:	639a      	str	r2, [r3, #56]	; 0x38
  hspi->RxXferSize  = Size;
 8004be0:	68fb      	ldr	r3, [r7, #12]
 8004be2:	88fa      	ldrh	r2, [r7, #6]
 8004be4:	879a      	strh	r2, [r3, #60]	; 0x3c
  hspi->RxXferCount = Size;
 8004be6:	68fb      	ldr	r3, [r7, #12]
 8004be8:	88fa      	ldrh	r2, [r7, #6]
 8004bea:	87da      	strh	r2, [r3, #62]	; 0x3e

  /*Init field not used in handle to zero */
  hspi->pTxBuffPtr  = (uint8_t *)NULL;
 8004bec:	68fb      	ldr	r3, [r7, #12]
 8004bee:	2200      	movs	r2, #0
 8004bf0:	631a      	str	r2, [r3, #48]	; 0x30
  hspi->TxXferSize  = 0U;
 8004bf2:	68fb      	ldr	r3, [r7, #12]
 8004bf4:	2200      	movs	r2, #0
 8004bf6:	869a      	strh	r2, [r3, #52]	; 0x34
  hspi->TxXferCount = 0U;
 8004bf8:	68fb      	ldr	r3, [r7, #12]
 8004bfa:	2200      	movs	r2, #0
 8004bfc:	86da      	strh	r2, [r3, #54]	; 0x36
  hspi->RxISR       = NULL;
 8004bfe:	68fb      	ldr	r3, [r7, #12]
 8004c00:	2200      	movs	r2, #0
 8004c02:	641a      	str	r2, [r3, #64]	; 0x40
  hspi->TxISR       = NULL;
 8004c04:	68fb      	ldr	r3, [r7, #12]
 8004c06:	2200      	movs	r2, #0
 8004c08:	645a      	str	r2, [r3, #68]	; 0x44
    hspi->RxXferCount--;
  }
#endif /* USE_SPI_CRC */

  /* Configure communication direction: 1Line */
  if (hspi->Init.Direction == SPI_DIRECTION_1LINE)
 8004c0a:	68fb      	ldr	r3, [r7, #12]
 8004c0c:	689b      	ldr	r3, [r3, #8]
 8004c0e:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8004c12:	d10f      	bne.n	8004c34 <HAL_SPI_Receive+0xec>
  {
    /* Disable SPI Peripheral before set 1Line direction (BIDIOE bit) */
    __HAL_SPI_DISABLE(hspi);
 8004c14:	68fb      	ldr	r3, [r7, #12]
 8004c16:	681b      	ldr	r3, [r3, #0]
 8004c18:	681a      	ldr	r2, [r3, #0]
 8004c1a:	68fb      	ldr	r3, [r7, #12]
 8004c1c:	681b      	ldr	r3, [r3, #0]
 8004c1e:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8004c22:	601a      	str	r2, [r3, #0]
    SPI_1LINE_RX(hspi);
 8004c24:	68fb      	ldr	r3, [r7, #12]
 8004c26:	681b      	ldr	r3, [r3, #0]
 8004c28:	681a      	ldr	r2, [r3, #0]
 8004c2a:	68fb      	ldr	r3, [r7, #12]
 8004c2c:	681b      	ldr	r3, [r3, #0]
 8004c2e:	f422 4280 	bic.w	r2, r2, #16384	; 0x4000
 8004c32:	601a      	str	r2, [r3, #0]
  }

  /* Check if the SPI is already enabled */
  if ((hspi->Instance->CR1 & SPI_CR1_SPE) != SPI_CR1_SPE)
 8004c34:	68fb      	ldr	r3, [r7, #12]
 8004c36:	681b      	ldr	r3, [r3, #0]
 8004c38:	681b      	ldr	r3, [r3, #0]
 8004c3a:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8004c3e:	2b40      	cmp	r3, #64	; 0x40
 8004c40:	d007      	beq.n	8004c52 <HAL_SPI_Receive+0x10a>
  {
    /* Enable SPI peripheral */
    __HAL_SPI_ENABLE(hspi);
 8004c42:	68fb      	ldr	r3, [r7, #12]
 8004c44:	681b      	ldr	r3, [r3, #0]
 8004c46:	681a      	ldr	r2, [r3, #0]
 8004c48:	68fb      	ldr	r3, [r7, #12]
 8004c4a:	681b      	ldr	r3, [r3, #0]
 8004c4c:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 8004c50:	601a      	str	r2, [r3, #0]
  }

  /* Receive data in 8 Bit mode */
  if (hspi->Init.DataSize == SPI_DATASIZE_8BIT)
 8004c52:	68fb      	ldr	r3, [r7, #12]
 8004c54:	68db      	ldr	r3, [r3, #12]
 8004c56:	2b00      	cmp	r3, #0
 8004c58:	d162      	bne.n	8004d20 <HAL_SPI_Receive+0x1d8>
  {
    /* Transfer loop */
    while (hspi->RxXferCount > 0U)
 8004c5a:	e02e      	b.n	8004cba <HAL_SPI_Receive+0x172>
    {
      /* Check the RXNE flag */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXNE))
 8004c5c:	68fb      	ldr	r3, [r7, #12]
 8004c5e:	681b      	ldr	r3, [r3, #0]
 8004c60:	689b      	ldr	r3, [r3, #8]
 8004c62:	f003 0301 	and.w	r3, r3, #1
 8004c66:	2b01      	cmp	r3, #1
 8004c68:	d115      	bne.n	8004c96 <HAL_SPI_Receive+0x14e>
      {
        /* read the received data */
        (* (uint8_t *)hspi->pRxBuffPtr) = *(__IO uint8_t *)&hspi->Instance->DR;
 8004c6a:	68fb      	ldr	r3, [r7, #12]
 8004c6c:	681b      	ldr	r3, [r3, #0]
 8004c6e:	f103 020c 	add.w	r2, r3, #12
 8004c72:	68fb      	ldr	r3, [r7, #12]
 8004c74:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004c76:	7812      	ldrb	r2, [r2, #0]
 8004c78:	b2d2      	uxtb	r2, r2
 8004c7a:	701a      	strb	r2, [r3, #0]
        hspi->pRxBuffPtr += sizeof(uint8_t);
 8004c7c:	68fb      	ldr	r3, [r7, #12]
 8004c7e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004c80:	1c5a      	adds	r2, r3, #1
 8004c82:	68fb      	ldr	r3, [r7, #12]
 8004c84:	639a      	str	r2, [r3, #56]	; 0x38
        hspi->RxXferCount--;
 8004c86:	68fb      	ldr	r3, [r7, #12]
 8004c88:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8004c8a:	b29b      	uxth	r3, r3
 8004c8c:	3b01      	subs	r3, #1
 8004c8e:	b29a      	uxth	r2, r3
 8004c90:	68fb      	ldr	r3, [r7, #12]
 8004c92:	87da      	strh	r2, [r3, #62]	; 0x3e
 8004c94:	e011      	b.n	8004cba <HAL_SPI_Receive+0x172>
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 8004c96:	f7fd fe49 	bl	800292c <HAL_GetTick>
 8004c9a:	4602      	mov	r2, r0
 8004c9c:	693b      	ldr	r3, [r7, #16]
 8004c9e:	1ad3      	subs	r3, r2, r3
 8004ca0:	683a      	ldr	r2, [r7, #0]
 8004ca2:	429a      	cmp	r2, r3
 8004ca4:	d803      	bhi.n	8004cae <HAL_SPI_Receive+0x166>
 8004ca6:	683b      	ldr	r3, [r7, #0]
 8004ca8:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8004cac:	d102      	bne.n	8004cb4 <HAL_SPI_Receive+0x16c>
 8004cae:	683b      	ldr	r3, [r7, #0]
 8004cb0:	2b00      	cmp	r3, #0
 8004cb2:	d102      	bne.n	8004cba <HAL_SPI_Receive+0x172>
        {
          errorcode = HAL_TIMEOUT;
 8004cb4:	2303      	movs	r3, #3
 8004cb6:	75fb      	strb	r3, [r7, #23]
          goto error;
 8004cb8:	e04a      	b.n	8004d50 <HAL_SPI_Receive+0x208>
    while (hspi->RxXferCount > 0U)
 8004cba:	68fb      	ldr	r3, [r7, #12]
 8004cbc:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8004cbe:	b29b      	uxth	r3, r3
 8004cc0:	2b00      	cmp	r3, #0
 8004cc2:	d1cb      	bne.n	8004c5c <HAL_SPI_Receive+0x114>
 8004cc4:	e031      	b.n	8004d2a <HAL_SPI_Receive+0x1e2>
  {
    /* Transfer loop */
    while (hspi->RxXferCount > 0U)
    {
      /* Check the RXNE flag */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXNE))
 8004cc6:	68fb      	ldr	r3, [r7, #12]
 8004cc8:	681b      	ldr	r3, [r3, #0]
 8004cca:	689b      	ldr	r3, [r3, #8]
 8004ccc:	f003 0301 	and.w	r3, r3, #1
 8004cd0:	2b01      	cmp	r3, #1
 8004cd2:	d113      	bne.n	8004cfc <HAL_SPI_Receive+0x1b4>
      {
        *((uint16_t *)hspi->pRxBuffPtr) = (uint16_t)hspi->Instance->DR;
 8004cd4:	68fb      	ldr	r3, [r7, #12]
 8004cd6:	681b      	ldr	r3, [r3, #0]
 8004cd8:	68da      	ldr	r2, [r3, #12]
 8004cda:	68fb      	ldr	r3, [r7, #12]
 8004cdc:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004cde:	b292      	uxth	r2, r2
 8004ce0:	801a      	strh	r2, [r3, #0]
        hspi->pRxBuffPtr += sizeof(uint16_t);
 8004ce2:	68fb      	ldr	r3, [r7, #12]
 8004ce4:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004ce6:	1c9a      	adds	r2, r3, #2
 8004ce8:	68fb      	ldr	r3, [r7, #12]
 8004cea:	639a      	str	r2, [r3, #56]	; 0x38
        hspi->RxXferCount--;
 8004cec:	68fb      	ldr	r3, [r7, #12]
 8004cee:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8004cf0:	b29b      	uxth	r3, r3
 8004cf2:	3b01      	subs	r3, #1
 8004cf4:	b29a      	uxth	r2, r3
 8004cf6:	68fb      	ldr	r3, [r7, #12]
 8004cf8:	87da      	strh	r2, [r3, #62]	; 0x3e
 8004cfa:	e011      	b.n	8004d20 <HAL_SPI_Receive+0x1d8>
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 8004cfc:	f7fd fe16 	bl	800292c <HAL_GetTick>
 8004d00:	4602      	mov	r2, r0
 8004d02:	693b      	ldr	r3, [r7, #16]
 8004d04:	1ad3      	subs	r3, r2, r3
 8004d06:	683a      	ldr	r2, [r7, #0]
 8004d08:	429a      	cmp	r2, r3
 8004d0a:	d803      	bhi.n	8004d14 <HAL_SPI_Receive+0x1cc>
 8004d0c:	683b      	ldr	r3, [r7, #0]
 8004d0e:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8004d12:	d102      	bne.n	8004d1a <HAL_SPI_Receive+0x1d2>
 8004d14:	683b      	ldr	r3, [r7, #0]
 8004d16:	2b00      	cmp	r3, #0
 8004d18:	d102      	bne.n	8004d20 <HAL_SPI_Receive+0x1d8>
        {
          errorcode = HAL_TIMEOUT;
 8004d1a:	2303      	movs	r3, #3
 8004d1c:	75fb      	strb	r3, [r7, #23]
          goto error;
 8004d1e:	e017      	b.n	8004d50 <HAL_SPI_Receive+0x208>
    while (hspi->RxXferCount > 0U)
 8004d20:	68fb      	ldr	r3, [r7, #12]
 8004d22:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8004d24:	b29b      	uxth	r3, r3
 8004d26:	2b00      	cmp	r3, #0
 8004d28:	d1cd      	bne.n	8004cc6 <HAL_SPI_Receive+0x17e>
    READ_REG(hspi->Instance->DR);
  }
#endif /* USE_SPI_CRC */

  /* Check the end of the transaction */
  if (SPI_EndRxTransaction(hspi, Timeout, tickstart) != HAL_OK)
 8004d2a:	693a      	ldr	r2, [r7, #16]
 8004d2c:	6839      	ldr	r1, [r7, #0]
 8004d2e:	68f8      	ldr	r0, [r7, #12]
 8004d30:	f000 fa46 	bl	80051c0 <SPI_EndRxTransaction>
 8004d34:	4603      	mov	r3, r0
 8004d36:	2b00      	cmp	r3, #0
 8004d38:	d002      	beq.n	8004d40 <HAL_SPI_Receive+0x1f8>
  {
    hspi->ErrorCode = HAL_SPI_ERROR_FLAG;
 8004d3a:	68fb      	ldr	r3, [r7, #12]
 8004d3c:	2220      	movs	r2, #32
 8004d3e:	655a      	str	r2, [r3, #84]	; 0x54
      __HAL_SPI_CLEAR_CRCERRFLAG(hspi);
    }
  }
#endif /* USE_SPI_CRC */

  if (hspi->ErrorCode != HAL_SPI_ERROR_NONE)
 8004d40:	68fb      	ldr	r3, [r7, #12]
 8004d42:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8004d44:	2b00      	cmp	r3, #0
 8004d46:	d002      	beq.n	8004d4e <HAL_SPI_Receive+0x206>
  {
    errorcode = HAL_ERROR;
 8004d48:	2301      	movs	r3, #1
 8004d4a:	75fb      	strb	r3, [r7, #23]
 8004d4c:	e000      	b.n	8004d50 <HAL_SPI_Receive+0x208>
  }

error :
 8004d4e:	bf00      	nop
  hspi->State = HAL_SPI_STATE_READY;
 8004d50:	68fb      	ldr	r3, [r7, #12]
 8004d52:	2201      	movs	r2, #1
 8004d54:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
  __HAL_UNLOCK(hspi);
 8004d58:	68fb      	ldr	r3, [r7, #12]
 8004d5a:	2200      	movs	r2, #0
 8004d5c:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50
  return errorcode;
 8004d60:	7dfb      	ldrb	r3, [r7, #23]
}
 8004d62:	4618      	mov	r0, r3
 8004d64:	3718      	adds	r7, #24
 8004d66:	46bd      	mov	sp, r7
 8004d68:	bd80      	pop	{r7, pc}

08004d6a <HAL_SPI_TransmitReceive>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_TransmitReceive(SPI_HandleTypeDef *hspi, uint8_t *pTxData, uint8_t *pRxData, uint16_t Size,
                                          uint32_t Timeout)
{
 8004d6a:	b580      	push	{r7, lr}
 8004d6c:	b08c      	sub	sp, #48	; 0x30
 8004d6e:	af00      	add	r7, sp, #0
 8004d70:	60f8      	str	r0, [r7, #12]
 8004d72:	60b9      	str	r1, [r7, #8]
 8004d74:	607a      	str	r2, [r7, #4]
 8004d76:	807b      	strh	r3, [r7, #2]
  uint32_t             tmp_mode;
  HAL_SPI_StateTypeDef tmp_state;
  uint32_t             tickstart;

  /* Variable used to alternate Rx and Tx during transfer */
  uint32_t             txallowed = 1U;
 8004d78:	2301      	movs	r3, #1
 8004d7a:	62fb      	str	r3, [r7, #44]	; 0x2c
  HAL_StatusTypeDef    errorcode = HAL_OK;
 8004d7c:	2300      	movs	r3, #0
 8004d7e:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b

  /* Check Direction parameter */
  assert_param(IS_SPI_DIRECTION_2LINES(hspi->Init.Direction));

  /* Process Locked */
  __HAL_LOCK(hspi);
 8004d82:	68fb      	ldr	r3, [r7, #12]
 8004d84:	f893 3050 	ldrb.w	r3, [r3, #80]	; 0x50
 8004d88:	2b01      	cmp	r3, #1
 8004d8a:	d101      	bne.n	8004d90 <HAL_SPI_TransmitReceive+0x26>
 8004d8c:	2302      	movs	r3, #2
 8004d8e:	e18a      	b.n	80050a6 <HAL_SPI_TransmitReceive+0x33c>
 8004d90:	68fb      	ldr	r3, [r7, #12]
 8004d92:	2201      	movs	r2, #1
 8004d94:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

  /* Init tickstart for timeout management*/
  tickstart = HAL_GetTick();
 8004d98:	f7fd fdc8 	bl	800292c <HAL_GetTick>
 8004d9c:	6278      	str	r0, [r7, #36]	; 0x24

  /* Init temporary variables */
  tmp_state           = hspi->State;
 8004d9e:	68fb      	ldr	r3, [r7, #12]
 8004da0:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 8004da4:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
  tmp_mode            = hspi->Init.Mode;
 8004da8:	68fb      	ldr	r3, [r7, #12]
 8004daa:	685b      	ldr	r3, [r3, #4]
 8004dac:	61fb      	str	r3, [r7, #28]
  initial_TxXferCount = Size;
 8004dae:	887b      	ldrh	r3, [r7, #2]
 8004db0:	837b      	strh	r3, [r7, #26]

  if (!((tmp_state == HAL_SPI_STATE_READY) || \
 8004db2:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
 8004db6:	2b01      	cmp	r3, #1
 8004db8:	d00f      	beq.n	8004dda <HAL_SPI_TransmitReceive+0x70>
 8004dba:	69fb      	ldr	r3, [r7, #28]
 8004dbc:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 8004dc0:	d107      	bne.n	8004dd2 <HAL_SPI_TransmitReceive+0x68>
        ((tmp_mode == SPI_MODE_MASTER) && (hspi->Init.Direction == SPI_DIRECTION_2LINES) && (tmp_state == HAL_SPI_STATE_BUSY_RX))))
 8004dc2:	68fb      	ldr	r3, [r7, #12]
 8004dc4:	689b      	ldr	r3, [r3, #8]
 8004dc6:	2b00      	cmp	r3, #0
 8004dc8:	d103      	bne.n	8004dd2 <HAL_SPI_TransmitReceive+0x68>
 8004dca:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
 8004dce:	2b04      	cmp	r3, #4
 8004dd0:	d003      	beq.n	8004dda <HAL_SPI_TransmitReceive+0x70>
  {
    errorcode = HAL_BUSY;
 8004dd2:	2302      	movs	r3, #2
 8004dd4:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
    goto error;
 8004dd8:	e15b      	b.n	8005092 <HAL_SPI_TransmitReceive+0x328>
  }

  if ((pTxData == NULL) || (pRxData == NULL) || (Size == 0U))
 8004dda:	68bb      	ldr	r3, [r7, #8]
 8004ddc:	2b00      	cmp	r3, #0
 8004dde:	d005      	beq.n	8004dec <HAL_SPI_TransmitReceive+0x82>
 8004de0:	687b      	ldr	r3, [r7, #4]
 8004de2:	2b00      	cmp	r3, #0
 8004de4:	d002      	beq.n	8004dec <HAL_SPI_TransmitReceive+0x82>
 8004de6:	887b      	ldrh	r3, [r7, #2]
 8004de8:	2b00      	cmp	r3, #0
 8004dea:	d103      	bne.n	8004df4 <HAL_SPI_TransmitReceive+0x8a>
  {
    errorcode = HAL_ERROR;
 8004dec:	2301      	movs	r3, #1
 8004dee:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
    goto error;
 8004df2:	e14e      	b.n	8005092 <HAL_SPI_TransmitReceive+0x328>
  }

  /* Don't overwrite in case of HAL_SPI_STATE_BUSY_RX */
  if (hspi->State != HAL_SPI_STATE_BUSY_RX)
 8004df4:	68fb      	ldr	r3, [r7, #12]
 8004df6:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 8004dfa:	b2db      	uxtb	r3, r3
 8004dfc:	2b04      	cmp	r3, #4
 8004dfe:	d003      	beq.n	8004e08 <HAL_SPI_TransmitReceive+0x9e>
  {
    hspi->State = HAL_SPI_STATE_BUSY_TX_RX;
 8004e00:	68fb      	ldr	r3, [r7, #12]
 8004e02:	2205      	movs	r2, #5
 8004e04:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
  }

  /* Set the transaction information */
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 8004e08:	68fb      	ldr	r3, [r7, #12]
 8004e0a:	2200      	movs	r2, #0
 8004e0c:	655a      	str	r2, [r3, #84]	; 0x54
  hspi->pRxBuffPtr  = (uint8_t *)pRxData;
 8004e0e:	68fb      	ldr	r3, [r7, #12]
 8004e10:	687a      	ldr	r2, [r7, #4]
 8004e12:	639a      	str	r2, [r3, #56]	; 0x38
  hspi->RxXferCount = Size;
 8004e14:	68fb      	ldr	r3, [r7, #12]
 8004e16:	887a      	ldrh	r2, [r7, #2]
 8004e18:	87da      	strh	r2, [r3, #62]	; 0x3e
  hspi->RxXferSize  = Size;
 8004e1a:	68fb      	ldr	r3, [r7, #12]
 8004e1c:	887a      	ldrh	r2, [r7, #2]
 8004e1e:	879a      	strh	r2, [r3, #60]	; 0x3c
  hspi->pTxBuffPtr  = (uint8_t *)pTxData;
 8004e20:	68fb      	ldr	r3, [r7, #12]
 8004e22:	68ba      	ldr	r2, [r7, #8]
 8004e24:	631a      	str	r2, [r3, #48]	; 0x30
  hspi->TxXferCount = Size;
 8004e26:	68fb      	ldr	r3, [r7, #12]
 8004e28:	887a      	ldrh	r2, [r7, #2]
 8004e2a:	86da      	strh	r2, [r3, #54]	; 0x36
  hspi->TxXferSize  = Size;
 8004e2c:	68fb      	ldr	r3, [r7, #12]
 8004e2e:	887a      	ldrh	r2, [r7, #2]
 8004e30:	869a      	strh	r2, [r3, #52]	; 0x34

  /*Init field not used in handle to zero */
  hspi->RxISR       = NULL;
 8004e32:	68fb      	ldr	r3, [r7, #12]
 8004e34:	2200      	movs	r2, #0
 8004e36:	641a      	str	r2, [r3, #64]	; 0x40
  hspi->TxISR       = NULL;
 8004e38:	68fb      	ldr	r3, [r7, #12]
 8004e3a:	2200      	movs	r2, #0
 8004e3c:	645a      	str	r2, [r3, #68]	; 0x44
    SPI_RESET_CRC(hspi);
  }
#endif /* USE_SPI_CRC */

  /* Check if the SPI is already enabled */
  if ((hspi->Instance->CR1 & SPI_CR1_SPE) != SPI_CR1_SPE)
 8004e3e:	68fb      	ldr	r3, [r7, #12]
 8004e40:	681b      	ldr	r3, [r3, #0]
 8004e42:	681b      	ldr	r3, [r3, #0]
 8004e44:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8004e48:	2b40      	cmp	r3, #64	; 0x40
 8004e4a:	d007      	beq.n	8004e5c <HAL_SPI_TransmitReceive+0xf2>
  {
    /* Enable SPI peripheral */
    __HAL_SPI_ENABLE(hspi);
 8004e4c:	68fb      	ldr	r3, [r7, #12]
 8004e4e:	681b      	ldr	r3, [r3, #0]
 8004e50:	681a      	ldr	r2, [r3, #0]
 8004e52:	68fb      	ldr	r3, [r7, #12]
 8004e54:	681b      	ldr	r3, [r3, #0]
 8004e56:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 8004e5a:	601a      	str	r2, [r3, #0]
  }

  /* Transmit and Receive data in 16 Bit mode */
  if (hspi->Init.DataSize == SPI_DATASIZE_16BIT)
 8004e5c:	68fb      	ldr	r3, [r7, #12]
 8004e5e:	68db      	ldr	r3, [r3, #12]
 8004e60:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8004e64:	d178      	bne.n	8004f58 <HAL_SPI_TransmitReceive+0x1ee>
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 8004e66:	68fb      	ldr	r3, [r7, #12]
 8004e68:	685b      	ldr	r3, [r3, #4]
 8004e6a:	2b00      	cmp	r3, #0
 8004e6c:	d002      	beq.n	8004e74 <HAL_SPI_TransmitReceive+0x10a>
 8004e6e:	8b7b      	ldrh	r3, [r7, #26]
 8004e70:	2b01      	cmp	r3, #1
 8004e72:	d166      	bne.n	8004f42 <HAL_SPI_TransmitReceive+0x1d8>
    {
      hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 8004e74:	68fb      	ldr	r3, [r7, #12]
 8004e76:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004e78:	881a      	ldrh	r2, [r3, #0]
 8004e7a:	68fb      	ldr	r3, [r7, #12]
 8004e7c:	681b      	ldr	r3, [r3, #0]
 8004e7e:	60da      	str	r2, [r3, #12]
      hspi->pTxBuffPtr += sizeof(uint16_t);
 8004e80:	68fb      	ldr	r3, [r7, #12]
 8004e82:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004e84:	1c9a      	adds	r2, r3, #2
 8004e86:	68fb      	ldr	r3, [r7, #12]
 8004e88:	631a      	str	r2, [r3, #48]	; 0x30
      hspi->TxXferCount--;
 8004e8a:	68fb      	ldr	r3, [r7, #12]
 8004e8c:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8004e8e:	b29b      	uxth	r3, r3
 8004e90:	3b01      	subs	r3, #1
 8004e92:	b29a      	uxth	r2, r3
 8004e94:	68fb      	ldr	r3, [r7, #12]
 8004e96:	86da      	strh	r2, [r3, #54]	; 0x36
    }
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 8004e98:	e053      	b.n	8004f42 <HAL_SPI_TransmitReceive+0x1d8>
    {
      /* Check TXE flag */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE)) && (hspi->TxXferCount > 0U) && (txallowed == 1U))
 8004e9a:	68fb      	ldr	r3, [r7, #12]
 8004e9c:	681b      	ldr	r3, [r3, #0]
 8004e9e:	689b      	ldr	r3, [r3, #8]
 8004ea0:	f003 0302 	and.w	r3, r3, #2
 8004ea4:	2b02      	cmp	r3, #2
 8004ea6:	d11b      	bne.n	8004ee0 <HAL_SPI_TransmitReceive+0x176>
 8004ea8:	68fb      	ldr	r3, [r7, #12]
 8004eaa:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8004eac:	b29b      	uxth	r3, r3
 8004eae:	2b00      	cmp	r3, #0
 8004eb0:	d016      	beq.n	8004ee0 <HAL_SPI_TransmitReceive+0x176>
 8004eb2:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8004eb4:	2b01      	cmp	r3, #1
 8004eb6:	d113      	bne.n	8004ee0 <HAL_SPI_TransmitReceive+0x176>
      {
        hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 8004eb8:	68fb      	ldr	r3, [r7, #12]
 8004eba:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004ebc:	881a      	ldrh	r2, [r3, #0]
 8004ebe:	68fb      	ldr	r3, [r7, #12]
 8004ec0:	681b      	ldr	r3, [r3, #0]
 8004ec2:	60da      	str	r2, [r3, #12]
        hspi->pTxBuffPtr += sizeof(uint16_t);
 8004ec4:	68fb      	ldr	r3, [r7, #12]
 8004ec6:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004ec8:	1c9a      	adds	r2, r3, #2
 8004eca:	68fb      	ldr	r3, [r7, #12]
 8004ecc:	631a      	str	r2, [r3, #48]	; 0x30
        hspi->TxXferCount--;
 8004ece:	68fb      	ldr	r3, [r7, #12]
 8004ed0:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8004ed2:	b29b      	uxth	r3, r3
 8004ed4:	3b01      	subs	r3, #1
 8004ed6:	b29a      	uxth	r2, r3
 8004ed8:	68fb      	ldr	r3, [r7, #12]
 8004eda:	86da      	strh	r2, [r3, #54]	; 0x36
        /* Next Data is a reception (Rx). Tx not allowed */
        txallowed = 0U;
 8004edc:	2300      	movs	r3, #0
 8004ede:	62fb      	str	r3, [r7, #44]	; 0x2c
        }
#endif /* USE_SPI_CRC */
      }

      /* Check RXNE flag */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXNE)) && (hspi->RxXferCount > 0U))
 8004ee0:	68fb      	ldr	r3, [r7, #12]
 8004ee2:	681b      	ldr	r3, [r3, #0]
 8004ee4:	689b      	ldr	r3, [r3, #8]
 8004ee6:	f003 0301 	and.w	r3, r3, #1
 8004eea:	2b01      	cmp	r3, #1
 8004eec:	d119      	bne.n	8004f22 <HAL_SPI_TransmitReceive+0x1b8>
 8004eee:	68fb      	ldr	r3, [r7, #12]
 8004ef0:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8004ef2:	b29b      	uxth	r3, r3
 8004ef4:	2b00      	cmp	r3, #0
 8004ef6:	d014      	beq.n	8004f22 <HAL_SPI_TransmitReceive+0x1b8>
      {
        *((uint16_t *)hspi->pRxBuffPtr) = (uint16_t)hspi->Instance->DR;
 8004ef8:	68fb      	ldr	r3, [r7, #12]
 8004efa:	681b      	ldr	r3, [r3, #0]
 8004efc:	68da      	ldr	r2, [r3, #12]
 8004efe:	68fb      	ldr	r3, [r7, #12]
 8004f00:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004f02:	b292      	uxth	r2, r2
 8004f04:	801a      	strh	r2, [r3, #0]
        hspi->pRxBuffPtr += sizeof(uint16_t);
 8004f06:	68fb      	ldr	r3, [r7, #12]
 8004f08:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004f0a:	1c9a      	adds	r2, r3, #2
 8004f0c:	68fb      	ldr	r3, [r7, #12]
 8004f0e:	639a      	str	r2, [r3, #56]	; 0x38
        hspi->RxXferCount--;
 8004f10:	68fb      	ldr	r3, [r7, #12]
 8004f12:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8004f14:	b29b      	uxth	r3, r3
 8004f16:	3b01      	subs	r3, #1
 8004f18:	b29a      	uxth	r2, r3
 8004f1a:	68fb      	ldr	r3, [r7, #12]
 8004f1c:	87da      	strh	r2, [r3, #62]	; 0x3e
        /* Next Data is a Transmission (Tx). Tx is allowed */
        txallowed = 1U;
 8004f1e:	2301      	movs	r3, #1
 8004f20:	62fb      	str	r3, [r7, #44]	; 0x2c
      }
      if (((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY))
 8004f22:	f7fd fd03 	bl	800292c <HAL_GetTick>
 8004f26:	4602      	mov	r2, r0
 8004f28:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004f2a:	1ad3      	subs	r3, r2, r3
 8004f2c:	6bba      	ldr	r2, [r7, #56]	; 0x38
 8004f2e:	429a      	cmp	r2, r3
 8004f30:	d807      	bhi.n	8004f42 <HAL_SPI_TransmitReceive+0x1d8>
 8004f32:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8004f34:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8004f38:	d003      	beq.n	8004f42 <HAL_SPI_TransmitReceive+0x1d8>
      {
        errorcode = HAL_TIMEOUT;
 8004f3a:	2303      	movs	r3, #3
 8004f3c:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
        goto error;
 8004f40:	e0a7      	b.n	8005092 <HAL_SPI_TransmitReceive+0x328>
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 8004f42:	68fb      	ldr	r3, [r7, #12]
 8004f44:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8004f46:	b29b      	uxth	r3, r3
 8004f48:	2b00      	cmp	r3, #0
 8004f4a:	d1a6      	bne.n	8004e9a <HAL_SPI_TransmitReceive+0x130>
 8004f4c:	68fb      	ldr	r3, [r7, #12]
 8004f4e:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8004f50:	b29b      	uxth	r3, r3
 8004f52:	2b00      	cmp	r3, #0
 8004f54:	d1a1      	bne.n	8004e9a <HAL_SPI_TransmitReceive+0x130>
 8004f56:	e07c      	b.n	8005052 <HAL_SPI_TransmitReceive+0x2e8>
    }
  }
  /* Transmit and Receive data in 8 Bit mode */
  else
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 8004f58:	68fb      	ldr	r3, [r7, #12]
 8004f5a:	685b      	ldr	r3, [r3, #4]
 8004f5c:	2b00      	cmp	r3, #0
 8004f5e:	d002      	beq.n	8004f66 <HAL_SPI_TransmitReceive+0x1fc>
 8004f60:	8b7b      	ldrh	r3, [r7, #26]
 8004f62:	2b01      	cmp	r3, #1
 8004f64:	d16b      	bne.n	800503e <HAL_SPI_TransmitReceive+0x2d4>
    {
      *((__IO uint8_t *)&hspi->Instance->DR) = (*hspi->pTxBuffPtr);
 8004f66:	68fb      	ldr	r3, [r7, #12]
 8004f68:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8004f6a:	68fb      	ldr	r3, [r7, #12]
 8004f6c:	681b      	ldr	r3, [r3, #0]
 8004f6e:	330c      	adds	r3, #12
 8004f70:	7812      	ldrb	r2, [r2, #0]
 8004f72:	701a      	strb	r2, [r3, #0]
      hspi->pTxBuffPtr += sizeof(uint8_t);
 8004f74:	68fb      	ldr	r3, [r7, #12]
 8004f76:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004f78:	1c5a      	adds	r2, r3, #1
 8004f7a:	68fb      	ldr	r3, [r7, #12]
 8004f7c:	631a      	str	r2, [r3, #48]	; 0x30
      hspi->TxXferCount--;
 8004f7e:	68fb      	ldr	r3, [r7, #12]
 8004f80:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8004f82:	b29b      	uxth	r3, r3
 8004f84:	3b01      	subs	r3, #1
 8004f86:	b29a      	uxth	r2, r3
 8004f88:	68fb      	ldr	r3, [r7, #12]
 8004f8a:	86da      	strh	r2, [r3, #54]	; 0x36
    }
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 8004f8c:	e057      	b.n	800503e <HAL_SPI_TransmitReceive+0x2d4>
    {
      /* Check TXE flag */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE)) && (hspi->TxXferCount > 0U) && (txallowed == 1U))
 8004f8e:	68fb      	ldr	r3, [r7, #12]
 8004f90:	681b      	ldr	r3, [r3, #0]
 8004f92:	689b      	ldr	r3, [r3, #8]
 8004f94:	f003 0302 	and.w	r3, r3, #2
 8004f98:	2b02      	cmp	r3, #2
 8004f9a:	d11c      	bne.n	8004fd6 <HAL_SPI_TransmitReceive+0x26c>
 8004f9c:	68fb      	ldr	r3, [r7, #12]
 8004f9e:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8004fa0:	b29b      	uxth	r3, r3
 8004fa2:	2b00      	cmp	r3, #0
 8004fa4:	d017      	beq.n	8004fd6 <HAL_SPI_TransmitReceive+0x26c>
 8004fa6:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8004fa8:	2b01      	cmp	r3, #1
 8004faa:	d114      	bne.n	8004fd6 <HAL_SPI_TransmitReceive+0x26c>
      {
        *(__IO uint8_t *)&hspi->Instance->DR = (*hspi->pTxBuffPtr);
 8004fac:	68fb      	ldr	r3, [r7, #12]
 8004fae:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8004fb0:	68fb      	ldr	r3, [r7, #12]
 8004fb2:	681b      	ldr	r3, [r3, #0]
 8004fb4:	330c      	adds	r3, #12
 8004fb6:	7812      	ldrb	r2, [r2, #0]
 8004fb8:	701a      	strb	r2, [r3, #0]
        hspi->pTxBuffPtr++;
 8004fba:	68fb      	ldr	r3, [r7, #12]
 8004fbc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004fbe:	1c5a      	adds	r2, r3, #1
 8004fc0:	68fb      	ldr	r3, [r7, #12]
 8004fc2:	631a      	str	r2, [r3, #48]	; 0x30
        hspi->TxXferCount--;
 8004fc4:	68fb      	ldr	r3, [r7, #12]
 8004fc6:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8004fc8:	b29b      	uxth	r3, r3
 8004fca:	3b01      	subs	r3, #1
 8004fcc:	b29a      	uxth	r2, r3
 8004fce:	68fb      	ldr	r3, [r7, #12]
 8004fd0:	86da      	strh	r2, [r3, #54]	; 0x36
        /* Next Data is a reception (Rx). Tx not allowed */
        txallowed = 0U;
 8004fd2:	2300      	movs	r3, #0
 8004fd4:	62fb      	str	r3, [r7, #44]	; 0x2c
        }
#endif /* USE_SPI_CRC */
      }

      /* Wait until RXNE flag is reset */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXNE)) && (hspi->RxXferCount > 0U))
 8004fd6:	68fb      	ldr	r3, [r7, #12]
 8004fd8:	681b      	ldr	r3, [r3, #0]
 8004fda:	689b      	ldr	r3, [r3, #8]
 8004fdc:	f003 0301 	and.w	r3, r3, #1
 8004fe0:	2b01      	cmp	r3, #1
 8004fe2:	d119      	bne.n	8005018 <HAL_SPI_TransmitReceive+0x2ae>
 8004fe4:	68fb      	ldr	r3, [r7, #12]
 8004fe6:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8004fe8:	b29b      	uxth	r3, r3
 8004fea:	2b00      	cmp	r3, #0
 8004fec:	d014      	beq.n	8005018 <HAL_SPI_TransmitReceive+0x2ae>
      {
        (*(uint8_t *)hspi->pRxBuffPtr) = hspi->Instance->DR;
 8004fee:	68fb      	ldr	r3, [r7, #12]
 8004ff0:	681b      	ldr	r3, [r3, #0]
 8004ff2:	68da      	ldr	r2, [r3, #12]
 8004ff4:	68fb      	ldr	r3, [r7, #12]
 8004ff6:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004ff8:	b2d2      	uxtb	r2, r2
 8004ffa:	701a      	strb	r2, [r3, #0]
        hspi->pRxBuffPtr++;
 8004ffc:	68fb      	ldr	r3, [r7, #12]
 8004ffe:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8005000:	1c5a      	adds	r2, r3, #1
 8005002:	68fb      	ldr	r3, [r7, #12]
 8005004:	639a      	str	r2, [r3, #56]	; 0x38
        hspi->RxXferCount--;
 8005006:	68fb      	ldr	r3, [r7, #12]
 8005008:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 800500a:	b29b      	uxth	r3, r3
 800500c:	3b01      	subs	r3, #1
 800500e:	b29a      	uxth	r2, r3
 8005010:	68fb      	ldr	r3, [r7, #12]
 8005012:	87da      	strh	r2, [r3, #62]	; 0x3e
        /* Next Data is a Transmission (Tx). Tx is allowed */
        txallowed = 1U;
 8005014:	2301      	movs	r3, #1
 8005016:	62fb      	str	r3, [r7, #44]	; 0x2c
      }
      if ((((HAL_GetTick() - tickstart) >=  Timeout) && ((Timeout != HAL_MAX_DELAY))) || (Timeout == 0U))
 8005018:	f7fd fc88 	bl	800292c <HAL_GetTick>
 800501c:	4602      	mov	r2, r0
 800501e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005020:	1ad3      	subs	r3, r2, r3
 8005022:	6bba      	ldr	r2, [r7, #56]	; 0x38
 8005024:	429a      	cmp	r2, r3
 8005026:	d803      	bhi.n	8005030 <HAL_SPI_TransmitReceive+0x2c6>
 8005028:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800502a:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 800502e:	d102      	bne.n	8005036 <HAL_SPI_TransmitReceive+0x2cc>
 8005030:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8005032:	2b00      	cmp	r3, #0
 8005034:	d103      	bne.n	800503e <HAL_SPI_TransmitReceive+0x2d4>
      {
        errorcode = HAL_TIMEOUT;
 8005036:	2303      	movs	r3, #3
 8005038:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
        goto error;
 800503c:	e029      	b.n	8005092 <HAL_SPI_TransmitReceive+0x328>
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 800503e:	68fb      	ldr	r3, [r7, #12]
 8005040:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8005042:	b29b      	uxth	r3, r3
 8005044:	2b00      	cmp	r3, #0
 8005046:	d1a2      	bne.n	8004f8e <HAL_SPI_TransmitReceive+0x224>
 8005048:	68fb      	ldr	r3, [r7, #12]
 800504a:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 800504c:	b29b      	uxth	r3, r3
 800504e:	2b00      	cmp	r3, #0
 8005050:	d19d      	bne.n	8004f8e <HAL_SPI_TransmitReceive+0x224>
    }
  }
#endif /* USE_SPI_CRC */

  /* Check the end of the transaction */
  if (SPI_EndRxTxTransaction(hspi, Timeout, tickstart) != HAL_OK)
 8005052:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8005054:	6bb9      	ldr	r1, [r7, #56]	; 0x38
 8005056:	68f8      	ldr	r0, [r7, #12]
 8005058:	f000 f904 	bl	8005264 <SPI_EndRxTxTransaction>
 800505c:	4603      	mov	r3, r0
 800505e:	2b00      	cmp	r3, #0
 8005060:	d006      	beq.n	8005070 <HAL_SPI_TransmitReceive+0x306>
  {
    errorcode = HAL_ERROR;
 8005062:	2301      	movs	r3, #1
 8005064:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
    hspi->ErrorCode = HAL_SPI_ERROR_FLAG;
 8005068:	68fb      	ldr	r3, [r7, #12]
 800506a:	2220      	movs	r2, #32
 800506c:	655a      	str	r2, [r3, #84]	; 0x54
    goto error;
 800506e:	e010      	b.n	8005092 <HAL_SPI_TransmitReceive+0x328>
  }

  /* Clear overrun flag in 2 Lines communication mode because received is not read */
  if (hspi->Init.Direction == SPI_DIRECTION_2LINES)
 8005070:	68fb      	ldr	r3, [r7, #12]
 8005072:	689b      	ldr	r3, [r3, #8]
 8005074:	2b00      	cmp	r3, #0
 8005076:	d10b      	bne.n	8005090 <HAL_SPI_TransmitReceive+0x326>
  {
    __HAL_SPI_CLEAR_OVRFLAG(hspi);
 8005078:	2300      	movs	r3, #0
 800507a:	617b      	str	r3, [r7, #20]
 800507c:	68fb      	ldr	r3, [r7, #12]
 800507e:	681b      	ldr	r3, [r3, #0]
 8005080:	68db      	ldr	r3, [r3, #12]
 8005082:	617b      	str	r3, [r7, #20]
 8005084:	68fb      	ldr	r3, [r7, #12]
 8005086:	681b      	ldr	r3, [r3, #0]
 8005088:	689b      	ldr	r3, [r3, #8]
 800508a:	617b      	str	r3, [r7, #20]
 800508c:	697b      	ldr	r3, [r7, #20]
 800508e:	e000      	b.n	8005092 <HAL_SPI_TransmitReceive+0x328>
  }

error :
 8005090:	bf00      	nop
  hspi->State = HAL_SPI_STATE_READY;
 8005092:	68fb      	ldr	r3, [r7, #12]
 8005094:	2201      	movs	r2, #1
 8005096:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
  __HAL_UNLOCK(hspi);
 800509a:	68fb      	ldr	r3, [r7, #12]
 800509c:	2200      	movs	r2, #0
 800509e:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50
  return errorcode;
 80050a2:	f897 302b 	ldrb.w	r3, [r7, #43]	; 0x2b
}
 80050a6:	4618      	mov	r0, r3
 80050a8:	3730      	adds	r7, #48	; 0x30
 80050aa:	46bd      	mov	sp, r7
 80050ac:	bd80      	pop	{r7, pc}
	...

080050b0 <SPI_WaitFlagStateUntilTimeout>:
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_WaitFlagStateUntilTimeout(SPI_HandleTypeDef *hspi, uint32_t Flag, FlagStatus State,
                                                       uint32_t Timeout, uint32_t Tickstart)
{
 80050b0:	b580      	push	{r7, lr}
 80050b2:	b088      	sub	sp, #32
 80050b4:	af00      	add	r7, sp, #0
 80050b6:	60f8      	str	r0, [r7, #12]
 80050b8:	60b9      	str	r1, [r7, #8]
 80050ba:	603b      	str	r3, [r7, #0]
 80050bc:	4613      	mov	r3, r2
 80050be:	71fb      	strb	r3, [r7, #7]
  __IO uint32_t count;
  uint32_t tmp_timeout;
  uint32_t tmp_tickstart;

  /* Adjust Timeout value  in case of end of transfer */
  tmp_timeout   = Timeout - (HAL_GetTick() - Tickstart);
 80050c0:	f7fd fc34 	bl	800292c <HAL_GetTick>
 80050c4:	4602      	mov	r2, r0
 80050c6:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80050c8:	1a9b      	subs	r3, r3, r2
 80050ca:	683a      	ldr	r2, [r7, #0]
 80050cc:	4413      	add	r3, r2
 80050ce:	61fb      	str	r3, [r7, #28]
  tmp_tickstart = HAL_GetTick();
 80050d0:	f7fd fc2c 	bl	800292c <HAL_GetTick>
 80050d4:	61b8      	str	r0, [r7, #24]

  /* Calculate Timeout based on a software loop to avoid blocking issue if Systick is disabled */
  count = tmp_timeout * ((SystemCoreClock * 32U) >> 20U);
 80050d6:	4b39      	ldr	r3, [pc, #228]	; (80051bc <SPI_WaitFlagStateUntilTimeout+0x10c>)
 80050d8:	681b      	ldr	r3, [r3, #0]
 80050da:	015b      	lsls	r3, r3, #5
 80050dc:	0d1b      	lsrs	r3, r3, #20
 80050de:	69fa      	ldr	r2, [r7, #28]
 80050e0:	fb02 f303 	mul.w	r3, r2, r3
 80050e4:	617b      	str	r3, [r7, #20]

  while ((__HAL_SPI_GET_FLAG(hspi, Flag) ? SET : RESET) != State)
 80050e6:	e054      	b.n	8005192 <SPI_WaitFlagStateUntilTimeout+0xe2>
  {
    if (Timeout != HAL_MAX_DELAY)
 80050e8:	683b      	ldr	r3, [r7, #0]
 80050ea:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 80050ee:	d050      	beq.n	8005192 <SPI_WaitFlagStateUntilTimeout+0xe2>
    {
      if (((HAL_GetTick() - tmp_tickstart) >= tmp_timeout) || (tmp_timeout == 0U))
 80050f0:	f7fd fc1c 	bl	800292c <HAL_GetTick>
 80050f4:	4602      	mov	r2, r0
 80050f6:	69bb      	ldr	r3, [r7, #24]
 80050f8:	1ad3      	subs	r3, r2, r3
 80050fa:	69fa      	ldr	r2, [r7, #28]
 80050fc:	429a      	cmp	r2, r3
 80050fe:	d902      	bls.n	8005106 <SPI_WaitFlagStateUntilTimeout+0x56>
 8005100:	69fb      	ldr	r3, [r7, #28]
 8005102:	2b00      	cmp	r3, #0
 8005104:	d13d      	bne.n	8005182 <SPI_WaitFlagStateUntilTimeout+0xd2>
        /* Disable the SPI and reset the CRC: the CRC value should be cleared
           on both master and slave sides in order to resynchronize the master
           and slave for their respective CRC calculation */

        /* Disable TXE, RXNE and ERR interrupts for the interrupt process */
        __HAL_SPI_DISABLE_IT(hspi, (SPI_IT_TXE | SPI_IT_RXNE | SPI_IT_ERR));
 8005106:	68fb      	ldr	r3, [r7, #12]
 8005108:	681b      	ldr	r3, [r3, #0]
 800510a:	685a      	ldr	r2, [r3, #4]
 800510c:	68fb      	ldr	r3, [r7, #12]
 800510e:	681b      	ldr	r3, [r3, #0]
 8005110:	f022 02e0 	bic.w	r2, r2, #224	; 0xe0
 8005114:	605a      	str	r2, [r3, #4]

        if ((hspi->Init.Mode == SPI_MODE_MASTER) && ((hspi->Init.Direction == SPI_DIRECTION_1LINE)
 8005116:	68fb      	ldr	r3, [r7, #12]
 8005118:	685b      	ldr	r3, [r3, #4]
 800511a:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 800511e:	d111      	bne.n	8005144 <SPI_WaitFlagStateUntilTimeout+0x94>
 8005120:	68fb      	ldr	r3, [r7, #12]
 8005122:	689b      	ldr	r3, [r3, #8]
 8005124:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8005128:	d004      	beq.n	8005134 <SPI_WaitFlagStateUntilTimeout+0x84>
                                                     || (hspi->Init.Direction == SPI_DIRECTION_2LINES_RXONLY)))
 800512a:	68fb      	ldr	r3, [r7, #12]
 800512c:	689b      	ldr	r3, [r3, #8]
 800512e:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8005132:	d107      	bne.n	8005144 <SPI_WaitFlagStateUntilTimeout+0x94>
        {
          /* Disable SPI peripheral */
          __HAL_SPI_DISABLE(hspi);
 8005134:	68fb      	ldr	r3, [r7, #12]
 8005136:	681b      	ldr	r3, [r3, #0]
 8005138:	681a      	ldr	r2, [r3, #0]
 800513a:	68fb      	ldr	r3, [r7, #12]
 800513c:	681b      	ldr	r3, [r3, #0]
 800513e:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8005142:	601a      	str	r2, [r3, #0]
        }

        /* Reset CRC Calculation */
        if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
 8005144:	68fb      	ldr	r3, [r7, #12]
 8005146:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8005148:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 800514c:	d10f      	bne.n	800516e <SPI_WaitFlagStateUntilTimeout+0xbe>
        {
          SPI_RESET_CRC(hspi);
 800514e:	68fb      	ldr	r3, [r7, #12]
 8005150:	681b      	ldr	r3, [r3, #0]
 8005152:	681a      	ldr	r2, [r3, #0]
 8005154:	68fb      	ldr	r3, [r7, #12]
 8005156:	681b      	ldr	r3, [r3, #0]
 8005158:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 800515c:	601a      	str	r2, [r3, #0]
 800515e:	68fb      	ldr	r3, [r7, #12]
 8005160:	681b      	ldr	r3, [r3, #0]
 8005162:	681a      	ldr	r2, [r3, #0]
 8005164:	68fb      	ldr	r3, [r7, #12]
 8005166:	681b      	ldr	r3, [r3, #0]
 8005168:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 800516c:	601a      	str	r2, [r3, #0]
        }

        hspi->State = HAL_SPI_STATE_READY;
 800516e:	68fb      	ldr	r3, [r7, #12]
 8005170:	2201      	movs	r2, #1
 8005172:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51

        /* Process Unlocked */
        __HAL_UNLOCK(hspi);
 8005176:	68fb      	ldr	r3, [r7, #12]
 8005178:	2200      	movs	r2, #0
 800517a:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

        return HAL_TIMEOUT;
 800517e:	2303      	movs	r3, #3
 8005180:	e017      	b.n	80051b2 <SPI_WaitFlagStateUntilTimeout+0x102>
      }
      /* If Systick is disabled or not incremented, deactivate timeout to go in disable loop procedure */
      if(count == 0U)
 8005182:	697b      	ldr	r3, [r7, #20]
 8005184:	2b00      	cmp	r3, #0
 8005186:	d101      	bne.n	800518c <SPI_WaitFlagStateUntilTimeout+0xdc>
      {
        tmp_timeout = 0U;
 8005188:	2300      	movs	r3, #0
 800518a:	61fb      	str	r3, [r7, #28]
      }
      count--;
 800518c:	697b      	ldr	r3, [r7, #20]
 800518e:	3b01      	subs	r3, #1
 8005190:	617b      	str	r3, [r7, #20]
  while ((__HAL_SPI_GET_FLAG(hspi, Flag) ? SET : RESET) != State)
 8005192:	68fb      	ldr	r3, [r7, #12]
 8005194:	681b      	ldr	r3, [r3, #0]
 8005196:	689a      	ldr	r2, [r3, #8]
 8005198:	68bb      	ldr	r3, [r7, #8]
 800519a:	4013      	ands	r3, r2
 800519c:	68ba      	ldr	r2, [r7, #8]
 800519e:	429a      	cmp	r2, r3
 80051a0:	bf0c      	ite	eq
 80051a2:	2301      	moveq	r3, #1
 80051a4:	2300      	movne	r3, #0
 80051a6:	b2db      	uxtb	r3, r3
 80051a8:	461a      	mov	r2, r3
 80051aa:	79fb      	ldrb	r3, [r7, #7]
 80051ac:	429a      	cmp	r2, r3
 80051ae:	d19b      	bne.n	80050e8 <SPI_WaitFlagStateUntilTimeout+0x38>
    }
  }

  return HAL_OK;
 80051b0:	2300      	movs	r3, #0
}
 80051b2:	4618      	mov	r0, r3
 80051b4:	3720      	adds	r7, #32
 80051b6:	46bd      	mov	sp, r7
 80051b8:	bd80      	pop	{r7, pc}
 80051ba:	bf00      	nop
 80051bc:	20000008 	.word	0x20000008

080051c0 <SPI_EndRxTransaction>:
  * @param  Timeout Timeout duration
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_EndRxTransaction(SPI_HandleTypeDef *hspi,  uint32_t Timeout, uint32_t Tickstart)
{
 80051c0:	b580      	push	{r7, lr}
 80051c2:	b086      	sub	sp, #24
 80051c4:	af02      	add	r7, sp, #8
 80051c6:	60f8      	str	r0, [r7, #12]
 80051c8:	60b9      	str	r1, [r7, #8]
 80051ca:	607a      	str	r2, [r7, #4]
  if ((hspi->Init.Mode == SPI_MODE_MASTER) && ((hspi->Init.Direction == SPI_DIRECTION_1LINE)
 80051cc:	68fb      	ldr	r3, [r7, #12]
 80051ce:	685b      	ldr	r3, [r3, #4]
 80051d0:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 80051d4:	d111      	bne.n	80051fa <SPI_EndRxTransaction+0x3a>
 80051d6:	68fb      	ldr	r3, [r7, #12]
 80051d8:	689b      	ldr	r3, [r3, #8]
 80051da:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 80051de:	d004      	beq.n	80051ea <SPI_EndRxTransaction+0x2a>
                                               || (hspi->Init.Direction == SPI_DIRECTION_2LINES_RXONLY)))
 80051e0:	68fb      	ldr	r3, [r7, #12]
 80051e2:	689b      	ldr	r3, [r3, #8]
 80051e4:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 80051e8:	d107      	bne.n	80051fa <SPI_EndRxTransaction+0x3a>
  {
    /* Disable SPI peripheral */
    __HAL_SPI_DISABLE(hspi);
 80051ea:	68fb      	ldr	r3, [r7, #12]
 80051ec:	681b      	ldr	r3, [r3, #0]
 80051ee:	681a      	ldr	r2, [r3, #0]
 80051f0:	68fb      	ldr	r3, [r7, #12]
 80051f2:	681b      	ldr	r3, [r3, #0]
 80051f4:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 80051f8:	601a      	str	r2, [r3, #0]
  }

  if ((hspi->Init.Mode == SPI_MODE_MASTER) && (hspi->Init.Direction == SPI_DIRECTION_2LINES_RXONLY))
 80051fa:	68fb      	ldr	r3, [r7, #12]
 80051fc:	685b      	ldr	r3, [r3, #4]
 80051fe:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 8005202:	d117      	bne.n	8005234 <SPI_EndRxTransaction+0x74>
 8005204:	68fb      	ldr	r3, [r7, #12]
 8005206:	689b      	ldr	r3, [r3, #8]
 8005208:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 800520c:	d112      	bne.n	8005234 <SPI_EndRxTransaction+0x74>
  {
    /* Wait the RXNE reset */
    if (SPI_WaitFlagStateUntilTimeout(hspi, SPI_FLAG_RXNE, RESET, Timeout, Tickstart) != HAL_OK)
 800520e:	687b      	ldr	r3, [r7, #4]
 8005210:	9300      	str	r3, [sp, #0]
 8005212:	68bb      	ldr	r3, [r7, #8]
 8005214:	2200      	movs	r2, #0
 8005216:	2101      	movs	r1, #1
 8005218:	68f8      	ldr	r0, [r7, #12]
 800521a:	f7ff ff49 	bl	80050b0 <SPI_WaitFlagStateUntilTimeout>
 800521e:	4603      	mov	r3, r0
 8005220:	2b00      	cmp	r3, #0
 8005222:	d01a      	beq.n	800525a <SPI_EndRxTransaction+0x9a>
    {
      SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 8005224:	68fb      	ldr	r3, [r7, #12]
 8005226:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8005228:	f043 0220 	orr.w	r2, r3, #32
 800522c:	68fb      	ldr	r3, [r7, #12]
 800522e:	655a      	str	r2, [r3, #84]	; 0x54
      return HAL_TIMEOUT;
 8005230:	2303      	movs	r3, #3
 8005232:	e013      	b.n	800525c <SPI_EndRxTransaction+0x9c>
    }
  }
  else
  {
    /* Control the BSY flag */
    if (SPI_WaitFlagStateUntilTimeout(hspi, SPI_FLAG_BSY, RESET, Timeout, Tickstart) != HAL_OK)
 8005234:	687b      	ldr	r3, [r7, #4]
 8005236:	9300      	str	r3, [sp, #0]
 8005238:	68bb      	ldr	r3, [r7, #8]
 800523a:	2200      	movs	r2, #0
 800523c:	2180      	movs	r1, #128	; 0x80
 800523e:	68f8      	ldr	r0, [r7, #12]
 8005240:	f7ff ff36 	bl	80050b0 <SPI_WaitFlagStateUntilTimeout>
 8005244:	4603      	mov	r3, r0
 8005246:	2b00      	cmp	r3, #0
 8005248:	d007      	beq.n	800525a <SPI_EndRxTransaction+0x9a>
    {
      SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 800524a:	68fb      	ldr	r3, [r7, #12]
 800524c:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800524e:	f043 0220 	orr.w	r2, r3, #32
 8005252:	68fb      	ldr	r3, [r7, #12]
 8005254:	655a      	str	r2, [r3, #84]	; 0x54
      return HAL_TIMEOUT;
 8005256:	2303      	movs	r3, #3
 8005258:	e000      	b.n	800525c <SPI_EndRxTransaction+0x9c>
    }
  }
  return HAL_OK;
 800525a:	2300      	movs	r3, #0
}
 800525c:	4618      	mov	r0, r3
 800525e:	3710      	adds	r7, #16
 8005260:	46bd      	mov	sp, r7
 8005262:	bd80      	pop	{r7, pc}

08005264 <SPI_EndRxTxTransaction>:
  * @param  Timeout Timeout duration
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_EndRxTxTransaction(SPI_HandleTypeDef *hspi, uint32_t Timeout, uint32_t Tickstart)
{
 8005264:	b580      	push	{r7, lr}
 8005266:	b086      	sub	sp, #24
 8005268:	af02      	add	r7, sp, #8
 800526a:	60f8      	str	r0, [r7, #12]
 800526c:	60b9      	str	r1, [r7, #8]
 800526e:	607a      	str	r2, [r7, #4]
  /* Control the BSY flag */
  if (SPI_WaitFlagStateUntilTimeout(hspi, SPI_FLAG_BSY, RESET, Timeout, Tickstart) != HAL_OK)
 8005270:	687b      	ldr	r3, [r7, #4]
 8005272:	9300      	str	r3, [sp, #0]
 8005274:	68bb      	ldr	r3, [r7, #8]
 8005276:	2200      	movs	r2, #0
 8005278:	2180      	movs	r1, #128	; 0x80
 800527a:	68f8      	ldr	r0, [r7, #12]
 800527c:	f7ff ff18 	bl	80050b0 <SPI_WaitFlagStateUntilTimeout>
 8005280:	4603      	mov	r3, r0
 8005282:	2b00      	cmp	r3, #0
 8005284:	d007      	beq.n	8005296 <SPI_EndRxTxTransaction+0x32>
  {
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 8005286:	68fb      	ldr	r3, [r7, #12]
 8005288:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800528a:	f043 0220 	orr.w	r2, r3, #32
 800528e:	68fb      	ldr	r3, [r7, #12]
 8005290:	655a      	str	r2, [r3, #84]	; 0x54
    return HAL_TIMEOUT;
 8005292:	2303      	movs	r3, #3
 8005294:	e000      	b.n	8005298 <SPI_EndRxTxTransaction+0x34>
  }
  return HAL_OK;
 8005296:	2300      	movs	r3, #0
}
 8005298:	4618      	mov	r0, r3
 800529a:	3710      	adds	r7, #16
 800529c:	46bd      	mov	sp, r7
 800529e:	bd80      	pop	{r7, pc}

080052a0 <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 80052a0:	b580      	push	{r7, lr}
 80052a2:	b082      	sub	sp, #8
 80052a4:	af00      	add	r7, sp, #0
 80052a6:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 80052a8:	687b      	ldr	r3, [r7, #4]
 80052aa:	2b00      	cmp	r3, #0
 80052ac:	d101      	bne.n	80052b2 <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 80052ae:	2301      	movs	r3, #1
 80052b0:	e041      	b.n	8005336 <HAL_TIM_Base_Init+0x96>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 80052b2:	687b      	ldr	r3, [r7, #4]
 80052b4:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80052b8:	b2db      	uxtb	r3, r3
 80052ba:	2b00      	cmp	r3, #0
 80052bc:	d106      	bne.n	80052cc <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 80052be:	687b      	ldr	r3, [r7, #4]
 80052c0:	2200      	movs	r2, #0
 80052c2:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 80052c6:	6878      	ldr	r0, [r7, #4]
 80052c8:	f7fd f9cc 	bl	8002664 <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 80052cc:	687b      	ldr	r3, [r7, #4]
 80052ce:	2202      	movs	r2, #2
 80052d0:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 80052d4:	687b      	ldr	r3, [r7, #4]
 80052d6:	681a      	ldr	r2, [r3, #0]
 80052d8:	687b      	ldr	r3, [r7, #4]
 80052da:	3304      	adds	r3, #4
 80052dc:	4619      	mov	r1, r3
 80052de:	4610      	mov	r0, r2
 80052e0:	f000 f8e4 	bl	80054ac <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 80052e4:	687b      	ldr	r3, [r7, #4]
 80052e6:	2201      	movs	r2, #1
 80052e8:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 80052ec:	687b      	ldr	r3, [r7, #4]
 80052ee:	2201      	movs	r2, #1
 80052f0:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 80052f4:	687b      	ldr	r3, [r7, #4]
 80052f6:	2201      	movs	r2, #1
 80052f8:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 80052fc:	687b      	ldr	r3, [r7, #4]
 80052fe:	2201      	movs	r2, #1
 8005300:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 8005304:	687b      	ldr	r3, [r7, #4]
 8005306:	2201      	movs	r2, #1
 8005308:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 800530c:	687b      	ldr	r3, [r7, #4]
 800530e:	2201      	movs	r2, #1
 8005310:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 8005314:	687b      	ldr	r3, [r7, #4]
 8005316:	2201      	movs	r2, #1
 8005318:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
 800531c:	687b      	ldr	r3, [r7, #4]
 800531e:	2201      	movs	r2, #1
 8005320:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8005324:	687b      	ldr	r3, [r7, #4]
 8005326:	2201      	movs	r2, #1
 8005328:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 800532c:	687b      	ldr	r3, [r7, #4]
 800532e:	2201      	movs	r2, #1
 8005330:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 8005334:	2300      	movs	r3, #0
}
 8005336:	4618      	mov	r0, r3
 8005338:	3708      	adds	r7, #8
 800533a:	46bd      	mov	sp, r7
 800533c:	bd80      	pop	{r7, pc}

0800533e <HAL_TIM_ConfigClockSource>:
  * @param  sClockSourceConfig pointer to a TIM_ClockConfigTypeDef structure that
  *         contains the clock source information for the TIM peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_ConfigClockSource(TIM_HandleTypeDef *htim, TIM_ClockConfigTypeDef *sClockSourceConfig)
{
 800533e:	b580      	push	{r7, lr}
 8005340:	b084      	sub	sp, #16
 8005342:	af00      	add	r7, sp, #0
 8005344:	6078      	str	r0, [r7, #4]
 8005346:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Process Locked */
  __HAL_LOCK(htim);
 8005348:	687b      	ldr	r3, [r7, #4]
 800534a:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 800534e:	2b01      	cmp	r3, #1
 8005350:	d101      	bne.n	8005356 <HAL_TIM_ConfigClockSource+0x18>
 8005352:	2302      	movs	r3, #2
 8005354:	e0a6      	b.n	80054a4 <HAL_TIM_ConfigClockSource+0x166>
 8005356:	687b      	ldr	r3, [r7, #4]
 8005358:	2201      	movs	r2, #1
 800535a:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  htim->State = HAL_TIM_STATE_BUSY;
 800535e:	687b      	ldr	r3, [r7, #4]
 8005360:	2202      	movs	r2, #2
 8005362:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Check the parameters */
  assert_param(IS_TIM_CLOCKSOURCE(sClockSourceConfig->ClockSource));

  /* Reset the SMS, TS, ECE, ETPS and ETRF bits */
  tmpsmcr = htim->Instance->SMCR;
 8005366:	687b      	ldr	r3, [r7, #4]
 8005368:	681b      	ldr	r3, [r3, #0]
 800536a:	689b      	ldr	r3, [r3, #8]
 800536c:	60fb      	str	r3, [r7, #12]
  tmpsmcr &= ~(TIM_SMCR_SMS | TIM_SMCR_TS);
 800536e:	68fb      	ldr	r3, [r7, #12]
 8005370:	f023 0377 	bic.w	r3, r3, #119	; 0x77
 8005374:	60fb      	str	r3, [r7, #12]
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8005376:	68fb      	ldr	r3, [r7, #12]
 8005378:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 800537c:	60fb      	str	r3, [r7, #12]
  htim->Instance->SMCR = tmpsmcr;
 800537e:	687b      	ldr	r3, [r7, #4]
 8005380:	681b      	ldr	r3, [r3, #0]
 8005382:	68fa      	ldr	r2, [r7, #12]
 8005384:	609a      	str	r2, [r3, #8]

  switch (sClockSourceConfig->ClockSource)
 8005386:	683b      	ldr	r3, [r7, #0]
 8005388:	681b      	ldr	r3, [r3, #0]
 800538a:	2b40      	cmp	r3, #64	; 0x40
 800538c:	d067      	beq.n	800545e <HAL_TIM_ConfigClockSource+0x120>
 800538e:	2b40      	cmp	r3, #64	; 0x40
 8005390:	d80b      	bhi.n	80053aa <HAL_TIM_ConfigClockSource+0x6c>
 8005392:	2b10      	cmp	r3, #16
 8005394:	d073      	beq.n	800547e <HAL_TIM_ConfigClockSource+0x140>
 8005396:	2b10      	cmp	r3, #16
 8005398:	d802      	bhi.n	80053a0 <HAL_TIM_ConfigClockSource+0x62>
 800539a:	2b00      	cmp	r3, #0
 800539c:	d06f      	beq.n	800547e <HAL_TIM_ConfigClockSource+0x140>
        TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
        break;
      }

    default:
      break;
 800539e:	e078      	b.n	8005492 <HAL_TIM_ConfigClockSource+0x154>
  switch (sClockSourceConfig->ClockSource)
 80053a0:	2b20      	cmp	r3, #32
 80053a2:	d06c      	beq.n	800547e <HAL_TIM_ConfigClockSource+0x140>
 80053a4:	2b30      	cmp	r3, #48	; 0x30
 80053a6:	d06a      	beq.n	800547e <HAL_TIM_ConfigClockSource+0x140>
      break;
 80053a8:	e073      	b.n	8005492 <HAL_TIM_ConfigClockSource+0x154>
  switch (sClockSourceConfig->ClockSource)
 80053aa:	2b70      	cmp	r3, #112	; 0x70
 80053ac:	d00d      	beq.n	80053ca <HAL_TIM_ConfigClockSource+0x8c>
 80053ae:	2b70      	cmp	r3, #112	; 0x70
 80053b0:	d804      	bhi.n	80053bc <HAL_TIM_ConfigClockSource+0x7e>
 80053b2:	2b50      	cmp	r3, #80	; 0x50
 80053b4:	d033      	beq.n	800541e <HAL_TIM_ConfigClockSource+0xe0>
 80053b6:	2b60      	cmp	r3, #96	; 0x60
 80053b8:	d041      	beq.n	800543e <HAL_TIM_ConfigClockSource+0x100>
      break;
 80053ba:	e06a      	b.n	8005492 <HAL_TIM_ConfigClockSource+0x154>
  switch (sClockSourceConfig->ClockSource)
 80053bc:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 80053c0:	d066      	beq.n	8005490 <HAL_TIM_ConfigClockSource+0x152>
 80053c2:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 80053c6:	d017      	beq.n	80053f8 <HAL_TIM_ConfigClockSource+0xba>
      break;
 80053c8:	e063      	b.n	8005492 <HAL_TIM_ConfigClockSource+0x154>
      TIM_ETR_SetConfig(htim->Instance,
 80053ca:	687b      	ldr	r3, [r7, #4]
 80053cc:	6818      	ldr	r0, [r3, #0]
 80053ce:	683b      	ldr	r3, [r7, #0]
 80053d0:	6899      	ldr	r1, [r3, #8]
 80053d2:	683b      	ldr	r3, [r7, #0]
 80053d4:	685a      	ldr	r2, [r3, #4]
 80053d6:	683b      	ldr	r3, [r7, #0]
 80053d8:	68db      	ldr	r3, [r3, #12]
 80053da:	f000 f940 	bl	800565e <TIM_ETR_SetConfig>
      tmpsmcr = htim->Instance->SMCR;
 80053de:	687b      	ldr	r3, [r7, #4]
 80053e0:	681b      	ldr	r3, [r3, #0]
 80053e2:	689b      	ldr	r3, [r3, #8]
 80053e4:	60fb      	str	r3, [r7, #12]
      tmpsmcr |= (TIM_SLAVEMODE_EXTERNAL1 | TIM_CLOCKSOURCE_ETRMODE1);
 80053e6:	68fb      	ldr	r3, [r7, #12]
 80053e8:	f043 0377 	orr.w	r3, r3, #119	; 0x77
 80053ec:	60fb      	str	r3, [r7, #12]
      htim->Instance->SMCR = tmpsmcr;
 80053ee:	687b      	ldr	r3, [r7, #4]
 80053f0:	681b      	ldr	r3, [r3, #0]
 80053f2:	68fa      	ldr	r2, [r7, #12]
 80053f4:	609a      	str	r2, [r3, #8]
      break;
 80053f6:	e04c      	b.n	8005492 <HAL_TIM_ConfigClockSource+0x154>
      TIM_ETR_SetConfig(htim->Instance,
 80053f8:	687b      	ldr	r3, [r7, #4]
 80053fa:	6818      	ldr	r0, [r3, #0]
 80053fc:	683b      	ldr	r3, [r7, #0]
 80053fe:	6899      	ldr	r1, [r3, #8]
 8005400:	683b      	ldr	r3, [r7, #0]
 8005402:	685a      	ldr	r2, [r3, #4]
 8005404:	683b      	ldr	r3, [r7, #0]
 8005406:	68db      	ldr	r3, [r3, #12]
 8005408:	f000 f929 	bl	800565e <TIM_ETR_SetConfig>
      htim->Instance->SMCR |= TIM_SMCR_ECE;
 800540c:	687b      	ldr	r3, [r7, #4]
 800540e:	681b      	ldr	r3, [r3, #0]
 8005410:	689a      	ldr	r2, [r3, #8]
 8005412:	687b      	ldr	r3, [r7, #4]
 8005414:	681b      	ldr	r3, [r3, #0]
 8005416:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 800541a:	609a      	str	r2, [r3, #8]
      break;
 800541c:	e039      	b.n	8005492 <HAL_TIM_ConfigClockSource+0x154>
      TIM_TI1_ConfigInputStage(htim->Instance,
 800541e:	687b      	ldr	r3, [r7, #4]
 8005420:	6818      	ldr	r0, [r3, #0]
 8005422:	683b      	ldr	r3, [r7, #0]
 8005424:	6859      	ldr	r1, [r3, #4]
 8005426:	683b      	ldr	r3, [r7, #0]
 8005428:	68db      	ldr	r3, [r3, #12]
 800542a:	461a      	mov	r2, r3
 800542c:	f000 f8a0 	bl	8005570 <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1);
 8005430:	687b      	ldr	r3, [r7, #4]
 8005432:	681b      	ldr	r3, [r3, #0]
 8005434:	2150      	movs	r1, #80	; 0x50
 8005436:	4618      	mov	r0, r3
 8005438:	f000 f8f7 	bl	800562a <TIM_ITRx_SetConfig>
      break;
 800543c:	e029      	b.n	8005492 <HAL_TIM_ConfigClockSource+0x154>
      TIM_TI2_ConfigInputStage(htim->Instance,
 800543e:	687b      	ldr	r3, [r7, #4]
 8005440:	6818      	ldr	r0, [r3, #0]
 8005442:	683b      	ldr	r3, [r7, #0]
 8005444:	6859      	ldr	r1, [r3, #4]
 8005446:	683b      	ldr	r3, [r7, #0]
 8005448:	68db      	ldr	r3, [r3, #12]
 800544a:	461a      	mov	r2, r3
 800544c:	f000 f8be 	bl	80055cc <TIM_TI2_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI2);
 8005450:	687b      	ldr	r3, [r7, #4]
 8005452:	681b      	ldr	r3, [r3, #0]
 8005454:	2160      	movs	r1, #96	; 0x60
 8005456:	4618      	mov	r0, r3
 8005458:	f000 f8e7 	bl	800562a <TIM_ITRx_SetConfig>
      break;
 800545c:	e019      	b.n	8005492 <HAL_TIM_ConfigClockSource+0x154>
      TIM_TI1_ConfigInputStage(htim->Instance,
 800545e:	687b      	ldr	r3, [r7, #4]
 8005460:	6818      	ldr	r0, [r3, #0]
 8005462:	683b      	ldr	r3, [r7, #0]
 8005464:	6859      	ldr	r1, [r3, #4]
 8005466:	683b      	ldr	r3, [r7, #0]
 8005468:	68db      	ldr	r3, [r3, #12]
 800546a:	461a      	mov	r2, r3
 800546c:	f000 f880 	bl	8005570 <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1ED);
 8005470:	687b      	ldr	r3, [r7, #4]
 8005472:	681b      	ldr	r3, [r3, #0]
 8005474:	2140      	movs	r1, #64	; 0x40
 8005476:	4618      	mov	r0, r3
 8005478:	f000 f8d7 	bl	800562a <TIM_ITRx_SetConfig>
      break;
 800547c:	e009      	b.n	8005492 <HAL_TIM_ConfigClockSource+0x154>
        TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
 800547e:	687b      	ldr	r3, [r7, #4]
 8005480:	681a      	ldr	r2, [r3, #0]
 8005482:	683b      	ldr	r3, [r7, #0]
 8005484:	681b      	ldr	r3, [r3, #0]
 8005486:	4619      	mov	r1, r3
 8005488:	4610      	mov	r0, r2
 800548a:	f000 f8ce 	bl	800562a <TIM_ITRx_SetConfig>
        break;
 800548e:	e000      	b.n	8005492 <HAL_TIM_ConfigClockSource+0x154>
      break;
 8005490:	bf00      	nop
  }
  htim->State = HAL_TIM_STATE_READY;
 8005492:	687b      	ldr	r3, [r7, #4]
 8005494:	2201      	movs	r2, #1
 8005496:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 800549a:	687b      	ldr	r3, [r7, #4]
 800549c:	2200      	movs	r2, #0
 800549e:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 80054a2:	2300      	movs	r3, #0
}
 80054a4:	4618      	mov	r0, r3
 80054a6:	3710      	adds	r7, #16
 80054a8:	46bd      	mov	sp, r7
 80054aa:	bd80      	pop	{r7, pc}

080054ac <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, TIM_Base_InitTypeDef *Structure)
{
 80054ac:	b480      	push	{r7}
 80054ae:	b085      	sub	sp, #20
 80054b0:	af00      	add	r7, sp, #0
 80054b2:	6078      	str	r0, [r7, #4]
 80054b4:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 80054b6:	687b      	ldr	r3, [r7, #4]
 80054b8:	681b      	ldr	r3, [r3, #0]
 80054ba:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 80054bc:	687b      	ldr	r3, [r7, #4]
 80054be:	4a29      	ldr	r2, [pc, #164]	; (8005564 <TIM_Base_SetConfig+0xb8>)
 80054c0:	4293      	cmp	r3, r2
 80054c2:	d00b      	beq.n	80054dc <TIM_Base_SetConfig+0x30>
 80054c4:	687b      	ldr	r3, [r7, #4]
 80054c6:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80054ca:	d007      	beq.n	80054dc <TIM_Base_SetConfig+0x30>
 80054cc:	687b      	ldr	r3, [r7, #4]
 80054ce:	4a26      	ldr	r2, [pc, #152]	; (8005568 <TIM_Base_SetConfig+0xbc>)
 80054d0:	4293      	cmp	r3, r2
 80054d2:	d003      	beq.n	80054dc <TIM_Base_SetConfig+0x30>
 80054d4:	687b      	ldr	r3, [r7, #4]
 80054d6:	4a25      	ldr	r2, [pc, #148]	; (800556c <TIM_Base_SetConfig+0xc0>)
 80054d8:	4293      	cmp	r3, r2
 80054da:	d108      	bne.n	80054ee <TIM_Base_SetConfig+0x42>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 80054dc:	68fb      	ldr	r3, [r7, #12]
 80054de:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80054e2:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 80054e4:	683b      	ldr	r3, [r7, #0]
 80054e6:	685b      	ldr	r3, [r3, #4]
 80054e8:	68fa      	ldr	r2, [r7, #12]
 80054ea:	4313      	orrs	r3, r2
 80054ec:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 80054ee:	687b      	ldr	r3, [r7, #4]
 80054f0:	4a1c      	ldr	r2, [pc, #112]	; (8005564 <TIM_Base_SetConfig+0xb8>)
 80054f2:	4293      	cmp	r3, r2
 80054f4:	d00b      	beq.n	800550e <TIM_Base_SetConfig+0x62>
 80054f6:	687b      	ldr	r3, [r7, #4]
 80054f8:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80054fc:	d007      	beq.n	800550e <TIM_Base_SetConfig+0x62>
 80054fe:	687b      	ldr	r3, [r7, #4]
 8005500:	4a19      	ldr	r2, [pc, #100]	; (8005568 <TIM_Base_SetConfig+0xbc>)
 8005502:	4293      	cmp	r3, r2
 8005504:	d003      	beq.n	800550e <TIM_Base_SetConfig+0x62>
 8005506:	687b      	ldr	r3, [r7, #4]
 8005508:	4a18      	ldr	r2, [pc, #96]	; (800556c <TIM_Base_SetConfig+0xc0>)
 800550a:	4293      	cmp	r3, r2
 800550c:	d108      	bne.n	8005520 <TIM_Base_SetConfig+0x74>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 800550e:	68fb      	ldr	r3, [r7, #12]
 8005510:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8005514:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 8005516:	683b      	ldr	r3, [r7, #0]
 8005518:	68db      	ldr	r3, [r3, #12]
 800551a:	68fa      	ldr	r2, [r7, #12]
 800551c:	4313      	orrs	r3, r2
 800551e:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 8005520:	68fb      	ldr	r3, [r7, #12]
 8005522:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 8005526:	683b      	ldr	r3, [r7, #0]
 8005528:	695b      	ldr	r3, [r3, #20]
 800552a:	4313      	orrs	r3, r2
 800552c:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 800552e:	687b      	ldr	r3, [r7, #4]
 8005530:	68fa      	ldr	r2, [r7, #12]
 8005532:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 8005534:	683b      	ldr	r3, [r7, #0]
 8005536:	689a      	ldr	r2, [r3, #8]
 8005538:	687b      	ldr	r3, [r7, #4]
 800553a:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 800553c:	683b      	ldr	r3, [r7, #0]
 800553e:	681a      	ldr	r2, [r3, #0]
 8005540:	687b      	ldr	r3, [r7, #4]
 8005542:	629a      	str	r2, [r3, #40]	; 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 8005544:	687b      	ldr	r3, [r7, #4]
 8005546:	4a07      	ldr	r2, [pc, #28]	; (8005564 <TIM_Base_SetConfig+0xb8>)
 8005548:	4293      	cmp	r3, r2
 800554a:	d103      	bne.n	8005554 <TIM_Base_SetConfig+0xa8>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 800554c:	683b      	ldr	r3, [r7, #0]
 800554e:	691a      	ldr	r2, [r3, #16]
 8005550:	687b      	ldr	r3, [r7, #4]
 8005552:	631a      	str	r2, [r3, #48]	; 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 8005554:	687b      	ldr	r3, [r7, #4]
 8005556:	2201      	movs	r2, #1
 8005558:	615a      	str	r2, [r3, #20]
}
 800555a:	bf00      	nop
 800555c:	3714      	adds	r7, #20
 800555e:	46bd      	mov	sp, r7
 8005560:	bc80      	pop	{r7}
 8005562:	4770      	bx	lr
 8005564:	40012c00 	.word	0x40012c00
 8005568:	40000400 	.word	0x40000400
 800556c:	40000800 	.word	0x40000800

08005570 <TIM_TI1_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI1_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 8005570:	b480      	push	{r7}
 8005572:	b087      	sub	sp, #28
 8005574:	af00      	add	r7, sp, #0
 8005576:	60f8      	str	r0, [r7, #12]
 8005578:	60b9      	str	r1, [r7, #8]
 800557a:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 1: Reset the CC1E Bit */
  tmpccer = TIMx->CCER;
 800557c:	68fb      	ldr	r3, [r7, #12]
 800557e:	6a1b      	ldr	r3, [r3, #32]
 8005580:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC1E;
 8005582:	68fb      	ldr	r3, [r7, #12]
 8005584:	6a1b      	ldr	r3, [r3, #32]
 8005586:	f023 0201 	bic.w	r2, r3, #1
 800558a:	68fb      	ldr	r3, [r7, #12]
 800558c:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 800558e:	68fb      	ldr	r3, [r7, #12]
 8005590:	699b      	ldr	r3, [r3, #24]
 8005592:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 8005594:	693b      	ldr	r3, [r7, #16]
 8005596:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 800559a:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 4U);
 800559c:	687b      	ldr	r3, [r7, #4]
 800559e:	011b      	lsls	r3, r3, #4
 80055a0:	693a      	ldr	r2, [r7, #16]
 80055a2:	4313      	orrs	r3, r2
 80055a4:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC1E Bit */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 80055a6:	697b      	ldr	r3, [r7, #20]
 80055a8:	f023 030a 	bic.w	r3, r3, #10
 80055ac:	617b      	str	r3, [r7, #20]
  tmpccer |= TIM_ICPolarity;
 80055ae:	697a      	ldr	r2, [r7, #20]
 80055b0:	68bb      	ldr	r3, [r7, #8]
 80055b2:	4313      	orrs	r3, r2
 80055b4:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1;
 80055b6:	68fb      	ldr	r3, [r7, #12]
 80055b8:	693a      	ldr	r2, [r7, #16]
 80055ba:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 80055bc:	68fb      	ldr	r3, [r7, #12]
 80055be:	697a      	ldr	r2, [r7, #20]
 80055c0:	621a      	str	r2, [r3, #32]
}
 80055c2:	bf00      	nop
 80055c4:	371c      	adds	r7, #28
 80055c6:	46bd      	mov	sp, r7
 80055c8:	bc80      	pop	{r7}
 80055ca:	4770      	bx	lr

080055cc <TIM_TI2_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI2_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 80055cc:	b480      	push	{r7}
 80055ce:	b087      	sub	sp, #28
 80055d0:	af00      	add	r7, sp, #0
 80055d2:	60f8      	str	r0, [r7, #12]
 80055d4:	60b9      	str	r1, [r7, #8]
 80055d6:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 80055d8:	68fb      	ldr	r3, [r7, #12]
 80055da:	6a1b      	ldr	r3, [r3, #32]
 80055dc:	f023 0210 	bic.w	r2, r3, #16
 80055e0:	68fb      	ldr	r3, [r7, #12]
 80055e2:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 80055e4:	68fb      	ldr	r3, [r7, #12]
 80055e6:	699b      	ldr	r3, [r3, #24]
 80055e8:	617b      	str	r3, [r7, #20]
  tmpccer = TIMx->CCER;
 80055ea:	68fb      	ldr	r3, [r7, #12]
 80055ec:	6a1b      	ldr	r3, [r3, #32]
 80055ee:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 80055f0:	697b      	ldr	r3, [r7, #20]
 80055f2:	f423 4370 	bic.w	r3, r3, #61440	; 0xf000
 80055f6:	617b      	str	r3, [r7, #20]
  tmpccmr1 |= (TIM_ICFilter << 12U);
 80055f8:	687b      	ldr	r3, [r7, #4]
 80055fa:	031b      	lsls	r3, r3, #12
 80055fc:	697a      	ldr	r2, [r7, #20]
 80055fe:	4313      	orrs	r3, r2
 8005600:	617b      	str	r3, [r7, #20]

  /* Select the Polarity and set the CC2E Bit */
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 8005602:	693b      	ldr	r3, [r7, #16]
 8005604:	f023 03a0 	bic.w	r3, r3, #160	; 0xa0
 8005608:	613b      	str	r3, [r7, #16]
  tmpccer |= (TIM_ICPolarity << 4U);
 800560a:	68bb      	ldr	r3, [r7, #8]
 800560c:	011b      	lsls	r3, r3, #4
 800560e:	693a      	ldr	r2, [r7, #16]
 8005610:	4313      	orrs	r3, r2
 8005612:	613b      	str	r3, [r7, #16]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1 ;
 8005614:	68fb      	ldr	r3, [r7, #12]
 8005616:	697a      	ldr	r2, [r7, #20]
 8005618:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 800561a:	68fb      	ldr	r3, [r7, #12]
 800561c:	693a      	ldr	r2, [r7, #16]
 800561e:	621a      	str	r2, [r3, #32]
}
 8005620:	bf00      	nop
 8005622:	371c      	adds	r7, #28
 8005624:	46bd      	mov	sp, r7
 8005626:	bc80      	pop	{r7}
 8005628:	4770      	bx	lr

0800562a <TIM_ITRx_SetConfig>:
  *            @arg TIM_TS_TI2FP2: Filtered Timer Input 2
  *            @arg TIM_TS_ETRF: External Trigger input
  * @retval None
  */
static void TIM_ITRx_SetConfig(TIM_TypeDef *TIMx, uint32_t InputTriggerSource)
{
 800562a:	b480      	push	{r7}
 800562c:	b085      	sub	sp, #20
 800562e:	af00      	add	r7, sp, #0
 8005630:	6078      	str	r0, [r7, #4]
 8005632:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Get the TIMx SMCR register value */
  tmpsmcr = TIMx->SMCR;
 8005634:	687b      	ldr	r3, [r7, #4]
 8005636:	689b      	ldr	r3, [r3, #8]
 8005638:	60fb      	str	r3, [r7, #12]
  /* Reset the TS Bits */
  tmpsmcr &= ~TIM_SMCR_TS;
 800563a:	68fb      	ldr	r3, [r7, #12]
 800563c:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8005640:	60fb      	str	r3, [r7, #12]
  /* Set the Input Trigger source and the slave mode*/
  tmpsmcr |= (InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1);
 8005642:	683a      	ldr	r2, [r7, #0]
 8005644:	68fb      	ldr	r3, [r7, #12]
 8005646:	4313      	orrs	r3, r2
 8005648:	f043 0307 	orr.w	r3, r3, #7
 800564c:	60fb      	str	r3, [r7, #12]
  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 800564e:	687b      	ldr	r3, [r7, #4]
 8005650:	68fa      	ldr	r2, [r7, #12]
 8005652:	609a      	str	r2, [r3, #8]
}
 8005654:	bf00      	nop
 8005656:	3714      	adds	r7, #20
 8005658:	46bd      	mov	sp, r7
 800565a:	bc80      	pop	{r7}
 800565c:	4770      	bx	lr

0800565e <TIM_ETR_SetConfig>:
  *          This parameter must be a value between 0x00 and 0x0F
  * @retval None
  */
void TIM_ETR_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ExtTRGPrescaler,
                       uint32_t TIM_ExtTRGPolarity, uint32_t ExtTRGFilter)
{
 800565e:	b480      	push	{r7}
 8005660:	b087      	sub	sp, #28
 8005662:	af00      	add	r7, sp, #0
 8005664:	60f8      	str	r0, [r7, #12]
 8005666:	60b9      	str	r1, [r7, #8]
 8005668:	607a      	str	r2, [r7, #4]
 800566a:	603b      	str	r3, [r7, #0]
  uint32_t tmpsmcr;

  tmpsmcr = TIMx->SMCR;
 800566c:	68fb      	ldr	r3, [r7, #12]
 800566e:	689b      	ldr	r3, [r3, #8]
 8005670:	617b      	str	r3, [r7, #20]

  /* Reset the ETR Bits */
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8005672:	697b      	ldr	r3, [r7, #20]
 8005674:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 8005678:	617b      	str	r3, [r7, #20]

  /* Set the Prescaler, the Filter value and the Polarity */
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8U)));
 800567a:	683b      	ldr	r3, [r7, #0]
 800567c:	021a      	lsls	r2, r3, #8
 800567e:	687b      	ldr	r3, [r7, #4]
 8005680:	431a      	orrs	r2, r3
 8005682:	68bb      	ldr	r3, [r7, #8]
 8005684:	4313      	orrs	r3, r2
 8005686:	697a      	ldr	r2, [r7, #20]
 8005688:	4313      	orrs	r3, r2
 800568a:	617b      	str	r3, [r7, #20]

  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 800568c:	68fb      	ldr	r3, [r7, #12]
 800568e:	697a      	ldr	r2, [r7, #20]
 8005690:	609a      	str	r2, [r3, #8]
}
 8005692:	bf00      	nop
 8005694:	371c      	adds	r7, #28
 8005696:	46bd      	mov	sp, r7
 8005698:	bc80      	pop	{r7}
 800569a:	4770      	bx	lr

0800569c <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        TIM_MasterConfigTypeDef *sMasterConfig)
{
 800569c:	b480      	push	{r7}
 800569e:	b085      	sub	sp, #20
 80056a0:	af00      	add	r7, sp, #0
 80056a2:	6078      	str	r0, [r7, #4]
 80056a4:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 80056a6:	687b      	ldr	r3, [r7, #4]
 80056a8:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 80056ac:	2b01      	cmp	r3, #1
 80056ae:	d101      	bne.n	80056b4 <HAL_TIMEx_MasterConfigSynchronization+0x18>
 80056b0:	2302      	movs	r3, #2
 80056b2:	e046      	b.n	8005742 <HAL_TIMEx_MasterConfigSynchronization+0xa6>
 80056b4:	687b      	ldr	r3, [r7, #4]
 80056b6:	2201      	movs	r2, #1
 80056b8:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 80056bc:	687b      	ldr	r3, [r7, #4]
 80056be:	2202      	movs	r2, #2
 80056c0:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 80056c4:	687b      	ldr	r3, [r7, #4]
 80056c6:	681b      	ldr	r3, [r3, #0]
 80056c8:	685b      	ldr	r3, [r3, #4]
 80056ca:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 80056cc:	687b      	ldr	r3, [r7, #4]
 80056ce:	681b      	ldr	r3, [r3, #0]
 80056d0:	689b      	ldr	r3, [r3, #8]
 80056d2:	60bb      	str	r3, [r7, #8]

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 80056d4:	68fb      	ldr	r3, [r7, #12]
 80056d6:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80056da:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 80056dc:	683b      	ldr	r3, [r7, #0]
 80056de:	681b      	ldr	r3, [r3, #0]
 80056e0:	68fa      	ldr	r2, [r7, #12]
 80056e2:	4313      	orrs	r3, r2
 80056e4:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 80056e6:	687b      	ldr	r3, [r7, #4]
 80056e8:	681b      	ldr	r3, [r3, #0]
 80056ea:	68fa      	ldr	r2, [r7, #12]
 80056ec:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 80056ee:	687b      	ldr	r3, [r7, #4]
 80056f0:	681b      	ldr	r3, [r3, #0]
 80056f2:	4a16      	ldr	r2, [pc, #88]	; (800574c <HAL_TIMEx_MasterConfigSynchronization+0xb0>)
 80056f4:	4293      	cmp	r3, r2
 80056f6:	d00e      	beq.n	8005716 <HAL_TIMEx_MasterConfigSynchronization+0x7a>
 80056f8:	687b      	ldr	r3, [r7, #4]
 80056fa:	681b      	ldr	r3, [r3, #0]
 80056fc:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8005700:	d009      	beq.n	8005716 <HAL_TIMEx_MasterConfigSynchronization+0x7a>
 8005702:	687b      	ldr	r3, [r7, #4]
 8005704:	681b      	ldr	r3, [r3, #0]
 8005706:	4a12      	ldr	r2, [pc, #72]	; (8005750 <HAL_TIMEx_MasterConfigSynchronization+0xb4>)
 8005708:	4293      	cmp	r3, r2
 800570a:	d004      	beq.n	8005716 <HAL_TIMEx_MasterConfigSynchronization+0x7a>
 800570c:	687b      	ldr	r3, [r7, #4]
 800570e:	681b      	ldr	r3, [r3, #0]
 8005710:	4a10      	ldr	r2, [pc, #64]	; (8005754 <HAL_TIMEx_MasterConfigSynchronization+0xb8>)
 8005712:	4293      	cmp	r3, r2
 8005714:	d10c      	bne.n	8005730 <HAL_TIMEx_MasterConfigSynchronization+0x94>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 8005716:	68bb      	ldr	r3, [r7, #8]
 8005718:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 800571c:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 800571e:	683b      	ldr	r3, [r7, #0]
 8005720:	685b      	ldr	r3, [r3, #4]
 8005722:	68ba      	ldr	r2, [r7, #8]
 8005724:	4313      	orrs	r3, r2
 8005726:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 8005728:	687b      	ldr	r3, [r7, #4]
 800572a:	681b      	ldr	r3, [r3, #0]
 800572c:	68ba      	ldr	r2, [r7, #8]
 800572e:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 8005730:	687b      	ldr	r3, [r7, #4]
 8005732:	2201      	movs	r2, #1
 8005734:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 8005738:	687b      	ldr	r3, [r7, #4]
 800573a:	2200      	movs	r2, #0
 800573c:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 8005740:	2300      	movs	r3, #0
}
 8005742:	4618      	mov	r0, r3
 8005744:	3714      	adds	r7, #20
 8005746:	46bd      	mov	sp, r7
 8005748:	bc80      	pop	{r7}
 800574a:	4770      	bx	lr
 800574c:	40012c00 	.word	0x40012c00
 8005750:	40000400 	.word	0x40000400
 8005754:	40000800 	.word	0x40000800

08005758 <HAL_UART_Init>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 8005758:	b580      	push	{r7, lr}
 800575a:	b082      	sub	sp, #8
 800575c:	af00      	add	r7, sp, #0
 800575e:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 8005760:	687b      	ldr	r3, [r7, #4]
 8005762:	2b00      	cmp	r3, #0
 8005764:	d101      	bne.n	800576a <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 8005766:	2301      	movs	r3, #1
 8005768:	e03f      	b.n	80057ea <HAL_UART_Init+0x92>
  assert_param(IS_UART_WORD_LENGTH(huart->Init.WordLength));
#if defined(USART_CR1_OVER8)
  assert_param(IS_UART_OVERSAMPLING(huart->Init.OverSampling));
#endif /* USART_CR1_OVER8 */

  if (huart->gState == HAL_UART_STATE_RESET)
 800576a:	687b      	ldr	r3, [r7, #4]
 800576c:	f893 3039 	ldrb.w	r3, [r3, #57]	; 0x39
 8005770:	b2db      	uxtb	r3, r3
 8005772:	2b00      	cmp	r3, #0
 8005774:	d106      	bne.n	8005784 <HAL_UART_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 8005776:	687b      	ldr	r3, [r7, #4]
 8005778:	2200      	movs	r2, #0
 800577a:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 800577e:	6878      	ldr	r0, [r7, #4]
 8005780:	f7fc ff8c 	bl	800269c <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 8005784:	687b      	ldr	r3, [r7, #4]
 8005786:	2224      	movs	r2, #36	; 0x24
 8005788:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39

  /* Disable the peripheral */
  __HAL_UART_DISABLE(huart);
 800578c:	687b      	ldr	r3, [r7, #4]
 800578e:	681b      	ldr	r3, [r3, #0]
 8005790:	68da      	ldr	r2, [r3, #12]
 8005792:	687b      	ldr	r3, [r7, #4]
 8005794:	681b      	ldr	r3, [r3, #0]
 8005796:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 800579a:	60da      	str	r2, [r3, #12]

  /* Set the UART Communication parameters */
  UART_SetConfig(huart);
 800579c:	6878      	ldr	r0, [r7, #4]
 800579e:	f000 fb55 	bl	8005e4c <UART_SetConfig>

  /* In asynchronous mode, the following bits must be kept cleared:
     - LINEN and CLKEN bits in the USART_CR2 register,
     - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 80057a2:	687b      	ldr	r3, [r7, #4]
 80057a4:	681b      	ldr	r3, [r3, #0]
 80057a6:	691a      	ldr	r2, [r3, #16]
 80057a8:	687b      	ldr	r3, [r7, #4]
 80057aa:	681b      	ldr	r3, [r3, #0]
 80057ac:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 80057b0:	611a      	str	r2, [r3, #16]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 80057b2:	687b      	ldr	r3, [r7, #4]
 80057b4:	681b      	ldr	r3, [r3, #0]
 80057b6:	695a      	ldr	r2, [r3, #20]
 80057b8:	687b      	ldr	r3, [r7, #4]
 80057ba:	681b      	ldr	r3, [r3, #0]
 80057bc:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 80057c0:	615a      	str	r2, [r3, #20]

  /* Enable the peripheral */
  __HAL_UART_ENABLE(huart);
 80057c2:	687b      	ldr	r3, [r7, #4]
 80057c4:	681b      	ldr	r3, [r3, #0]
 80057c6:	68da      	ldr	r2, [r3, #12]
 80057c8:	687b      	ldr	r3, [r7, #4]
 80057ca:	681b      	ldr	r3, [r3, #0]
 80057cc:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 80057d0:	60da      	str	r2, [r3, #12]

  /* Initialize the UART state */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 80057d2:	687b      	ldr	r3, [r7, #4]
 80057d4:	2200      	movs	r2, #0
 80057d6:	63da      	str	r2, [r3, #60]	; 0x3c
  huart->gState = HAL_UART_STATE_READY;
 80057d8:	687b      	ldr	r3, [r7, #4]
 80057da:	2220      	movs	r2, #32
 80057dc:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39
  huart->RxState = HAL_UART_STATE_READY;
 80057e0:	687b      	ldr	r3, [r7, #4]
 80057e2:	2220      	movs	r2, #32
 80057e4:	f883 203a 	strb.w	r2, [r3, #58]	; 0x3a

  return HAL_OK;
 80057e8:	2300      	movs	r3, #0
}
 80057ea:	4618      	mov	r0, r3
 80057ec:	3708      	adds	r7, #8
 80057ee:	46bd      	mov	sp, r7
 80057f0:	bd80      	pop	{r7, pc}

080057f2 <HAL_UART_Transmit>:
  * @param  Size  Amount of data elements (u8 or u16) to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 80057f2:	b580      	push	{r7, lr}
 80057f4:	b08a      	sub	sp, #40	; 0x28
 80057f6:	af02      	add	r7, sp, #8
 80057f8:	60f8      	str	r0, [r7, #12]
 80057fa:	60b9      	str	r1, [r7, #8]
 80057fc:	603b      	str	r3, [r7, #0]
 80057fe:	4613      	mov	r3, r2
 8005800:	80fb      	strh	r3, [r7, #6]
  uint8_t  *pdata8bits;
  uint16_t *pdata16bits;
  uint32_t tickstart = 0U;
 8005802:	2300      	movs	r3, #0
 8005804:	617b      	str	r3, [r7, #20]

  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 8005806:	68fb      	ldr	r3, [r7, #12]
 8005808:	f893 3039 	ldrb.w	r3, [r3, #57]	; 0x39
 800580c:	b2db      	uxtb	r3, r3
 800580e:	2b20      	cmp	r3, #32
 8005810:	d17c      	bne.n	800590c <HAL_UART_Transmit+0x11a>
  {
    if ((pData == NULL) || (Size == 0U))
 8005812:	68bb      	ldr	r3, [r7, #8]
 8005814:	2b00      	cmp	r3, #0
 8005816:	d002      	beq.n	800581e <HAL_UART_Transmit+0x2c>
 8005818:	88fb      	ldrh	r3, [r7, #6]
 800581a:	2b00      	cmp	r3, #0
 800581c:	d101      	bne.n	8005822 <HAL_UART_Transmit+0x30>
    {
      return  HAL_ERROR;
 800581e:	2301      	movs	r3, #1
 8005820:	e075      	b.n	800590e <HAL_UART_Transmit+0x11c>
    }

    /* Process Locked */
    __HAL_LOCK(huart);
 8005822:	68fb      	ldr	r3, [r7, #12]
 8005824:	f893 3038 	ldrb.w	r3, [r3, #56]	; 0x38
 8005828:	2b01      	cmp	r3, #1
 800582a:	d101      	bne.n	8005830 <HAL_UART_Transmit+0x3e>
 800582c:	2302      	movs	r3, #2
 800582e:	e06e      	b.n	800590e <HAL_UART_Transmit+0x11c>
 8005830:	68fb      	ldr	r3, [r7, #12]
 8005832:	2201      	movs	r2, #1
 8005834:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 8005838:	68fb      	ldr	r3, [r7, #12]
 800583a:	2200      	movs	r2, #0
 800583c:	63da      	str	r2, [r3, #60]	; 0x3c
    huart->gState = HAL_UART_STATE_BUSY_TX;
 800583e:	68fb      	ldr	r3, [r7, #12]
 8005840:	2221      	movs	r2, #33	; 0x21
 8005842:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39

    /* Init tickstart for timeout managment */
    tickstart = HAL_GetTick();
 8005846:	f7fd f871 	bl	800292c <HAL_GetTick>
 800584a:	6178      	str	r0, [r7, #20]

    huart->TxXferSize = Size;
 800584c:	68fb      	ldr	r3, [r7, #12]
 800584e:	88fa      	ldrh	r2, [r7, #6]
 8005850:	849a      	strh	r2, [r3, #36]	; 0x24
    huart->TxXferCount = Size;
 8005852:	68fb      	ldr	r3, [r7, #12]
 8005854:	88fa      	ldrh	r2, [r7, #6]
 8005856:	84da      	strh	r2, [r3, #38]	; 0x26

    /* In case of 9bits/No Parity transfer, pData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8005858:	68fb      	ldr	r3, [r7, #12]
 800585a:	689b      	ldr	r3, [r3, #8]
 800585c:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8005860:	d108      	bne.n	8005874 <HAL_UART_Transmit+0x82>
 8005862:	68fb      	ldr	r3, [r7, #12]
 8005864:	691b      	ldr	r3, [r3, #16]
 8005866:	2b00      	cmp	r3, #0
 8005868:	d104      	bne.n	8005874 <HAL_UART_Transmit+0x82>
    {
      pdata8bits  = NULL;
 800586a:	2300      	movs	r3, #0
 800586c:	61fb      	str	r3, [r7, #28]
      pdata16bits = (uint16_t *) pData;
 800586e:	68bb      	ldr	r3, [r7, #8]
 8005870:	61bb      	str	r3, [r7, #24]
 8005872:	e003      	b.n	800587c <HAL_UART_Transmit+0x8a>
    }
    else
    {
      pdata8bits  = pData;
 8005874:	68bb      	ldr	r3, [r7, #8]
 8005876:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 8005878:	2300      	movs	r3, #0
 800587a:	61bb      	str	r3, [r7, #24]
    }

    /* Process Unlocked */
    __HAL_UNLOCK(huart);
 800587c:	68fb      	ldr	r3, [r7, #12]
 800587e:	2200      	movs	r2, #0
 8005880:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38

    while (huart->TxXferCount > 0U)
 8005884:	e02a      	b.n	80058dc <HAL_UART_Transmit+0xea>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 8005886:	683b      	ldr	r3, [r7, #0]
 8005888:	9300      	str	r3, [sp, #0]
 800588a:	697b      	ldr	r3, [r7, #20]
 800588c:	2200      	movs	r2, #0
 800588e:	2180      	movs	r1, #128	; 0x80
 8005890:	68f8      	ldr	r0, [r7, #12]
 8005892:	f000 f979 	bl	8005b88 <UART_WaitOnFlagUntilTimeout>
 8005896:	4603      	mov	r3, r0
 8005898:	2b00      	cmp	r3, #0
 800589a:	d001      	beq.n	80058a0 <HAL_UART_Transmit+0xae>
      {
        return HAL_TIMEOUT;
 800589c:	2303      	movs	r3, #3
 800589e:	e036      	b.n	800590e <HAL_UART_Transmit+0x11c>
      }
      if (pdata8bits == NULL)
 80058a0:	69fb      	ldr	r3, [r7, #28]
 80058a2:	2b00      	cmp	r3, #0
 80058a4:	d10b      	bne.n	80058be <HAL_UART_Transmit+0xcc>
      {
        huart->Instance->DR = (uint16_t)(*pdata16bits & 0x01FFU);
 80058a6:	69bb      	ldr	r3, [r7, #24]
 80058a8:	881b      	ldrh	r3, [r3, #0]
 80058aa:	461a      	mov	r2, r3
 80058ac:	68fb      	ldr	r3, [r7, #12]
 80058ae:	681b      	ldr	r3, [r3, #0]
 80058b0:	f3c2 0208 	ubfx	r2, r2, #0, #9
 80058b4:	605a      	str	r2, [r3, #4]
        pdata16bits++;
 80058b6:	69bb      	ldr	r3, [r7, #24]
 80058b8:	3302      	adds	r3, #2
 80058ba:	61bb      	str	r3, [r7, #24]
 80058bc:	e007      	b.n	80058ce <HAL_UART_Transmit+0xdc>
      }
      else
      {
        huart->Instance->DR = (uint8_t)(*pdata8bits & 0xFFU);
 80058be:	69fb      	ldr	r3, [r7, #28]
 80058c0:	781a      	ldrb	r2, [r3, #0]
 80058c2:	68fb      	ldr	r3, [r7, #12]
 80058c4:	681b      	ldr	r3, [r3, #0]
 80058c6:	605a      	str	r2, [r3, #4]
        pdata8bits++;
 80058c8:	69fb      	ldr	r3, [r7, #28]
 80058ca:	3301      	adds	r3, #1
 80058cc:	61fb      	str	r3, [r7, #28]
      }
      huart->TxXferCount--;
 80058ce:	68fb      	ldr	r3, [r7, #12]
 80058d0:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
 80058d2:	b29b      	uxth	r3, r3
 80058d4:	3b01      	subs	r3, #1
 80058d6:	b29a      	uxth	r2, r3
 80058d8:	68fb      	ldr	r3, [r7, #12]
 80058da:	84da      	strh	r2, [r3, #38]	; 0x26
    while (huart->TxXferCount > 0U)
 80058dc:	68fb      	ldr	r3, [r7, #12]
 80058de:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
 80058e0:	b29b      	uxth	r3, r3
 80058e2:	2b00      	cmp	r3, #0
 80058e4:	d1cf      	bne.n	8005886 <HAL_UART_Transmit+0x94>
    }

    if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TC, RESET, tickstart, Timeout) != HAL_OK)
 80058e6:	683b      	ldr	r3, [r7, #0]
 80058e8:	9300      	str	r3, [sp, #0]
 80058ea:	697b      	ldr	r3, [r7, #20]
 80058ec:	2200      	movs	r2, #0
 80058ee:	2140      	movs	r1, #64	; 0x40
 80058f0:	68f8      	ldr	r0, [r7, #12]
 80058f2:	f000 f949 	bl	8005b88 <UART_WaitOnFlagUntilTimeout>
 80058f6:	4603      	mov	r3, r0
 80058f8:	2b00      	cmp	r3, #0
 80058fa:	d001      	beq.n	8005900 <HAL_UART_Transmit+0x10e>
    {
      return HAL_TIMEOUT;
 80058fc:	2303      	movs	r3, #3
 80058fe:	e006      	b.n	800590e <HAL_UART_Transmit+0x11c>
    }

    /* At end of Tx process, restore huart->gState to Ready */
    huart->gState = HAL_UART_STATE_READY;
 8005900:	68fb      	ldr	r3, [r7, #12]
 8005902:	2220      	movs	r2, #32
 8005904:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39

    return HAL_OK;
 8005908:	2300      	movs	r3, #0
 800590a:	e000      	b.n	800590e <HAL_UART_Transmit+0x11c>
  }
  else
  {
    return HAL_BUSY;
 800590c:	2302      	movs	r3, #2
  }
}
 800590e:	4618      	mov	r0, r3
 8005910:	3720      	adds	r7, #32
 8005912:	46bd      	mov	sp, r7
 8005914:	bd80      	pop	{r7, pc}
	...

08005918 <HAL_UART_IRQHandler>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
void HAL_UART_IRQHandler(UART_HandleTypeDef *huart)
{
 8005918:	b580      	push	{r7, lr}
 800591a:	b088      	sub	sp, #32
 800591c:	af00      	add	r7, sp, #0
 800591e:	6078      	str	r0, [r7, #4]
  uint32_t isrflags   = READ_REG(huart->Instance->SR);
 8005920:	687b      	ldr	r3, [r7, #4]
 8005922:	681b      	ldr	r3, [r3, #0]
 8005924:	681b      	ldr	r3, [r3, #0]
 8005926:	61fb      	str	r3, [r7, #28]
  uint32_t cr1its     = READ_REG(huart->Instance->CR1);
 8005928:	687b      	ldr	r3, [r7, #4]
 800592a:	681b      	ldr	r3, [r3, #0]
 800592c:	68db      	ldr	r3, [r3, #12]
 800592e:	61bb      	str	r3, [r7, #24]
  uint32_t cr3its     = READ_REG(huart->Instance->CR3);
 8005930:	687b      	ldr	r3, [r7, #4]
 8005932:	681b      	ldr	r3, [r3, #0]
 8005934:	695b      	ldr	r3, [r3, #20]
 8005936:	617b      	str	r3, [r7, #20]
  uint32_t errorflags = 0x00U;
 8005938:	2300      	movs	r3, #0
 800593a:	613b      	str	r3, [r7, #16]
  uint32_t dmarequest = 0x00U;
 800593c:	2300      	movs	r3, #0
 800593e:	60fb      	str	r3, [r7, #12]

  /* If no error occurs */
  errorflags = (isrflags & (uint32_t)(USART_SR_PE | USART_SR_FE | USART_SR_ORE | USART_SR_NE));
 8005940:	69fb      	ldr	r3, [r7, #28]
 8005942:	f003 030f 	and.w	r3, r3, #15
 8005946:	613b      	str	r3, [r7, #16]
  if (errorflags == RESET)
 8005948:	693b      	ldr	r3, [r7, #16]
 800594a:	2b00      	cmp	r3, #0
 800594c:	d10d      	bne.n	800596a <HAL_UART_IRQHandler+0x52>
  {
    /* UART in mode Receiver -------------------------------------------------*/
    if (((isrflags & USART_SR_RXNE) != RESET) && ((cr1its & USART_CR1_RXNEIE) != RESET))
 800594e:	69fb      	ldr	r3, [r7, #28]
 8005950:	f003 0320 	and.w	r3, r3, #32
 8005954:	2b00      	cmp	r3, #0
 8005956:	d008      	beq.n	800596a <HAL_UART_IRQHandler+0x52>
 8005958:	69bb      	ldr	r3, [r7, #24]
 800595a:	f003 0320 	and.w	r3, r3, #32
 800595e:	2b00      	cmp	r3, #0
 8005960:	d003      	beq.n	800596a <HAL_UART_IRQHandler+0x52>
    {
      UART_Receive_IT(huart);
 8005962:	6878      	ldr	r0, [r7, #4]
 8005964:	f000 f9f2 	bl	8005d4c <UART_Receive_IT>
      return;
 8005968:	e0d1      	b.n	8005b0e <HAL_UART_IRQHandler+0x1f6>
    }
  }

  /* If some errors occur */
  if ((errorflags != RESET) && (((cr3its & USART_CR3_EIE) != RESET) || ((cr1its & (USART_CR1_RXNEIE | USART_CR1_PEIE)) != RESET)))
 800596a:	693b      	ldr	r3, [r7, #16]
 800596c:	2b00      	cmp	r3, #0
 800596e:	f000 80b0 	beq.w	8005ad2 <HAL_UART_IRQHandler+0x1ba>
 8005972:	697b      	ldr	r3, [r7, #20]
 8005974:	f003 0301 	and.w	r3, r3, #1
 8005978:	2b00      	cmp	r3, #0
 800597a:	d105      	bne.n	8005988 <HAL_UART_IRQHandler+0x70>
 800597c:	69bb      	ldr	r3, [r7, #24]
 800597e:	f403 7390 	and.w	r3, r3, #288	; 0x120
 8005982:	2b00      	cmp	r3, #0
 8005984:	f000 80a5 	beq.w	8005ad2 <HAL_UART_IRQHandler+0x1ba>
  {
    /* UART parity error interrupt occurred ----------------------------------*/
    if (((isrflags & USART_SR_PE) != RESET) && ((cr1its & USART_CR1_PEIE) != RESET))
 8005988:	69fb      	ldr	r3, [r7, #28]
 800598a:	f003 0301 	and.w	r3, r3, #1
 800598e:	2b00      	cmp	r3, #0
 8005990:	d00a      	beq.n	80059a8 <HAL_UART_IRQHandler+0x90>
 8005992:	69bb      	ldr	r3, [r7, #24]
 8005994:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8005998:	2b00      	cmp	r3, #0
 800599a:	d005      	beq.n	80059a8 <HAL_UART_IRQHandler+0x90>
    {
      huart->ErrorCode |= HAL_UART_ERROR_PE;
 800599c:	687b      	ldr	r3, [r7, #4]
 800599e:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80059a0:	f043 0201 	orr.w	r2, r3, #1
 80059a4:	687b      	ldr	r3, [r7, #4]
 80059a6:	63da      	str	r2, [r3, #60]	; 0x3c
    }

    /* UART noise error interrupt occurred -----------------------------------*/
    if (((isrflags & USART_SR_NE) != RESET) && ((cr3its & USART_CR3_EIE) != RESET))
 80059a8:	69fb      	ldr	r3, [r7, #28]
 80059aa:	f003 0304 	and.w	r3, r3, #4
 80059ae:	2b00      	cmp	r3, #0
 80059b0:	d00a      	beq.n	80059c8 <HAL_UART_IRQHandler+0xb0>
 80059b2:	697b      	ldr	r3, [r7, #20]
 80059b4:	f003 0301 	and.w	r3, r3, #1
 80059b8:	2b00      	cmp	r3, #0
 80059ba:	d005      	beq.n	80059c8 <HAL_UART_IRQHandler+0xb0>
    {
      huart->ErrorCode |= HAL_UART_ERROR_NE;
 80059bc:	687b      	ldr	r3, [r7, #4]
 80059be:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80059c0:	f043 0202 	orr.w	r2, r3, #2
 80059c4:	687b      	ldr	r3, [r7, #4]
 80059c6:	63da      	str	r2, [r3, #60]	; 0x3c
    }

    /* UART frame error interrupt occurred -----------------------------------*/
    if (((isrflags & USART_SR_FE) != RESET) && ((cr3its & USART_CR3_EIE) != RESET))
 80059c8:	69fb      	ldr	r3, [r7, #28]
 80059ca:	f003 0302 	and.w	r3, r3, #2
 80059ce:	2b00      	cmp	r3, #0
 80059d0:	d00a      	beq.n	80059e8 <HAL_UART_IRQHandler+0xd0>
 80059d2:	697b      	ldr	r3, [r7, #20]
 80059d4:	f003 0301 	and.w	r3, r3, #1
 80059d8:	2b00      	cmp	r3, #0
 80059da:	d005      	beq.n	80059e8 <HAL_UART_IRQHandler+0xd0>
    {
      huart->ErrorCode |= HAL_UART_ERROR_FE;
 80059dc:	687b      	ldr	r3, [r7, #4]
 80059de:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80059e0:	f043 0204 	orr.w	r2, r3, #4
 80059e4:	687b      	ldr	r3, [r7, #4]
 80059e6:	63da      	str	r2, [r3, #60]	; 0x3c
    }

    /* UART Over-Run interrupt occurred --------------------------------------*/
    if (((isrflags & USART_SR_ORE) != RESET) && (((cr1its & USART_CR1_RXNEIE) != RESET) || ((cr3its & USART_CR3_EIE) != RESET)))
 80059e8:	69fb      	ldr	r3, [r7, #28]
 80059ea:	f003 0308 	and.w	r3, r3, #8
 80059ee:	2b00      	cmp	r3, #0
 80059f0:	d00f      	beq.n	8005a12 <HAL_UART_IRQHandler+0xfa>
 80059f2:	69bb      	ldr	r3, [r7, #24]
 80059f4:	f003 0320 	and.w	r3, r3, #32
 80059f8:	2b00      	cmp	r3, #0
 80059fa:	d104      	bne.n	8005a06 <HAL_UART_IRQHandler+0xee>
 80059fc:	697b      	ldr	r3, [r7, #20]
 80059fe:	f003 0301 	and.w	r3, r3, #1
 8005a02:	2b00      	cmp	r3, #0
 8005a04:	d005      	beq.n	8005a12 <HAL_UART_IRQHandler+0xfa>
    {
      huart->ErrorCode |= HAL_UART_ERROR_ORE;
 8005a06:	687b      	ldr	r3, [r7, #4]
 8005a08:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8005a0a:	f043 0208 	orr.w	r2, r3, #8
 8005a0e:	687b      	ldr	r3, [r7, #4]
 8005a10:	63da      	str	r2, [r3, #60]	; 0x3c
    }

    /* Call UART Error Call back function if need be --------------------------*/
    if (huart->ErrorCode != HAL_UART_ERROR_NONE)
 8005a12:	687b      	ldr	r3, [r7, #4]
 8005a14:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8005a16:	2b00      	cmp	r3, #0
 8005a18:	d078      	beq.n	8005b0c <HAL_UART_IRQHandler+0x1f4>
    {
      /* UART in mode Receiver -----------------------------------------------*/
      if (((isrflags & USART_SR_RXNE) != RESET) && ((cr1its & USART_CR1_RXNEIE) != RESET))
 8005a1a:	69fb      	ldr	r3, [r7, #28]
 8005a1c:	f003 0320 	and.w	r3, r3, #32
 8005a20:	2b00      	cmp	r3, #0
 8005a22:	d007      	beq.n	8005a34 <HAL_UART_IRQHandler+0x11c>
 8005a24:	69bb      	ldr	r3, [r7, #24]
 8005a26:	f003 0320 	and.w	r3, r3, #32
 8005a2a:	2b00      	cmp	r3, #0
 8005a2c:	d002      	beq.n	8005a34 <HAL_UART_IRQHandler+0x11c>
      {
        UART_Receive_IT(huart);
 8005a2e:	6878      	ldr	r0, [r7, #4]
 8005a30:	f000 f98c 	bl	8005d4c <UART_Receive_IT>
      }

      /* If Overrun error occurs, or if any error occurs in DMA mode reception,
         consider error as blocking */
      dmarequest = HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR);
 8005a34:	687b      	ldr	r3, [r7, #4]
 8005a36:	681b      	ldr	r3, [r3, #0]
 8005a38:	695b      	ldr	r3, [r3, #20]
 8005a3a:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8005a3e:	2b00      	cmp	r3, #0
 8005a40:	bf14      	ite	ne
 8005a42:	2301      	movne	r3, #1
 8005a44:	2300      	moveq	r3, #0
 8005a46:	b2db      	uxtb	r3, r3
 8005a48:	60fb      	str	r3, [r7, #12]
      if (((huart->ErrorCode & HAL_UART_ERROR_ORE) != RESET) || dmarequest)
 8005a4a:	687b      	ldr	r3, [r7, #4]
 8005a4c:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8005a4e:	f003 0308 	and.w	r3, r3, #8
 8005a52:	2b00      	cmp	r3, #0
 8005a54:	d102      	bne.n	8005a5c <HAL_UART_IRQHandler+0x144>
 8005a56:	68fb      	ldr	r3, [r7, #12]
 8005a58:	2b00      	cmp	r3, #0
 8005a5a:	d031      	beq.n	8005ac0 <HAL_UART_IRQHandler+0x1a8>
      {
        /* Blocking error : transfer is aborted
           Set the UART state ready to be able to start again the process,
           Disable Rx Interrupts, and disable Rx DMA request, if ongoing */
        UART_EndRxTransfer(huart);
 8005a5c:	6878      	ldr	r0, [r7, #4]
 8005a5e:	f000 f8dd 	bl	8005c1c <UART_EndRxTransfer>

        /* Disable the UART DMA Rx request if enabled */
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8005a62:	687b      	ldr	r3, [r7, #4]
 8005a64:	681b      	ldr	r3, [r3, #0]
 8005a66:	695b      	ldr	r3, [r3, #20]
 8005a68:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8005a6c:	2b00      	cmp	r3, #0
 8005a6e:	d023      	beq.n	8005ab8 <HAL_UART_IRQHandler+0x1a0>
        {
          CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 8005a70:	687b      	ldr	r3, [r7, #4]
 8005a72:	681b      	ldr	r3, [r3, #0]
 8005a74:	695a      	ldr	r2, [r3, #20]
 8005a76:	687b      	ldr	r3, [r7, #4]
 8005a78:	681b      	ldr	r3, [r3, #0]
 8005a7a:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8005a7e:	615a      	str	r2, [r3, #20]

          /* Abort the UART DMA Rx channel */
          if (huart->hdmarx != NULL)
 8005a80:	687b      	ldr	r3, [r7, #4]
 8005a82:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8005a84:	2b00      	cmp	r3, #0
 8005a86:	d013      	beq.n	8005ab0 <HAL_UART_IRQHandler+0x198>
          {
            /* Set the UART DMA Abort callback :
               will lead to call HAL_UART_ErrorCallback() at end of DMA abort procedure */
            huart->hdmarx->XferAbortCallback = UART_DMAAbortOnError;
 8005a88:	687b      	ldr	r3, [r7, #4]
 8005a8a:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8005a8c:	4a21      	ldr	r2, [pc, #132]	; (8005b14 <HAL_UART_IRQHandler+0x1fc>)
 8005a8e:	635a      	str	r2, [r3, #52]	; 0x34
            if (HAL_DMA_Abort_IT(huart->hdmarx) != HAL_OK)
 8005a90:	687b      	ldr	r3, [r7, #4]
 8005a92:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8005a94:	4618      	mov	r0, r3
 8005a96:	f7fd f883 	bl	8002ba0 <HAL_DMA_Abort_IT>
 8005a9a:	4603      	mov	r3, r0
 8005a9c:	2b00      	cmp	r3, #0
 8005a9e:	d016      	beq.n	8005ace <HAL_UART_IRQHandler+0x1b6>
            {
              /* Call Directly XferAbortCallback function in case of error */
              huart->hdmarx->XferAbortCallback(huart->hdmarx);
 8005aa0:	687b      	ldr	r3, [r7, #4]
 8005aa2:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8005aa4:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8005aa6:	687a      	ldr	r2, [r7, #4]
 8005aa8:	6b52      	ldr	r2, [r2, #52]	; 0x34
 8005aaa:	4610      	mov	r0, r2
 8005aac:	4798      	blx	r3
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8005aae:	e00e      	b.n	8005ace <HAL_UART_IRQHandler+0x1b6>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
            /*Call registered error callback*/
            huart->ErrorCallback(huart);
#else
            /*Call legacy weak error callback*/
            HAL_UART_ErrorCallback(huart);
 8005ab0:	6878      	ldr	r0, [r7, #4]
 8005ab2:	f000 f843 	bl	8005b3c <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8005ab6:	e00a      	b.n	8005ace <HAL_UART_IRQHandler+0x1b6>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered error callback*/
          huart->ErrorCallback(huart);
#else
          /*Call legacy weak error callback*/
          HAL_UART_ErrorCallback(huart);
 8005ab8:	6878      	ldr	r0, [r7, #4]
 8005aba:	f000 f83f 	bl	8005b3c <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8005abe:	e006      	b.n	8005ace <HAL_UART_IRQHandler+0x1b6>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered error callback*/
        huart->ErrorCallback(huart);
#else
        /*Call legacy weak error callback*/
        HAL_UART_ErrorCallback(huart);
 8005ac0:	6878      	ldr	r0, [r7, #4]
 8005ac2:	f000 f83b 	bl	8005b3c <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */

        huart->ErrorCode = HAL_UART_ERROR_NONE;
 8005ac6:	687b      	ldr	r3, [r7, #4]
 8005ac8:	2200      	movs	r2, #0
 8005aca:	63da      	str	r2, [r3, #60]	; 0x3c
      }
    }
    return;
 8005acc:	e01e      	b.n	8005b0c <HAL_UART_IRQHandler+0x1f4>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8005ace:	bf00      	nop
    return;
 8005ad0:	e01c      	b.n	8005b0c <HAL_UART_IRQHandler+0x1f4>
  } /* End if some error occurs */

  /* UART in mode Transmitter ------------------------------------------------*/
  if (((isrflags & USART_SR_TXE) != RESET) && ((cr1its & USART_CR1_TXEIE) != RESET))
 8005ad2:	69fb      	ldr	r3, [r7, #28]
 8005ad4:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8005ad8:	2b00      	cmp	r3, #0
 8005ada:	d008      	beq.n	8005aee <HAL_UART_IRQHandler+0x1d6>
 8005adc:	69bb      	ldr	r3, [r7, #24]
 8005ade:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8005ae2:	2b00      	cmp	r3, #0
 8005ae4:	d003      	beq.n	8005aee <HAL_UART_IRQHandler+0x1d6>
  {
    UART_Transmit_IT(huart);
 8005ae6:	6878      	ldr	r0, [r7, #4]
 8005ae8:	f000 f8c9 	bl	8005c7e <UART_Transmit_IT>
    return;
 8005aec:	e00f      	b.n	8005b0e <HAL_UART_IRQHandler+0x1f6>
  }

  /* UART in mode Transmitter end --------------------------------------------*/
  if (((isrflags & USART_SR_TC) != RESET) && ((cr1its & USART_CR1_TCIE) != RESET))
 8005aee:	69fb      	ldr	r3, [r7, #28]
 8005af0:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8005af4:	2b00      	cmp	r3, #0
 8005af6:	d00a      	beq.n	8005b0e <HAL_UART_IRQHandler+0x1f6>
 8005af8:	69bb      	ldr	r3, [r7, #24]
 8005afa:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8005afe:	2b00      	cmp	r3, #0
 8005b00:	d005      	beq.n	8005b0e <HAL_UART_IRQHandler+0x1f6>
  {
    UART_EndTransmit_IT(huart);
 8005b02:	6878      	ldr	r0, [r7, #4]
 8005b04:	f000 f90a 	bl	8005d1c <UART_EndTransmit_IT>
    return;
 8005b08:	bf00      	nop
 8005b0a:	e000      	b.n	8005b0e <HAL_UART_IRQHandler+0x1f6>
    return;
 8005b0c:	bf00      	nop
  }
}
 8005b0e:	3720      	adds	r7, #32
 8005b10:	46bd      	mov	sp, r7
 8005b12:	bd80      	pop	{r7, pc}
 8005b14:	08005c57 	.word	0x08005c57

08005b18 <HAL_UART_TxCpltCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_TxCpltCallback(UART_HandleTypeDef *huart)
{
 8005b18:	b480      	push	{r7}
 8005b1a:	b083      	sub	sp, #12
 8005b1c:	af00      	add	r7, sp, #0
 8005b1e:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_TxCpltCallback could be implemented in the user file
   */
}
 8005b20:	bf00      	nop
 8005b22:	370c      	adds	r7, #12
 8005b24:	46bd      	mov	sp, r7
 8005b26:	bc80      	pop	{r7}
 8005b28:	4770      	bx	lr

08005b2a <HAL_UART_RxCpltCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_RxCpltCallback(UART_HandleTypeDef *huart)
{
 8005b2a:	b480      	push	{r7}
 8005b2c:	b083      	sub	sp, #12
 8005b2e:	af00      	add	r7, sp, #0
 8005b30:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_RxCpltCallback could be implemented in the user file
   */
}
 8005b32:	bf00      	nop
 8005b34:	370c      	adds	r7, #12
 8005b36:	46bd      	mov	sp, r7
 8005b38:	bc80      	pop	{r7}
 8005b3a:	4770      	bx	lr

08005b3c <HAL_UART_ErrorCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_ErrorCallback(UART_HandleTypeDef *huart)
{
 8005b3c:	b480      	push	{r7}
 8005b3e:	b083      	sub	sp, #12
 8005b40:	af00      	add	r7, sp, #0
 8005b42:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_ErrorCallback could be implemented in the user file
   */
}
 8005b44:	bf00      	nop
 8005b46:	370c      	adds	r7, #12
 8005b48:	46bd      	mov	sp, r7
 8005b4a:	bc80      	pop	{r7}
 8005b4c:	4770      	bx	lr

08005b4e <HAL_UART_GetState>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL state
  */
HAL_UART_StateTypeDef HAL_UART_GetState(UART_HandleTypeDef *huart)
{
 8005b4e:	b480      	push	{r7}
 8005b50:	b085      	sub	sp, #20
 8005b52:	af00      	add	r7, sp, #0
 8005b54:	6078      	str	r0, [r7, #4]
  uint32_t temp1 = 0x00U, temp2 = 0x00U;
 8005b56:	2300      	movs	r3, #0
 8005b58:	60fb      	str	r3, [r7, #12]
 8005b5a:	2300      	movs	r3, #0
 8005b5c:	60bb      	str	r3, [r7, #8]
  temp1 = huart->gState;
 8005b5e:	687b      	ldr	r3, [r7, #4]
 8005b60:	f893 3039 	ldrb.w	r3, [r3, #57]	; 0x39
 8005b64:	b2db      	uxtb	r3, r3
 8005b66:	60fb      	str	r3, [r7, #12]
  temp2 = huart->RxState;
 8005b68:	687b      	ldr	r3, [r7, #4]
 8005b6a:	f893 303a 	ldrb.w	r3, [r3, #58]	; 0x3a
 8005b6e:	b2db      	uxtb	r3, r3
 8005b70:	60bb      	str	r3, [r7, #8]

  return (HAL_UART_StateTypeDef)(temp1 | temp2);
 8005b72:	68fb      	ldr	r3, [r7, #12]
 8005b74:	b2da      	uxtb	r2, r3
 8005b76:	68bb      	ldr	r3, [r7, #8]
 8005b78:	b2db      	uxtb	r3, r3
 8005b7a:	4313      	orrs	r3, r2
 8005b7c:	b2db      	uxtb	r3, r3
}
 8005b7e:	4618      	mov	r0, r3
 8005b80:	3714      	adds	r7, #20
 8005b82:	46bd      	mov	sp, r7
 8005b84:	bc80      	pop	{r7}
 8005b86:	4770      	bx	lr

08005b88 <UART_WaitOnFlagUntilTimeout>:
  * @param  Tickstart Tick start value
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status, uint32_t Tickstart, uint32_t Timeout)
{
 8005b88:	b580      	push	{r7, lr}
 8005b8a:	b084      	sub	sp, #16
 8005b8c:	af00      	add	r7, sp, #0
 8005b8e:	60f8      	str	r0, [r7, #12]
 8005b90:	60b9      	str	r1, [r7, #8]
 8005b92:	603b      	str	r3, [r7, #0]
 8005b94:	4613      	mov	r3, r2
 8005b96:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8005b98:	e02c      	b.n	8005bf4 <UART_WaitOnFlagUntilTimeout+0x6c>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8005b9a:	69bb      	ldr	r3, [r7, #24]
 8005b9c:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8005ba0:	d028      	beq.n	8005bf4 <UART_WaitOnFlagUntilTimeout+0x6c>
    {
      if ((Timeout == 0U) || ((HAL_GetTick() - Tickstart) > Timeout))
 8005ba2:	69bb      	ldr	r3, [r7, #24]
 8005ba4:	2b00      	cmp	r3, #0
 8005ba6:	d007      	beq.n	8005bb8 <UART_WaitOnFlagUntilTimeout+0x30>
 8005ba8:	f7fc fec0 	bl	800292c <HAL_GetTick>
 8005bac:	4602      	mov	r2, r0
 8005bae:	683b      	ldr	r3, [r7, #0]
 8005bb0:	1ad3      	subs	r3, r2, r3
 8005bb2:	69ba      	ldr	r2, [r7, #24]
 8005bb4:	429a      	cmp	r2, r3
 8005bb6:	d21d      	bcs.n	8005bf4 <UART_WaitOnFlagUntilTimeout+0x6c>
      {
        /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts for the interrupt process */
        CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_TXEIE));
 8005bb8:	68fb      	ldr	r3, [r7, #12]
 8005bba:	681b      	ldr	r3, [r3, #0]
 8005bbc:	68da      	ldr	r2, [r3, #12]
 8005bbe:	68fb      	ldr	r3, [r7, #12]
 8005bc0:	681b      	ldr	r3, [r3, #0]
 8005bc2:	f422 72d0 	bic.w	r2, r2, #416	; 0x1a0
 8005bc6:	60da      	str	r2, [r3, #12]
        CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8005bc8:	68fb      	ldr	r3, [r7, #12]
 8005bca:	681b      	ldr	r3, [r3, #0]
 8005bcc:	695a      	ldr	r2, [r3, #20]
 8005bce:	68fb      	ldr	r3, [r7, #12]
 8005bd0:	681b      	ldr	r3, [r3, #0]
 8005bd2:	f022 0201 	bic.w	r2, r2, #1
 8005bd6:	615a      	str	r2, [r3, #20]

        huart->gState  = HAL_UART_STATE_READY;
 8005bd8:	68fb      	ldr	r3, [r7, #12]
 8005bda:	2220      	movs	r2, #32
 8005bdc:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39
        huart->RxState = HAL_UART_STATE_READY;
 8005be0:	68fb      	ldr	r3, [r7, #12]
 8005be2:	2220      	movs	r2, #32
 8005be4:	f883 203a 	strb.w	r2, [r3, #58]	; 0x3a

        /* Process Unlocked */
        __HAL_UNLOCK(huart);
 8005be8:	68fb      	ldr	r3, [r7, #12]
 8005bea:	2200      	movs	r2, #0
 8005bec:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38

        return HAL_TIMEOUT;
 8005bf0:	2303      	movs	r3, #3
 8005bf2:	e00f      	b.n	8005c14 <UART_WaitOnFlagUntilTimeout+0x8c>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8005bf4:	68fb      	ldr	r3, [r7, #12]
 8005bf6:	681b      	ldr	r3, [r3, #0]
 8005bf8:	681a      	ldr	r2, [r3, #0]
 8005bfa:	68bb      	ldr	r3, [r7, #8]
 8005bfc:	4013      	ands	r3, r2
 8005bfe:	68ba      	ldr	r2, [r7, #8]
 8005c00:	429a      	cmp	r2, r3
 8005c02:	bf0c      	ite	eq
 8005c04:	2301      	moveq	r3, #1
 8005c06:	2300      	movne	r3, #0
 8005c08:	b2db      	uxtb	r3, r3
 8005c0a:	461a      	mov	r2, r3
 8005c0c:	79fb      	ldrb	r3, [r7, #7]
 8005c0e:	429a      	cmp	r2, r3
 8005c10:	d0c3      	beq.n	8005b9a <UART_WaitOnFlagUntilTimeout+0x12>
      }
    }
  }
  return HAL_OK;
 8005c12:	2300      	movs	r3, #0
}
 8005c14:	4618      	mov	r0, r3
 8005c16:	3710      	adds	r7, #16
 8005c18:	46bd      	mov	sp, r7
 8005c1a:	bd80      	pop	{r7, pc}

08005c1c <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 8005c1c:	b480      	push	{r7}
 8005c1e:	b083      	sub	sp, #12
 8005c20:	af00      	add	r7, sp, #0
 8005c22:	6078      	str	r0, [r7, #4]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
  CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 8005c24:	687b      	ldr	r3, [r7, #4]
 8005c26:	681b      	ldr	r3, [r3, #0]
 8005c28:	68da      	ldr	r2, [r3, #12]
 8005c2a:	687b      	ldr	r3, [r7, #4]
 8005c2c:	681b      	ldr	r3, [r3, #0]
 8005c2e:	f422 7290 	bic.w	r2, r2, #288	; 0x120
 8005c32:	60da      	str	r2, [r3, #12]
  CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8005c34:	687b      	ldr	r3, [r7, #4]
 8005c36:	681b      	ldr	r3, [r3, #0]
 8005c38:	695a      	ldr	r2, [r3, #20]
 8005c3a:	687b      	ldr	r3, [r7, #4]
 8005c3c:	681b      	ldr	r3, [r3, #0]
 8005c3e:	f022 0201 	bic.w	r2, r2, #1
 8005c42:	615a      	str	r2, [r3, #20]

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 8005c44:	687b      	ldr	r3, [r7, #4]
 8005c46:	2220      	movs	r2, #32
 8005c48:	f883 203a 	strb.w	r2, [r3, #58]	; 0x3a
}
 8005c4c:	bf00      	nop
 8005c4e:	370c      	adds	r7, #12
 8005c50:	46bd      	mov	sp, r7
 8005c52:	bc80      	pop	{r7}
 8005c54:	4770      	bx	lr

08005c56 <UART_DMAAbortOnError>:
  * @param  hdma  Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void UART_DMAAbortOnError(DMA_HandleTypeDef *hdma)
{
 8005c56:	b580      	push	{r7, lr}
 8005c58:	b084      	sub	sp, #16
 8005c5a:	af00      	add	r7, sp, #0
 8005c5c:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 8005c5e:	687b      	ldr	r3, [r7, #4]
 8005c60:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005c62:	60fb      	str	r3, [r7, #12]
  huart->RxXferCount = 0x00U;
 8005c64:	68fb      	ldr	r3, [r7, #12]
 8005c66:	2200      	movs	r2, #0
 8005c68:	85da      	strh	r2, [r3, #46]	; 0x2e
  huart->TxXferCount = 0x00U;
 8005c6a:	68fb      	ldr	r3, [r7, #12]
 8005c6c:	2200      	movs	r2, #0
 8005c6e:	84da      	strh	r2, [r3, #38]	; 0x26
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered error callback*/
  huart->ErrorCallback(huart);
#else
  /*Call legacy weak error callback*/
  HAL_UART_ErrorCallback(huart);
 8005c70:	68f8      	ldr	r0, [r7, #12]
 8005c72:	f7ff ff63 	bl	8005b3c <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 8005c76:	bf00      	nop
 8005c78:	3710      	adds	r7, #16
 8005c7a:	46bd      	mov	sp, r7
 8005c7c:	bd80      	pop	{r7, pc}

08005c7e <UART_Transmit_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_Transmit_IT(UART_HandleTypeDef *huart)
{
 8005c7e:	b480      	push	{r7}
 8005c80:	b085      	sub	sp, #20
 8005c82:	af00      	add	r7, sp, #0
 8005c84:	6078      	str	r0, [r7, #4]
  uint16_t *tmp;

  /* Check that a Tx process is ongoing */
  if (huart->gState == HAL_UART_STATE_BUSY_TX)
 8005c86:	687b      	ldr	r3, [r7, #4]
 8005c88:	f893 3039 	ldrb.w	r3, [r3, #57]	; 0x39
 8005c8c:	b2db      	uxtb	r3, r3
 8005c8e:	2b21      	cmp	r3, #33	; 0x21
 8005c90:	d13e      	bne.n	8005d10 <UART_Transmit_IT+0x92>
  {
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8005c92:	687b      	ldr	r3, [r7, #4]
 8005c94:	689b      	ldr	r3, [r3, #8]
 8005c96:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8005c9a:	d114      	bne.n	8005cc6 <UART_Transmit_IT+0x48>
 8005c9c:	687b      	ldr	r3, [r7, #4]
 8005c9e:	691b      	ldr	r3, [r3, #16]
 8005ca0:	2b00      	cmp	r3, #0
 8005ca2:	d110      	bne.n	8005cc6 <UART_Transmit_IT+0x48>
    {
      tmp = (uint16_t *) huart->pTxBuffPtr;
 8005ca4:	687b      	ldr	r3, [r7, #4]
 8005ca6:	6a1b      	ldr	r3, [r3, #32]
 8005ca8:	60fb      	str	r3, [r7, #12]
      huart->Instance->DR = (uint16_t)(*tmp & (uint16_t)0x01FF);
 8005caa:	68fb      	ldr	r3, [r7, #12]
 8005cac:	881b      	ldrh	r3, [r3, #0]
 8005cae:	461a      	mov	r2, r3
 8005cb0:	687b      	ldr	r3, [r7, #4]
 8005cb2:	681b      	ldr	r3, [r3, #0]
 8005cb4:	f3c2 0208 	ubfx	r2, r2, #0, #9
 8005cb8:	605a      	str	r2, [r3, #4]
      huart->pTxBuffPtr += 2U;
 8005cba:	687b      	ldr	r3, [r7, #4]
 8005cbc:	6a1b      	ldr	r3, [r3, #32]
 8005cbe:	1c9a      	adds	r2, r3, #2
 8005cc0:	687b      	ldr	r3, [r7, #4]
 8005cc2:	621a      	str	r2, [r3, #32]
 8005cc4:	e008      	b.n	8005cd8 <UART_Transmit_IT+0x5a>
    }
    else
    {
      huart->Instance->DR = (uint8_t)(*huart->pTxBuffPtr++ & (uint8_t)0x00FF);
 8005cc6:	687b      	ldr	r3, [r7, #4]
 8005cc8:	6a1b      	ldr	r3, [r3, #32]
 8005cca:	1c59      	adds	r1, r3, #1
 8005ccc:	687a      	ldr	r2, [r7, #4]
 8005cce:	6211      	str	r1, [r2, #32]
 8005cd0:	781a      	ldrb	r2, [r3, #0]
 8005cd2:	687b      	ldr	r3, [r7, #4]
 8005cd4:	681b      	ldr	r3, [r3, #0]
 8005cd6:	605a      	str	r2, [r3, #4]
    }

    if (--huart->TxXferCount == 0U)
 8005cd8:	687b      	ldr	r3, [r7, #4]
 8005cda:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
 8005cdc:	b29b      	uxth	r3, r3
 8005cde:	3b01      	subs	r3, #1
 8005ce0:	b29b      	uxth	r3, r3
 8005ce2:	687a      	ldr	r2, [r7, #4]
 8005ce4:	4619      	mov	r1, r3
 8005ce6:	84d1      	strh	r1, [r2, #38]	; 0x26
 8005ce8:	2b00      	cmp	r3, #0
 8005cea:	d10f      	bne.n	8005d0c <UART_Transmit_IT+0x8e>
    {
      /* Disable the UART Transmit Complete Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_TXE);
 8005cec:	687b      	ldr	r3, [r7, #4]
 8005cee:	681b      	ldr	r3, [r3, #0]
 8005cf0:	68da      	ldr	r2, [r3, #12]
 8005cf2:	687b      	ldr	r3, [r7, #4]
 8005cf4:	681b      	ldr	r3, [r3, #0]
 8005cf6:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 8005cfa:	60da      	str	r2, [r3, #12]

      /* Enable the UART Transmit Complete Interrupt */
      __HAL_UART_ENABLE_IT(huart, UART_IT_TC);
 8005cfc:	687b      	ldr	r3, [r7, #4]
 8005cfe:	681b      	ldr	r3, [r3, #0]
 8005d00:	68da      	ldr	r2, [r3, #12]
 8005d02:	687b      	ldr	r3, [r7, #4]
 8005d04:	681b      	ldr	r3, [r3, #0]
 8005d06:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 8005d0a:	60da      	str	r2, [r3, #12]
    }
    return HAL_OK;
 8005d0c:	2300      	movs	r3, #0
 8005d0e:	e000      	b.n	8005d12 <UART_Transmit_IT+0x94>
  }
  else
  {
    return HAL_BUSY;
 8005d10:	2302      	movs	r3, #2
  }
}
 8005d12:	4618      	mov	r0, r3
 8005d14:	3714      	adds	r7, #20
 8005d16:	46bd      	mov	sp, r7
 8005d18:	bc80      	pop	{r7}
 8005d1a:	4770      	bx	lr

08005d1c <UART_EndTransmit_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_EndTransmit_IT(UART_HandleTypeDef *huart)
{
 8005d1c:	b580      	push	{r7, lr}
 8005d1e:	b082      	sub	sp, #8
 8005d20:	af00      	add	r7, sp, #0
 8005d22:	6078      	str	r0, [r7, #4]
  /* Disable the UART Transmit Complete Interrupt */
  __HAL_UART_DISABLE_IT(huart, UART_IT_TC);
 8005d24:	687b      	ldr	r3, [r7, #4]
 8005d26:	681b      	ldr	r3, [r3, #0]
 8005d28:	68da      	ldr	r2, [r3, #12]
 8005d2a:	687b      	ldr	r3, [r7, #4]
 8005d2c:	681b      	ldr	r3, [r3, #0]
 8005d2e:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8005d32:	60da      	str	r2, [r3, #12]

  /* Tx process is ended, restore huart->gState to Ready */
  huart->gState = HAL_UART_STATE_READY;
 8005d34:	687b      	ldr	r3, [r7, #4]
 8005d36:	2220      	movs	r2, #32
 8005d38:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered Tx complete callback*/
  huart->TxCpltCallback(huart);
#else
  /*Call legacy weak Tx complete callback*/
  HAL_UART_TxCpltCallback(huart);
 8005d3c:	6878      	ldr	r0, [r7, #4]
 8005d3e:	f7ff feeb 	bl	8005b18 <HAL_UART_TxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */

  return HAL_OK;
 8005d42:	2300      	movs	r3, #0
}
 8005d44:	4618      	mov	r0, r3
 8005d46:	3708      	adds	r7, #8
 8005d48:	46bd      	mov	sp, r7
 8005d4a:	bd80      	pop	{r7, pc}

08005d4c <UART_Receive_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_Receive_IT(UART_HandleTypeDef *huart)
{
 8005d4c:	b580      	push	{r7, lr}
 8005d4e:	b084      	sub	sp, #16
 8005d50:	af00      	add	r7, sp, #0
 8005d52:	6078      	str	r0, [r7, #4]
  uint8_t  *pdata8bits;
  uint16_t *pdata16bits;

  /* Check that a Rx process is ongoing */
  if (huart->RxState == HAL_UART_STATE_BUSY_RX)
 8005d54:	687b      	ldr	r3, [r7, #4]
 8005d56:	f893 303a 	ldrb.w	r3, [r3, #58]	; 0x3a
 8005d5a:	b2db      	uxtb	r3, r3
 8005d5c:	2b22      	cmp	r3, #34	; 0x22
 8005d5e:	d170      	bne.n	8005e42 <UART_Receive_IT+0xf6>
  {
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8005d60:	687b      	ldr	r3, [r7, #4]
 8005d62:	689b      	ldr	r3, [r3, #8]
 8005d64:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8005d68:	d117      	bne.n	8005d9a <UART_Receive_IT+0x4e>
 8005d6a:	687b      	ldr	r3, [r7, #4]
 8005d6c:	691b      	ldr	r3, [r3, #16]
 8005d6e:	2b00      	cmp	r3, #0
 8005d70:	d113      	bne.n	8005d9a <UART_Receive_IT+0x4e>
    {
      pdata8bits  = NULL;
 8005d72:	2300      	movs	r3, #0
 8005d74:	60fb      	str	r3, [r7, #12]
      pdata16bits = (uint16_t *) huart->pRxBuffPtr;
 8005d76:	687b      	ldr	r3, [r7, #4]
 8005d78:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8005d7a:	60bb      	str	r3, [r7, #8]
      *pdata16bits = (uint16_t)(huart->Instance->DR & (uint16_t)0x01FF);
 8005d7c:	687b      	ldr	r3, [r7, #4]
 8005d7e:	681b      	ldr	r3, [r3, #0]
 8005d80:	685b      	ldr	r3, [r3, #4]
 8005d82:	b29b      	uxth	r3, r3
 8005d84:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8005d88:	b29a      	uxth	r2, r3
 8005d8a:	68bb      	ldr	r3, [r7, #8]
 8005d8c:	801a      	strh	r2, [r3, #0]
      huart->pRxBuffPtr += 2U;
 8005d8e:	687b      	ldr	r3, [r7, #4]
 8005d90:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8005d92:	1c9a      	adds	r2, r3, #2
 8005d94:	687b      	ldr	r3, [r7, #4]
 8005d96:	629a      	str	r2, [r3, #40]	; 0x28
 8005d98:	e026      	b.n	8005de8 <UART_Receive_IT+0x9c>
    }
    else
    {
      pdata8bits = (uint8_t *) huart->pRxBuffPtr;
 8005d9a:	687b      	ldr	r3, [r7, #4]
 8005d9c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8005d9e:	60fb      	str	r3, [r7, #12]
      pdata16bits  = NULL;
 8005da0:	2300      	movs	r3, #0
 8005da2:	60bb      	str	r3, [r7, #8]

      if ((huart->Init.WordLength == UART_WORDLENGTH_9B) || ((huart->Init.WordLength == UART_WORDLENGTH_8B) && (huart->Init.Parity == UART_PARITY_NONE)))
 8005da4:	687b      	ldr	r3, [r7, #4]
 8005da6:	689b      	ldr	r3, [r3, #8]
 8005da8:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8005dac:	d007      	beq.n	8005dbe <UART_Receive_IT+0x72>
 8005dae:	687b      	ldr	r3, [r7, #4]
 8005db0:	689b      	ldr	r3, [r3, #8]
 8005db2:	2b00      	cmp	r3, #0
 8005db4:	d10a      	bne.n	8005dcc <UART_Receive_IT+0x80>
 8005db6:	687b      	ldr	r3, [r7, #4]
 8005db8:	691b      	ldr	r3, [r3, #16]
 8005dba:	2b00      	cmp	r3, #0
 8005dbc:	d106      	bne.n	8005dcc <UART_Receive_IT+0x80>
      {
        *pdata8bits = (uint8_t)(huart->Instance->DR & (uint8_t)0x00FF);
 8005dbe:	687b      	ldr	r3, [r7, #4]
 8005dc0:	681b      	ldr	r3, [r3, #0]
 8005dc2:	685b      	ldr	r3, [r3, #4]
 8005dc4:	b2da      	uxtb	r2, r3
 8005dc6:	68fb      	ldr	r3, [r7, #12]
 8005dc8:	701a      	strb	r2, [r3, #0]
 8005dca:	e008      	b.n	8005dde <UART_Receive_IT+0x92>
      }
      else
      {
        *pdata8bits = (uint8_t)(huart->Instance->DR & (uint8_t)0x007F);
 8005dcc:	687b      	ldr	r3, [r7, #4]
 8005dce:	681b      	ldr	r3, [r3, #0]
 8005dd0:	685b      	ldr	r3, [r3, #4]
 8005dd2:	b2db      	uxtb	r3, r3
 8005dd4:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8005dd8:	b2da      	uxtb	r2, r3
 8005dda:	68fb      	ldr	r3, [r7, #12]
 8005ddc:	701a      	strb	r2, [r3, #0]
      }
      huart->pRxBuffPtr += 1U;
 8005dde:	687b      	ldr	r3, [r7, #4]
 8005de0:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8005de2:	1c5a      	adds	r2, r3, #1
 8005de4:	687b      	ldr	r3, [r7, #4]
 8005de6:	629a      	str	r2, [r3, #40]	; 0x28
    }

    if (--huart->RxXferCount == 0U)
 8005de8:	687b      	ldr	r3, [r7, #4]
 8005dea:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 8005dec:	b29b      	uxth	r3, r3
 8005dee:	3b01      	subs	r3, #1
 8005df0:	b29b      	uxth	r3, r3
 8005df2:	687a      	ldr	r2, [r7, #4]
 8005df4:	4619      	mov	r1, r3
 8005df6:	85d1      	strh	r1, [r2, #46]	; 0x2e
 8005df8:	2b00      	cmp	r3, #0
 8005dfa:	d120      	bne.n	8005e3e <UART_Receive_IT+0xf2>
    {
      /* Disable the UART Data Register not empty Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_RXNE);
 8005dfc:	687b      	ldr	r3, [r7, #4]
 8005dfe:	681b      	ldr	r3, [r3, #0]
 8005e00:	68da      	ldr	r2, [r3, #12]
 8005e02:	687b      	ldr	r3, [r7, #4]
 8005e04:	681b      	ldr	r3, [r3, #0]
 8005e06:	f022 0220 	bic.w	r2, r2, #32
 8005e0a:	60da      	str	r2, [r3, #12]

      /* Disable the UART Parity Error Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_PE);
 8005e0c:	687b      	ldr	r3, [r7, #4]
 8005e0e:	681b      	ldr	r3, [r3, #0]
 8005e10:	68da      	ldr	r2, [r3, #12]
 8005e12:	687b      	ldr	r3, [r7, #4]
 8005e14:	681b      	ldr	r3, [r3, #0]
 8005e16:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 8005e1a:	60da      	str	r2, [r3, #12]

      /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
      __HAL_UART_DISABLE_IT(huart, UART_IT_ERR);
 8005e1c:	687b      	ldr	r3, [r7, #4]
 8005e1e:	681b      	ldr	r3, [r3, #0]
 8005e20:	695a      	ldr	r2, [r3, #20]
 8005e22:	687b      	ldr	r3, [r7, #4]
 8005e24:	681b      	ldr	r3, [r3, #0]
 8005e26:	f022 0201 	bic.w	r2, r2, #1
 8005e2a:	615a      	str	r2, [r3, #20]

      /* Rx process is completed, restore huart->RxState to Ready */
      huart->RxState = HAL_UART_STATE_READY;
 8005e2c:	687b      	ldr	r3, [r7, #4]
 8005e2e:	2220      	movs	r2, #32
 8005e30:	f883 203a 	strb.w	r2, [r3, #58]	; 0x3a
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
      /*Call registered Rx complete callback*/
      huart->RxCpltCallback(huart);
#else
      /*Call legacy weak Rx complete callback*/
      HAL_UART_RxCpltCallback(huart);
 8005e34:	6878      	ldr	r0, [r7, #4]
 8005e36:	f7ff fe78 	bl	8005b2a <HAL_UART_RxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */

      return HAL_OK;
 8005e3a:	2300      	movs	r3, #0
 8005e3c:	e002      	b.n	8005e44 <UART_Receive_IT+0xf8>
    }
    return HAL_OK;
 8005e3e:	2300      	movs	r3, #0
 8005e40:	e000      	b.n	8005e44 <UART_Receive_IT+0xf8>
  }
  else
  {
    return HAL_BUSY;
 8005e42:	2302      	movs	r3, #2
  }
}
 8005e44:	4618      	mov	r0, r3
 8005e46:	3710      	adds	r7, #16
 8005e48:	46bd      	mov	sp, r7
 8005e4a:	bd80      	pop	{r7, pc}

08005e4c <UART_SetConfig>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_SetConfig(UART_HandleTypeDef *huart)
{
 8005e4c:	b580      	push	{r7, lr}
 8005e4e:	b084      	sub	sp, #16
 8005e50:	af00      	add	r7, sp, #0
 8005e52:	6078      	str	r0, [r7, #4]
  assert_param(IS_UART_MODE(huart->Init.Mode));

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits
     according to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 8005e54:	687b      	ldr	r3, [r7, #4]
 8005e56:	681b      	ldr	r3, [r3, #0]
 8005e58:	691b      	ldr	r3, [r3, #16]
 8005e5a:	f423 5140 	bic.w	r1, r3, #12288	; 0x3000
 8005e5e:	687b      	ldr	r3, [r7, #4]
 8005e60:	68da      	ldr	r2, [r3, #12]
 8005e62:	687b      	ldr	r3, [r7, #4]
 8005e64:	681b      	ldr	r3, [r3, #0]
 8005e66:	430a      	orrs	r2, r1
 8005e68:	611a      	str	r2, [r3, #16]
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling;
  MODIFY_REG(huart->Instance->CR1,
             (uint32_t)(USART_CR1_M | USART_CR1_PCE | USART_CR1_PS | USART_CR1_TE | USART_CR1_RE | USART_CR1_OVER8),
             tmpreg);
#else
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode;
 8005e6a:	687b      	ldr	r3, [r7, #4]
 8005e6c:	689a      	ldr	r2, [r3, #8]
 8005e6e:	687b      	ldr	r3, [r7, #4]
 8005e70:	691b      	ldr	r3, [r3, #16]
 8005e72:	431a      	orrs	r2, r3
 8005e74:	687b      	ldr	r3, [r7, #4]
 8005e76:	695b      	ldr	r3, [r3, #20]
 8005e78:	4313      	orrs	r3, r2
 8005e7a:	60bb      	str	r3, [r7, #8]
  MODIFY_REG(huart->Instance->CR1,
 8005e7c:	687b      	ldr	r3, [r7, #4]
 8005e7e:	681b      	ldr	r3, [r3, #0]
 8005e80:	68db      	ldr	r3, [r3, #12]
 8005e82:	f423 53b0 	bic.w	r3, r3, #5632	; 0x1600
 8005e86:	f023 030c 	bic.w	r3, r3, #12
 8005e8a:	687a      	ldr	r2, [r7, #4]
 8005e8c:	6812      	ldr	r2, [r2, #0]
 8005e8e:	68b9      	ldr	r1, [r7, #8]
 8005e90:	430b      	orrs	r3, r1
 8005e92:	60d3      	str	r3, [r2, #12]
             tmpreg);
#endif /* USART_CR1_OVER8 */

  /*-------------------------- USART CR3 Configuration -----------------------*/
  /* Configure the UART HFC: Set CTSE and RTSE bits according to huart->Init.HwFlowCtl value */
  MODIFY_REG(huart->Instance->CR3, (USART_CR3_RTSE | USART_CR3_CTSE), huart->Init.HwFlowCtl);
 8005e94:	687b      	ldr	r3, [r7, #4]
 8005e96:	681b      	ldr	r3, [r3, #0]
 8005e98:	695b      	ldr	r3, [r3, #20]
 8005e9a:	f423 7140 	bic.w	r1, r3, #768	; 0x300
 8005e9e:	687b      	ldr	r3, [r7, #4]
 8005ea0:	699a      	ldr	r2, [r3, #24]
 8005ea2:	687b      	ldr	r3, [r7, #4]
 8005ea4:	681b      	ldr	r3, [r3, #0]
 8005ea6:	430a      	orrs	r2, r1
 8005ea8:	615a      	str	r2, [r3, #20]


  if(huart->Instance == USART1)
 8005eaa:	687b      	ldr	r3, [r7, #4]
 8005eac:	681b      	ldr	r3, [r3, #0]
 8005eae:	4a2c      	ldr	r2, [pc, #176]	; (8005f60 <UART_SetConfig+0x114>)
 8005eb0:	4293      	cmp	r3, r2
 8005eb2:	d103      	bne.n	8005ebc <UART_SetConfig+0x70>
  {
    pclk = HAL_RCC_GetPCLK2Freq();
 8005eb4:	f7fe fc56 	bl	8004764 <HAL_RCC_GetPCLK2Freq>
 8005eb8:	60f8      	str	r0, [r7, #12]
 8005eba:	e002      	b.n	8005ec2 <UART_SetConfig+0x76>
  }
  else
  {
    pclk = HAL_RCC_GetPCLK1Freq();
 8005ebc:	f7fe fc3e 	bl	800473c <HAL_RCC_GetPCLK1Freq>
 8005ec0:	60f8      	str	r0, [r7, #12]
  else
  {
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
  }
#else
  huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
 8005ec2:	68fa      	ldr	r2, [r7, #12]
 8005ec4:	4613      	mov	r3, r2
 8005ec6:	009b      	lsls	r3, r3, #2
 8005ec8:	4413      	add	r3, r2
 8005eca:	009a      	lsls	r2, r3, #2
 8005ecc:	441a      	add	r2, r3
 8005ece:	687b      	ldr	r3, [r7, #4]
 8005ed0:	685b      	ldr	r3, [r3, #4]
 8005ed2:	009b      	lsls	r3, r3, #2
 8005ed4:	fbb2 f3f3 	udiv	r3, r2, r3
 8005ed8:	4a22      	ldr	r2, [pc, #136]	; (8005f64 <UART_SetConfig+0x118>)
 8005eda:	fba2 2303 	umull	r2, r3, r2, r3
 8005ede:	095b      	lsrs	r3, r3, #5
 8005ee0:	0119      	lsls	r1, r3, #4
 8005ee2:	68fa      	ldr	r2, [r7, #12]
 8005ee4:	4613      	mov	r3, r2
 8005ee6:	009b      	lsls	r3, r3, #2
 8005ee8:	4413      	add	r3, r2
 8005eea:	009a      	lsls	r2, r3, #2
 8005eec:	441a      	add	r2, r3
 8005eee:	687b      	ldr	r3, [r7, #4]
 8005ef0:	685b      	ldr	r3, [r3, #4]
 8005ef2:	009b      	lsls	r3, r3, #2
 8005ef4:	fbb2 f2f3 	udiv	r2, r2, r3
 8005ef8:	4b1a      	ldr	r3, [pc, #104]	; (8005f64 <UART_SetConfig+0x118>)
 8005efa:	fba3 0302 	umull	r0, r3, r3, r2
 8005efe:	095b      	lsrs	r3, r3, #5
 8005f00:	2064      	movs	r0, #100	; 0x64
 8005f02:	fb00 f303 	mul.w	r3, r0, r3
 8005f06:	1ad3      	subs	r3, r2, r3
 8005f08:	011b      	lsls	r3, r3, #4
 8005f0a:	3332      	adds	r3, #50	; 0x32
 8005f0c:	4a15      	ldr	r2, [pc, #84]	; (8005f64 <UART_SetConfig+0x118>)
 8005f0e:	fba2 2303 	umull	r2, r3, r2, r3
 8005f12:	095b      	lsrs	r3, r3, #5
 8005f14:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8005f18:	4419      	add	r1, r3
 8005f1a:	68fa      	ldr	r2, [r7, #12]
 8005f1c:	4613      	mov	r3, r2
 8005f1e:	009b      	lsls	r3, r3, #2
 8005f20:	4413      	add	r3, r2
 8005f22:	009a      	lsls	r2, r3, #2
 8005f24:	441a      	add	r2, r3
 8005f26:	687b      	ldr	r3, [r7, #4]
 8005f28:	685b      	ldr	r3, [r3, #4]
 8005f2a:	009b      	lsls	r3, r3, #2
 8005f2c:	fbb2 f2f3 	udiv	r2, r2, r3
 8005f30:	4b0c      	ldr	r3, [pc, #48]	; (8005f64 <UART_SetConfig+0x118>)
 8005f32:	fba3 0302 	umull	r0, r3, r3, r2
 8005f36:	095b      	lsrs	r3, r3, #5
 8005f38:	2064      	movs	r0, #100	; 0x64
 8005f3a:	fb00 f303 	mul.w	r3, r0, r3
 8005f3e:	1ad3      	subs	r3, r2, r3
 8005f40:	011b      	lsls	r3, r3, #4
 8005f42:	3332      	adds	r3, #50	; 0x32
 8005f44:	4a07      	ldr	r2, [pc, #28]	; (8005f64 <UART_SetConfig+0x118>)
 8005f46:	fba2 2303 	umull	r2, r3, r2, r3
 8005f4a:	095b      	lsrs	r3, r3, #5
 8005f4c:	f003 020f 	and.w	r2, r3, #15
 8005f50:	687b      	ldr	r3, [r7, #4]
 8005f52:	681b      	ldr	r3, [r3, #0]
 8005f54:	440a      	add	r2, r1
 8005f56:	609a      	str	r2, [r3, #8]
#endif /* USART_CR1_OVER8 */
}
 8005f58:	bf00      	nop
 8005f5a:	3710      	adds	r7, #16
 8005f5c:	46bd      	mov	sp, r7
 8005f5e:	bd80      	pop	{r7, pc}
 8005f60:	40013800 	.word	0x40013800
 8005f64:	51eb851f 	.word	0x51eb851f

08005f68 <__errno>:
 8005f68:	4b01      	ldr	r3, [pc, #4]	; (8005f70 <__errno+0x8>)
 8005f6a:	6818      	ldr	r0, [r3, #0]
 8005f6c:	4770      	bx	lr
 8005f6e:	bf00      	nop
 8005f70:	20000014 	.word	0x20000014

08005f74 <__libc_init_array>:
 8005f74:	b570      	push	{r4, r5, r6, lr}
 8005f76:	2500      	movs	r5, #0
 8005f78:	4e0c      	ldr	r6, [pc, #48]	; (8005fac <__libc_init_array+0x38>)
 8005f7a:	4c0d      	ldr	r4, [pc, #52]	; (8005fb0 <__libc_init_array+0x3c>)
 8005f7c:	1ba4      	subs	r4, r4, r6
 8005f7e:	10a4      	asrs	r4, r4, #2
 8005f80:	42a5      	cmp	r5, r4
 8005f82:	d109      	bne.n	8005f98 <__libc_init_array+0x24>
 8005f84:	f003 fd60 	bl	8009a48 <_init>
 8005f88:	2500      	movs	r5, #0
 8005f8a:	4e0a      	ldr	r6, [pc, #40]	; (8005fb4 <__libc_init_array+0x40>)
 8005f8c:	4c0a      	ldr	r4, [pc, #40]	; (8005fb8 <__libc_init_array+0x44>)
 8005f8e:	1ba4      	subs	r4, r4, r6
 8005f90:	10a4      	asrs	r4, r4, #2
 8005f92:	42a5      	cmp	r5, r4
 8005f94:	d105      	bne.n	8005fa2 <__libc_init_array+0x2e>
 8005f96:	bd70      	pop	{r4, r5, r6, pc}
 8005f98:	f856 3025 	ldr.w	r3, [r6, r5, lsl #2]
 8005f9c:	4798      	blx	r3
 8005f9e:	3501      	adds	r5, #1
 8005fa0:	e7ee      	b.n	8005f80 <__libc_init_array+0xc>
 8005fa2:	f856 3025 	ldr.w	r3, [r6, r5, lsl #2]
 8005fa6:	4798      	blx	r3
 8005fa8:	3501      	adds	r5, #1
 8005faa:	e7f2      	b.n	8005f92 <__libc_init_array+0x1e>
 8005fac:	08009de8 	.word	0x08009de8
 8005fb0:	08009de8 	.word	0x08009de8
 8005fb4:	08009de8 	.word	0x08009de8
 8005fb8:	08009dec 	.word	0x08009dec

08005fbc <malloc>:
 8005fbc:	4b02      	ldr	r3, [pc, #8]	; (8005fc8 <malloc+0xc>)
 8005fbe:	4601      	mov	r1, r0
 8005fc0:	6818      	ldr	r0, [r3, #0]
 8005fc2:	f000 b857 	b.w	8006074 <_malloc_r>
 8005fc6:	bf00      	nop
 8005fc8:	20000014 	.word	0x20000014

08005fcc <memset>:
 8005fcc:	4603      	mov	r3, r0
 8005fce:	4402      	add	r2, r0
 8005fd0:	4293      	cmp	r3, r2
 8005fd2:	d100      	bne.n	8005fd6 <memset+0xa>
 8005fd4:	4770      	bx	lr
 8005fd6:	f803 1b01 	strb.w	r1, [r3], #1
 8005fda:	e7f9      	b.n	8005fd0 <memset+0x4>

08005fdc <_free_r>:
 8005fdc:	b538      	push	{r3, r4, r5, lr}
 8005fde:	4605      	mov	r5, r0
 8005fe0:	2900      	cmp	r1, #0
 8005fe2:	d043      	beq.n	800606c <_free_r+0x90>
 8005fe4:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8005fe8:	1f0c      	subs	r4, r1, #4
 8005fea:	2b00      	cmp	r3, #0
 8005fec:	bfb8      	it	lt
 8005fee:	18e4      	addlt	r4, r4, r3
 8005ff0:	f002 ff69 	bl	8008ec6 <__malloc_lock>
 8005ff4:	4a1e      	ldr	r2, [pc, #120]	; (8006070 <_free_r+0x94>)
 8005ff6:	6813      	ldr	r3, [r2, #0]
 8005ff8:	4610      	mov	r0, r2
 8005ffa:	b933      	cbnz	r3, 800600a <_free_r+0x2e>
 8005ffc:	6063      	str	r3, [r4, #4]
 8005ffe:	6014      	str	r4, [r2, #0]
 8006000:	4628      	mov	r0, r5
 8006002:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 8006006:	f002 bf5f 	b.w	8008ec8 <__malloc_unlock>
 800600a:	42a3      	cmp	r3, r4
 800600c:	d90b      	bls.n	8006026 <_free_r+0x4a>
 800600e:	6821      	ldr	r1, [r4, #0]
 8006010:	1862      	adds	r2, r4, r1
 8006012:	4293      	cmp	r3, r2
 8006014:	bf01      	itttt	eq
 8006016:	681a      	ldreq	r2, [r3, #0]
 8006018:	685b      	ldreq	r3, [r3, #4]
 800601a:	1852      	addeq	r2, r2, r1
 800601c:	6022      	streq	r2, [r4, #0]
 800601e:	6063      	str	r3, [r4, #4]
 8006020:	6004      	str	r4, [r0, #0]
 8006022:	e7ed      	b.n	8006000 <_free_r+0x24>
 8006024:	4613      	mov	r3, r2
 8006026:	685a      	ldr	r2, [r3, #4]
 8006028:	b10a      	cbz	r2, 800602e <_free_r+0x52>
 800602a:	42a2      	cmp	r2, r4
 800602c:	d9fa      	bls.n	8006024 <_free_r+0x48>
 800602e:	6819      	ldr	r1, [r3, #0]
 8006030:	1858      	adds	r0, r3, r1
 8006032:	42a0      	cmp	r0, r4
 8006034:	d10b      	bne.n	800604e <_free_r+0x72>
 8006036:	6820      	ldr	r0, [r4, #0]
 8006038:	4401      	add	r1, r0
 800603a:	1858      	adds	r0, r3, r1
 800603c:	4282      	cmp	r2, r0
 800603e:	6019      	str	r1, [r3, #0]
 8006040:	d1de      	bne.n	8006000 <_free_r+0x24>
 8006042:	6810      	ldr	r0, [r2, #0]
 8006044:	6852      	ldr	r2, [r2, #4]
 8006046:	4401      	add	r1, r0
 8006048:	6019      	str	r1, [r3, #0]
 800604a:	605a      	str	r2, [r3, #4]
 800604c:	e7d8      	b.n	8006000 <_free_r+0x24>
 800604e:	d902      	bls.n	8006056 <_free_r+0x7a>
 8006050:	230c      	movs	r3, #12
 8006052:	602b      	str	r3, [r5, #0]
 8006054:	e7d4      	b.n	8006000 <_free_r+0x24>
 8006056:	6820      	ldr	r0, [r4, #0]
 8006058:	1821      	adds	r1, r4, r0
 800605a:	428a      	cmp	r2, r1
 800605c:	bf01      	itttt	eq
 800605e:	6811      	ldreq	r1, [r2, #0]
 8006060:	6852      	ldreq	r2, [r2, #4]
 8006062:	1809      	addeq	r1, r1, r0
 8006064:	6021      	streq	r1, [r4, #0]
 8006066:	6062      	str	r2, [r4, #4]
 8006068:	605c      	str	r4, [r3, #4]
 800606a:	e7c9      	b.n	8006000 <_free_r+0x24>
 800606c:	bd38      	pop	{r3, r4, r5, pc}
 800606e:	bf00      	nop
 8006070:	20000258 	.word	0x20000258

08006074 <_malloc_r>:
 8006074:	b570      	push	{r4, r5, r6, lr}
 8006076:	1ccd      	adds	r5, r1, #3
 8006078:	f025 0503 	bic.w	r5, r5, #3
 800607c:	3508      	adds	r5, #8
 800607e:	2d0c      	cmp	r5, #12
 8006080:	bf38      	it	cc
 8006082:	250c      	movcc	r5, #12
 8006084:	2d00      	cmp	r5, #0
 8006086:	4606      	mov	r6, r0
 8006088:	db01      	blt.n	800608e <_malloc_r+0x1a>
 800608a:	42a9      	cmp	r1, r5
 800608c:	d903      	bls.n	8006096 <_malloc_r+0x22>
 800608e:	230c      	movs	r3, #12
 8006090:	6033      	str	r3, [r6, #0]
 8006092:	2000      	movs	r0, #0
 8006094:	bd70      	pop	{r4, r5, r6, pc}
 8006096:	f002 ff16 	bl	8008ec6 <__malloc_lock>
 800609a:	4a21      	ldr	r2, [pc, #132]	; (8006120 <_malloc_r+0xac>)
 800609c:	6814      	ldr	r4, [r2, #0]
 800609e:	4621      	mov	r1, r4
 80060a0:	b991      	cbnz	r1, 80060c8 <_malloc_r+0x54>
 80060a2:	4c20      	ldr	r4, [pc, #128]	; (8006124 <_malloc_r+0xb0>)
 80060a4:	6823      	ldr	r3, [r4, #0]
 80060a6:	b91b      	cbnz	r3, 80060b0 <_malloc_r+0x3c>
 80060a8:	4630      	mov	r0, r6
 80060aa:	f000 fe6d 	bl	8006d88 <_sbrk_r>
 80060ae:	6020      	str	r0, [r4, #0]
 80060b0:	4629      	mov	r1, r5
 80060b2:	4630      	mov	r0, r6
 80060b4:	f000 fe68 	bl	8006d88 <_sbrk_r>
 80060b8:	1c43      	adds	r3, r0, #1
 80060ba:	d124      	bne.n	8006106 <_malloc_r+0x92>
 80060bc:	230c      	movs	r3, #12
 80060be:	4630      	mov	r0, r6
 80060c0:	6033      	str	r3, [r6, #0]
 80060c2:	f002 ff01 	bl	8008ec8 <__malloc_unlock>
 80060c6:	e7e4      	b.n	8006092 <_malloc_r+0x1e>
 80060c8:	680b      	ldr	r3, [r1, #0]
 80060ca:	1b5b      	subs	r3, r3, r5
 80060cc:	d418      	bmi.n	8006100 <_malloc_r+0x8c>
 80060ce:	2b0b      	cmp	r3, #11
 80060d0:	d90f      	bls.n	80060f2 <_malloc_r+0x7e>
 80060d2:	600b      	str	r3, [r1, #0]
 80060d4:	18cc      	adds	r4, r1, r3
 80060d6:	50cd      	str	r5, [r1, r3]
 80060d8:	4630      	mov	r0, r6
 80060da:	f002 fef5 	bl	8008ec8 <__malloc_unlock>
 80060de:	f104 000b 	add.w	r0, r4, #11
 80060e2:	1d23      	adds	r3, r4, #4
 80060e4:	f020 0007 	bic.w	r0, r0, #7
 80060e8:	1ac3      	subs	r3, r0, r3
 80060ea:	d0d3      	beq.n	8006094 <_malloc_r+0x20>
 80060ec:	425a      	negs	r2, r3
 80060ee:	50e2      	str	r2, [r4, r3]
 80060f0:	e7d0      	b.n	8006094 <_malloc_r+0x20>
 80060f2:	684b      	ldr	r3, [r1, #4]
 80060f4:	428c      	cmp	r4, r1
 80060f6:	bf16      	itet	ne
 80060f8:	6063      	strne	r3, [r4, #4]
 80060fa:	6013      	streq	r3, [r2, #0]
 80060fc:	460c      	movne	r4, r1
 80060fe:	e7eb      	b.n	80060d8 <_malloc_r+0x64>
 8006100:	460c      	mov	r4, r1
 8006102:	6849      	ldr	r1, [r1, #4]
 8006104:	e7cc      	b.n	80060a0 <_malloc_r+0x2c>
 8006106:	1cc4      	adds	r4, r0, #3
 8006108:	f024 0403 	bic.w	r4, r4, #3
 800610c:	42a0      	cmp	r0, r4
 800610e:	d005      	beq.n	800611c <_malloc_r+0xa8>
 8006110:	1a21      	subs	r1, r4, r0
 8006112:	4630      	mov	r0, r6
 8006114:	f000 fe38 	bl	8006d88 <_sbrk_r>
 8006118:	3001      	adds	r0, #1
 800611a:	d0cf      	beq.n	80060bc <_malloc_r+0x48>
 800611c:	6025      	str	r5, [r4, #0]
 800611e:	e7db      	b.n	80060d8 <_malloc_r+0x64>
 8006120:	20000258 	.word	0x20000258
 8006124:	2000025c 	.word	0x2000025c

08006128 <__cvt>:
 8006128:	2b00      	cmp	r3, #0
 800612a:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800612e:	461e      	mov	r6, r3
 8006130:	bfbb      	ittet	lt
 8006132:	f103 4300 	addlt.w	r3, r3, #2147483648	; 0x80000000
 8006136:	461e      	movlt	r6, r3
 8006138:	2300      	movge	r3, #0
 800613a:	232d      	movlt	r3, #45	; 0x2d
 800613c:	b088      	sub	sp, #32
 800613e:	9f14      	ldr	r7, [sp, #80]	; 0x50
 8006140:	e9dd 1a12 	ldrd	r1, sl, [sp, #72]	; 0x48
 8006144:	f027 0720 	bic.w	r7, r7, #32
 8006148:	2f46      	cmp	r7, #70	; 0x46
 800614a:	4614      	mov	r4, r2
 800614c:	9d10      	ldr	r5, [sp, #64]	; 0x40
 800614e:	700b      	strb	r3, [r1, #0]
 8006150:	d004      	beq.n	800615c <__cvt+0x34>
 8006152:	2f45      	cmp	r7, #69	; 0x45
 8006154:	d100      	bne.n	8006158 <__cvt+0x30>
 8006156:	3501      	adds	r5, #1
 8006158:	2302      	movs	r3, #2
 800615a:	e000      	b.n	800615e <__cvt+0x36>
 800615c:	2303      	movs	r3, #3
 800615e:	aa07      	add	r2, sp, #28
 8006160:	9204      	str	r2, [sp, #16]
 8006162:	aa06      	add	r2, sp, #24
 8006164:	e9cd a202 	strd	sl, r2, [sp, #8]
 8006168:	e9cd 3500 	strd	r3, r5, [sp]
 800616c:	4622      	mov	r2, r4
 800616e:	4633      	mov	r3, r6
 8006170:	f001 fd8e 	bl	8007c90 <_dtoa_r>
 8006174:	2f47      	cmp	r7, #71	; 0x47
 8006176:	4680      	mov	r8, r0
 8006178:	d102      	bne.n	8006180 <__cvt+0x58>
 800617a:	9b11      	ldr	r3, [sp, #68]	; 0x44
 800617c:	07db      	lsls	r3, r3, #31
 800617e:	d526      	bpl.n	80061ce <__cvt+0xa6>
 8006180:	2f46      	cmp	r7, #70	; 0x46
 8006182:	eb08 0905 	add.w	r9, r8, r5
 8006186:	d111      	bne.n	80061ac <__cvt+0x84>
 8006188:	f898 3000 	ldrb.w	r3, [r8]
 800618c:	2b30      	cmp	r3, #48	; 0x30
 800618e:	d10a      	bne.n	80061a6 <__cvt+0x7e>
 8006190:	2200      	movs	r2, #0
 8006192:	2300      	movs	r3, #0
 8006194:	4620      	mov	r0, r4
 8006196:	4631      	mov	r1, r6
 8006198:	f7fa fc06 	bl	80009a8 <__aeabi_dcmpeq>
 800619c:	b918      	cbnz	r0, 80061a6 <__cvt+0x7e>
 800619e:	f1c5 0501 	rsb	r5, r5, #1
 80061a2:	f8ca 5000 	str.w	r5, [sl]
 80061a6:	f8da 3000 	ldr.w	r3, [sl]
 80061aa:	4499      	add	r9, r3
 80061ac:	2200      	movs	r2, #0
 80061ae:	2300      	movs	r3, #0
 80061b0:	4620      	mov	r0, r4
 80061b2:	4631      	mov	r1, r6
 80061b4:	f7fa fbf8 	bl	80009a8 <__aeabi_dcmpeq>
 80061b8:	b938      	cbnz	r0, 80061ca <__cvt+0xa2>
 80061ba:	2230      	movs	r2, #48	; 0x30
 80061bc:	9b07      	ldr	r3, [sp, #28]
 80061be:	454b      	cmp	r3, r9
 80061c0:	d205      	bcs.n	80061ce <__cvt+0xa6>
 80061c2:	1c59      	adds	r1, r3, #1
 80061c4:	9107      	str	r1, [sp, #28]
 80061c6:	701a      	strb	r2, [r3, #0]
 80061c8:	e7f8      	b.n	80061bc <__cvt+0x94>
 80061ca:	f8cd 901c 	str.w	r9, [sp, #28]
 80061ce:	4640      	mov	r0, r8
 80061d0:	9b07      	ldr	r3, [sp, #28]
 80061d2:	9a15      	ldr	r2, [sp, #84]	; 0x54
 80061d4:	eba3 0308 	sub.w	r3, r3, r8
 80061d8:	6013      	str	r3, [r2, #0]
 80061da:	b008      	add	sp, #32
 80061dc:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}

080061e0 <__exponent>:
 80061e0:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 80061e2:	2900      	cmp	r1, #0
 80061e4:	bfb4      	ite	lt
 80061e6:	232d      	movlt	r3, #45	; 0x2d
 80061e8:	232b      	movge	r3, #43	; 0x2b
 80061ea:	4604      	mov	r4, r0
 80061ec:	bfb8      	it	lt
 80061ee:	4249      	neglt	r1, r1
 80061f0:	2909      	cmp	r1, #9
 80061f2:	f804 2b02 	strb.w	r2, [r4], #2
 80061f6:	7043      	strb	r3, [r0, #1]
 80061f8:	dd21      	ble.n	800623e <__exponent+0x5e>
 80061fa:	f10d 0307 	add.w	r3, sp, #7
 80061fe:	461f      	mov	r7, r3
 8006200:	260a      	movs	r6, #10
 8006202:	fb91 f5f6 	sdiv	r5, r1, r6
 8006206:	fb06 1115 	mls	r1, r6, r5, r1
 800620a:	2d09      	cmp	r5, #9
 800620c:	f101 0130 	add.w	r1, r1, #48	; 0x30
 8006210:	f803 1c01 	strb.w	r1, [r3, #-1]
 8006214:	f103 32ff 	add.w	r2, r3, #4294967295	; 0xffffffff
 8006218:	4629      	mov	r1, r5
 800621a:	dc09      	bgt.n	8006230 <__exponent+0x50>
 800621c:	3130      	adds	r1, #48	; 0x30
 800621e:	3b02      	subs	r3, #2
 8006220:	f802 1c01 	strb.w	r1, [r2, #-1]
 8006224:	42bb      	cmp	r3, r7
 8006226:	4622      	mov	r2, r4
 8006228:	d304      	bcc.n	8006234 <__exponent+0x54>
 800622a:	1a10      	subs	r0, r2, r0
 800622c:	b003      	add	sp, #12
 800622e:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8006230:	4613      	mov	r3, r2
 8006232:	e7e6      	b.n	8006202 <__exponent+0x22>
 8006234:	f813 2b01 	ldrb.w	r2, [r3], #1
 8006238:	f804 2b01 	strb.w	r2, [r4], #1
 800623c:	e7f2      	b.n	8006224 <__exponent+0x44>
 800623e:	2330      	movs	r3, #48	; 0x30
 8006240:	4419      	add	r1, r3
 8006242:	7083      	strb	r3, [r0, #2]
 8006244:	1d02      	adds	r2, r0, #4
 8006246:	70c1      	strb	r1, [r0, #3]
 8006248:	e7ef      	b.n	800622a <__exponent+0x4a>
	...

0800624c <_printf_float>:
 800624c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8006250:	b091      	sub	sp, #68	; 0x44
 8006252:	460c      	mov	r4, r1
 8006254:	9f1a      	ldr	r7, [sp, #104]	; 0x68
 8006256:	4693      	mov	fp, r2
 8006258:	461e      	mov	r6, r3
 800625a:	4605      	mov	r5, r0
 800625c:	f002 fdfa 	bl	8008e54 <_localeconv_r>
 8006260:	6803      	ldr	r3, [r0, #0]
 8006262:	4618      	mov	r0, r3
 8006264:	9309      	str	r3, [sp, #36]	; 0x24
 8006266:	f7f9 ff73 	bl	8000150 <strlen>
 800626a:	2300      	movs	r3, #0
 800626c:	930e      	str	r3, [sp, #56]	; 0x38
 800626e:	683b      	ldr	r3, [r7, #0]
 8006270:	900a      	str	r0, [sp, #40]	; 0x28
 8006272:	3307      	adds	r3, #7
 8006274:	f023 0307 	bic.w	r3, r3, #7
 8006278:	f103 0208 	add.w	r2, r3, #8
 800627c:	f894 8018 	ldrb.w	r8, [r4, #24]
 8006280:	f8d4 a000 	ldr.w	sl, [r4]
 8006284:	603a      	str	r2, [r7, #0]
 8006286:	e9d3 2300 	ldrd	r2, r3, [r3]
 800628a:	e9c4 2312 	strd	r2, r3, [r4, #72]	; 0x48
 800628e:	e9d4 7912 	ldrd	r7, r9, [r4, #72]	; 0x48
 8006292:	f029 4300 	bic.w	r3, r9, #2147483648	; 0x80000000
 8006296:	930b      	str	r3, [sp, #44]	; 0x2c
 8006298:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 800629c:	4ba6      	ldr	r3, [pc, #664]	; (8006538 <_printf_float+0x2ec>)
 800629e:	4638      	mov	r0, r7
 80062a0:	990b      	ldr	r1, [sp, #44]	; 0x2c
 80062a2:	f7fa fbb3 	bl	8000a0c <__aeabi_dcmpun>
 80062a6:	bb68      	cbnz	r0, 8006304 <_printf_float+0xb8>
 80062a8:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 80062ac:	4ba2      	ldr	r3, [pc, #648]	; (8006538 <_printf_float+0x2ec>)
 80062ae:	4638      	mov	r0, r7
 80062b0:	990b      	ldr	r1, [sp, #44]	; 0x2c
 80062b2:	f7fa fb8d 	bl	80009d0 <__aeabi_dcmple>
 80062b6:	bb28      	cbnz	r0, 8006304 <_printf_float+0xb8>
 80062b8:	2200      	movs	r2, #0
 80062ba:	2300      	movs	r3, #0
 80062bc:	4638      	mov	r0, r7
 80062be:	4649      	mov	r1, r9
 80062c0:	f7fa fb7c 	bl	80009bc <__aeabi_dcmplt>
 80062c4:	b110      	cbz	r0, 80062cc <_printf_float+0x80>
 80062c6:	232d      	movs	r3, #45	; 0x2d
 80062c8:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 80062cc:	4f9b      	ldr	r7, [pc, #620]	; (800653c <_printf_float+0x2f0>)
 80062ce:	4b9c      	ldr	r3, [pc, #624]	; (8006540 <_printf_float+0x2f4>)
 80062d0:	f1b8 0f47 	cmp.w	r8, #71	; 0x47
 80062d4:	bf98      	it	ls
 80062d6:	461f      	movls	r7, r3
 80062d8:	2303      	movs	r3, #3
 80062da:	f04f 0900 	mov.w	r9, #0
 80062de:	6123      	str	r3, [r4, #16]
 80062e0:	f02a 0304 	bic.w	r3, sl, #4
 80062e4:	6023      	str	r3, [r4, #0]
 80062e6:	9600      	str	r6, [sp, #0]
 80062e8:	465b      	mov	r3, fp
 80062ea:	aa0f      	add	r2, sp, #60	; 0x3c
 80062ec:	4621      	mov	r1, r4
 80062ee:	4628      	mov	r0, r5
 80062f0:	f000 f9e2 	bl	80066b8 <_printf_common>
 80062f4:	3001      	adds	r0, #1
 80062f6:	f040 8090 	bne.w	800641a <_printf_float+0x1ce>
 80062fa:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 80062fe:	b011      	add	sp, #68	; 0x44
 8006300:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8006304:	463a      	mov	r2, r7
 8006306:	464b      	mov	r3, r9
 8006308:	4638      	mov	r0, r7
 800630a:	4649      	mov	r1, r9
 800630c:	f7fa fb7e 	bl	8000a0c <__aeabi_dcmpun>
 8006310:	b110      	cbz	r0, 8006318 <_printf_float+0xcc>
 8006312:	4f8c      	ldr	r7, [pc, #560]	; (8006544 <_printf_float+0x2f8>)
 8006314:	4b8c      	ldr	r3, [pc, #560]	; (8006548 <_printf_float+0x2fc>)
 8006316:	e7db      	b.n	80062d0 <_printf_float+0x84>
 8006318:	6863      	ldr	r3, [r4, #4]
 800631a:	f44a 6280 	orr.w	r2, sl, #1024	; 0x400
 800631e:	1c59      	adds	r1, r3, #1
 8006320:	a80d      	add	r0, sp, #52	; 0x34
 8006322:	a90e      	add	r1, sp, #56	; 0x38
 8006324:	d140      	bne.n	80063a8 <_printf_float+0x15c>
 8006326:	2306      	movs	r3, #6
 8006328:	6063      	str	r3, [r4, #4]
 800632a:	f04f 0c00 	mov.w	ip, #0
 800632e:	f10d 0333 	add.w	r3, sp, #51	; 0x33
 8006332:	e9cd 2301 	strd	r2, r3, [sp, #4]
 8006336:	6863      	ldr	r3, [r4, #4]
 8006338:	6022      	str	r2, [r4, #0]
 800633a:	e9cd 0803 	strd	r0, r8, [sp, #12]
 800633e:	9300      	str	r3, [sp, #0]
 8006340:	463a      	mov	r2, r7
 8006342:	464b      	mov	r3, r9
 8006344:	e9cd 1c05 	strd	r1, ip, [sp, #20]
 8006348:	4628      	mov	r0, r5
 800634a:	f7ff feed 	bl	8006128 <__cvt>
 800634e:	f008 03df 	and.w	r3, r8, #223	; 0xdf
 8006352:	2b47      	cmp	r3, #71	; 0x47
 8006354:	4607      	mov	r7, r0
 8006356:	d109      	bne.n	800636c <_printf_float+0x120>
 8006358:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 800635a:	1cd8      	adds	r0, r3, #3
 800635c:	db02      	blt.n	8006364 <_printf_float+0x118>
 800635e:	6862      	ldr	r2, [r4, #4]
 8006360:	4293      	cmp	r3, r2
 8006362:	dd47      	ble.n	80063f4 <_printf_float+0x1a8>
 8006364:	f1a8 0802 	sub.w	r8, r8, #2
 8006368:	fa5f f888 	uxtb.w	r8, r8
 800636c:	f1b8 0f65 	cmp.w	r8, #101	; 0x65
 8006370:	990d      	ldr	r1, [sp, #52]	; 0x34
 8006372:	d824      	bhi.n	80063be <_printf_float+0x172>
 8006374:	3901      	subs	r1, #1
 8006376:	4642      	mov	r2, r8
 8006378:	f104 0050 	add.w	r0, r4, #80	; 0x50
 800637c:	910d      	str	r1, [sp, #52]	; 0x34
 800637e:	f7ff ff2f 	bl	80061e0 <__exponent>
 8006382:	9a0e      	ldr	r2, [sp, #56]	; 0x38
 8006384:	4681      	mov	r9, r0
 8006386:	1813      	adds	r3, r2, r0
 8006388:	2a01      	cmp	r2, #1
 800638a:	6123      	str	r3, [r4, #16]
 800638c:	dc02      	bgt.n	8006394 <_printf_float+0x148>
 800638e:	6822      	ldr	r2, [r4, #0]
 8006390:	07d1      	lsls	r1, r2, #31
 8006392:	d501      	bpl.n	8006398 <_printf_float+0x14c>
 8006394:	3301      	adds	r3, #1
 8006396:	6123      	str	r3, [r4, #16]
 8006398:	f89d 3033 	ldrb.w	r3, [sp, #51]	; 0x33
 800639c:	2b00      	cmp	r3, #0
 800639e:	d0a2      	beq.n	80062e6 <_printf_float+0x9a>
 80063a0:	232d      	movs	r3, #45	; 0x2d
 80063a2:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 80063a6:	e79e      	b.n	80062e6 <_printf_float+0x9a>
 80063a8:	f1b8 0f67 	cmp.w	r8, #103	; 0x67
 80063ac:	f000 816e 	beq.w	800668c <_printf_float+0x440>
 80063b0:	f1b8 0f47 	cmp.w	r8, #71	; 0x47
 80063b4:	d1b9      	bne.n	800632a <_printf_float+0xde>
 80063b6:	2b00      	cmp	r3, #0
 80063b8:	d1b7      	bne.n	800632a <_printf_float+0xde>
 80063ba:	2301      	movs	r3, #1
 80063bc:	e7b4      	b.n	8006328 <_printf_float+0xdc>
 80063be:	f1b8 0f66 	cmp.w	r8, #102	; 0x66
 80063c2:	d119      	bne.n	80063f8 <_printf_float+0x1ac>
 80063c4:	2900      	cmp	r1, #0
 80063c6:	6863      	ldr	r3, [r4, #4]
 80063c8:	dd0c      	ble.n	80063e4 <_printf_float+0x198>
 80063ca:	6121      	str	r1, [r4, #16]
 80063cc:	b913      	cbnz	r3, 80063d4 <_printf_float+0x188>
 80063ce:	6822      	ldr	r2, [r4, #0]
 80063d0:	07d2      	lsls	r2, r2, #31
 80063d2:	d502      	bpl.n	80063da <_printf_float+0x18e>
 80063d4:	3301      	adds	r3, #1
 80063d6:	440b      	add	r3, r1
 80063d8:	6123      	str	r3, [r4, #16]
 80063da:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 80063dc:	f04f 0900 	mov.w	r9, #0
 80063e0:	65a3      	str	r3, [r4, #88]	; 0x58
 80063e2:	e7d9      	b.n	8006398 <_printf_float+0x14c>
 80063e4:	b913      	cbnz	r3, 80063ec <_printf_float+0x1a0>
 80063e6:	6822      	ldr	r2, [r4, #0]
 80063e8:	07d0      	lsls	r0, r2, #31
 80063ea:	d501      	bpl.n	80063f0 <_printf_float+0x1a4>
 80063ec:	3302      	adds	r3, #2
 80063ee:	e7f3      	b.n	80063d8 <_printf_float+0x18c>
 80063f0:	2301      	movs	r3, #1
 80063f2:	e7f1      	b.n	80063d8 <_printf_float+0x18c>
 80063f4:	f04f 0867 	mov.w	r8, #103	; 0x67
 80063f8:	e9dd 320d 	ldrd	r3, r2, [sp, #52]	; 0x34
 80063fc:	4293      	cmp	r3, r2
 80063fe:	db05      	blt.n	800640c <_printf_float+0x1c0>
 8006400:	6822      	ldr	r2, [r4, #0]
 8006402:	6123      	str	r3, [r4, #16]
 8006404:	07d1      	lsls	r1, r2, #31
 8006406:	d5e8      	bpl.n	80063da <_printf_float+0x18e>
 8006408:	3301      	adds	r3, #1
 800640a:	e7e5      	b.n	80063d8 <_printf_float+0x18c>
 800640c:	2b00      	cmp	r3, #0
 800640e:	bfcc      	ite	gt
 8006410:	2301      	movgt	r3, #1
 8006412:	f1c3 0302 	rsble	r3, r3, #2
 8006416:	4413      	add	r3, r2
 8006418:	e7de      	b.n	80063d8 <_printf_float+0x18c>
 800641a:	6823      	ldr	r3, [r4, #0]
 800641c:	055a      	lsls	r2, r3, #21
 800641e:	d407      	bmi.n	8006430 <_printf_float+0x1e4>
 8006420:	6923      	ldr	r3, [r4, #16]
 8006422:	463a      	mov	r2, r7
 8006424:	4659      	mov	r1, fp
 8006426:	4628      	mov	r0, r5
 8006428:	47b0      	blx	r6
 800642a:	3001      	adds	r0, #1
 800642c:	d129      	bne.n	8006482 <_printf_float+0x236>
 800642e:	e764      	b.n	80062fa <_printf_float+0xae>
 8006430:	f1b8 0f65 	cmp.w	r8, #101	; 0x65
 8006434:	f240 80d7 	bls.w	80065e6 <_printf_float+0x39a>
 8006438:	e9d4 0112 	ldrd	r0, r1, [r4, #72]	; 0x48
 800643c:	2200      	movs	r2, #0
 800643e:	2300      	movs	r3, #0
 8006440:	f7fa fab2 	bl	80009a8 <__aeabi_dcmpeq>
 8006444:	b388      	cbz	r0, 80064aa <_printf_float+0x25e>
 8006446:	2301      	movs	r3, #1
 8006448:	4a40      	ldr	r2, [pc, #256]	; (800654c <_printf_float+0x300>)
 800644a:	4659      	mov	r1, fp
 800644c:	4628      	mov	r0, r5
 800644e:	47b0      	blx	r6
 8006450:	3001      	adds	r0, #1
 8006452:	f43f af52 	beq.w	80062fa <_printf_float+0xae>
 8006456:	e9dd 230d 	ldrd	r2, r3, [sp, #52]	; 0x34
 800645a:	429a      	cmp	r2, r3
 800645c:	db02      	blt.n	8006464 <_printf_float+0x218>
 800645e:	6823      	ldr	r3, [r4, #0]
 8006460:	07d8      	lsls	r0, r3, #31
 8006462:	d50e      	bpl.n	8006482 <_printf_float+0x236>
 8006464:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	; 0x24
 8006468:	4659      	mov	r1, fp
 800646a:	4628      	mov	r0, r5
 800646c:	47b0      	blx	r6
 800646e:	3001      	adds	r0, #1
 8006470:	f43f af43 	beq.w	80062fa <_printf_float+0xae>
 8006474:	2700      	movs	r7, #0
 8006476:	f104 081a 	add.w	r8, r4, #26
 800647a:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 800647c:	3b01      	subs	r3, #1
 800647e:	42bb      	cmp	r3, r7
 8006480:	dc09      	bgt.n	8006496 <_printf_float+0x24a>
 8006482:	6823      	ldr	r3, [r4, #0]
 8006484:	079f      	lsls	r7, r3, #30
 8006486:	f100 80fd 	bmi.w	8006684 <_printf_float+0x438>
 800648a:	68e0      	ldr	r0, [r4, #12]
 800648c:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 800648e:	4298      	cmp	r0, r3
 8006490:	bfb8      	it	lt
 8006492:	4618      	movlt	r0, r3
 8006494:	e733      	b.n	80062fe <_printf_float+0xb2>
 8006496:	2301      	movs	r3, #1
 8006498:	4642      	mov	r2, r8
 800649a:	4659      	mov	r1, fp
 800649c:	4628      	mov	r0, r5
 800649e:	47b0      	blx	r6
 80064a0:	3001      	adds	r0, #1
 80064a2:	f43f af2a 	beq.w	80062fa <_printf_float+0xae>
 80064a6:	3701      	adds	r7, #1
 80064a8:	e7e7      	b.n	800647a <_printf_float+0x22e>
 80064aa:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 80064ac:	2b00      	cmp	r3, #0
 80064ae:	dc2b      	bgt.n	8006508 <_printf_float+0x2bc>
 80064b0:	2301      	movs	r3, #1
 80064b2:	4a26      	ldr	r2, [pc, #152]	; (800654c <_printf_float+0x300>)
 80064b4:	4659      	mov	r1, fp
 80064b6:	4628      	mov	r0, r5
 80064b8:	47b0      	blx	r6
 80064ba:	3001      	adds	r0, #1
 80064bc:	f43f af1d 	beq.w	80062fa <_printf_float+0xae>
 80064c0:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 80064c2:	b923      	cbnz	r3, 80064ce <_printf_float+0x282>
 80064c4:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 80064c6:	b913      	cbnz	r3, 80064ce <_printf_float+0x282>
 80064c8:	6823      	ldr	r3, [r4, #0]
 80064ca:	07d9      	lsls	r1, r3, #31
 80064cc:	d5d9      	bpl.n	8006482 <_printf_float+0x236>
 80064ce:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	; 0x24
 80064d2:	4659      	mov	r1, fp
 80064d4:	4628      	mov	r0, r5
 80064d6:	47b0      	blx	r6
 80064d8:	3001      	adds	r0, #1
 80064da:	f43f af0e 	beq.w	80062fa <_printf_float+0xae>
 80064de:	f04f 0800 	mov.w	r8, #0
 80064e2:	f104 091a 	add.w	r9, r4, #26
 80064e6:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 80064e8:	425b      	negs	r3, r3
 80064ea:	4543      	cmp	r3, r8
 80064ec:	dc01      	bgt.n	80064f2 <_printf_float+0x2a6>
 80064ee:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 80064f0:	e797      	b.n	8006422 <_printf_float+0x1d6>
 80064f2:	2301      	movs	r3, #1
 80064f4:	464a      	mov	r2, r9
 80064f6:	4659      	mov	r1, fp
 80064f8:	4628      	mov	r0, r5
 80064fa:	47b0      	blx	r6
 80064fc:	3001      	adds	r0, #1
 80064fe:	f43f aefc 	beq.w	80062fa <_printf_float+0xae>
 8006502:	f108 0801 	add.w	r8, r8, #1
 8006506:	e7ee      	b.n	80064e6 <_printf_float+0x29a>
 8006508:	9a0e      	ldr	r2, [sp, #56]	; 0x38
 800650a:	6da3      	ldr	r3, [r4, #88]	; 0x58
 800650c:	429a      	cmp	r2, r3
 800650e:	bfa8      	it	ge
 8006510:	461a      	movge	r2, r3
 8006512:	2a00      	cmp	r2, #0
 8006514:	4690      	mov	r8, r2
 8006516:	dd07      	ble.n	8006528 <_printf_float+0x2dc>
 8006518:	4613      	mov	r3, r2
 800651a:	4659      	mov	r1, fp
 800651c:	463a      	mov	r2, r7
 800651e:	4628      	mov	r0, r5
 8006520:	47b0      	blx	r6
 8006522:	3001      	adds	r0, #1
 8006524:	f43f aee9 	beq.w	80062fa <_printf_float+0xae>
 8006528:	f104 031a 	add.w	r3, r4, #26
 800652c:	f04f 0a00 	mov.w	sl, #0
 8006530:	ea28 78e8 	bic.w	r8, r8, r8, asr #31
 8006534:	930b      	str	r3, [sp, #44]	; 0x2c
 8006536:	e015      	b.n	8006564 <_printf_float+0x318>
 8006538:	7fefffff 	.word	0x7fefffff
 800653c:	08009b38 	.word	0x08009b38
 8006540:	08009b34 	.word	0x08009b34
 8006544:	08009b40 	.word	0x08009b40
 8006548:	08009b3c 	.word	0x08009b3c
 800654c:	08009b44 	.word	0x08009b44
 8006550:	2301      	movs	r3, #1
 8006552:	9a0b      	ldr	r2, [sp, #44]	; 0x2c
 8006554:	4659      	mov	r1, fp
 8006556:	4628      	mov	r0, r5
 8006558:	47b0      	blx	r6
 800655a:	3001      	adds	r0, #1
 800655c:	f43f aecd 	beq.w	80062fa <_printf_float+0xae>
 8006560:	f10a 0a01 	add.w	sl, sl, #1
 8006564:	f8d4 9058 	ldr.w	r9, [r4, #88]	; 0x58
 8006568:	eba9 0308 	sub.w	r3, r9, r8
 800656c:	4553      	cmp	r3, sl
 800656e:	dcef      	bgt.n	8006550 <_printf_float+0x304>
 8006570:	e9dd 230d 	ldrd	r2, r3, [sp, #52]	; 0x34
 8006574:	429a      	cmp	r2, r3
 8006576:	444f      	add	r7, r9
 8006578:	db14      	blt.n	80065a4 <_printf_float+0x358>
 800657a:	6823      	ldr	r3, [r4, #0]
 800657c:	07da      	lsls	r2, r3, #31
 800657e:	d411      	bmi.n	80065a4 <_printf_float+0x358>
 8006580:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 8006582:	990d      	ldr	r1, [sp, #52]	; 0x34
 8006584:	eba3 0209 	sub.w	r2, r3, r9
 8006588:	eba3 0901 	sub.w	r9, r3, r1
 800658c:	4591      	cmp	r9, r2
 800658e:	bfa8      	it	ge
 8006590:	4691      	movge	r9, r2
 8006592:	f1b9 0f00 	cmp.w	r9, #0
 8006596:	dc0d      	bgt.n	80065b4 <_printf_float+0x368>
 8006598:	2700      	movs	r7, #0
 800659a:	ea29 79e9 	bic.w	r9, r9, r9, asr #31
 800659e:	f104 081a 	add.w	r8, r4, #26
 80065a2:	e018      	b.n	80065d6 <_printf_float+0x38a>
 80065a4:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	; 0x24
 80065a8:	4659      	mov	r1, fp
 80065aa:	4628      	mov	r0, r5
 80065ac:	47b0      	blx	r6
 80065ae:	3001      	adds	r0, #1
 80065b0:	d1e6      	bne.n	8006580 <_printf_float+0x334>
 80065b2:	e6a2      	b.n	80062fa <_printf_float+0xae>
 80065b4:	464b      	mov	r3, r9
 80065b6:	463a      	mov	r2, r7
 80065b8:	4659      	mov	r1, fp
 80065ba:	4628      	mov	r0, r5
 80065bc:	47b0      	blx	r6
 80065be:	3001      	adds	r0, #1
 80065c0:	d1ea      	bne.n	8006598 <_printf_float+0x34c>
 80065c2:	e69a      	b.n	80062fa <_printf_float+0xae>
 80065c4:	2301      	movs	r3, #1
 80065c6:	4642      	mov	r2, r8
 80065c8:	4659      	mov	r1, fp
 80065ca:	4628      	mov	r0, r5
 80065cc:	47b0      	blx	r6
 80065ce:	3001      	adds	r0, #1
 80065d0:	f43f ae93 	beq.w	80062fa <_printf_float+0xae>
 80065d4:	3701      	adds	r7, #1
 80065d6:	e9dd 230d 	ldrd	r2, r3, [sp, #52]	; 0x34
 80065da:	1a9b      	subs	r3, r3, r2
 80065dc:	eba3 0309 	sub.w	r3, r3, r9
 80065e0:	42bb      	cmp	r3, r7
 80065e2:	dcef      	bgt.n	80065c4 <_printf_float+0x378>
 80065e4:	e74d      	b.n	8006482 <_printf_float+0x236>
 80065e6:	9a0e      	ldr	r2, [sp, #56]	; 0x38
 80065e8:	2a01      	cmp	r2, #1
 80065ea:	dc01      	bgt.n	80065f0 <_printf_float+0x3a4>
 80065ec:	07db      	lsls	r3, r3, #31
 80065ee:	d538      	bpl.n	8006662 <_printf_float+0x416>
 80065f0:	2301      	movs	r3, #1
 80065f2:	463a      	mov	r2, r7
 80065f4:	4659      	mov	r1, fp
 80065f6:	4628      	mov	r0, r5
 80065f8:	47b0      	blx	r6
 80065fa:	3001      	adds	r0, #1
 80065fc:	f43f ae7d 	beq.w	80062fa <_printf_float+0xae>
 8006600:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	; 0x24
 8006604:	4659      	mov	r1, fp
 8006606:	4628      	mov	r0, r5
 8006608:	47b0      	blx	r6
 800660a:	3001      	adds	r0, #1
 800660c:	f107 0701 	add.w	r7, r7, #1
 8006610:	f43f ae73 	beq.w	80062fa <_printf_float+0xae>
 8006614:	e9d4 0112 	ldrd	r0, r1, [r4, #72]	; 0x48
 8006618:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 800661a:	2200      	movs	r2, #0
 800661c:	f103 38ff 	add.w	r8, r3, #4294967295	; 0xffffffff
 8006620:	2300      	movs	r3, #0
 8006622:	f7fa f9c1 	bl	80009a8 <__aeabi_dcmpeq>
 8006626:	b9c0      	cbnz	r0, 800665a <_printf_float+0x40e>
 8006628:	4643      	mov	r3, r8
 800662a:	463a      	mov	r2, r7
 800662c:	4659      	mov	r1, fp
 800662e:	4628      	mov	r0, r5
 8006630:	47b0      	blx	r6
 8006632:	3001      	adds	r0, #1
 8006634:	d10d      	bne.n	8006652 <_printf_float+0x406>
 8006636:	e660      	b.n	80062fa <_printf_float+0xae>
 8006638:	2301      	movs	r3, #1
 800663a:	4642      	mov	r2, r8
 800663c:	4659      	mov	r1, fp
 800663e:	4628      	mov	r0, r5
 8006640:	47b0      	blx	r6
 8006642:	3001      	adds	r0, #1
 8006644:	f43f ae59 	beq.w	80062fa <_printf_float+0xae>
 8006648:	3701      	adds	r7, #1
 800664a:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 800664c:	3b01      	subs	r3, #1
 800664e:	42bb      	cmp	r3, r7
 8006650:	dcf2      	bgt.n	8006638 <_printf_float+0x3ec>
 8006652:	464b      	mov	r3, r9
 8006654:	f104 0250 	add.w	r2, r4, #80	; 0x50
 8006658:	e6e4      	b.n	8006424 <_printf_float+0x1d8>
 800665a:	2700      	movs	r7, #0
 800665c:	f104 081a 	add.w	r8, r4, #26
 8006660:	e7f3      	b.n	800664a <_printf_float+0x3fe>
 8006662:	2301      	movs	r3, #1
 8006664:	e7e1      	b.n	800662a <_printf_float+0x3de>
 8006666:	2301      	movs	r3, #1
 8006668:	4642      	mov	r2, r8
 800666a:	4659      	mov	r1, fp
 800666c:	4628      	mov	r0, r5
 800666e:	47b0      	blx	r6
 8006670:	3001      	adds	r0, #1
 8006672:	f43f ae42 	beq.w	80062fa <_printf_float+0xae>
 8006676:	3701      	adds	r7, #1
 8006678:	68e3      	ldr	r3, [r4, #12]
 800667a:	9a0f      	ldr	r2, [sp, #60]	; 0x3c
 800667c:	1a9b      	subs	r3, r3, r2
 800667e:	42bb      	cmp	r3, r7
 8006680:	dcf1      	bgt.n	8006666 <_printf_float+0x41a>
 8006682:	e702      	b.n	800648a <_printf_float+0x23e>
 8006684:	2700      	movs	r7, #0
 8006686:	f104 0819 	add.w	r8, r4, #25
 800668a:	e7f5      	b.n	8006678 <_printf_float+0x42c>
 800668c:	2b00      	cmp	r3, #0
 800668e:	f43f ae94 	beq.w	80063ba <_printf_float+0x16e>
 8006692:	f04f 0c00 	mov.w	ip, #0
 8006696:	e9cd 1c05 	strd	r1, ip, [sp, #20]
 800669a:	f10d 0133 	add.w	r1, sp, #51	; 0x33
 800669e:	6022      	str	r2, [r4, #0]
 80066a0:	e9cd 0803 	strd	r0, r8, [sp, #12]
 80066a4:	e9cd 2101 	strd	r2, r1, [sp, #4]
 80066a8:	9300      	str	r3, [sp, #0]
 80066aa:	463a      	mov	r2, r7
 80066ac:	464b      	mov	r3, r9
 80066ae:	4628      	mov	r0, r5
 80066b0:	f7ff fd3a 	bl	8006128 <__cvt>
 80066b4:	4607      	mov	r7, r0
 80066b6:	e64f      	b.n	8006358 <_printf_float+0x10c>

080066b8 <_printf_common>:
 80066b8:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80066bc:	4691      	mov	r9, r2
 80066be:	461f      	mov	r7, r3
 80066c0:	688a      	ldr	r2, [r1, #8]
 80066c2:	690b      	ldr	r3, [r1, #16]
 80066c4:	4606      	mov	r6, r0
 80066c6:	4293      	cmp	r3, r2
 80066c8:	bfb8      	it	lt
 80066ca:	4613      	movlt	r3, r2
 80066cc:	f8c9 3000 	str.w	r3, [r9]
 80066d0:	f891 2043 	ldrb.w	r2, [r1, #67]	; 0x43
 80066d4:	460c      	mov	r4, r1
 80066d6:	f8dd 8020 	ldr.w	r8, [sp, #32]
 80066da:	b112      	cbz	r2, 80066e2 <_printf_common+0x2a>
 80066dc:	3301      	adds	r3, #1
 80066de:	f8c9 3000 	str.w	r3, [r9]
 80066e2:	6823      	ldr	r3, [r4, #0]
 80066e4:	0699      	lsls	r1, r3, #26
 80066e6:	bf42      	ittt	mi
 80066e8:	f8d9 3000 	ldrmi.w	r3, [r9]
 80066ec:	3302      	addmi	r3, #2
 80066ee:	f8c9 3000 	strmi.w	r3, [r9]
 80066f2:	6825      	ldr	r5, [r4, #0]
 80066f4:	f015 0506 	ands.w	r5, r5, #6
 80066f8:	d107      	bne.n	800670a <_printf_common+0x52>
 80066fa:	f104 0a19 	add.w	sl, r4, #25
 80066fe:	68e3      	ldr	r3, [r4, #12]
 8006700:	f8d9 2000 	ldr.w	r2, [r9]
 8006704:	1a9b      	subs	r3, r3, r2
 8006706:	42ab      	cmp	r3, r5
 8006708:	dc29      	bgt.n	800675e <_printf_common+0xa6>
 800670a:	f894 3043 	ldrb.w	r3, [r4, #67]	; 0x43
 800670e:	6822      	ldr	r2, [r4, #0]
 8006710:	3300      	adds	r3, #0
 8006712:	bf18      	it	ne
 8006714:	2301      	movne	r3, #1
 8006716:	0692      	lsls	r2, r2, #26
 8006718:	d42e      	bmi.n	8006778 <_printf_common+0xc0>
 800671a:	f104 0243 	add.w	r2, r4, #67	; 0x43
 800671e:	4639      	mov	r1, r7
 8006720:	4630      	mov	r0, r6
 8006722:	47c0      	blx	r8
 8006724:	3001      	adds	r0, #1
 8006726:	d021      	beq.n	800676c <_printf_common+0xb4>
 8006728:	6823      	ldr	r3, [r4, #0]
 800672a:	68e5      	ldr	r5, [r4, #12]
 800672c:	f003 0306 	and.w	r3, r3, #6
 8006730:	2b04      	cmp	r3, #4
 8006732:	bf18      	it	ne
 8006734:	2500      	movne	r5, #0
 8006736:	f8d9 2000 	ldr.w	r2, [r9]
 800673a:	f04f 0900 	mov.w	r9, #0
 800673e:	bf08      	it	eq
 8006740:	1aad      	subeq	r5, r5, r2
 8006742:	68a3      	ldr	r3, [r4, #8]
 8006744:	6922      	ldr	r2, [r4, #16]
 8006746:	bf08      	it	eq
 8006748:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 800674c:	4293      	cmp	r3, r2
 800674e:	bfc4      	itt	gt
 8006750:	1a9b      	subgt	r3, r3, r2
 8006752:	18ed      	addgt	r5, r5, r3
 8006754:	341a      	adds	r4, #26
 8006756:	454d      	cmp	r5, r9
 8006758:	d11a      	bne.n	8006790 <_printf_common+0xd8>
 800675a:	2000      	movs	r0, #0
 800675c:	e008      	b.n	8006770 <_printf_common+0xb8>
 800675e:	2301      	movs	r3, #1
 8006760:	4652      	mov	r2, sl
 8006762:	4639      	mov	r1, r7
 8006764:	4630      	mov	r0, r6
 8006766:	47c0      	blx	r8
 8006768:	3001      	adds	r0, #1
 800676a:	d103      	bne.n	8006774 <_printf_common+0xbc>
 800676c:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8006770:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8006774:	3501      	adds	r5, #1
 8006776:	e7c2      	b.n	80066fe <_printf_common+0x46>
 8006778:	2030      	movs	r0, #48	; 0x30
 800677a:	18e1      	adds	r1, r4, r3
 800677c:	f881 0043 	strb.w	r0, [r1, #67]	; 0x43
 8006780:	1c5a      	adds	r2, r3, #1
 8006782:	f894 1045 	ldrb.w	r1, [r4, #69]	; 0x45
 8006786:	4422      	add	r2, r4
 8006788:	3302      	adds	r3, #2
 800678a:	f882 1043 	strb.w	r1, [r2, #67]	; 0x43
 800678e:	e7c4      	b.n	800671a <_printf_common+0x62>
 8006790:	2301      	movs	r3, #1
 8006792:	4622      	mov	r2, r4
 8006794:	4639      	mov	r1, r7
 8006796:	4630      	mov	r0, r6
 8006798:	47c0      	blx	r8
 800679a:	3001      	adds	r0, #1
 800679c:	d0e6      	beq.n	800676c <_printf_common+0xb4>
 800679e:	f109 0901 	add.w	r9, r9, #1
 80067a2:	e7d8      	b.n	8006756 <_printf_common+0x9e>

080067a4 <_printf_i>:
 80067a4:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 80067a8:	f101 0c43 	add.w	ip, r1, #67	; 0x43
 80067ac:	460c      	mov	r4, r1
 80067ae:	7e09      	ldrb	r1, [r1, #24]
 80067b0:	b085      	sub	sp, #20
 80067b2:	296e      	cmp	r1, #110	; 0x6e
 80067b4:	4617      	mov	r7, r2
 80067b6:	4606      	mov	r6, r0
 80067b8:	4698      	mov	r8, r3
 80067ba:	9a0c      	ldr	r2, [sp, #48]	; 0x30
 80067bc:	f000 80b3 	beq.w	8006926 <_printf_i+0x182>
 80067c0:	d822      	bhi.n	8006808 <_printf_i+0x64>
 80067c2:	2963      	cmp	r1, #99	; 0x63
 80067c4:	d036      	beq.n	8006834 <_printf_i+0x90>
 80067c6:	d80a      	bhi.n	80067de <_printf_i+0x3a>
 80067c8:	2900      	cmp	r1, #0
 80067ca:	f000 80b9 	beq.w	8006940 <_printf_i+0x19c>
 80067ce:	2958      	cmp	r1, #88	; 0x58
 80067d0:	f000 8083 	beq.w	80068da <_printf_i+0x136>
 80067d4:	f104 0542 	add.w	r5, r4, #66	; 0x42
 80067d8:	f884 1042 	strb.w	r1, [r4, #66]	; 0x42
 80067dc:	e032      	b.n	8006844 <_printf_i+0xa0>
 80067de:	2964      	cmp	r1, #100	; 0x64
 80067e0:	d001      	beq.n	80067e6 <_printf_i+0x42>
 80067e2:	2969      	cmp	r1, #105	; 0x69
 80067e4:	d1f6      	bne.n	80067d4 <_printf_i+0x30>
 80067e6:	6820      	ldr	r0, [r4, #0]
 80067e8:	6813      	ldr	r3, [r2, #0]
 80067ea:	0605      	lsls	r5, r0, #24
 80067ec:	f103 0104 	add.w	r1, r3, #4
 80067f0:	d52a      	bpl.n	8006848 <_printf_i+0xa4>
 80067f2:	681b      	ldr	r3, [r3, #0]
 80067f4:	6011      	str	r1, [r2, #0]
 80067f6:	2b00      	cmp	r3, #0
 80067f8:	da03      	bge.n	8006802 <_printf_i+0x5e>
 80067fa:	222d      	movs	r2, #45	; 0x2d
 80067fc:	425b      	negs	r3, r3
 80067fe:	f884 2043 	strb.w	r2, [r4, #67]	; 0x43
 8006802:	486f      	ldr	r0, [pc, #444]	; (80069c0 <_printf_i+0x21c>)
 8006804:	220a      	movs	r2, #10
 8006806:	e039      	b.n	800687c <_printf_i+0xd8>
 8006808:	2973      	cmp	r1, #115	; 0x73
 800680a:	f000 809d 	beq.w	8006948 <_printf_i+0x1a4>
 800680e:	d808      	bhi.n	8006822 <_printf_i+0x7e>
 8006810:	296f      	cmp	r1, #111	; 0x6f
 8006812:	d020      	beq.n	8006856 <_printf_i+0xb2>
 8006814:	2970      	cmp	r1, #112	; 0x70
 8006816:	d1dd      	bne.n	80067d4 <_printf_i+0x30>
 8006818:	6823      	ldr	r3, [r4, #0]
 800681a:	f043 0320 	orr.w	r3, r3, #32
 800681e:	6023      	str	r3, [r4, #0]
 8006820:	e003      	b.n	800682a <_printf_i+0x86>
 8006822:	2975      	cmp	r1, #117	; 0x75
 8006824:	d017      	beq.n	8006856 <_printf_i+0xb2>
 8006826:	2978      	cmp	r1, #120	; 0x78
 8006828:	d1d4      	bne.n	80067d4 <_printf_i+0x30>
 800682a:	2378      	movs	r3, #120	; 0x78
 800682c:	4865      	ldr	r0, [pc, #404]	; (80069c4 <_printf_i+0x220>)
 800682e:	f884 3045 	strb.w	r3, [r4, #69]	; 0x45
 8006832:	e055      	b.n	80068e0 <_printf_i+0x13c>
 8006834:	6813      	ldr	r3, [r2, #0]
 8006836:	f104 0542 	add.w	r5, r4, #66	; 0x42
 800683a:	1d19      	adds	r1, r3, #4
 800683c:	681b      	ldr	r3, [r3, #0]
 800683e:	6011      	str	r1, [r2, #0]
 8006840:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 8006844:	2301      	movs	r3, #1
 8006846:	e08c      	b.n	8006962 <_printf_i+0x1be>
 8006848:	681b      	ldr	r3, [r3, #0]
 800684a:	f010 0f40 	tst.w	r0, #64	; 0x40
 800684e:	6011      	str	r1, [r2, #0]
 8006850:	bf18      	it	ne
 8006852:	b21b      	sxthne	r3, r3
 8006854:	e7cf      	b.n	80067f6 <_printf_i+0x52>
 8006856:	6813      	ldr	r3, [r2, #0]
 8006858:	6825      	ldr	r5, [r4, #0]
 800685a:	1d18      	adds	r0, r3, #4
 800685c:	6010      	str	r0, [r2, #0]
 800685e:	0628      	lsls	r0, r5, #24
 8006860:	d501      	bpl.n	8006866 <_printf_i+0xc2>
 8006862:	681b      	ldr	r3, [r3, #0]
 8006864:	e002      	b.n	800686c <_printf_i+0xc8>
 8006866:	0668      	lsls	r0, r5, #25
 8006868:	d5fb      	bpl.n	8006862 <_printf_i+0xbe>
 800686a:	881b      	ldrh	r3, [r3, #0]
 800686c:	296f      	cmp	r1, #111	; 0x6f
 800686e:	bf14      	ite	ne
 8006870:	220a      	movne	r2, #10
 8006872:	2208      	moveq	r2, #8
 8006874:	4852      	ldr	r0, [pc, #328]	; (80069c0 <_printf_i+0x21c>)
 8006876:	2100      	movs	r1, #0
 8006878:	f884 1043 	strb.w	r1, [r4, #67]	; 0x43
 800687c:	6865      	ldr	r5, [r4, #4]
 800687e:	2d00      	cmp	r5, #0
 8006880:	60a5      	str	r5, [r4, #8]
 8006882:	f2c0 8095 	blt.w	80069b0 <_printf_i+0x20c>
 8006886:	6821      	ldr	r1, [r4, #0]
 8006888:	f021 0104 	bic.w	r1, r1, #4
 800688c:	6021      	str	r1, [r4, #0]
 800688e:	2b00      	cmp	r3, #0
 8006890:	d13d      	bne.n	800690e <_printf_i+0x16a>
 8006892:	2d00      	cmp	r5, #0
 8006894:	f040 808e 	bne.w	80069b4 <_printf_i+0x210>
 8006898:	4665      	mov	r5, ip
 800689a:	2a08      	cmp	r2, #8
 800689c:	d10b      	bne.n	80068b6 <_printf_i+0x112>
 800689e:	6823      	ldr	r3, [r4, #0]
 80068a0:	07db      	lsls	r3, r3, #31
 80068a2:	d508      	bpl.n	80068b6 <_printf_i+0x112>
 80068a4:	6923      	ldr	r3, [r4, #16]
 80068a6:	6862      	ldr	r2, [r4, #4]
 80068a8:	429a      	cmp	r2, r3
 80068aa:	bfde      	ittt	le
 80068ac:	2330      	movle	r3, #48	; 0x30
 80068ae:	f805 3c01 	strble.w	r3, [r5, #-1]
 80068b2:	f105 35ff 	addle.w	r5, r5, #4294967295	; 0xffffffff
 80068b6:	ebac 0305 	sub.w	r3, ip, r5
 80068ba:	6123      	str	r3, [r4, #16]
 80068bc:	f8cd 8000 	str.w	r8, [sp]
 80068c0:	463b      	mov	r3, r7
 80068c2:	aa03      	add	r2, sp, #12
 80068c4:	4621      	mov	r1, r4
 80068c6:	4630      	mov	r0, r6
 80068c8:	f7ff fef6 	bl	80066b8 <_printf_common>
 80068cc:	3001      	adds	r0, #1
 80068ce:	d14d      	bne.n	800696c <_printf_i+0x1c8>
 80068d0:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 80068d4:	b005      	add	sp, #20
 80068d6:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 80068da:	4839      	ldr	r0, [pc, #228]	; (80069c0 <_printf_i+0x21c>)
 80068dc:	f884 1045 	strb.w	r1, [r4, #69]	; 0x45
 80068e0:	6813      	ldr	r3, [r2, #0]
 80068e2:	6821      	ldr	r1, [r4, #0]
 80068e4:	1d1d      	adds	r5, r3, #4
 80068e6:	681b      	ldr	r3, [r3, #0]
 80068e8:	6015      	str	r5, [r2, #0]
 80068ea:	060a      	lsls	r2, r1, #24
 80068ec:	d50b      	bpl.n	8006906 <_printf_i+0x162>
 80068ee:	07ca      	lsls	r2, r1, #31
 80068f0:	bf44      	itt	mi
 80068f2:	f041 0120 	orrmi.w	r1, r1, #32
 80068f6:	6021      	strmi	r1, [r4, #0]
 80068f8:	b91b      	cbnz	r3, 8006902 <_printf_i+0x15e>
 80068fa:	6822      	ldr	r2, [r4, #0]
 80068fc:	f022 0220 	bic.w	r2, r2, #32
 8006900:	6022      	str	r2, [r4, #0]
 8006902:	2210      	movs	r2, #16
 8006904:	e7b7      	b.n	8006876 <_printf_i+0xd2>
 8006906:	064d      	lsls	r5, r1, #25
 8006908:	bf48      	it	mi
 800690a:	b29b      	uxthmi	r3, r3
 800690c:	e7ef      	b.n	80068ee <_printf_i+0x14a>
 800690e:	4665      	mov	r5, ip
 8006910:	fbb3 f1f2 	udiv	r1, r3, r2
 8006914:	fb02 3311 	mls	r3, r2, r1, r3
 8006918:	5cc3      	ldrb	r3, [r0, r3]
 800691a:	f805 3d01 	strb.w	r3, [r5, #-1]!
 800691e:	460b      	mov	r3, r1
 8006920:	2900      	cmp	r1, #0
 8006922:	d1f5      	bne.n	8006910 <_printf_i+0x16c>
 8006924:	e7b9      	b.n	800689a <_printf_i+0xf6>
 8006926:	6813      	ldr	r3, [r2, #0]
 8006928:	6825      	ldr	r5, [r4, #0]
 800692a:	1d18      	adds	r0, r3, #4
 800692c:	6961      	ldr	r1, [r4, #20]
 800692e:	6010      	str	r0, [r2, #0]
 8006930:	0628      	lsls	r0, r5, #24
 8006932:	681b      	ldr	r3, [r3, #0]
 8006934:	d501      	bpl.n	800693a <_printf_i+0x196>
 8006936:	6019      	str	r1, [r3, #0]
 8006938:	e002      	b.n	8006940 <_printf_i+0x19c>
 800693a:	066a      	lsls	r2, r5, #25
 800693c:	d5fb      	bpl.n	8006936 <_printf_i+0x192>
 800693e:	8019      	strh	r1, [r3, #0]
 8006940:	2300      	movs	r3, #0
 8006942:	4665      	mov	r5, ip
 8006944:	6123      	str	r3, [r4, #16]
 8006946:	e7b9      	b.n	80068bc <_printf_i+0x118>
 8006948:	6813      	ldr	r3, [r2, #0]
 800694a:	1d19      	adds	r1, r3, #4
 800694c:	6011      	str	r1, [r2, #0]
 800694e:	681d      	ldr	r5, [r3, #0]
 8006950:	6862      	ldr	r2, [r4, #4]
 8006952:	2100      	movs	r1, #0
 8006954:	4628      	mov	r0, r5
 8006956:	f002 fa9d 	bl	8008e94 <memchr>
 800695a:	b108      	cbz	r0, 8006960 <_printf_i+0x1bc>
 800695c:	1b40      	subs	r0, r0, r5
 800695e:	6060      	str	r0, [r4, #4]
 8006960:	6863      	ldr	r3, [r4, #4]
 8006962:	6123      	str	r3, [r4, #16]
 8006964:	2300      	movs	r3, #0
 8006966:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 800696a:	e7a7      	b.n	80068bc <_printf_i+0x118>
 800696c:	6923      	ldr	r3, [r4, #16]
 800696e:	462a      	mov	r2, r5
 8006970:	4639      	mov	r1, r7
 8006972:	4630      	mov	r0, r6
 8006974:	47c0      	blx	r8
 8006976:	3001      	adds	r0, #1
 8006978:	d0aa      	beq.n	80068d0 <_printf_i+0x12c>
 800697a:	6823      	ldr	r3, [r4, #0]
 800697c:	079b      	lsls	r3, r3, #30
 800697e:	d413      	bmi.n	80069a8 <_printf_i+0x204>
 8006980:	68e0      	ldr	r0, [r4, #12]
 8006982:	9b03      	ldr	r3, [sp, #12]
 8006984:	4298      	cmp	r0, r3
 8006986:	bfb8      	it	lt
 8006988:	4618      	movlt	r0, r3
 800698a:	e7a3      	b.n	80068d4 <_printf_i+0x130>
 800698c:	2301      	movs	r3, #1
 800698e:	464a      	mov	r2, r9
 8006990:	4639      	mov	r1, r7
 8006992:	4630      	mov	r0, r6
 8006994:	47c0      	blx	r8
 8006996:	3001      	adds	r0, #1
 8006998:	d09a      	beq.n	80068d0 <_printf_i+0x12c>
 800699a:	3501      	adds	r5, #1
 800699c:	68e3      	ldr	r3, [r4, #12]
 800699e:	9a03      	ldr	r2, [sp, #12]
 80069a0:	1a9b      	subs	r3, r3, r2
 80069a2:	42ab      	cmp	r3, r5
 80069a4:	dcf2      	bgt.n	800698c <_printf_i+0x1e8>
 80069a6:	e7eb      	b.n	8006980 <_printf_i+0x1dc>
 80069a8:	2500      	movs	r5, #0
 80069aa:	f104 0919 	add.w	r9, r4, #25
 80069ae:	e7f5      	b.n	800699c <_printf_i+0x1f8>
 80069b0:	2b00      	cmp	r3, #0
 80069b2:	d1ac      	bne.n	800690e <_printf_i+0x16a>
 80069b4:	7803      	ldrb	r3, [r0, #0]
 80069b6:	f104 0542 	add.w	r5, r4, #66	; 0x42
 80069ba:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 80069be:	e76c      	b.n	800689a <_printf_i+0xf6>
 80069c0:	08009b46 	.word	0x08009b46
 80069c4:	08009b57 	.word	0x08009b57

080069c8 <_scanf_float>:
 80069c8:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80069cc:	469a      	mov	sl, r3
 80069ce:	688b      	ldr	r3, [r1, #8]
 80069d0:	4616      	mov	r6, r2
 80069d2:	1e5a      	subs	r2, r3, #1
 80069d4:	f5b2 7fae 	cmp.w	r2, #348	; 0x15c
 80069d8:	bf88      	it	hi
 80069da:	f46f 72ae 	mvnhi.w	r2, #348	; 0x15c
 80069de:	b087      	sub	sp, #28
 80069e0:	bf85      	ittet	hi
 80069e2:	189b      	addhi	r3, r3, r2
 80069e4:	9301      	strhi	r3, [sp, #4]
 80069e6:	2300      	movls	r3, #0
 80069e8:	f240 135d 	movwhi	r3, #349	; 0x15d
 80069ec:	4688      	mov	r8, r1
 80069ee:	f04f 0b00 	mov.w	fp, #0
 80069f2:	bf8c      	ite	hi
 80069f4:	608b      	strhi	r3, [r1, #8]
 80069f6:	9301      	strls	r3, [sp, #4]
 80069f8:	680b      	ldr	r3, [r1, #0]
 80069fa:	4607      	mov	r7, r0
 80069fc:	f443 63f0 	orr.w	r3, r3, #1920	; 0x780
 8006a00:	f848 3b1c 	str.w	r3, [r8], #28
 8006a04:	460c      	mov	r4, r1
 8006a06:	4645      	mov	r5, r8
 8006a08:	465a      	mov	r2, fp
 8006a0a:	46d9      	mov	r9, fp
 8006a0c:	e9cd bb03 	strd	fp, fp, [sp, #12]
 8006a10:	f8cd b008 	str.w	fp, [sp, #8]
 8006a14:	68a1      	ldr	r1, [r4, #8]
 8006a16:	b181      	cbz	r1, 8006a3a <_scanf_float+0x72>
 8006a18:	6833      	ldr	r3, [r6, #0]
 8006a1a:	781b      	ldrb	r3, [r3, #0]
 8006a1c:	2b49      	cmp	r3, #73	; 0x49
 8006a1e:	d071      	beq.n	8006b04 <_scanf_float+0x13c>
 8006a20:	d84d      	bhi.n	8006abe <_scanf_float+0xf6>
 8006a22:	2b39      	cmp	r3, #57	; 0x39
 8006a24:	d840      	bhi.n	8006aa8 <_scanf_float+0xe0>
 8006a26:	2b31      	cmp	r3, #49	; 0x31
 8006a28:	f080 8088 	bcs.w	8006b3c <_scanf_float+0x174>
 8006a2c:	2b2d      	cmp	r3, #45	; 0x2d
 8006a2e:	f000 8090 	beq.w	8006b52 <_scanf_float+0x18a>
 8006a32:	d815      	bhi.n	8006a60 <_scanf_float+0x98>
 8006a34:	2b2b      	cmp	r3, #43	; 0x2b
 8006a36:	f000 808c 	beq.w	8006b52 <_scanf_float+0x18a>
 8006a3a:	f1b9 0f00 	cmp.w	r9, #0
 8006a3e:	d003      	beq.n	8006a48 <_scanf_float+0x80>
 8006a40:	6823      	ldr	r3, [r4, #0]
 8006a42:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8006a46:	6023      	str	r3, [r4, #0]
 8006a48:	3a01      	subs	r2, #1
 8006a4a:	2a01      	cmp	r2, #1
 8006a4c:	f200 80ea 	bhi.w	8006c24 <_scanf_float+0x25c>
 8006a50:	4545      	cmp	r5, r8
 8006a52:	f200 80dc 	bhi.w	8006c0e <_scanf_float+0x246>
 8006a56:	2601      	movs	r6, #1
 8006a58:	4630      	mov	r0, r6
 8006a5a:	b007      	add	sp, #28
 8006a5c:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8006a60:	2b2e      	cmp	r3, #46	; 0x2e
 8006a62:	f000 809f 	beq.w	8006ba4 <_scanf_float+0x1dc>
 8006a66:	2b30      	cmp	r3, #48	; 0x30
 8006a68:	d1e7      	bne.n	8006a3a <_scanf_float+0x72>
 8006a6a:	6820      	ldr	r0, [r4, #0]
 8006a6c:	f410 7f80 	tst.w	r0, #256	; 0x100
 8006a70:	d064      	beq.n	8006b3c <_scanf_float+0x174>
 8006a72:	9b01      	ldr	r3, [sp, #4]
 8006a74:	f020 0080 	bic.w	r0, r0, #128	; 0x80
 8006a78:	6020      	str	r0, [r4, #0]
 8006a7a:	f109 0901 	add.w	r9, r9, #1
 8006a7e:	b11b      	cbz	r3, 8006a88 <_scanf_float+0xc0>
 8006a80:	3b01      	subs	r3, #1
 8006a82:	3101      	adds	r1, #1
 8006a84:	9301      	str	r3, [sp, #4]
 8006a86:	60a1      	str	r1, [r4, #8]
 8006a88:	68a3      	ldr	r3, [r4, #8]
 8006a8a:	3b01      	subs	r3, #1
 8006a8c:	60a3      	str	r3, [r4, #8]
 8006a8e:	6923      	ldr	r3, [r4, #16]
 8006a90:	3301      	adds	r3, #1
 8006a92:	6123      	str	r3, [r4, #16]
 8006a94:	6873      	ldr	r3, [r6, #4]
 8006a96:	3b01      	subs	r3, #1
 8006a98:	2b00      	cmp	r3, #0
 8006a9a:	6073      	str	r3, [r6, #4]
 8006a9c:	f340 80ac 	ble.w	8006bf8 <_scanf_float+0x230>
 8006aa0:	6833      	ldr	r3, [r6, #0]
 8006aa2:	3301      	adds	r3, #1
 8006aa4:	6033      	str	r3, [r6, #0]
 8006aa6:	e7b5      	b.n	8006a14 <_scanf_float+0x4c>
 8006aa8:	2b45      	cmp	r3, #69	; 0x45
 8006aaa:	f000 8085 	beq.w	8006bb8 <_scanf_float+0x1f0>
 8006aae:	2b46      	cmp	r3, #70	; 0x46
 8006ab0:	d06a      	beq.n	8006b88 <_scanf_float+0x1c0>
 8006ab2:	2b41      	cmp	r3, #65	; 0x41
 8006ab4:	d1c1      	bne.n	8006a3a <_scanf_float+0x72>
 8006ab6:	2a01      	cmp	r2, #1
 8006ab8:	d1bf      	bne.n	8006a3a <_scanf_float+0x72>
 8006aba:	2202      	movs	r2, #2
 8006abc:	e046      	b.n	8006b4c <_scanf_float+0x184>
 8006abe:	2b65      	cmp	r3, #101	; 0x65
 8006ac0:	d07a      	beq.n	8006bb8 <_scanf_float+0x1f0>
 8006ac2:	d818      	bhi.n	8006af6 <_scanf_float+0x12e>
 8006ac4:	2b54      	cmp	r3, #84	; 0x54
 8006ac6:	d066      	beq.n	8006b96 <_scanf_float+0x1ce>
 8006ac8:	d811      	bhi.n	8006aee <_scanf_float+0x126>
 8006aca:	2b4e      	cmp	r3, #78	; 0x4e
 8006acc:	d1b5      	bne.n	8006a3a <_scanf_float+0x72>
 8006ace:	2a00      	cmp	r2, #0
 8006ad0:	d146      	bne.n	8006b60 <_scanf_float+0x198>
 8006ad2:	f1b9 0f00 	cmp.w	r9, #0
 8006ad6:	d145      	bne.n	8006b64 <_scanf_float+0x19c>
 8006ad8:	6821      	ldr	r1, [r4, #0]
 8006ada:	f401 60e0 	and.w	r0, r1, #1792	; 0x700
 8006ade:	f5b0 6fe0 	cmp.w	r0, #1792	; 0x700
 8006ae2:	d13f      	bne.n	8006b64 <_scanf_float+0x19c>
 8006ae4:	f421 61f0 	bic.w	r1, r1, #1920	; 0x780
 8006ae8:	6021      	str	r1, [r4, #0]
 8006aea:	2201      	movs	r2, #1
 8006aec:	e02e      	b.n	8006b4c <_scanf_float+0x184>
 8006aee:	2b59      	cmp	r3, #89	; 0x59
 8006af0:	d01e      	beq.n	8006b30 <_scanf_float+0x168>
 8006af2:	2b61      	cmp	r3, #97	; 0x61
 8006af4:	e7de      	b.n	8006ab4 <_scanf_float+0xec>
 8006af6:	2b6e      	cmp	r3, #110	; 0x6e
 8006af8:	d0e9      	beq.n	8006ace <_scanf_float+0x106>
 8006afa:	d815      	bhi.n	8006b28 <_scanf_float+0x160>
 8006afc:	2b66      	cmp	r3, #102	; 0x66
 8006afe:	d043      	beq.n	8006b88 <_scanf_float+0x1c0>
 8006b00:	2b69      	cmp	r3, #105	; 0x69
 8006b02:	d19a      	bne.n	8006a3a <_scanf_float+0x72>
 8006b04:	f1bb 0f00 	cmp.w	fp, #0
 8006b08:	d138      	bne.n	8006b7c <_scanf_float+0x1b4>
 8006b0a:	f1b9 0f00 	cmp.w	r9, #0
 8006b0e:	d197      	bne.n	8006a40 <_scanf_float+0x78>
 8006b10:	6821      	ldr	r1, [r4, #0]
 8006b12:	f401 60e0 	and.w	r0, r1, #1792	; 0x700
 8006b16:	f5b0 6fe0 	cmp.w	r0, #1792	; 0x700
 8006b1a:	d195      	bne.n	8006a48 <_scanf_float+0x80>
 8006b1c:	f421 61f0 	bic.w	r1, r1, #1920	; 0x780
 8006b20:	6021      	str	r1, [r4, #0]
 8006b22:	f04f 0b01 	mov.w	fp, #1
 8006b26:	e011      	b.n	8006b4c <_scanf_float+0x184>
 8006b28:	2b74      	cmp	r3, #116	; 0x74
 8006b2a:	d034      	beq.n	8006b96 <_scanf_float+0x1ce>
 8006b2c:	2b79      	cmp	r3, #121	; 0x79
 8006b2e:	d184      	bne.n	8006a3a <_scanf_float+0x72>
 8006b30:	f1bb 0f07 	cmp.w	fp, #7
 8006b34:	d181      	bne.n	8006a3a <_scanf_float+0x72>
 8006b36:	f04f 0b08 	mov.w	fp, #8
 8006b3a:	e007      	b.n	8006b4c <_scanf_float+0x184>
 8006b3c:	eb12 0f0b 	cmn.w	r2, fp
 8006b40:	f47f af7b 	bne.w	8006a3a <_scanf_float+0x72>
 8006b44:	6821      	ldr	r1, [r4, #0]
 8006b46:	f421 71c0 	bic.w	r1, r1, #384	; 0x180
 8006b4a:	6021      	str	r1, [r4, #0]
 8006b4c:	702b      	strb	r3, [r5, #0]
 8006b4e:	3501      	adds	r5, #1
 8006b50:	e79a      	b.n	8006a88 <_scanf_float+0xc0>
 8006b52:	6821      	ldr	r1, [r4, #0]
 8006b54:	0608      	lsls	r0, r1, #24
 8006b56:	f57f af70 	bpl.w	8006a3a <_scanf_float+0x72>
 8006b5a:	f021 0180 	bic.w	r1, r1, #128	; 0x80
 8006b5e:	e7f4      	b.n	8006b4a <_scanf_float+0x182>
 8006b60:	2a02      	cmp	r2, #2
 8006b62:	d047      	beq.n	8006bf4 <_scanf_float+0x22c>
 8006b64:	f1bb 0f01 	cmp.w	fp, #1
 8006b68:	d003      	beq.n	8006b72 <_scanf_float+0x1aa>
 8006b6a:	f1bb 0f04 	cmp.w	fp, #4
 8006b6e:	f47f af64 	bne.w	8006a3a <_scanf_float+0x72>
 8006b72:	f10b 0b01 	add.w	fp, fp, #1
 8006b76:	fa5f fb8b 	uxtb.w	fp, fp
 8006b7a:	e7e7      	b.n	8006b4c <_scanf_float+0x184>
 8006b7c:	f1bb 0f03 	cmp.w	fp, #3
 8006b80:	d0f7      	beq.n	8006b72 <_scanf_float+0x1aa>
 8006b82:	f1bb 0f05 	cmp.w	fp, #5
 8006b86:	e7f2      	b.n	8006b6e <_scanf_float+0x1a6>
 8006b88:	f1bb 0f02 	cmp.w	fp, #2
 8006b8c:	f47f af55 	bne.w	8006a3a <_scanf_float+0x72>
 8006b90:	f04f 0b03 	mov.w	fp, #3
 8006b94:	e7da      	b.n	8006b4c <_scanf_float+0x184>
 8006b96:	f1bb 0f06 	cmp.w	fp, #6
 8006b9a:	f47f af4e 	bne.w	8006a3a <_scanf_float+0x72>
 8006b9e:	f04f 0b07 	mov.w	fp, #7
 8006ba2:	e7d3      	b.n	8006b4c <_scanf_float+0x184>
 8006ba4:	6821      	ldr	r1, [r4, #0]
 8006ba6:	0588      	lsls	r0, r1, #22
 8006ba8:	f57f af47 	bpl.w	8006a3a <_scanf_float+0x72>
 8006bac:	f421 7120 	bic.w	r1, r1, #640	; 0x280
 8006bb0:	6021      	str	r1, [r4, #0]
 8006bb2:	f8cd 9008 	str.w	r9, [sp, #8]
 8006bb6:	e7c9      	b.n	8006b4c <_scanf_float+0x184>
 8006bb8:	6821      	ldr	r1, [r4, #0]
 8006bba:	f401 60a0 	and.w	r0, r1, #1280	; 0x500
 8006bbe:	f5b0 6f80 	cmp.w	r0, #1024	; 0x400
 8006bc2:	d006      	beq.n	8006bd2 <_scanf_float+0x20a>
 8006bc4:	0548      	lsls	r0, r1, #21
 8006bc6:	f57f af38 	bpl.w	8006a3a <_scanf_float+0x72>
 8006bca:	f1b9 0f00 	cmp.w	r9, #0
 8006bce:	f43f af3b 	beq.w	8006a48 <_scanf_float+0x80>
 8006bd2:	0588      	lsls	r0, r1, #22
 8006bd4:	bf58      	it	pl
 8006bd6:	9802      	ldrpl	r0, [sp, #8]
 8006bd8:	f421 61f0 	bic.w	r1, r1, #1920	; 0x780
 8006bdc:	bf58      	it	pl
 8006bde:	eba9 0000 	subpl.w	r0, r9, r0
 8006be2:	f441 71c0 	orr.w	r1, r1, #384	; 0x180
 8006be6:	bf58      	it	pl
 8006be8:	e9cd 0503 	strdpl	r0, r5, [sp, #12]
 8006bec:	6021      	str	r1, [r4, #0]
 8006bee:	f04f 0900 	mov.w	r9, #0
 8006bf2:	e7ab      	b.n	8006b4c <_scanf_float+0x184>
 8006bf4:	2203      	movs	r2, #3
 8006bf6:	e7a9      	b.n	8006b4c <_scanf_float+0x184>
 8006bf8:	f8d4 3180 	ldr.w	r3, [r4, #384]	; 0x180
 8006bfc:	4631      	mov	r1, r6
 8006bfe:	4638      	mov	r0, r7
 8006c00:	9205      	str	r2, [sp, #20]
 8006c02:	4798      	blx	r3
 8006c04:	9a05      	ldr	r2, [sp, #20]
 8006c06:	2800      	cmp	r0, #0
 8006c08:	f43f af04 	beq.w	8006a14 <_scanf_float+0x4c>
 8006c0c:	e715      	b.n	8006a3a <_scanf_float+0x72>
 8006c0e:	f8d4 317c 	ldr.w	r3, [r4, #380]	; 0x17c
 8006c12:	4632      	mov	r2, r6
 8006c14:	f815 1d01 	ldrb.w	r1, [r5, #-1]!
 8006c18:	4638      	mov	r0, r7
 8006c1a:	4798      	blx	r3
 8006c1c:	6923      	ldr	r3, [r4, #16]
 8006c1e:	3b01      	subs	r3, #1
 8006c20:	6123      	str	r3, [r4, #16]
 8006c22:	e715      	b.n	8006a50 <_scanf_float+0x88>
 8006c24:	f10b 33ff 	add.w	r3, fp, #4294967295	; 0xffffffff
 8006c28:	2b06      	cmp	r3, #6
 8006c2a:	d80a      	bhi.n	8006c42 <_scanf_float+0x27a>
 8006c2c:	f1bb 0f02 	cmp.w	fp, #2
 8006c30:	d967      	bls.n	8006d02 <_scanf_float+0x33a>
 8006c32:	f1ab 0b03 	sub.w	fp, fp, #3
 8006c36:	fa5f fb8b 	uxtb.w	fp, fp
 8006c3a:	eba5 0b0b 	sub.w	fp, r5, fp
 8006c3e:	455d      	cmp	r5, fp
 8006c40:	d14a      	bne.n	8006cd8 <_scanf_float+0x310>
 8006c42:	6823      	ldr	r3, [r4, #0]
 8006c44:	05da      	lsls	r2, r3, #23
 8006c46:	d51f      	bpl.n	8006c88 <_scanf_float+0x2c0>
 8006c48:	055b      	lsls	r3, r3, #21
 8006c4a:	d467      	bmi.n	8006d1c <_scanf_float+0x354>
 8006c4c:	f815 1c01 	ldrb.w	r1, [r5, #-1]
 8006c50:	6923      	ldr	r3, [r4, #16]
 8006c52:	2965      	cmp	r1, #101	; 0x65
 8006c54:	f103 33ff 	add.w	r3, r3, #4294967295	; 0xffffffff
 8006c58:	f105 3bff 	add.w	fp, r5, #4294967295	; 0xffffffff
 8006c5c:	6123      	str	r3, [r4, #16]
 8006c5e:	d00d      	beq.n	8006c7c <_scanf_float+0x2b4>
 8006c60:	2945      	cmp	r1, #69	; 0x45
 8006c62:	d00b      	beq.n	8006c7c <_scanf_float+0x2b4>
 8006c64:	f8d4 317c 	ldr.w	r3, [r4, #380]	; 0x17c
 8006c68:	4632      	mov	r2, r6
 8006c6a:	4638      	mov	r0, r7
 8006c6c:	4798      	blx	r3
 8006c6e:	6923      	ldr	r3, [r4, #16]
 8006c70:	f815 1c02 	ldrb.w	r1, [r5, #-2]
 8006c74:	3b01      	subs	r3, #1
 8006c76:	f1a5 0b02 	sub.w	fp, r5, #2
 8006c7a:	6123      	str	r3, [r4, #16]
 8006c7c:	f8d4 317c 	ldr.w	r3, [r4, #380]	; 0x17c
 8006c80:	4632      	mov	r2, r6
 8006c82:	4638      	mov	r0, r7
 8006c84:	4798      	blx	r3
 8006c86:	465d      	mov	r5, fp
 8006c88:	6826      	ldr	r6, [r4, #0]
 8006c8a:	f016 0610 	ands.w	r6, r6, #16
 8006c8e:	d176      	bne.n	8006d7e <_scanf_float+0x3b6>
 8006c90:	702e      	strb	r6, [r5, #0]
 8006c92:	6823      	ldr	r3, [r4, #0]
 8006c94:	f403 63c0 	and.w	r3, r3, #1536	; 0x600
 8006c98:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8006c9c:	d141      	bne.n	8006d22 <_scanf_float+0x35a>
 8006c9e:	9b02      	ldr	r3, [sp, #8]
 8006ca0:	eba9 0303 	sub.w	r3, r9, r3
 8006ca4:	425a      	negs	r2, r3
 8006ca6:	2b00      	cmp	r3, #0
 8006ca8:	d148      	bne.n	8006d3c <_scanf_float+0x374>
 8006caa:	4641      	mov	r1, r8
 8006cac:	2200      	movs	r2, #0
 8006cae:	4638      	mov	r0, r7
 8006cb0:	f000 fec2 	bl	8007a38 <_strtod_r>
 8006cb4:	6825      	ldr	r5, [r4, #0]
 8006cb6:	4680      	mov	r8, r0
 8006cb8:	f015 0f02 	tst.w	r5, #2
 8006cbc:	4689      	mov	r9, r1
 8006cbe:	f8da 3000 	ldr.w	r3, [sl]
 8006cc2:	d046      	beq.n	8006d52 <_scanf_float+0x38a>
 8006cc4:	1d1a      	adds	r2, r3, #4
 8006cc6:	f8ca 2000 	str.w	r2, [sl]
 8006cca:	681b      	ldr	r3, [r3, #0]
 8006ccc:	e9c3 8900 	strd	r8, r9, [r3]
 8006cd0:	68e3      	ldr	r3, [r4, #12]
 8006cd2:	3301      	adds	r3, #1
 8006cd4:	60e3      	str	r3, [r4, #12]
 8006cd6:	e6bf      	b.n	8006a58 <_scanf_float+0x90>
 8006cd8:	f8d4 317c 	ldr.w	r3, [r4, #380]	; 0x17c
 8006cdc:	4632      	mov	r2, r6
 8006cde:	f815 1d01 	ldrb.w	r1, [r5, #-1]!
 8006ce2:	4638      	mov	r0, r7
 8006ce4:	4798      	blx	r3
 8006ce6:	6923      	ldr	r3, [r4, #16]
 8006ce8:	3b01      	subs	r3, #1
 8006cea:	6123      	str	r3, [r4, #16]
 8006cec:	e7a7      	b.n	8006c3e <_scanf_float+0x276>
 8006cee:	f8d4 317c 	ldr.w	r3, [r4, #380]	; 0x17c
 8006cf2:	4632      	mov	r2, r6
 8006cf4:	f815 1d01 	ldrb.w	r1, [r5, #-1]!
 8006cf8:	4638      	mov	r0, r7
 8006cfa:	4798      	blx	r3
 8006cfc:	6923      	ldr	r3, [r4, #16]
 8006cfe:	3b01      	subs	r3, #1
 8006d00:	6123      	str	r3, [r4, #16]
 8006d02:	4545      	cmp	r5, r8
 8006d04:	d8f3      	bhi.n	8006cee <_scanf_float+0x326>
 8006d06:	e6a6      	b.n	8006a56 <_scanf_float+0x8e>
 8006d08:	f8d4 317c 	ldr.w	r3, [r4, #380]	; 0x17c
 8006d0c:	4632      	mov	r2, r6
 8006d0e:	f815 1d01 	ldrb.w	r1, [r5, #-1]!
 8006d12:	4638      	mov	r0, r7
 8006d14:	4798      	blx	r3
 8006d16:	6923      	ldr	r3, [r4, #16]
 8006d18:	3b01      	subs	r3, #1
 8006d1a:	6123      	str	r3, [r4, #16]
 8006d1c:	4545      	cmp	r5, r8
 8006d1e:	d8f3      	bhi.n	8006d08 <_scanf_float+0x340>
 8006d20:	e699      	b.n	8006a56 <_scanf_float+0x8e>
 8006d22:	9b03      	ldr	r3, [sp, #12]
 8006d24:	2b00      	cmp	r3, #0
 8006d26:	d0c0      	beq.n	8006caa <_scanf_float+0x2e2>
 8006d28:	9904      	ldr	r1, [sp, #16]
 8006d2a:	230a      	movs	r3, #10
 8006d2c:	4632      	mov	r2, r6
 8006d2e:	3101      	adds	r1, #1
 8006d30:	4638      	mov	r0, r7
 8006d32:	f000 ff0d 	bl	8007b50 <_strtol_r>
 8006d36:	9b03      	ldr	r3, [sp, #12]
 8006d38:	9d04      	ldr	r5, [sp, #16]
 8006d3a:	1ac2      	subs	r2, r0, r3
 8006d3c:	f204 136f 	addw	r3, r4, #367	; 0x16f
 8006d40:	429d      	cmp	r5, r3
 8006d42:	bf28      	it	cs
 8006d44:	f504 75b7 	addcs.w	r5, r4, #366	; 0x16e
 8006d48:	490e      	ldr	r1, [pc, #56]	; (8006d84 <_scanf_float+0x3bc>)
 8006d4a:	4628      	mov	r0, r5
 8006d4c:	f000 f830 	bl	8006db0 <siprintf>
 8006d50:	e7ab      	b.n	8006caa <_scanf_float+0x2e2>
 8006d52:	1d1f      	adds	r7, r3, #4
 8006d54:	f015 0504 	ands.w	r5, r5, #4
 8006d58:	f8ca 7000 	str.w	r7, [sl]
 8006d5c:	d1b5      	bne.n	8006cca <_scanf_float+0x302>
 8006d5e:	681f      	ldr	r7, [r3, #0]
 8006d60:	4602      	mov	r2, r0
 8006d62:	460b      	mov	r3, r1
 8006d64:	f7f9 fe52 	bl	8000a0c <__aeabi_dcmpun>
 8006d68:	b120      	cbz	r0, 8006d74 <_scanf_float+0x3ac>
 8006d6a:	4628      	mov	r0, r5
 8006d6c:	f000 f81c 	bl	8006da8 <nanf>
 8006d70:	6038      	str	r0, [r7, #0]
 8006d72:	e7ad      	b.n	8006cd0 <_scanf_float+0x308>
 8006d74:	4640      	mov	r0, r8
 8006d76:	4649      	mov	r1, r9
 8006d78:	f7f9 fea6 	bl	8000ac8 <__aeabi_d2f>
 8006d7c:	e7f8      	b.n	8006d70 <_scanf_float+0x3a8>
 8006d7e:	2600      	movs	r6, #0
 8006d80:	e66a      	b.n	8006a58 <_scanf_float+0x90>
 8006d82:	bf00      	nop
 8006d84:	08009b68 	.word	0x08009b68

08006d88 <_sbrk_r>:
 8006d88:	b538      	push	{r3, r4, r5, lr}
 8006d8a:	2300      	movs	r3, #0
 8006d8c:	4c05      	ldr	r4, [pc, #20]	; (8006da4 <_sbrk_r+0x1c>)
 8006d8e:	4605      	mov	r5, r0
 8006d90:	4608      	mov	r0, r1
 8006d92:	6023      	str	r3, [r4, #0]
 8006d94:	f7fb fd10 	bl	80027b8 <_sbrk>
 8006d98:	1c43      	adds	r3, r0, #1
 8006d9a:	d102      	bne.n	8006da2 <_sbrk_r+0x1a>
 8006d9c:	6823      	ldr	r3, [r4, #0]
 8006d9e:	b103      	cbz	r3, 8006da2 <_sbrk_r+0x1a>
 8006da0:	602b      	str	r3, [r5, #0]
 8006da2:	bd38      	pop	{r3, r4, r5, pc}
 8006da4:	20000448 	.word	0x20000448

08006da8 <nanf>:
 8006da8:	4800      	ldr	r0, [pc, #0]	; (8006dac <nanf+0x4>)
 8006daa:	4770      	bx	lr
 8006dac:	7fc00000 	.word	0x7fc00000

08006db0 <siprintf>:
 8006db0:	b40e      	push	{r1, r2, r3}
 8006db2:	f06f 4100 	mvn.w	r1, #2147483648	; 0x80000000
 8006db6:	b500      	push	{lr}
 8006db8:	b09c      	sub	sp, #112	; 0x70
 8006dba:	ab1d      	add	r3, sp, #116	; 0x74
 8006dbc:	9002      	str	r0, [sp, #8]
 8006dbe:	9006      	str	r0, [sp, #24]
 8006dc0:	9107      	str	r1, [sp, #28]
 8006dc2:	9104      	str	r1, [sp, #16]
 8006dc4:	4808      	ldr	r0, [pc, #32]	; (8006de8 <siprintf+0x38>)
 8006dc6:	4909      	ldr	r1, [pc, #36]	; (8006dec <siprintf+0x3c>)
 8006dc8:	f853 2b04 	ldr.w	r2, [r3], #4
 8006dcc:	9105      	str	r1, [sp, #20]
 8006dce:	6800      	ldr	r0, [r0, #0]
 8006dd0:	a902      	add	r1, sp, #8
 8006dd2:	9301      	str	r3, [sp, #4]
 8006dd4:	f002 fcda 	bl	800978c <_svfiprintf_r>
 8006dd8:	2200      	movs	r2, #0
 8006dda:	9b02      	ldr	r3, [sp, #8]
 8006ddc:	701a      	strb	r2, [r3, #0]
 8006dde:	b01c      	add	sp, #112	; 0x70
 8006de0:	f85d eb04 	ldr.w	lr, [sp], #4
 8006de4:	b003      	add	sp, #12
 8006de6:	4770      	bx	lr
 8006de8:	20000014 	.word	0x20000014
 8006dec:	ffff0208 	.word	0xffff0208

08006df0 <sulp>:
 8006df0:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8006df4:	460f      	mov	r7, r1
 8006df6:	4690      	mov	r8, r2
 8006df8:	f002 fb32 	bl	8009460 <__ulp>
 8006dfc:	4604      	mov	r4, r0
 8006dfe:	460d      	mov	r5, r1
 8006e00:	f1b8 0f00 	cmp.w	r8, #0
 8006e04:	d011      	beq.n	8006e2a <sulp+0x3a>
 8006e06:	f3c7 530a 	ubfx	r3, r7, #20, #11
 8006e0a:	f1c3 036b 	rsb	r3, r3, #107	; 0x6b
 8006e0e:	2b00      	cmp	r3, #0
 8006e10:	dd0b      	ble.n	8006e2a <sulp+0x3a>
 8006e12:	2400      	movs	r4, #0
 8006e14:	051b      	lsls	r3, r3, #20
 8006e16:	f103 557f 	add.w	r5, r3, #1069547520	; 0x3fc00000
 8006e1a:	f505 1540 	add.w	r5, r5, #3145728	; 0x300000
 8006e1e:	4622      	mov	r2, r4
 8006e20:	462b      	mov	r3, r5
 8006e22:	f7f9 fb59 	bl	80004d8 <__aeabi_dmul>
 8006e26:	4604      	mov	r4, r0
 8006e28:	460d      	mov	r5, r1
 8006e2a:	4620      	mov	r0, r4
 8006e2c:	4629      	mov	r1, r5
 8006e2e:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8006e32:	0000      	movs	r0, r0
 8006e34:	0000      	movs	r0, r0
	...

08006e38 <_strtod_l>:
 8006e38:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8006e3c:	461f      	mov	r7, r3
 8006e3e:	2300      	movs	r3, #0
 8006e40:	b0a1      	sub	sp, #132	; 0x84
 8006e42:	4683      	mov	fp, r0
 8006e44:	4638      	mov	r0, r7
 8006e46:	460e      	mov	r6, r1
 8006e48:	9217      	str	r2, [sp, #92]	; 0x5c
 8006e4a:	931c      	str	r3, [sp, #112]	; 0x70
 8006e4c:	f001 ffff 	bl	8008e4e <__localeconv_l>
 8006e50:	4680      	mov	r8, r0
 8006e52:	6800      	ldr	r0, [r0, #0]
 8006e54:	f7f9 f97c 	bl	8000150 <strlen>
 8006e58:	f04f 0900 	mov.w	r9, #0
 8006e5c:	4604      	mov	r4, r0
 8006e5e:	f04f 0a00 	mov.w	sl, #0
 8006e62:	961b      	str	r6, [sp, #108]	; 0x6c
 8006e64:	9b1b      	ldr	r3, [sp, #108]	; 0x6c
 8006e66:	781a      	ldrb	r2, [r3, #0]
 8006e68:	2a0d      	cmp	r2, #13
 8006e6a:	d832      	bhi.n	8006ed2 <_strtod_l+0x9a>
 8006e6c:	2a09      	cmp	r2, #9
 8006e6e:	d236      	bcs.n	8006ede <_strtod_l+0xa6>
 8006e70:	2a00      	cmp	r2, #0
 8006e72:	d03e      	beq.n	8006ef2 <_strtod_l+0xba>
 8006e74:	2300      	movs	r3, #0
 8006e76:	930d      	str	r3, [sp, #52]	; 0x34
 8006e78:	9d1b      	ldr	r5, [sp, #108]	; 0x6c
 8006e7a:	782b      	ldrb	r3, [r5, #0]
 8006e7c:	2b30      	cmp	r3, #48	; 0x30
 8006e7e:	f040 80ac 	bne.w	8006fda <_strtod_l+0x1a2>
 8006e82:	786b      	ldrb	r3, [r5, #1]
 8006e84:	2b58      	cmp	r3, #88	; 0x58
 8006e86:	d001      	beq.n	8006e8c <_strtod_l+0x54>
 8006e88:	2b78      	cmp	r3, #120	; 0x78
 8006e8a:	d167      	bne.n	8006f5c <_strtod_l+0x124>
 8006e8c:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 8006e8e:	9702      	str	r7, [sp, #8]
 8006e90:	9301      	str	r3, [sp, #4]
 8006e92:	ab1c      	add	r3, sp, #112	; 0x70
 8006e94:	9300      	str	r3, [sp, #0]
 8006e96:	4a89      	ldr	r2, [pc, #548]	; (80070bc <_strtod_l+0x284>)
 8006e98:	ab1d      	add	r3, sp, #116	; 0x74
 8006e9a:	a91b      	add	r1, sp, #108	; 0x6c
 8006e9c:	4658      	mov	r0, fp
 8006e9e:	f001 fcfb 	bl	8008898 <__gethex>
 8006ea2:	f010 0407 	ands.w	r4, r0, #7
 8006ea6:	4606      	mov	r6, r0
 8006ea8:	d005      	beq.n	8006eb6 <_strtod_l+0x7e>
 8006eaa:	2c06      	cmp	r4, #6
 8006eac:	d12b      	bne.n	8006f06 <_strtod_l+0xce>
 8006eae:	2300      	movs	r3, #0
 8006eb0:	3501      	adds	r5, #1
 8006eb2:	951b      	str	r5, [sp, #108]	; 0x6c
 8006eb4:	930d      	str	r3, [sp, #52]	; 0x34
 8006eb6:	9b17      	ldr	r3, [sp, #92]	; 0x5c
 8006eb8:	2b00      	cmp	r3, #0
 8006eba:	f040 85a6 	bne.w	8007a0a <_strtod_l+0xbd2>
 8006ebe:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 8006ec0:	b1e3      	cbz	r3, 8006efc <_strtod_l+0xc4>
 8006ec2:	464a      	mov	r2, r9
 8006ec4:	f10a 4300 	add.w	r3, sl, #2147483648	; 0x80000000
 8006ec8:	4610      	mov	r0, r2
 8006eca:	4619      	mov	r1, r3
 8006ecc:	b021      	add	sp, #132	; 0x84
 8006ece:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8006ed2:	2a2b      	cmp	r2, #43	; 0x2b
 8006ed4:	d015      	beq.n	8006f02 <_strtod_l+0xca>
 8006ed6:	2a2d      	cmp	r2, #45	; 0x2d
 8006ed8:	d004      	beq.n	8006ee4 <_strtod_l+0xac>
 8006eda:	2a20      	cmp	r2, #32
 8006edc:	d1ca      	bne.n	8006e74 <_strtod_l+0x3c>
 8006ede:	3301      	adds	r3, #1
 8006ee0:	931b      	str	r3, [sp, #108]	; 0x6c
 8006ee2:	e7bf      	b.n	8006e64 <_strtod_l+0x2c>
 8006ee4:	2201      	movs	r2, #1
 8006ee6:	920d      	str	r2, [sp, #52]	; 0x34
 8006ee8:	1c5a      	adds	r2, r3, #1
 8006eea:	921b      	str	r2, [sp, #108]	; 0x6c
 8006eec:	785b      	ldrb	r3, [r3, #1]
 8006eee:	2b00      	cmp	r3, #0
 8006ef0:	d1c2      	bne.n	8006e78 <_strtod_l+0x40>
 8006ef2:	9b17      	ldr	r3, [sp, #92]	; 0x5c
 8006ef4:	961b      	str	r6, [sp, #108]	; 0x6c
 8006ef6:	2b00      	cmp	r3, #0
 8006ef8:	f040 8585 	bne.w	8007a06 <_strtod_l+0xbce>
 8006efc:	464a      	mov	r2, r9
 8006efe:	4653      	mov	r3, sl
 8006f00:	e7e2      	b.n	8006ec8 <_strtod_l+0x90>
 8006f02:	2200      	movs	r2, #0
 8006f04:	e7ef      	b.n	8006ee6 <_strtod_l+0xae>
 8006f06:	9a1c      	ldr	r2, [sp, #112]	; 0x70
 8006f08:	b13a      	cbz	r2, 8006f1a <_strtod_l+0xe2>
 8006f0a:	2135      	movs	r1, #53	; 0x35
 8006f0c:	a81e      	add	r0, sp, #120	; 0x78
 8006f0e:	f002 fb9a 	bl	8009646 <__copybits>
 8006f12:	991c      	ldr	r1, [sp, #112]	; 0x70
 8006f14:	4658      	mov	r0, fp
 8006f16:	f002 f80c 	bl	8008f32 <_Bfree>
 8006f1a:	3c01      	subs	r4, #1
 8006f1c:	2c04      	cmp	r4, #4
 8006f1e:	d806      	bhi.n	8006f2e <_strtod_l+0xf6>
 8006f20:	e8df f004 	tbb	[pc, r4]
 8006f24:	1714030a 	.word	0x1714030a
 8006f28:	0a          	.byte	0x0a
 8006f29:	00          	.byte	0x00
 8006f2a:	e9dd 9a1e 	ldrd	r9, sl, [sp, #120]	; 0x78
 8006f2e:	0731      	lsls	r1, r6, #28
 8006f30:	d5c1      	bpl.n	8006eb6 <_strtod_l+0x7e>
 8006f32:	f04a 4a00 	orr.w	sl, sl, #2147483648	; 0x80000000
 8006f36:	e7be      	b.n	8006eb6 <_strtod_l+0x7e>
 8006f38:	9a1d      	ldr	r2, [sp, #116]	; 0x74
 8006f3a:	e9dd 931e 	ldrd	r9, r3, [sp, #120]	; 0x78
 8006f3e:	f202 4233 	addw	r2, r2, #1075	; 0x433
 8006f42:	f423 1380 	bic.w	r3, r3, #1048576	; 0x100000
 8006f46:	ea43 5a02 	orr.w	sl, r3, r2, lsl #20
 8006f4a:	e7f0      	b.n	8006f2e <_strtod_l+0xf6>
 8006f4c:	f8df a170 	ldr.w	sl, [pc, #368]	; 80070c0 <_strtod_l+0x288>
 8006f50:	e7ed      	b.n	8006f2e <_strtod_l+0xf6>
 8006f52:	f06f 4a00 	mvn.w	sl, #2147483648	; 0x80000000
 8006f56:	f04f 39ff 	mov.w	r9, #4294967295	; 0xffffffff
 8006f5a:	e7e8      	b.n	8006f2e <_strtod_l+0xf6>
 8006f5c:	9b1b      	ldr	r3, [sp, #108]	; 0x6c
 8006f5e:	1c5a      	adds	r2, r3, #1
 8006f60:	921b      	str	r2, [sp, #108]	; 0x6c
 8006f62:	785b      	ldrb	r3, [r3, #1]
 8006f64:	2b30      	cmp	r3, #48	; 0x30
 8006f66:	d0f9      	beq.n	8006f5c <_strtod_l+0x124>
 8006f68:	2b00      	cmp	r3, #0
 8006f6a:	d0a4      	beq.n	8006eb6 <_strtod_l+0x7e>
 8006f6c:	2301      	movs	r3, #1
 8006f6e:	2500      	movs	r5, #0
 8006f70:	220a      	movs	r2, #10
 8006f72:	9307      	str	r3, [sp, #28]
 8006f74:	9b1b      	ldr	r3, [sp, #108]	; 0x6c
 8006f76:	9506      	str	r5, [sp, #24]
 8006f78:	9308      	str	r3, [sp, #32]
 8006f7a:	9504      	str	r5, [sp, #16]
 8006f7c:	981b      	ldr	r0, [sp, #108]	; 0x6c
 8006f7e:	7807      	ldrb	r7, [r0, #0]
 8006f80:	f1a7 0330 	sub.w	r3, r7, #48	; 0x30
 8006f84:	b2d9      	uxtb	r1, r3
 8006f86:	2909      	cmp	r1, #9
 8006f88:	d929      	bls.n	8006fde <_strtod_l+0x1a6>
 8006f8a:	4622      	mov	r2, r4
 8006f8c:	f8d8 1000 	ldr.w	r1, [r8]
 8006f90:	f002 fcf4 	bl	800997c <strncmp>
 8006f94:	2800      	cmp	r0, #0
 8006f96:	d031      	beq.n	8006ffc <_strtod_l+0x1c4>
 8006f98:	2000      	movs	r0, #0
 8006f9a:	463b      	mov	r3, r7
 8006f9c:	4602      	mov	r2, r0
 8006f9e:	9c04      	ldr	r4, [sp, #16]
 8006fa0:	9005      	str	r0, [sp, #20]
 8006fa2:	2b65      	cmp	r3, #101	; 0x65
 8006fa4:	d001      	beq.n	8006faa <_strtod_l+0x172>
 8006fa6:	2b45      	cmp	r3, #69	; 0x45
 8006fa8:	d114      	bne.n	8006fd4 <_strtod_l+0x19c>
 8006faa:	b924      	cbnz	r4, 8006fb6 <_strtod_l+0x17e>
 8006fac:	b910      	cbnz	r0, 8006fb4 <_strtod_l+0x17c>
 8006fae:	9b07      	ldr	r3, [sp, #28]
 8006fb0:	2b00      	cmp	r3, #0
 8006fb2:	d09e      	beq.n	8006ef2 <_strtod_l+0xba>
 8006fb4:	2400      	movs	r4, #0
 8006fb6:	9e1b      	ldr	r6, [sp, #108]	; 0x6c
 8006fb8:	1c73      	adds	r3, r6, #1
 8006fba:	931b      	str	r3, [sp, #108]	; 0x6c
 8006fbc:	7873      	ldrb	r3, [r6, #1]
 8006fbe:	2b2b      	cmp	r3, #43	; 0x2b
 8006fc0:	d078      	beq.n	80070b4 <_strtod_l+0x27c>
 8006fc2:	2b2d      	cmp	r3, #45	; 0x2d
 8006fc4:	d070      	beq.n	80070a8 <_strtod_l+0x270>
 8006fc6:	f04f 0c00 	mov.w	ip, #0
 8006fca:	f1a3 0730 	sub.w	r7, r3, #48	; 0x30
 8006fce:	2f09      	cmp	r7, #9
 8006fd0:	d97c      	bls.n	80070cc <_strtod_l+0x294>
 8006fd2:	961b      	str	r6, [sp, #108]	; 0x6c
 8006fd4:	f04f 0e00 	mov.w	lr, #0
 8006fd8:	e09a      	b.n	8007110 <_strtod_l+0x2d8>
 8006fda:	2300      	movs	r3, #0
 8006fdc:	e7c7      	b.n	8006f6e <_strtod_l+0x136>
 8006fde:	9904      	ldr	r1, [sp, #16]
 8006fe0:	3001      	adds	r0, #1
 8006fe2:	2908      	cmp	r1, #8
 8006fe4:	bfd7      	itett	le
 8006fe6:	9906      	ldrle	r1, [sp, #24]
 8006fe8:	fb02 3505 	mlagt	r5, r2, r5, r3
 8006fec:	fb02 3301 	mlale	r3, r2, r1, r3
 8006ff0:	9306      	strle	r3, [sp, #24]
 8006ff2:	9b04      	ldr	r3, [sp, #16]
 8006ff4:	901b      	str	r0, [sp, #108]	; 0x6c
 8006ff6:	3301      	adds	r3, #1
 8006ff8:	9304      	str	r3, [sp, #16]
 8006ffa:	e7bf      	b.n	8006f7c <_strtod_l+0x144>
 8006ffc:	9b1b      	ldr	r3, [sp, #108]	; 0x6c
 8006ffe:	191a      	adds	r2, r3, r4
 8007000:	921b      	str	r2, [sp, #108]	; 0x6c
 8007002:	9a04      	ldr	r2, [sp, #16]
 8007004:	5d1b      	ldrb	r3, [r3, r4]
 8007006:	2a00      	cmp	r2, #0
 8007008:	d037      	beq.n	800707a <_strtod_l+0x242>
 800700a:	4602      	mov	r2, r0
 800700c:	9c04      	ldr	r4, [sp, #16]
 800700e:	f1a3 0130 	sub.w	r1, r3, #48	; 0x30
 8007012:	2909      	cmp	r1, #9
 8007014:	d913      	bls.n	800703e <_strtod_l+0x206>
 8007016:	2101      	movs	r1, #1
 8007018:	9105      	str	r1, [sp, #20]
 800701a:	e7c2      	b.n	8006fa2 <_strtod_l+0x16a>
 800701c:	9b1b      	ldr	r3, [sp, #108]	; 0x6c
 800701e:	3001      	adds	r0, #1
 8007020:	1c5a      	adds	r2, r3, #1
 8007022:	921b      	str	r2, [sp, #108]	; 0x6c
 8007024:	785b      	ldrb	r3, [r3, #1]
 8007026:	2b30      	cmp	r3, #48	; 0x30
 8007028:	d0f8      	beq.n	800701c <_strtod_l+0x1e4>
 800702a:	f1a3 0231 	sub.w	r2, r3, #49	; 0x31
 800702e:	2a08      	cmp	r2, #8
 8007030:	f200 84f0 	bhi.w	8007a14 <_strtod_l+0xbdc>
 8007034:	9a1b      	ldr	r2, [sp, #108]	; 0x6c
 8007036:	9208      	str	r2, [sp, #32]
 8007038:	4602      	mov	r2, r0
 800703a:	2000      	movs	r0, #0
 800703c:	4604      	mov	r4, r0
 800703e:	f1b3 0e30 	subs.w	lr, r3, #48	; 0x30
 8007042:	f100 0101 	add.w	r1, r0, #1
 8007046:	d012      	beq.n	800706e <_strtod_l+0x236>
 8007048:	440a      	add	r2, r1
 800704a:	270a      	movs	r7, #10
 800704c:	4621      	mov	r1, r4
 800704e:	eb00 0c04 	add.w	ip, r0, r4
 8007052:	458c      	cmp	ip, r1
 8007054:	d113      	bne.n	800707e <_strtod_l+0x246>
 8007056:	1821      	adds	r1, r4, r0
 8007058:	2908      	cmp	r1, #8
 800705a:	f104 0401 	add.w	r4, r4, #1
 800705e:	4404      	add	r4, r0
 8007060:	dc19      	bgt.n	8007096 <_strtod_l+0x25e>
 8007062:	210a      	movs	r1, #10
 8007064:	9b06      	ldr	r3, [sp, #24]
 8007066:	fb01 e303 	mla	r3, r1, r3, lr
 800706a:	9306      	str	r3, [sp, #24]
 800706c:	2100      	movs	r1, #0
 800706e:	9b1b      	ldr	r3, [sp, #108]	; 0x6c
 8007070:	1c58      	adds	r0, r3, #1
 8007072:	901b      	str	r0, [sp, #108]	; 0x6c
 8007074:	785b      	ldrb	r3, [r3, #1]
 8007076:	4608      	mov	r0, r1
 8007078:	e7c9      	b.n	800700e <_strtod_l+0x1d6>
 800707a:	9804      	ldr	r0, [sp, #16]
 800707c:	e7d3      	b.n	8007026 <_strtod_l+0x1ee>
 800707e:	2908      	cmp	r1, #8
 8007080:	f101 0101 	add.w	r1, r1, #1
 8007084:	dc03      	bgt.n	800708e <_strtod_l+0x256>
 8007086:	9b06      	ldr	r3, [sp, #24]
 8007088:	437b      	muls	r3, r7
 800708a:	9306      	str	r3, [sp, #24]
 800708c:	e7e1      	b.n	8007052 <_strtod_l+0x21a>
 800708e:	2910      	cmp	r1, #16
 8007090:	bfd8      	it	le
 8007092:	437d      	mulle	r5, r7
 8007094:	e7dd      	b.n	8007052 <_strtod_l+0x21a>
 8007096:	2c10      	cmp	r4, #16
 8007098:	bfdc      	itt	le
 800709a:	210a      	movle	r1, #10
 800709c:	fb01 e505 	mlale	r5, r1, r5, lr
 80070a0:	e7e4      	b.n	800706c <_strtod_l+0x234>
 80070a2:	2301      	movs	r3, #1
 80070a4:	9305      	str	r3, [sp, #20]
 80070a6:	e781      	b.n	8006fac <_strtod_l+0x174>
 80070a8:	f04f 0c01 	mov.w	ip, #1
 80070ac:	1cb3      	adds	r3, r6, #2
 80070ae:	931b      	str	r3, [sp, #108]	; 0x6c
 80070b0:	78b3      	ldrb	r3, [r6, #2]
 80070b2:	e78a      	b.n	8006fca <_strtod_l+0x192>
 80070b4:	f04f 0c00 	mov.w	ip, #0
 80070b8:	e7f8      	b.n	80070ac <_strtod_l+0x274>
 80070ba:	bf00      	nop
 80070bc:	08009b70 	.word	0x08009b70
 80070c0:	7ff00000 	.word	0x7ff00000
 80070c4:	9b1b      	ldr	r3, [sp, #108]	; 0x6c
 80070c6:	1c5f      	adds	r7, r3, #1
 80070c8:	971b      	str	r7, [sp, #108]	; 0x6c
 80070ca:	785b      	ldrb	r3, [r3, #1]
 80070cc:	2b30      	cmp	r3, #48	; 0x30
 80070ce:	d0f9      	beq.n	80070c4 <_strtod_l+0x28c>
 80070d0:	f1a3 0731 	sub.w	r7, r3, #49	; 0x31
 80070d4:	2f08      	cmp	r7, #8
 80070d6:	f63f af7d 	bhi.w	8006fd4 <_strtod_l+0x19c>
 80070da:	f1a3 0e30 	sub.w	lr, r3, #48	; 0x30
 80070de:	9b1b      	ldr	r3, [sp, #108]	; 0x6c
 80070e0:	9309      	str	r3, [sp, #36]	; 0x24
 80070e2:	9b1b      	ldr	r3, [sp, #108]	; 0x6c
 80070e4:	1c5f      	adds	r7, r3, #1
 80070e6:	971b      	str	r7, [sp, #108]	; 0x6c
 80070e8:	785b      	ldrb	r3, [r3, #1]
 80070ea:	f1a3 0830 	sub.w	r8, r3, #48	; 0x30
 80070ee:	f1b8 0f09 	cmp.w	r8, #9
 80070f2:	d937      	bls.n	8007164 <_strtod_l+0x32c>
 80070f4:	9909      	ldr	r1, [sp, #36]	; 0x24
 80070f6:	1a7f      	subs	r7, r7, r1
 80070f8:	2f08      	cmp	r7, #8
 80070fa:	f644 671f 	movw	r7, #19999	; 0x4e1f
 80070fe:	dc37      	bgt.n	8007170 <_strtod_l+0x338>
 8007100:	45be      	cmp	lr, r7
 8007102:	bfa8      	it	ge
 8007104:	46be      	movge	lr, r7
 8007106:	f1bc 0f00 	cmp.w	ip, #0
 800710a:	d001      	beq.n	8007110 <_strtod_l+0x2d8>
 800710c:	f1ce 0e00 	rsb	lr, lr, #0
 8007110:	2c00      	cmp	r4, #0
 8007112:	d151      	bne.n	80071b8 <_strtod_l+0x380>
 8007114:	2800      	cmp	r0, #0
 8007116:	f47f aece 	bne.w	8006eb6 <_strtod_l+0x7e>
 800711a:	9a07      	ldr	r2, [sp, #28]
 800711c:	2a00      	cmp	r2, #0
 800711e:	f47f aeca 	bne.w	8006eb6 <_strtod_l+0x7e>
 8007122:	9a05      	ldr	r2, [sp, #20]
 8007124:	2a00      	cmp	r2, #0
 8007126:	f47f aee4 	bne.w	8006ef2 <_strtod_l+0xba>
 800712a:	2b4e      	cmp	r3, #78	; 0x4e
 800712c:	d027      	beq.n	800717e <_strtod_l+0x346>
 800712e:	dc21      	bgt.n	8007174 <_strtod_l+0x33c>
 8007130:	2b49      	cmp	r3, #73	; 0x49
 8007132:	f47f aede 	bne.w	8006ef2 <_strtod_l+0xba>
 8007136:	49a4      	ldr	r1, [pc, #656]	; (80073c8 <_strtod_l+0x590>)
 8007138:	a81b      	add	r0, sp, #108	; 0x6c
 800713a:	f001 fde1 	bl	8008d00 <__match>
 800713e:	2800      	cmp	r0, #0
 8007140:	f43f aed7 	beq.w	8006ef2 <_strtod_l+0xba>
 8007144:	9b1b      	ldr	r3, [sp, #108]	; 0x6c
 8007146:	49a1      	ldr	r1, [pc, #644]	; (80073cc <_strtod_l+0x594>)
 8007148:	3b01      	subs	r3, #1
 800714a:	a81b      	add	r0, sp, #108	; 0x6c
 800714c:	931b      	str	r3, [sp, #108]	; 0x6c
 800714e:	f001 fdd7 	bl	8008d00 <__match>
 8007152:	b910      	cbnz	r0, 800715a <_strtod_l+0x322>
 8007154:	9b1b      	ldr	r3, [sp, #108]	; 0x6c
 8007156:	3301      	adds	r3, #1
 8007158:	931b      	str	r3, [sp, #108]	; 0x6c
 800715a:	f8df a284 	ldr.w	sl, [pc, #644]	; 80073e0 <_strtod_l+0x5a8>
 800715e:	f04f 0900 	mov.w	r9, #0
 8007162:	e6a8      	b.n	8006eb6 <_strtod_l+0x7e>
 8007164:	210a      	movs	r1, #10
 8007166:	fb01 3e0e 	mla	lr, r1, lr, r3
 800716a:	f1ae 0e30 	sub.w	lr, lr, #48	; 0x30
 800716e:	e7b8      	b.n	80070e2 <_strtod_l+0x2aa>
 8007170:	46be      	mov	lr, r7
 8007172:	e7c8      	b.n	8007106 <_strtod_l+0x2ce>
 8007174:	2b69      	cmp	r3, #105	; 0x69
 8007176:	d0de      	beq.n	8007136 <_strtod_l+0x2fe>
 8007178:	2b6e      	cmp	r3, #110	; 0x6e
 800717a:	f47f aeba 	bne.w	8006ef2 <_strtod_l+0xba>
 800717e:	4994      	ldr	r1, [pc, #592]	; (80073d0 <_strtod_l+0x598>)
 8007180:	a81b      	add	r0, sp, #108	; 0x6c
 8007182:	f001 fdbd 	bl	8008d00 <__match>
 8007186:	2800      	cmp	r0, #0
 8007188:	f43f aeb3 	beq.w	8006ef2 <_strtod_l+0xba>
 800718c:	9b1b      	ldr	r3, [sp, #108]	; 0x6c
 800718e:	781b      	ldrb	r3, [r3, #0]
 8007190:	2b28      	cmp	r3, #40	; 0x28
 8007192:	d10e      	bne.n	80071b2 <_strtod_l+0x37a>
 8007194:	aa1e      	add	r2, sp, #120	; 0x78
 8007196:	498f      	ldr	r1, [pc, #572]	; (80073d4 <_strtod_l+0x59c>)
 8007198:	a81b      	add	r0, sp, #108	; 0x6c
 800719a:	f001 fdc5 	bl	8008d28 <__hexnan>
 800719e:	2805      	cmp	r0, #5
 80071a0:	d107      	bne.n	80071b2 <_strtod_l+0x37a>
 80071a2:	9b1f      	ldr	r3, [sp, #124]	; 0x7c
 80071a4:	f8dd 9078 	ldr.w	r9, [sp, #120]	; 0x78
 80071a8:	f043 4aff 	orr.w	sl, r3, #2139095040	; 0x7f800000
 80071ac:	f44a 0ae0 	orr.w	sl, sl, #7340032	; 0x700000
 80071b0:	e681      	b.n	8006eb6 <_strtod_l+0x7e>
 80071b2:	f8df a234 	ldr.w	sl, [pc, #564]	; 80073e8 <_strtod_l+0x5b0>
 80071b6:	e7d2      	b.n	800715e <_strtod_l+0x326>
 80071b8:	ebae 0302 	sub.w	r3, lr, r2
 80071bc:	9307      	str	r3, [sp, #28]
 80071be:	9b04      	ldr	r3, [sp, #16]
 80071c0:	9806      	ldr	r0, [sp, #24]
 80071c2:	2b00      	cmp	r3, #0
 80071c4:	bf08      	it	eq
 80071c6:	4623      	moveq	r3, r4
 80071c8:	2c10      	cmp	r4, #16
 80071ca:	9304      	str	r3, [sp, #16]
 80071cc:	46a0      	mov	r8, r4
 80071ce:	bfa8      	it	ge
 80071d0:	f04f 0810 	movge.w	r8, #16
 80071d4:	f7f9 f906 	bl	80003e4 <__aeabi_ui2d>
 80071d8:	2c09      	cmp	r4, #9
 80071da:	4681      	mov	r9, r0
 80071dc:	468a      	mov	sl, r1
 80071de:	dc13      	bgt.n	8007208 <_strtod_l+0x3d0>
 80071e0:	9b07      	ldr	r3, [sp, #28]
 80071e2:	2b00      	cmp	r3, #0
 80071e4:	f43f ae67 	beq.w	8006eb6 <_strtod_l+0x7e>
 80071e8:	9b07      	ldr	r3, [sp, #28]
 80071ea:	dd7e      	ble.n	80072ea <_strtod_l+0x4b2>
 80071ec:	2b16      	cmp	r3, #22
 80071ee:	dc65      	bgt.n	80072bc <_strtod_l+0x484>
 80071f0:	4a79      	ldr	r2, [pc, #484]	; (80073d8 <_strtod_l+0x5a0>)
 80071f2:	eb02 0ec3 	add.w	lr, r2, r3, lsl #3
 80071f6:	464a      	mov	r2, r9
 80071f8:	e9de 0100 	ldrd	r0, r1, [lr]
 80071fc:	4653      	mov	r3, sl
 80071fe:	f7f9 f96b 	bl	80004d8 <__aeabi_dmul>
 8007202:	4681      	mov	r9, r0
 8007204:	468a      	mov	sl, r1
 8007206:	e656      	b.n	8006eb6 <_strtod_l+0x7e>
 8007208:	4b73      	ldr	r3, [pc, #460]	; (80073d8 <_strtod_l+0x5a0>)
 800720a:	eb03 03c8 	add.w	r3, r3, r8, lsl #3
 800720e:	e953 2312 	ldrd	r2, r3, [r3, #-72]	; 0x48
 8007212:	f7f9 f961 	bl	80004d8 <__aeabi_dmul>
 8007216:	4606      	mov	r6, r0
 8007218:	4628      	mov	r0, r5
 800721a:	460f      	mov	r7, r1
 800721c:	f7f9 f8e2 	bl	80003e4 <__aeabi_ui2d>
 8007220:	4602      	mov	r2, r0
 8007222:	460b      	mov	r3, r1
 8007224:	4630      	mov	r0, r6
 8007226:	4639      	mov	r1, r7
 8007228:	f7f8 ffa0 	bl	800016c <__adddf3>
 800722c:	2c0f      	cmp	r4, #15
 800722e:	4681      	mov	r9, r0
 8007230:	468a      	mov	sl, r1
 8007232:	ddd5      	ble.n	80071e0 <_strtod_l+0x3a8>
 8007234:	9b07      	ldr	r3, [sp, #28]
 8007236:	eba4 0808 	sub.w	r8, r4, r8
 800723a:	4498      	add	r8, r3
 800723c:	f1b8 0f00 	cmp.w	r8, #0
 8007240:	f340 809a 	ble.w	8007378 <_strtod_l+0x540>
 8007244:	f018 030f 	ands.w	r3, r8, #15
 8007248:	d00a      	beq.n	8007260 <_strtod_l+0x428>
 800724a:	4963      	ldr	r1, [pc, #396]	; (80073d8 <_strtod_l+0x5a0>)
 800724c:	464a      	mov	r2, r9
 800724e:	eb01 01c3 	add.w	r1, r1, r3, lsl #3
 8007252:	e9d1 0100 	ldrd	r0, r1, [r1]
 8007256:	4653      	mov	r3, sl
 8007258:	f7f9 f93e 	bl	80004d8 <__aeabi_dmul>
 800725c:	4681      	mov	r9, r0
 800725e:	468a      	mov	sl, r1
 8007260:	f038 080f 	bics.w	r8, r8, #15
 8007264:	d077      	beq.n	8007356 <_strtod_l+0x51e>
 8007266:	f5b8 7f9a 	cmp.w	r8, #308	; 0x134
 800726a:	dd4b      	ble.n	8007304 <_strtod_l+0x4cc>
 800726c:	f04f 0800 	mov.w	r8, #0
 8007270:	f8cd 8010 	str.w	r8, [sp, #16]
 8007274:	f8cd 8020 	str.w	r8, [sp, #32]
 8007278:	f8cd 8018 	str.w	r8, [sp, #24]
 800727c:	2322      	movs	r3, #34	; 0x22
 800727e:	f04f 0900 	mov.w	r9, #0
 8007282:	f8df a15c 	ldr.w	sl, [pc, #348]	; 80073e0 <_strtod_l+0x5a8>
 8007286:	f8cb 3000 	str.w	r3, [fp]
 800728a:	9b08      	ldr	r3, [sp, #32]
 800728c:	2b00      	cmp	r3, #0
 800728e:	f43f ae12 	beq.w	8006eb6 <_strtod_l+0x7e>
 8007292:	991c      	ldr	r1, [sp, #112]	; 0x70
 8007294:	4658      	mov	r0, fp
 8007296:	f001 fe4c 	bl	8008f32 <_Bfree>
 800729a:	9906      	ldr	r1, [sp, #24]
 800729c:	4658      	mov	r0, fp
 800729e:	f001 fe48 	bl	8008f32 <_Bfree>
 80072a2:	9904      	ldr	r1, [sp, #16]
 80072a4:	4658      	mov	r0, fp
 80072a6:	f001 fe44 	bl	8008f32 <_Bfree>
 80072aa:	9908      	ldr	r1, [sp, #32]
 80072ac:	4658      	mov	r0, fp
 80072ae:	f001 fe40 	bl	8008f32 <_Bfree>
 80072b2:	4641      	mov	r1, r8
 80072b4:	4658      	mov	r0, fp
 80072b6:	f001 fe3c 	bl	8008f32 <_Bfree>
 80072ba:	e5fc      	b.n	8006eb6 <_strtod_l+0x7e>
 80072bc:	9a07      	ldr	r2, [sp, #28]
 80072be:	f1c4 0325 	rsb	r3, r4, #37	; 0x25
 80072c2:	4293      	cmp	r3, r2
 80072c4:	dbb6      	blt.n	8007234 <_strtod_l+0x3fc>
 80072c6:	4d44      	ldr	r5, [pc, #272]	; (80073d8 <_strtod_l+0x5a0>)
 80072c8:	f1c4 040f 	rsb	r4, r4, #15
 80072cc:	eb05 01c4 	add.w	r1, r5, r4, lsl #3
 80072d0:	464a      	mov	r2, r9
 80072d2:	e9d1 0100 	ldrd	r0, r1, [r1]
 80072d6:	4653      	mov	r3, sl
 80072d8:	f7f9 f8fe 	bl	80004d8 <__aeabi_dmul>
 80072dc:	9b07      	ldr	r3, [sp, #28]
 80072de:	1b1c      	subs	r4, r3, r4
 80072e0:	eb05 05c4 	add.w	r5, r5, r4, lsl #3
 80072e4:	e9d5 2300 	ldrd	r2, r3, [r5]
 80072e8:	e789      	b.n	80071fe <_strtod_l+0x3c6>
 80072ea:	f113 0f16 	cmn.w	r3, #22
 80072ee:	dba1      	blt.n	8007234 <_strtod_l+0x3fc>
 80072f0:	4a39      	ldr	r2, [pc, #228]	; (80073d8 <_strtod_l+0x5a0>)
 80072f2:	4648      	mov	r0, r9
 80072f4:	eba2 02c3 	sub.w	r2, r2, r3, lsl #3
 80072f8:	e9d2 2300 	ldrd	r2, r3, [r2]
 80072fc:	4651      	mov	r1, sl
 80072fe:	f7f9 fa15 	bl	800072c <__aeabi_ddiv>
 8007302:	e77e      	b.n	8007202 <_strtod_l+0x3ca>
 8007304:	2300      	movs	r3, #0
 8007306:	4648      	mov	r0, r9
 8007308:	4651      	mov	r1, sl
 800730a:	461d      	mov	r5, r3
 800730c:	4e33      	ldr	r6, [pc, #204]	; (80073dc <_strtod_l+0x5a4>)
 800730e:	ea4f 1828 	mov.w	r8, r8, asr #4
 8007312:	f1b8 0f01 	cmp.w	r8, #1
 8007316:	dc21      	bgt.n	800735c <_strtod_l+0x524>
 8007318:	b10b      	cbz	r3, 800731e <_strtod_l+0x4e6>
 800731a:	4681      	mov	r9, r0
 800731c:	468a      	mov	sl, r1
 800731e:	4b2f      	ldr	r3, [pc, #188]	; (80073dc <_strtod_l+0x5a4>)
 8007320:	f1aa 7a54 	sub.w	sl, sl, #55574528	; 0x3500000
 8007324:	eb03 05c5 	add.w	r5, r3, r5, lsl #3
 8007328:	464a      	mov	r2, r9
 800732a:	e9d5 0100 	ldrd	r0, r1, [r5]
 800732e:	4653      	mov	r3, sl
 8007330:	f7f9 f8d2 	bl	80004d8 <__aeabi_dmul>
 8007334:	4b2a      	ldr	r3, [pc, #168]	; (80073e0 <_strtod_l+0x5a8>)
 8007336:	460a      	mov	r2, r1
 8007338:	400b      	ands	r3, r1
 800733a:	492a      	ldr	r1, [pc, #168]	; (80073e4 <_strtod_l+0x5ac>)
 800733c:	4681      	mov	r9, r0
 800733e:	428b      	cmp	r3, r1
 8007340:	d894      	bhi.n	800726c <_strtod_l+0x434>
 8007342:	f5a1 1180 	sub.w	r1, r1, #1048576	; 0x100000
 8007346:	428b      	cmp	r3, r1
 8007348:	bf86      	itte	hi
 800734a:	f04f 39ff 	movhi.w	r9, #4294967295	; 0xffffffff
 800734e:	f8df a09c 	ldrhi.w	sl, [pc, #156]	; 80073ec <_strtod_l+0x5b4>
 8007352:	f102 7a54 	addls.w	sl, r2, #55574528	; 0x3500000
 8007356:	2300      	movs	r3, #0
 8007358:	9305      	str	r3, [sp, #20]
 800735a:	e07b      	b.n	8007454 <_strtod_l+0x61c>
 800735c:	f018 0f01 	tst.w	r8, #1
 8007360:	d006      	beq.n	8007370 <_strtod_l+0x538>
 8007362:	eb06 03c5 	add.w	r3, r6, r5, lsl #3
 8007366:	e9d3 2300 	ldrd	r2, r3, [r3]
 800736a:	f7f9 f8b5 	bl	80004d8 <__aeabi_dmul>
 800736e:	2301      	movs	r3, #1
 8007370:	3501      	adds	r5, #1
 8007372:	ea4f 0868 	mov.w	r8, r8, asr #1
 8007376:	e7cc      	b.n	8007312 <_strtod_l+0x4da>
 8007378:	d0ed      	beq.n	8007356 <_strtod_l+0x51e>
 800737a:	f1c8 0800 	rsb	r8, r8, #0
 800737e:	f018 020f 	ands.w	r2, r8, #15
 8007382:	d00a      	beq.n	800739a <_strtod_l+0x562>
 8007384:	4b14      	ldr	r3, [pc, #80]	; (80073d8 <_strtod_l+0x5a0>)
 8007386:	4648      	mov	r0, r9
 8007388:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 800738c:	4651      	mov	r1, sl
 800738e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8007392:	f7f9 f9cb 	bl	800072c <__aeabi_ddiv>
 8007396:	4681      	mov	r9, r0
 8007398:	468a      	mov	sl, r1
 800739a:	ea5f 1828 	movs.w	r8, r8, asr #4
 800739e:	d0da      	beq.n	8007356 <_strtod_l+0x51e>
 80073a0:	f1b8 0f1f 	cmp.w	r8, #31
 80073a4:	dd24      	ble.n	80073f0 <_strtod_l+0x5b8>
 80073a6:	f04f 0800 	mov.w	r8, #0
 80073aa:	f8cd 8010 	str.w	r8, [sp, #16]
 80073ae:	f8cd 8020 	str.w	r8, [sp, #32]
 80073b2:	f8cd 8018 	str.w	r8, [sp, #24]
 80073b6:	2322      	movs	r3, #34	; 0x22
 80073b8:	f04f 0900 	mov.w	r9, #0
 80073bc:	f04f 0a00 	mov.w	sl, #0
 80073c0:	f8cb 3000 	str.w	r3, [fp]
 80073c4:	e761      	b.n	800728a <_strtod_l+0x452>
 80073c6:	bf00      	nop
 80073c8:	08009b39 	.word	0x08009b39
 80073cc:	08009bc3 	.word	0x08009bc3
 80073d0:	08009b41 	.word	0x08009b41
 80073d4:	08009b84 	.word	0x08009b84
 80073d8:	08009c00 	.word	0x08009c00
 80073dc:	08009bd8 	.word	0x08009bd8
 80073e0:	7ff00000 	.word	0x7ff00000
 80073e4:	7ca00000 	.word	0x7ca00000
 80073e8:	fff80000 	.word	0xfff80000
 80073ec:	7fefffff 	.word	0x7fefffff
 80073f0:	f018 0310 	ands.w	r3, r8, #16
 80073f4:	bf18      	it	ne
 80073f6:	236a      	movne	r3, #106	; 0x6a
 80073f8:	4648      	mov	r0, r9
 80073fa:	9305      	str	r3, [sp, #20]
 80073fc:	4651      	mov	r1, sl
 80073fe:	2300      	movs	r3, #0
 8007400:	4da1      	ldr	r5, [pc, #644]	; (8007688 <_strtod_l+0x850>)
 8007402:	f1b8 0f00 	cmp.w	r8, #0
 8007406:	f300 8113 	bgt.w	8007630 <_strtod_l+0x7f8>
 800740a:	b10b      	cbz	r3, 8007410 <_strtod_l+0x5d8>
 800740c:	4681      	mov	r9, r0
 800740e:	468a      	mov	sl, r1
 8007410:	9b05      	ldr	r3, [sp, #20]
 8007412:	b1bb      	cbz	r3, 8007444 <_strtod_l+0x60c>
 8007414:	f3ca 530a 	ubfx	r3, sl, #20, #11
 8007418:	f1c3 036b 	rsb	r3, r3, #107	; 0x6b
 800741c:	2b00      	cmp	r3, #0
 800741e:	4651      	mov	r1, sl
 8007420:	dd10      	ble.n	8007444 <_strtod_l+0x60c>
 8007422:	2b1f      	cmp	r3, #31
 8007424:	f340 8110 	ble.w	8007648 <_strtod_l+0x810>
 8007428:	2b34      	cmp	r3, #52	; 0x34
 800742a:	bfd8      	it	le
 800742c:	f04f 32ff 	movle.w	r2, #4294967295	; 0xffffffff
 8007430:	f04f 0900 	mov.w	r9, #0
 8007434:	bfcf      	iteee	gt
 8007436:	f04f 7a5c 	movgt.w	sl, #57671680	; 0x3700000
 800743a:	3b20      	suble	r3, #32
 800743c:	fa02 f303 	lslle.w	r3, r2, r3
 8007440:	ea03 0a01 	andle.w	sl, r3, r1
 8007444:	2200      	movs	r2, #0
 8007446:	2300      	movs	r3, #0
 8007448:	4648      	mov	r0, r9
 800744a:	4651      	mov	r1, sl
 800744c:	f7f9 faac 	bl	80009a8 <__aeabi_dcmpeq>
 8007450:	2800      	cmp	r0, #0
 8007452:	d1a8      	bne.n	80073a6 <_strtod_l+0x56e>
 8007454:	9b06      	ldr	r3, [sp, #24]
 8007456:	9a04      	ldr	r2, [sp, #16]
 8007458:	9300      	str	r3, [sp, #0]
 800745a:	9908      	ldr	r1, [sp, #32]
 800745c:	4623      	mov	r3, r4
 800745e:	4658      	mov	r0, fp
 8007460:	f001 fdb9 	bl	8008fd6 <__s2b>
 8007464:	9008      	str	r0, [sp, #32]
 8007466:	2800      	cmp	r0, #0
 8007468:	f43f af00 	beq.w	800726c <_strtod_l+0x434>
 800746c:	9a07      	ldr	r2, [sp, #28]
 800746e:	9b07      	ldr	r3, [sp, #28]
 8007470:	2a00      	cmp	r2, #0
 8007472:	f1c3 0300 	rsb	r3, r3, #0
 8007476:	bfa8      	it	ge
 8007478:	2300      	movge	r3, #0
 800747a:	f04f 0800 	mov.w	r8, #0
 800747e:	930e      	str	r3, [sp, #56]	; 0x38
 8007480:	ea22 73e2 	bic.w	r3, r2, r2, asr #31
 8007484:	9316      	str	r3, [sp, #88]	; 0x58
 8007486:	f8cd 8010 	str.w	r8, [sp, #16]
 800748a:	9b08      	ldr	r3, [sp, #32]
 800748c:	4658      	mov	r0, fp
 800748e:	6859      	ldr	r1, [r3, #4]
 8007490:	f001 fd1b 	bl	8008eca <_Balloc>
 8007494:	9006      	str	r0, [sp, #24]
 8007496:	2800      	cmp	r0, #0
 8007498:	f43f aef0 	beq.w	800727c <_strtod_l+0x444>
 800749c:	9b08      	ldr	r3, [sp, #32]
 800749e:	300c      	adds	r0, #12
 80074a0:	691a      	ldr	r2, [r3, #16]
 80074a2:	f103 010c 	add.w	r1, r3, #12
 80074a6:	3202      	adds	r2, #2
 80074a8:	0092      	lsls	r2, r2, #2
 80074aa:	f001 fd01 	bl	8008eb0 <memcpy>
 80074ae:	ab1e      	add	r3, sp, #120	; 0x78
 80074b0:	9301      	str	r3, [sp, #4]
 80074b2:	ab1d      	add	r3, sp, #116	; 0x74
 80074b4:	9300      	str	r3, [sp, #0]
 80074b6:	464a      	mov	r2, r9
 80074b8:	4653      	mov	r3, sl
 80074ba:	4658      	mov	r0, fp
 80074bc:	e9cd 9a0a 	strd	r9, sl, [sp, #40]	; 0x28
 80074c0:	f002 f844 	bl	800954c <__d2b>
 80074c4:	901c      	str	r0, [sp, #112]	; 0x70
 80074c6:	2800      	cmp	r0, #0
 80074c8:	f43f aed8 	beq.w	800727c <_strtod_l+0x444>
 80074cc:	2101      	movs	r1, #1
 80074ce:	4658      	mov	r0, fp
 80074d0:	f001 fe0d 	bl	80090ee <__i2b>
 80074d4:	9004      	str	r0, [sp, #16]
 80074d6:	4603      	mov	r3, r0
 80074d8:	2800      	cmp	r0, #0
 80074da:	f43f aecf 	beq.w	800727c <_strtod_l+0x444>
 80074de:	9d1d      	ldr	r5, [sp, #116]	; 0x74
 80074e0:	9a1e      	ldr	r2, [sp, #120]	; 0x78
 80074e2:	2d00      	cmp	r5, #0
 80074e4:	bfab      	itete	ge
 80074e6:	9b0e      	ldrge	r3, [sp, #56]	; 0x38
 80074e8:	9b16      	ldrlt	r3, [sp, #88]	; 0x58
 80074ea:	18ee      	addge	r6, r5, r3
 80074ec:	1b5c      	sublt	r4, r3, r5
 80074ee:	9b05      	ldr	r3, [sp, #20]
 80074f0:	bfa8      	it	ge
 80074f2:	9c16      	ldrge	r4, [sp, #88]	; 0x58
 80074f4:	eba5 0503 	sub.w	r5, r5, r3
 80074f8:	4415      	add	r5, r2
 80074fa:	4b64      	ldr	r3, [pc, #400]	; (800768c <_strtod_l+0x854>)
 80074fc:	f105 35ff 	add.w	r5, r5, #4294967295	; 0xffffffff
 8007500:	bfb8      	it	lt
 8007502:	9e0e      	ldrlt	r6, [sp, #56]	; 0x38
 8007504:	429d      	cmp	r5, r3
 8007506:	f1c2 0236 	rsb	r2, r2, #54	; 0x36
 800750a:	f280 80af 	bge.w	800766c <_strtod_l+0x834>
 800750e:	1b5b      	subs	r3, r3, r5
 8007510:	2b1f      	cmp	r3, #31
 8007512:	eba2 0203 	sub.w	r2, r2, r3
 8007516:	f04f 0701 	mov.w	r7, #1
 800751a:	f300 809c 	bgt.w	8007656 <_strtod_l+0x81e>
 800751e:	2500      	movs	r5, #0
 8007520:	fa07 f303 	lsl.w	r3, r7, r3
 8007524:	930f      	str	r3, [sp, #60]	; 0x3c
 8007526:	18b7      	adds	r7, r6, r2
 8007528:	9b05      	ldr	r3, [sp, #20]
 800752a:	42be      	cmp	r6, r7
 800752c:	4414      	add	r4, r2
 800752e:	441c      	add	r4, r3
 8007530:	4633      	mov	r3, r6
 8007532:	bfa8      	it	ge
 8007534:	463b      	movge	r3, r7
 8007536:	42a3      	cmp	r3, r4
 8007538:	bfa8      	it	ge
 800753a:	4623      	movge	r3, r4
 800753c:	2b00      	cmp	r3, #0
 800753e:	bfc2      	ittt	gt
 8007540:	1aff      	subgt	r7, r7, r3
 8007542:	1ae4      	subgt	r4, r4, r3
 8007544:	1af6      	subgt	r6, r6, r3
 8007546:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 8007548:	b1bb      	cbz	r3, 800757a <_strtod_l+0x742>
 800754a:	461a      	mov	r2, r3
 800754c:	9904      	ldr	r1, [sp, #16]
 800754e:	4658      	mov	r0, fp
 8007550:	f001 fe6c 	bl	800922c <__pow5mult>
 8007554:	9004      	str	r0, [sp, #16]
 8007556:	2800      	cmp	r0, #0
 8007558:	f43f ae90 	beq.w	800727c <_strtod_l+0x444>
 800755c:	4601      	mov	r1, r0
 800755e:	9a1c      	ldr	r2, [sp, #112]	; 0x70
 8007560:	4658      	mov	r0, fp
 8007562:	f001 fdcd 	bl	8009100 <__multiply>
 8007566:	9009      	str	r0, [sp, #36]	; 0x24
 8007568:	2800      	cmp	r0, #0
 800756a:	f43f ae87 	beq.w	800727c <_strtod_l+0x444>
 800756e:	991c      	ldr	r1, [sp, #112]	; 0x70
 8007570:	4658      	mov	r0, fp
 8007572:	f001 fcde 	bl	8008f32 <_Bfree>
 8007576:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8007578:	931c      	str	r3, [sp, #112]	; 0x70
 800757a:	2f00      	cmp	r7, #0
 800757c:	dc7a      	bgt.n	8007674 <_strtod_l+0x83c>
 800757e:	9b07      	ldr	r3, [sp, #28]
 8007580:	2b00      	cmp	r3, #0
 8007582:	dd08      	ble.n	8007596 <_strtod_l+0x75e>
 8007584:	9a16      	ldr	r2, [sp, #88]	; 0x58
 8007586:	9906      	ldr	r1, [sp, #24]
 8007588:	4658      	mov	r0, fp
 800758a:	f001 fe4f 	bl	800922c <__pow5mult>
 800758e:	9006      	str	r0, [sp, #24]
 8007590:	2800      	cmp	r0, #0
 8007592:	f43f ae73 	beq.w	800727c <_strtod_l+0x444>
 8007596:	2c00      	cmp	r4, #0
 8007598:	dd08      	ble.n	80075ac <_strtod_l+0x774>
 800759a:	4622      	mov	r2, r4
 800759c:	9906      	ldr	r1, [sp, #24]
 800759e:	4658      	mov	r0, fp
 80075a0:	f001 fe92 	bl	80092c8 <__lshift>
 80075a4:	9006      	str	r0, [sp, #24]
 80075a6:	2800      	cmp	r0, #0
 80075a8:	f43f ae68 	beq.w	800727c <_strtod_l+0x444>
 80075ac:	2e00      	cmp	r6, #0
 80075ae:	dd08      	ble.n	80075c2 <_strtod_l+0x78a>
 80075b0:	4632      	mov	r2, r6
 80075b2:	9904      	ldr	r1, [sp, #16]
 80075b4:	4658      	mov	r0, fp
 80075b6:	f001 fe87 	bl	80092c8 <__lshift>
 80075ba:	9004      	str	r0, [sp, #16]
 80075bc:	2800      	cmp	r0, #0
 80075be:	f43f ae5d 	beq.w	800727c <_strtod_l+0x444>
 80075c2:	9a06      	ldr	r2, [sp, #24]
 80075c4:	991c      	ldr	r1, [sp, #112]	; 0x70
 80075c6:	4658      	mov	r0, fp
 80075c8:	f001 feec 	bl	80093a4 <__mdiff>
 80075cc:	4680      	mov	r8, r0
 80075ce:	2800      	cmp	r0, #0
 80075d0:	f43f ae54 	beq.w	800727c <_strtod_l+0x444>
 80075d4:	2400      	movs	r4, #0
 80075d6:	68c3      	ldr	r3, [r0, #12]
 80075d8:	9904      	ldr	r1, [sp, #16]
 80075da:	60c4      	str	r4, [r0, #12]
 80075dc:	930c      	str	r3, [sp, #48]	; 0x30
 80075de:	f001 fec7 	bl	8009370 <__mcmp>
 80075e2:	42a0      	cmp	r0, r4
 80075e4:	da54      	bge.n	8007690 <_strtod_l+0x858>
 80075e6:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 80075e8:	b9f3      	cbnz	r3, 8007628 <_strtod_l+0x7f0>
 80075ea:	f1b9 0f00 	cmp.w	r9, #0
 80075ee:	d11b      	bne.n	8007628 <_strtod_l+0x7f0>
 80075f0:	f3ca 0313 	ubfx	r3, sl, #0, #20
 80075f4:	b9c3      	cbnz	r3, 8007628 <_strtod_l+0x7f0>
 80075f6:	f02a 4300 	bic.w	r3, sl, #2147483648	; 0x80000000
 80075fa:	0d1b      	lsrs	r3, r3, #20
 80075fc:	051b      	lsls	r3, r3, #20
 80075fe:	f1b3 6fd6 	cmp.w	r3, #112197632	; 0x6b00000
 8007602:	d911      	bls.n	8007628 <_strtod_l+0x7f0>
 8007604:	f8d8 3014 	ldr.w	r3, [r8, #20]
 8007608:	b91b      	cbnz	r3, 8007612 <_strtod_l+0x7da>
 800760a:	f8d8 3010 	ldr.w	r3, [r8, #16]
 800760e:	2b01      	cmp	r3, #1
 8007610:	dd0a      	ble.n	8007628 <_strtod_l+0x7f0>
 8007612:	4641      	mov	r1, r8
 8007614:	2201      	movs	r2, #1
 8007616:	4658      	mov	r0, fp
 8007618:	f001 fe56 	bl	80092c8 <__lshift>
 800761c:	9904      	ldr	r1, [sp, #16]
 800761e:	4680      	mov	r8, r0
 8007620:	f001 fea6 	bl	8009370 <__mcmp>
 8007624:	2800      	cmp	r0, #0
 8007626:	dc68      	bgt.n	80076fa <_strtod_l+0x8c2>
 8007628:	9b05      	ldr	r3, [sp, #20]
 800762a:	2b00      	cmp	r3, #0
 800762c:	d172      	bne.n	8007714 <_strtod_l+0x8dc>
 800762e:	e630      	b.n	8007292 <_strtod_l+0x45a>
 8007630:	f018 0f01 	tst.w	r8, #1
 8007634:	d004      	beq.n	8007640 <_strtod_l+0x808>
 8007636:	e9d5 2300 	ldrd	r2, r3, [r5]
 800763a:	f7f8 ff4d 	bl	80004d8 <__aeabi_dmul>
 800763e:	2301      	movs	r3, #1
 8007640:	ea4f 0868 	mov.w	r8, r8, asr #1
 8007644:	3508      	adds	r5, #8
 8007646:	e6dc      	b.n	8007402 <_strtod_l+0x5ca>
 8007648:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 800764c:	fa02 f303 	lsl.w	r3, r2, r3
 8007650:	ea03 0909 	and.w	r9, r3, r9
 8007654:	e6f6      	b.n	8007444 <_strtod_l+0x60c>
 8007656:	f1c5 457f 	rsb	r5, r5, #4278190080	; 0xff000000
 800765a:	f505 057f 	add.w	r5, r5, #16711680	; 0xff0000
 800765e:	f505 457b 	add.w	r5, r5, #64256	; 0xfb00
 8007662:	35e2      	adds	r5, #226	; 0xe2
 8007664:	fa07 f505 	lsl.w	r5, r7, r5
 8007668:	970f      	str	r7, [sp, #60]	; 0x3c
 800766a:	e75c      	b.n	8007526 <_strtod_l+0x6ee>
 800766c:	2301      	movs	r3, #1
 800766e:	2500      	movs	r5, #0
 8007670:	930f      	str	r3, [sp, #60]	; 0x3c
 8007672:	e758      	b.n	8007526 <_strtod_l+0x6ee>
 8007674:	463a      	mov	r2, r7
 8007676:	991c      	ldr	r1, [sp, #112]	; 0x70
 8007678:	4658      	mov	r0, fp
 800767a:	f001 fe25 	bl	80092c8 <__lshift>
 800767e:	901c      	str	r0, [sp, #112]	; 0x70
 8007680:	2800      	cmp	r0, #0
 8007682:	f47f af7c 	bne.w	800757e <_strtod_l+0x746>
 8007686:	e5f9      	b.n	800727c <_strtod_l+0x444>
 8007688:	08009b98 	.word	0x08009b98
 800768c:	fffffc02 	.word	0xfffffc02
 8007690:	f8cd a024 	str.w	sl, [sp, #36]	; 0x24
 8007694:	f040 8089 	bne.w	80077aa <_strtod_l+0x972>
 8007698:	9a0c      	ldr	r2, [sp, #48]	; 0x30
 800769a:	f3ca 0313 	ubfx	r3, sl, #0, #20
 800769e:	b342      	cbz	r2, 80076f2 <_strtod_l+0x8ba>
 80076a0:	4aaf      	ldr	r2, [pc, #700]	; (8007960 <_strtod_l+0xb28>)
 80076a2:	4293      	cmp	r3, r2
 80076a4:	d156      	bne.n	8007754 <_strtod_l+0x91c>
 80076a6:	9b05      	ldr	r3, [sp, #20]
 80076a8:	4648      	mov	r0, r9
 80076aa:	b1eb      	cbz	r3, 80076e8 <_strtod_l+0x8b0>
 80076ac:	4653      	mov	r3, sl
 80076ae:	4aad      	ldr	r2, [pc, #692]	; (8007964 <_strtod_l+0xb2c>)
 80076b0:	f04f 31ff 	mov.w	r1, #4294967295	; 0xffffffff
 80076b4:	401a      	ands	r2, r3
 80076b6:	f1b2 6fd4 	cmp.w	r2, #111149056	; 0x6a00000
 80076ba:	d818      	bhi.n	80076ee <_strtod_l+0x8b6>
 80076bc:	0d12      	lsrs	r2, r2, #20
 80076be:	f1c2 036b 	rsb	r3, r2, #107	; 0x6b
 80076c2:	fa01 f303 	lsl.w	r3, r1, r3
 80076c6:	4298      	cmp	r0, r3
 80076c8:	d144      	bne.n	8007754 <_strtod_l+0x91c>
 80076ca:	4ba7      	ldr	r3, [pc, #668]	; (8007968 <_strtod_l+0xb30>)
 80076cc:	9a09      	ldr	r2, [sp, #36]	; 0x24
 80076ce:	429a      	cmp	r2, r3
 80076d0:	d102      	bne.n	80076d8 <_strtod_l+0x8a0>
 80076d2:	3001      	adds	r0, #1
 80076d4:	f43f add2 	beq.w	800727c <_strtod_l+0x444>
 80076d8:	4ba2      	ldr	r3, [pc, #648]	; (8007964 <_strtod_l+0xb2c>)
 80076da:	9a09      	ldr	r2, [sp, #36]	; 0x24
 80076dc:	f04f 0900 	mov.w	r9, #0
 80076e0:	401a      	ands	r2, r3
 80076e2:	f502 1a80 	add.w	sl, r2, #1048576	; 0x100000
 80076e6:	e79f      	b.n	8007628 <_strtod_l+0x7f0>
 80076e8:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 80076ec:	e7eb      	b.n	80076c6 <_strtod_l+0x88e>
 80076ee:	460b      	mov	r3, r1
 80076f0:	e7e9      	b.n	80076c6 <_strtod_l+0x88e>
 80076f2:	bb7b      	cbnz	r3, 8007754 <_strtod_l+0x91c>
 80076f4:	f1b9 0f00 	cmp.w	r9, #0
 80076f8:	d12c      	bne.n	8007754 <_strtod_l+0x91c>
 80076fa:	9905      	ldr	r1, [sp, #20]
 80076fc:	4653      	mov	r3, sl
 80076fe:	4a99      	ldr	r2, [pc, #612]	; (8007964 <_strtod_l+0xb2c>)
 8007700:	b1f1      	cbz	r1, 8007740 <_strtod_l+0x908>
 8007702:	ea02 010a 	and.w	r1, r2, sl
 8007706:	f1b1 6fd6 	cmp.w	r1, #112197632	; 0x6b00000
 800770a:	dc19      	bgt.n	8007740 <_strtod_l+0x908>
 800770c:	f1b1 7f5c 	cmp.w	r1, #57671680	; 0x3700000
 8007710:	f77f ae51 	ble.w	80073b6 <_strtod_l+0x57e>
 8007714:	2300      	movs	r3, #0
 8007716:	4a95      	ldr	r2, [pc, #596]	; (800796c <_strtod_l+0xb34>)
 8007718:	4648      	mov	r0, r9
 800771a:	e9cd 3214 	strd	r3, r2, [sp, #80]	; 0x50
 800771e:	4651      	mov	r1, sl
 8007720:	e9dd 2314 	ldrd	r2, r3, [sp, #80]	; 0x50
 8007724:	f7f8 fed8 	bl	80004d8 <__aeabi_dmul>
 8007728:	4681      	mov	r9, r0
 800772a:	468a      	mov	sl, r1
 800772c:	2900      	cmp	r1, #0
 800772e:	f47f adb0 	bne.w	8007292 <_strtod_l+0x45a>
 8007732:	2800      	cmp	r0, #0
 8007734:	f47f adad 	bne.w	8007292 <_strtod_l+0x45a>
 8007738:	2322      	movs	r3, #34	; 0x22
 800773a:	f8cb 3000 	str.w	r3, [fp]
 800773e:	e5a8      	b.n	8007292 <_strtod_l+0x45a>
 8007740:	4013      	ands	r3, r2
 8007742:	f5a3 1380 	sub.w	r3, r3, #1048576	; 0x100000
 8007746:	ea6f 5a13 	mvn.w	sl, r3, lsr #20
 800774a:	f04f 39ff 	mov.w	r9, #4294967295	; 0xffffffff
 800774e:	ea6f 5a0a 	mvn.w	sl, sl, lsl #20
 8007752:	e769      	b.n	8007628 <_strtod_l+0x7f0>
 8007754:	b19d      	cbz	r5, 800777e <_strtod_l+0x946>
 8007756:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8007758:	421d      	tst	r5, r3
 800775a:	f43f af65 	beq.w	8007628 <_strtod_l+0x7f0>
 800775e:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 8007760:	9a05      	ldr	r2, [sp, #20]
 8007762:	4648      	mov	r0, r9
 8007764:	4651      	mov	r1, sl
 8007766:	b173      	cbz	r3, 8007786 <_strtod_l+0x94e>
 8007768:	f7ff fb42 	bl	8006df0 <sulp>
 800776c:	4602      	mov	r2, r0
 800776e:	460b      	mov	r3, r1
 8007770:	e9dd 010a 	ldrd	r0, r1, [sp, #40]	; 0x28
 8007774:	f7f8 fcfa 	bl	800016c <__adddf3>
 8007778:	4681      	mov	r9, r0
 800777a:	468a      	mov	sl, r1
 800777c:	e754      	b.n	8007628 <_strtod_l+0x7f0>
 800777e:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 8007780:	ea13 0f09 	tst.w	r3, r9
 8007784:	e7e9      	b.n	800775a <_strtod_l+0x922>
 8007786:	f7ff fb33 	bl	8006df0 <sulp>
 800778a:	4602      	mov	r2, r0
 800778c:	460b      	mov	r3, r1
 800778e:	e9dd 010a 	ldrd	r0, r1, [sp, #40]	; 0x28
 8007792:	f7f8 fce9 	bl	8000168 <__aeabi_dsub>
 8007796:	2200      	movs	r2, #0
 8007798:	2300      	movs	r3, #0
 800779a:	4681      	mov	r9, r0
 800779c:	468a      	mov	sl, r1
 800779e:	f7f9 f903 	bl	80009a8 <__aeabi_dcmpeq>
 80077a2:	2800      	cmp	r0, #0
 80077a4:	f47f ae07 	bne.w	80073b6 <_strtod_l+0x57e>
 80077a8:	e73e      	b.n	8007628 <_strtod_l+0x7f0>
 80077aa:	9904      	ldr	r1, [sp, #16]
 80077ac:	4640      	mov	r0, r8
 80077ae:	f001 ff1c 	bl	80095ea <__ratio>
 80077b2:	2200      	movs	r2, #0
 80077b4:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
 80077b8:	4606      	mov	r6, r0
 80077ba:	460f      	mov	r7, r1
 80077bc:	f7f9 f908 	bl	80009d0 <__aeabi_dcmple>
 80077c0:	2800      	cmp	r0, #0
 80077c2:	d075      	beq.n	80078b0 <_strtod_l+0xa78>
 80077c4:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 80077c6:	2b00      	cmp	r3, #0
 80077c8:	d047      	beq.n	800785a <_strtod_l+0xa22>
 80077ca:	2600      	movs	r6, #0
 80077cc:	4f68      	ldr	r7, [pc, #416]	; (8007970 <_strtod_l+0xb38>)
 80077ce:	4d68      	ldr	r5, [pc, #416]	; (8007970 <_strtod_l+0xb38>)
 80077d0:	9b09      	ldr	r3, [sp, #36]	; 0x24
 80077d2:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
 80077d6:	0d1b      	lsrs	r3, r3, #20
 80077d8:	051b      	lsls	r3, r3, #20
 80077da:	930f      	str	r3, [sp, #60]	; 0x3c
 80077dc:	9a0f      	ldr	r2, [sp, #60]	; 0x3c
 80077de:	4b65      	ldr	r3, [pc, #404]	; (8007974 <_strtod_l+0xb3c>)
 80077e0:	429a      	cmp	r2, r3
 80077e2:	f040 80cf 	bne.w	8007984 <_strtod_l+0xb4c>
 80077e6:	e9dd 230a 	ldrd	r2, r3, [sp, #40]	; 0x28
 80077ea:	e9cd 2314 	strd	r2, r3, [sp, #80]	; 0x50
 80077ee:	9b09      	ldr	r3, [sp, #36]	; 0x24
 80077f0:	4648      	mov	r0, r9
 80077f2:	f1a3 7a54 	sub.w	sl, r3, #55574528	; 0x3500000
 80077f6:	4651      	mov	r1, sl
 80077f8:	f001 fe32 	bl	8009460 <__ulp>
 80077fc:	4602      	mov	r2, r0
 80077fe:	460b      	mov	r3, r1
 8007800:	4630      	mov	r0, r6
 8007802:	4639      	mov	r1, r7
 8007804:	f7f8 fe68 	bl	80004d8 <__aeabi_dmul>
 8007808:	464a      	mov	r2, r9
 800780a:	4653      	mov	r3, sl
 800780c:	f7f8 fcae 	bl	800016c <__adddf3>
 8007810:	460b      	mov	r3, r1
 8007812:	4954      	ldr	r1, [pc, #336]	; (8007964 <_strtod_l+0xb2c>)
 8007814:	4a58      	ldr	r2, [pc, #352]	; (8007978 <_strtod_l+0xb40>)
 8007816:	4019      	ands	r1, r3
 8007818:	4291      	cmp	r1, r2
 800781a:	4681      	mov	r9, r0
 800781c:	d95e      	bls.n	80078dc <_strtod_l+0xaa4>
 800781e:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 8007820:	f102 7254 	add.w	r2, r2, #55574528	; 0x3500000
 8007824:	4293      	cmp	r3, r2
 8007826:	d103      	bne.n	8007830 <_strtod_l+0x9f8>
 8007828:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 800782a:	3301      	adds	r3, #1
 800782c:	f43f ad26 	beq.w	800727c <_strtod_l+0x444>
 8007830:	f04f 39ff 	mov.w	r9, #4294967295	; 0xffffffff
 8007834:	f8df a130 	ldr.w	sl, [pc, #304]	; 8007968 <_strtod_l+0xb30>
 8007838:	991c      	ldr	r1, [sp, #112]	; 0x70
 800783a:	4658      	mov	r0, fp
 800783c:	f001 fb79 	bl	8008f32 <_Bfree>
 8007840:	9906      	ldr	r1, [sp, #24]
 8007842:	4658      	mov	r0, fp
 8007844:	f001 fb75 	bl	8008f32 <_Bfree>
 8007848:	9904      	ldr	r1, [sp, #16]
 800784a:	4658      	mov	r0, fp
 800784c:	f001 fb71 	bl	8008f32 <_Bfree>
 8007850:	4641      	mov	r1, r8
 8007852:	4658      	mov	r0, fp
 8007854:	f001 fb6d 	bl	8008f32 <_Bfree>
 8007858:	e617      	b.n	800748a <_strtod_l+0x652>
 800785a:	f1b9 0f00 	cmp.w	r9, #0
 800785e:	d119      	bne.n	8007894 <_strtod_l+0xa5c>
 8007860:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8007862:	f3c3 0313 	ubfx	r3, r3, #0, #20
 8007866:	b9e3      	cbnz	r3, 80078a2 <_strtod_l+0xa6a>
 8007868:	2200      	movs	r2, #0
 800786a:	4b41      	ldr	r3, [pc, #260]	; (8007970 <_strtod_l+0xb38>)
 800786c:	4630      	mov	r0, r6
 800786e:	4639      	mov	r1, r7
 8007870:	f7f9 f8a4 	bl	80009bc <__aeabi_dcmplt>
 8007874:	b9c8      	cbnz	r0, 80078aa <_strtod_l+0xa72>
 8007876:	2200      	movs	r2, #0
 8007878:	4b40      	ldr	r3, [pc, #256]	; (800797c <_strtod_l+0xb44>)
 800787a:	4630      	mov	r0, r6
 800787c:	4639      	mov	r1, r7
 800787e:	f7f8 fe2b 	bl	80004d8 <__aeabi_dmul>
 8007882:	4604      	mov	r4, r0
 8007884:	460d      	mov	r5, r1
 8007886:	f105 4300 	add.w	r3, r5, #2147483648	; 0x80000000
 800788a:	9418      	str	r4, [sp, #96]	; 0x60
 800788c:	9319      	str	r3, [sp, #100]	; 0x64
 800788e:	e9dd 6718 	ldrd	r6, r7, [sp, #96]	; 0x60
 8007892:	e79d      	b.n	80077d0 <_strtod_l+0x998>
 8007894:	f1b9 0f01 	cmp.w	r9, #1
 8007898:	d103      	bne.n	80078a2 <_strtod_l+0xa6a>
 800789a:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800789c:	2b00      	cmp	r3, #0
 800789e:	f43f ad8a 	beq.w	80073b6 <_strtod_l+0x57e>
 80078a2:	2600      	movs	r6, #0
 80078a4:	4f36      	ldr	r7, [pc, #216]	; (8007980 <_strtod_l+0xb48>)
 80078a6:	2400      	movs	r4, #0
 80078a8:	e791      	b.n	80077ce <_strtod_l+0x996>
 80078aa:	9c0c      	ldr	r4, [sp, #48]	; 0x30
 80078ac:	4d33      	ldr	r5, [pc, #204]	; (800797c <_strtod_l+0xb44>)
 80078ae:	e7ea      	b.n	8007886 <_strtod_l+0xa4e>
 80078b0:	4b32      	ldr	r3, [pc, #200]	; (800797c <_strtod_l+0xb44>)
 80078b2:	2200      	movs	r2, #0
 80078b4:	4630      	mov	r0, r6
 80078b6:	4639      	mov	r1, r7
 80078b8:	f7f8 fe0e 	bl	80004d8 <__aeabi_dmul>
 80078bc:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 80078be:	4604      	mov	r4, r0
 80078c0:	460d      	mov	r5, r1
 80078c2:	b933      	cbnz	r3, 80078d2 <_strtod_l+0xa9a>
 80078c4:	f101 4300 	add.w	r3, r1, #2147483648	; 0x80000000
 80078c8:	9010      	str	r0, [sp, #64]	; 0x40
 80078ca:	9311      	str	r3, [sp, #68]	; 0x44
 80078cc:	e9dd 6710 	ldrd	r6, r7, [sp, #64]	; 0x40
 80078d0:	e77e      	b.n	80077d0 <_strtod_l+0x998>
 80078d2:	4602      	mov	r2, r0
 80078d4:	460b      	mov	r3, r1
 80078d6:	e9cd 2310 	strd	r2, r3, [sp, #64]	; 0x40
 80078da:	e7f7      	b.n	80078cc <_strtod_l+0xa94>
 80078dc:	f103 7a54 	add.w	sl, r3, #55574528	; 0x3500000
 80078e0:	9b05      	ldr	r3, [sp, #20]
 80078e2:	2b00      	cmp	r3, #0
 80078e4:	d1a8      	bne.n	8007838 <_strtod_l+0xa00>
 80078e6:	f02a 4300 	bic.w	r3, sl, #2147483648	; 0x80000000
 80078ea:	0d1b      	lsrs	r3, r3, #20
 80078ec:	9a0f      	ldr	r2, [sp, #60]	; 0x3c
 80078ee:	051b      	lsls	r3, r3, #20
 80078f0:	429a      	cmp	r2, r3
 80078f2:	4656      	mov	r6, sl
 80078f4:	d1a0      	bne.n	8007838 <_strtod_l+0xa00>
 80078f6:	4629      	mov	r1, r5
 80078f8:	4620      	mov	r0, r4
 80078fa:	f7f9 f89d 	bl	8000a38 <__aeabi_d2iz>
 80078fe:	f7f8 fd81 	bl	8000404 <__aeabi_i2d>
 8007902:	460b      	mov	r3, r1
 8007904:	4602      	mov	r2, r0
 8007906:	4629      	mov	r1, r5
 8007908:	4620      	mov	r0, r4
 800790a:	f7f8 fc2d 	bl	8000168 <__aeabi_dsub>
 800790e:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 8007910:	4604      	mov	r4, r0
 8007912:	460d      	mov	r5, r1
 8007914:	b933      	cbnz	r3, 8007924 <_strtod_l+0xaec>
 8007916:	f1b9 0f00 	cmp.w	r9, #0
 800791a:	d103      	bne.n	8007924 <_strtod_l+0xaec>
 800791c:	f3ca 0613 	ubfx	r6, sl, #0, #20
 8007920:	2e00      	cmp	r6, #0
 8007922:	d06a      	beq.n	80079fa <_strtod_l+0xbc2>
 8007924:	a30a      	add	r3, pc, #40	; (adr r3, 8007950 <_strtod_l+0xb18>)
 8007926:	e9d3 2300 	ldrd	r2, r3, [r3]
 800792a:	4620      	mov	r0, r4
 800792c:	4629      	mov	r1, r5
 800792e:	f7f9 f845 	bl	80009bc <__aeabi_dcmplt>
 8007932:	2800      	cmp	r0, #0
 8007934:	f47f acad 	bne.w	8007292 <_strtod_l+0x45a>
 8007938:	a307      	add	r3, pc, #28	; (adr r3, 8007958 <_strtod_l+0xb20>)
 800793a:	e9d3 2300 	ldrd	r2, r3, [r3]
 800793e:	4620      	mov	r0, r4
 8007940:	4629      	mov	r1, r5
 8007942:	f7f9 f859 	bl	80009f8 <__aeabi_dcmpgt>
 8007946:	2800      	cmp	r0, #0
 8007948:	f43f af76 	beq.w	8007838 <_strtod_l+0xa00>
 800794c:	e4a1      	b.n	8007292 <_strtod_l+0x45a>
 800794e:	bf00      	nop
 8007950:	94a03595 	.word	0x94a03595
 8007954:	3fdfffff 	.word	0x3fdfffff
 8007958:	35afe535 	.word	0x35afe535
 800795c:	3fe00000 	.word	0x3fe00000
 8007960:	000fffff 	.word	0x000fffff
 8007964:	7ff00000 	.word	0x7ff00000
 8007968:	7fefffff 	.word	0x7fefffff
 800796c:	39500000 	.word	0x39500000
 8007970:	3ff00000 	.word	0x3ff00000
 8007974:	7fe00000 	.word	0x7fe00000
 8007978:	7c9fffff 	.word	0x7c9fffff
 800797c:	3fe00000 	.word	0x3fe00000
 8007980:	bff00000 	.word	0xbff00000
 8007984:	9b05      	ldr	r3, [sp, #20]
 8007986:	b313      	cbz	r3, 80079ce <_strtod_l+0xb96>
 8007988:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 800798a:	f1b3 6fd4 	cmp.w	r3, #111149056	; 0x6a00000
 800798e:	d81e      	bhi.n	80079ce <_strtod_l+0xb96>
 8007990:	a325      	add	r3, pc, #148	; (adr r3, 8007a28 <_strtod_l+0xbf0>)
 8007992:	e9d3 2300 	ldrd	r2, r3, [r3]
 8007996:	4620      	mov	r0, r4
 8007998:	4629      	mov	r1, r5
 800799a:	f7f9 f819 	bl	80009d0 <__aeabi_dcmple>
 800799e:	b190      	cbz	r0, 80079c6 <_strtod_l+0xb8e>
 80079a0:	4629      	mov	r1, r5
 80079a2:	4620      	mov	r0, r4
 80079a4:	f7f9 f870 	bl	8000a88 <__aeabi_d2uiz>
 80079a8:	2800      	cmp	r0, #0
 80079aa:	bf08      	it	eq
 80079ac:	2001      	moveq	r0, #1
 80079ae:	f7f8 fd19 	bl	80003e4 <__aeabi_ui2d>
 80079b2:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 80079b4:	4604      	mov	r4, r0
 80079b6:	460d      	mov	r5, r1
 80079b8:	b9d3      	cbnz	r3, 80079f0 <_strtod_l+0xbb8>
 80079ba:	f101 4300 	add.w	r3, r1, #2147483648	; 0x80000000
 80079be:	9012      	str	r0, [sp, #72]	; 0x48
 80079c0:	9313      	str	r3, [sp, #76]	; 0x4c
 80079c2:	e9dd 6712 	ldrd	r6, r7, [sp, #72]	; 0x48
 80079c6:	9a0f      	ldr	r2, [sp, #60]	; 0x3c
 80079c8:	f107 63d6 	add.w	r3, r7, #112197632	; 0x6b00000
 80079cc:	1a9f      	subs	r7, r3, r2
 80079ce:	e9dd 010a 	ldrd	r0, r1, [sp, #40]	; 0x28
 80079d2:	f001 fd45 	bl	8009460 <__ulp>
 80079d6:	4602      	mov	r2, r0
 80079d8:	460b      	mov	r3, r1
 80079da:	4630      	mov	r0, r6
 80079dc:	4639      	mov	r1, r7
 80079de:	f7f8 fd7b 	bl	80004d8 <__aeabi_dmul>
 80079e2:	e9dd 230a 	ldrd	r2, r3, [sp, #40]	; 0x28
 80079e6:	f7f8 fbc1 	bl	800016c <__adddf3>
 80079ea:	4681      	mov	r9, r0
 80079ec:	468a      	mov	sl, r1
 80079ee:	e777      	b.n	80078e0 <_strtod_l+0xaa8>
 80079f0:	4602      	mov	r2, r0
 80079f2:	460b      	mov	r3, r1
 80079f4:	e9cd 2312 	strd	r2, r3, [sp, #72]	; 0x48
 80079f8:	e7e3      	b.n	80079c2 <_strtod_l+0xb8a>
 80079fa:	a30d      	add	r3, pc, #52	; (adr r3, 8007a30 <_strtod_l+0xbf8>)
 80079fc:	e9d3 2300 	ldrd	r2, r3, [r3]
 8007a00:	f7f8 ffdc 	bl	80009bc <__aeabi_dcmplt>
 8007a04:	e79f      	b.n	8007946 <_strtod_l+0xb0e>
 8007a06:	2300      	movs	r3, #0
 8007a08:	930d      	str	r3, [sp, #52]	; 0x34
 8007a0a:	9b1b      	ldr	r3, [sp, #108]	; 0x6c
 8007a0c:	9a17      	ldr	r2, [sp, #92]	; 0x5c
 8007a0e:	6013      	str	r3, [r2, #0]
 8007a10:	f7ff ba55 	b.w	8006ebe <_strtod_l+0x86>
 8007a14:	2b65      	cmp	r3, #101	; 0x65
 8007a16:	f04f 0200 	mov.w	r2, #0
 8007a1a:	f43f ab42 	beq.w	80070a2 <_strtod_l+0x26a>
 8007a1e:	2101      	movs	r1, #1
 8007a20:	4614      	mov	r4, r2
 8007a22:	9105      	str	r1, [sp, #20]
 8007a24:	f7ff babf 	b.w	8006fa6 <_strtod_l+0x16e>
 8007a28:	ffc00000 	.word	0xffc00000
 8007a2c:	41dfffff 	.word	0x41dfffff
 8007a30:	94a03595 	.word	0x94a03595
 8007a34:	3fcfffff 	.word	0x3fcfffff

08007a38 <_strtod_r>:
 8007a38:	4b05      	ldr	r3, [pc, #20]	; (8007a50 <_strtod_r+0x18>)
 8007a3a:	b410      	push	{r4}
 8007a3c:	681b      	ldr	r3, [r3, #0]
 8007a3e:	4c05      	ldr	r4, [pc, #20]	; (8007a54 <_strtod_r+0x1c>)
 8007a40:	6a1b      	ldr	r3, [r3, #32]
 8007a42:	2b00      	cmp	r3, #0
 8007a44:	bf08      	it	eq
 8007a46:	4623      	moveq	r3, r4
 8007a48:	bc10      	pop	{r4}
 8007a4a:	f7ff b9f5 	b.w	8006e38 <_strtod_l>
 8007a4e:	bf00      	nop
 8007a50:	20000014 	.word	0x20000014
 8007a54:	20000078 	.word	0x20000078

08007a58 <_strtol_l.isra.0>:
 8007a58:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8007a5c:	4680      	mov	r8, r0
 8007a5e:	4689      	mov	r9, r1
 8007a60:	4692      	mov	sl, r2
 8007a62:	461e      	mov	r6, r3
 8007a64:	460f      	mov	r7, r1
 8007a66:	463d      	mov	r5, r7
 8007a68:	9808      	ldr	r0, [sp, #32]
 8007a6a:	f815 4b01 	ldrb.w	r4, [r5], #1
 8007a6e:	f001 f9eb 	bl	8008e48 <__locale_ctype_ptr_l>
 8007a72:	4420      	add	r0, r4
 8007a74:	7843      	ldrb	r3, [r0, #1]
 8007a76:	f013 0308 	ands.w	r3, r3, #8
 8007a7a:	d132      	bne.n	8007ae2 <_strtol_l.isra.0+0x8a>
 8007a7c:	2c2d      	cmp	r4, #45	; 0x2d
 8007a7e:	d132      	bne.n	8007ae6 <_strtol_l.isra.0+0x8e>
 8007a80:	2201      	movs	r2, #1
 8007a82:	787c      	ldrb	r4, [r7, #1]
 8007a84:	1cbd      	adds	r5, r7, #2
 8007a86:	2e00      	cmp	r6, #0
 8007a88:	d05d      	beq.n	8007b46 <_strtol_l.isra.0+0xee>
 8007a8a:	2e10      	cmp	r6, #16
 8007a8c:	d109      	bne.n	8007aa2 <_strtol_l.isra.0+0x4a>
 8007a8e:	2c30      	cmp	r4, #48	; 0x30
 8007a90:	d107      	bne.n	8007aa2 <_strtol_l.isra.0+0x4a>
 8007a92:	782b      	ldrb	r3, [r5, #0]
 8007a94:	f003 03df 	and.w	r3, r3, #223	; 0xdf
 8007a98:	2b58      	cmp	r3, #88	; 0x58
 8007a9a:	d14f      	bne.n	8007b3c <_strtol_l.isra.0+0xe4>
 8007a9c:	2610      	movs	r6, #16
 8007a9e:	786c      	ldrb	r4, [r5, #1]
 8007aa0:	3502      	adds	r5, #2
 8007aa2:	2a00      	cmp	r2, #0
 8007aa4:	bf14      	ite	ne
 8007aa6:	f04f 4100 	movne.w	r1, #2147483648	; 0x80000000
 8007aaa:	f06f 4100 	mvneq.w	r1, #2147483648	; 0x80000000
 8007aae:	2700      	movs	r7, #0
 8007ab0:	fbb1 fcf6 	udiv	ip, r1, r6
 8007ab4:	4638      	mov	r0, r7
 8007ab6:	fb06 1e1c 	mls	lr, r6, ip, r1
 8007aba:	f1a4 0330 	sub.w	r3, r4, #48	; 0x30
 8007abe:	2b09      	cmp	r3, #9
 8007ac0:	d817      	bhi.n	8007af2 <_strtol_l.isra.0+0x9a>
 8007ac2:	461c      	mov	r4, r3
 8007ac4:	42a6      	cmp	r6, r4
 8007ac6:	dd23      	ble.n	8007b10 <_strtol_l.isra.0+0xb8>
 8007ac8:	1c7b      	adds	r3, r7, #1
 8007aca:	d007      	beq.n	8007adc <_strtol_l.isra.0+0x84>
 8007acc:	4584      	cmp	ip, r0
 8007ace:	d31c      	bcc.n	8007b0a <_strtol_l.isra.0+0xb2>
 8007ad0:	d101      	bne.n	8007ad6 <_strtol_l.isra.0+0x7e>
 8007ad2:	45a6      	cmp	lr, r4
 8007ad4:	db19      	blt.n	8007b0a <_strtol_l.isra.0+0xb2>
 8007ad6:	2701      	movs	r7, #1
 8007ad8:	fb00 4006 	mla	r0, r0, r6, r4
 8007adc:	f815 4b01 	ldrb.w	r4, [r5], #1
 8007ae0:	e7eb      	b.n	8007aba <_strtol_l.isra.0+0x62>
 8007ae2:	462f      	mov	r7, r5
 8007ae4:	e7bf      	b.n	8007a66 <_strtol_l.isra.0+0xe>
 8007ae6:	2c2b      	cmp	r4, #43	; 0x2b
 8007ae8:	bf04      	itt	eq
 8007aea:	1cbd      	addeq	r5, r7, #2
 8007aec:	787c      	ldrbeq	r4, [r7, #1]
 8007aee:	461a      	mov	r2, r3
 8007af0:	e7c9      	b.n	8007a86 <_strtol_l.isra.0+0x2e>
 8007af2:	f1a4 0341 	sub.w	r3, r4, #65	; 0x41
 8007af6:	2b19      	cmp	r3, #25
 8007af8:	d801      	bhi.n	8007afe <_strtol_l.isra.0+0xa6>
 8007afa:	3c37      	subs	r4, #55	; 0x37
 8007afc:	e7e2      	b.n	8007ac4 <_strtol_l.isra.0+0x6c>
 8007afe:	f1a4 0361 	sub.w	r3, r4, #97	; 0x61
 8007b02:	2b19      	cmp	r3, #25
 8007b04:	d804      	bhi.n	8007b10 <_strtol_l.isra.0+0xb8>
 8007b06:	3c57      	subs	r4, #87	; 0x57
 8007b08:	e7dc      	b.n	8007ac4 <_strtol_l.isra.0+0x6c>
 8007b0a:	f04f 37ff 	mov.w	r7, #4294967295	; 0xffffffff
 8007b0e:	e7e5      	b.n	8007adc <_strtol_l.isra.0+0x84>
 8007b10:	1c7b      	adds	r3, r7, #1
 8007b12:	d108      	bne.n	8007b26 <_strtol_l.isra.0+0xce>
 8007b14:	2322      	movs	r3, #34	; 0x22
 8007b16:	4608      	mov	r0, r1
 8007b18:	f8c8 3000 	str.w	r3, [r8]
 8007b1c:	f1ba 0f00 	cmp.w	sl, #0
 8007b20:	d107      	bne.n	8007b32 <_strtol_l.isra.0+0xda>
 8007b22:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8007b26:	b102      	cbz	r2, 8007b2a <_strtol_l.isra.0+0xd2>
 8007b28:	4240      	negs	r0, r0
 8007b2a:	f1ba 0f00 	cmp.w	sl, #0
 8007b2e:	d0f8      	beq.n	8007b22 <_strtol_l.isra.0+0xca>
 8007b30:	b10f      	cbz	r7, 8007b36 <_strtol_l.isra.0+0xde>
 8007b32:	f105 39ff 	add.w	r9, r5, #4294967295	; 0xffffffff
 8007b36:	f8ca 9000 	str.w	r9, [sl]
 8007b3a:	e7f2      	b.n	8007b22 <_strtol_l.isra.0+0xca>
 8007b3c:	2430      	movs	r4, #48	; 0x30
 8007b3e:	2e00      	cmp	r6, #0
 8007b40:	d1af      	bne.n	8007aa2 <_strtol_l.isra.0+0x4a>
 8007b42:	2608      	movs	r6, #8
 8007b44:	e7ad      	b.n	8007aa2 <_strtol_l.isra.0+0x4a>
 8007b46:	2c30      	cmp	r4, #48	; 0x30
 8007b48:	d0a3      	beq.n	8007a92 <_strtol_l.isra.0+0x3a>
 8007b4a:	260a      	movs	r6, #10
 8007b4c:	e7a9      	b.n	8007aa2 <_strtol_l.isra.0+0x4a>
	...

08007b50 <_strtol_r>:
 8007b50:	b537      	push	{r0, r1, r2, r4, r5, lr}
 8007b52:	4c06      	ldr	r4, [pc, #24]	; (8007b6c <_strtol_r+0x1c>)
 8007b54:	4d06      	ldr	r5, [pc, #24]	; (8007b70 <_strtol_r+0x20>)
 8007b56:	6824      	ldr	r4, [r4, #0]
 8007b58:	6a24      	ldr	r4, [r4, #32]
 8007b5a:	2c00      	cmp	r4, #0
 8007b5c:	bf08      	it	eq
 8007b5e:	462c      	moveq	r4, r5
 8007b60:	9400      	str	r4, [sp, #0]
 8007b62:	f7ff ff79 	bl	8007a58 <_strtol_l.isra.0>
 8007b66:	b003      	add	sp, #12
 8007b68:	bd30      	pop	{r4, r5, pc}
 8007b6a:	bf00      	nop
 8007b6c:	20000014 	.word	0x20000014
 8007b70:	20000078 	.word	0x20000078

08007b74 <quorem>:
 8007b74:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8007b78:	6903      	ldr	r3, [r0, #16]
 8007b7a:	690c      	ldr	r4, [r1, #16]
 8007b7c:	4680      	mov	r8, r0
 8007b7e:	42a3      	cmp	r3, r4
 8007b80:	f2c0 8084 	blt.w	8007c8c <quorem+0x118>
 8007b84:	3c01      	subs	r4, #1
 8007b86:	f101 0714 	add.w	r7, r1, #20
 8007b8a:	f100 0614 	add.w	r6, r0, #20
 8007b8e:	f857 5024 	ldr.w	r5, [r7, r4, lsl #2]
 8007b92:	f856 0024 	ldr.w	r0, [r6, r4, lsl #2]
 8007b96:	3501      	adds	r5, #1
 8007b98:	fbb0 f5f5 	udiv	r5, r0, r5
 8007b9c:	ea4f 0c84 	mov.w	ip, r4, lsl #2
 8007ba0:	eb06 030c 	add.w	r3, r6, ip
 8007ba4:	eb07 090c 	add.w	r9, r7, ip
 8007ba8:	9301      	str	r3, [sp, #4]
 8007baa:	b39d      	cbz	r5, 8007c14 <quorem+0xa0>
 8007bac:	f04f 0a00 	mov.w	sl, #0
 8007bb0:	4638      	mov	r0, r7
 8007bb2:	46b6      	mov	lr, r6
 8007bb4:	46d3      	mov	fp, sl
 8007bb6:	f850 2b04 	ldr.w	r2, [r0], #4
 8007bba:	b293      	uxth	r3, r2
 8007bbc:	fb05 a303 	mla	r3, r5, r3, sl
 8007bc0:	0c12      	lsrs	r2, r2, #16
 8007bc2:	ea4f 4a13 	mov.w	sl, r3, lsr #16
 8007bc6:	fb05 a202 	mla	r2, r5, r2, sl
 8007bca:	b29b      	uxth	r3, r3
 8007bcc:	ebab 0303 	sub.w	r3, fp, r3
 8007bd0:	f8de b000 	ldr.w	fp, [lr]
 8007bd4:	ea4f 4a12 	mov.w	sl, r2, lsr #16
 8007bd8:	fa1f fb8b 	uxth.w	fp, fp
 8007bdc:	445b      	add	r3, fp
 8007bde:	fa1f fb82 	uxth.w	fp, r2
 8007be2:	f8de 2000 	ldr.w	r2, [lr]
 8007be6:	4581      	cmp	r9, r0
 8007be8:	ebcb 4212 	rsb	r2, fp, r2, lsr #16
 8007bec:	eb02 4223 	add.w	r2, r2, r3, asr #16
 8007bf0:	b29b      	uxth	r3, r3
 8007bf2:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 8007bf6:	ea4f 4b22 	mov.w	fp, r2, asr #16
 8007bfa:	f84e 3b04 	str.w	r3, [lr], #4
 8007bfe:	d2da      	bcs.n	8007bb6 <quorem+0x42>
 8007c00:	f856 300c 	ldr.w	r3, [r6, ip]
 8007c04:	b933      	cbnz	r3, 8007c14 <quorem+0xa0>
 8007c06:	9b01      	ldr	r3, [sp, #4]
 8007c08:	3b04      	subs	r3, #4
 8007c0a:	429e      	cmp	r6, r3
 8007c0c:	461a      	mov	r2, r3
 8007c0e:	d331      	bcc.n	8007c74 <quorem+0x100>
 8007c10:	f8c8 4010 	str.w	r4, [r8, #16]
 8007c14:	4640      	mov	r0, r8
 8007c16:	f001 fbab 	bl	8009370 <__mcmp>
 8007c1a:	2800      	cmp	r0, #0
 8007c1c:	db26      	blt.n	8007c6c <quorem+0xf8>
 8007c1e:	4630      	mov	r0, r6
 8007c20:	f04f 0c00 	mov.w	ip, #0
 8007c24:	3501      	adds	r5, #1
 8007c26:	f857 1b04 	ldr.w	r1, [r7], #4
 8007c2a:	f8d0 e000 	ldr.w	lr, [r0]
 8007c2e:	b28b      	uxth	r3, r1
 8007c30:	ebac 0303 	sub.w	r3, ip, r3
 8007c34:	fa1f f28e 	uxth.w	r2, lr
 8007c38:	4413      	add	r3, r2
 8007c3a:	0c0a      	lsrs	r2, r1, #16
 8007c3c:	ebc2 421e 	rsb	r2, r2, lr, lsr #16
 8007c40:	eb02 4223 	add.w	r2, r2, r3, asr #16
 8007c44:	b29b      	uxth	r3, r3
 8007c46:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 8007c4a:	45b9      	cmp	r9, r7
 8007c4c:	ea4f 4c22 	mov.w	ip, r2, asr #16
 8007c50:	f840 3b04 	str.w	r3, [r0], #4
 8007c54:	d2e7      	bcs.n	8007c26 <quorem+0xb2>
 8007c56:	f856 2024 	ldr.w	r2, [r6, r4, lsl #2]
 8007c5a:	eb06 0384 	add.w	r3, r6, r4, lsl #2
 8007c5e:	b92a      	cbnz	r2, 8007c6c <quorem+0xf8>
 8007c60:	3b04      	subs	r3, #4
 8007c62:	429e      	cmp	r6, r3
 8007c64:	461a      	mov	r2, r3
 8007c66:	d30b      	bcc.n	8007c80 <quorem+0x10c>
 8007c68:	f8c8 4010 	str.w	r4, [r8, #16]
 8007c6c:	4628      	mov	r0, r5
 8007c6e:	b003      	add	sp, #12
 8007c70:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8007c74:	6812      	ldr	r2, [r2, #0]
 8007c76:	3b04      	subs	r3, #4
 8007c78:	2a00      	cmp	r2, #0
 8007c7a:	d1c9      	bne.n	8007c10 <quorem+0x9c>
 8007c7c:	3c01      	subs	r4, #1
 8007c7e:	e7c4      	b.n	8007c0a <quorem+0x96>
 8007c80:	6812      	ldr	r2, [r2, #0]
 8007c82:	3b04      	subs	r3, #4
 8007c84:	2a00      	cmp	r2, #0
 8007c86:	d1ef      	bne.n	8007c68 <quorem+0xf4>
 8007c88:	3c01      	subs	r4, #1
 8007c8a:	e7ea      	b.n	8007c62 <quorem+0xee>
 8007c8c:	2000      	movs	r0, #0
 8007c8e:	e7ee      	b.n	8007c6e <quorem+0xfa>

08007c90 <_dtoa_r>:
 8007c90:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8007c94:	4616      	mov	r6, r2
 8007c96:	461f      	mov	r7, r3
 8007c98:	6a45      	ldr	r5, [r0, #36]	; 0x24
 8007c9a:	b095      	sub	sp, #84	; 0x54
 8007c9c:	4604      	mov	r4, r0
 8007c9e:	f8dd 8084 	ldr.w	r8, [sp, #132]	; 0x84
 8007ca2:	e9cd 6702 	strd	r6, r7, [sp, #8]
 8007ca6:	b93d      	cbnz	r5, 8007cb8 <_dtoa_r+0x28>
 8007ca8:	2010      	movs	r0, #16
 8007caa:	f7fe f987 	bl	8005fbc <malloc>
 8007cae:	6260      	str	r0, [r4, #36]	; 0x24
 8007cb0:	e9c0 5501 	strd	r5, r5, [r0, #4]
 8007cb4:	6005      	str	r5, [r0, #0]
 8007cb6:	60c5      	str	r5, [r0, #12]
 8007cb8:	6a63      	ldr	r3, [r4, #36]	; 0x24
 8007cba:	6819      	ldr	r1, [r3, #0]
 8007cbc:	b151      	cbz	r1, 8007cd4 <_dtoa_r+0x44>
 8007cbe:	685a      	ldr	r2, [r3, #4]
 8007cc0:	2301      	movs	r3, #1
 8007cc2:	4093      	lsls	r3, r2
 8007cc4:	604a      	str	r2, [r1, #4]
 8007cc6:	608b      	str	r3, [r1, #8]
 8007cc8:	4620      	mov	r0, r4
 8007cca:	f001 f932 	bl	8008f32 <_Bfree>
 8007cce:	2200      	movs	r2, #0
 8007cd0:	6a63      	ldr	r3, [r4, #36]	; 0x24
 8007cd2:	601a      	str	r2, [r3, #0]
 8007cd4:	1e3b      	subs	r3, r7, #0
 8007cd6:	bfaf      	iteee	ge
 8007cd8:	2300      	movge	r3, #0
 8007cda:	2201      	movlt	r2, #1
 8007cdc:	f023 4300 	biclt.w	r3, r3, #2147483648	; 0x80000000
 8007ce0:	9303      	strlt	r3, [sp, #12]
 8007ce2:	bfac      	ite	ge
 8007ce4:	f8c8 3000 	strge.w	r3, [r8]
 8007ce8:	f8c8 2000 	strlt.w	r2, [r8]
 8007cec:	4bae      	ldr	r3, [pc, #696]	; (8007fa8 <_dtoa_r+0x318>)
 8007cee:	f8dd 800c 	ldr.w	r8, [sp, #12]
 8007cf2:	ea33 0308 	bics.w	r3, r3, r8
 8007cf6:	d11b      	bne.n	8007d30 <_dtoa_r+0xa0>
 8007cf8:	f242 730f 	movw	r3, #9999	; 0x270f
 8007cfc:	9a20      	ldr	r2, [sp, #128]	; 0x80
 8007cfe:	6013      	str	r3, [r2, #0]
 8007d00:	9b02      	ldr	r3, [sp, #8]
 8007d02:	b923      	cbnz	r3, 8007d0e <_dtoa_r+0x7e>
 8007d04:	f3c8 0013 	ubfx	r0, r8, #0, #20
 8007d08:	2800      	cmp	r0, #0
 8007d0a:	f000 8545 	beq.w	8008798 <_dtoa_r+0xb08>
 8007d0e:	9b22      	ldr	r3, [sp, #136]	; 0x88
 8007d10:	b953      	cbnz	r3, 8007d28 <_dtoa_r+0x98>
 8007d12:	4ba6      	ldr	r3, [pc, #664]	; (8007fac <_dtoa_r+0x31c>)
 8007d14:	e021      	b.n	8007d5a <_dtoa_r+0xca>
 8007d16:	4ba6      	ldr	r3, [pc, #664]	; (8007fb0 <_dtoa_r+0x320>)
 8007d18:	9306      	str	r3, [sp, #24]
 8007d1a:	3308      	adds	r3, #8
 8007d1c:	9a22      	ldr	r2, [sp, #136]	; 0x88
 8007d1e:	6013      	str	r3, [r2, #0]
 8007d20:	9806      	ldr	r0, [sp, #24]
 8007d22:	b015      	add	sp, #84	; 0x54
 8007d24:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8007d28:	4ba0      	ldr	r3, [pc, #640]	; (8007fac <_dtoa_r+0x31c>)
 8007d2a:	9306      	str	r3, [sp, #24]
 8007d2c:	3303      	adds	r3, #3
 8007d2e:	e7f5      	b.n	8007d1c <_dtoa_r+0x8c>
 8007d30:	e9dd 6702 	ldrd	r6, r7, [sp, #8]
 8007d34:	2200      	movs	r2, #0
 8007d36:	2300      	movs	r3, #0
 8007d38:	4630      	mov	r0, r6
 8007d3a:	4639      	mov	r1, r7
 8007d3c:	f7f8 fe34 	bl	80009a8 <__aeabi_dcmpeq>
 8007d40:	4682      	mov	sl, r0
 8007d42:	b160      	cbz	r0, 8007d5e <_dtoa_r+0xce>
 8007d44:	2301      	movs	r3, #1
 8007d46:	9a20      	ldr	r2, [sp, #128]	; 0x80
 8007d48:	6013      	str	r3, [r2, #0]
 8007d4a:	9b22      	ldr	r3, [sp, #136]	; 0x88
 8007d4c:	2b00      	cmp	r3, #0
 8007d4e:	f000 8520 	beq.w	8008792 <_dtoa_r+0xb02>
 8007d52:	4b98      	ldr	r3, [pc, #608]	; (8007fb4 <_dtoa_r+0x324>)
 8007d54:	9a22      	ldr	r2, [sp, #136]	; 0x88
 8007d56:	6013      	str	r3, [r2, #0]
 8007d58:	3b01      	subs	r3, #1
 8007d5a:	9306      	str	r3, [sp, #24]
 8007d5c:	e7e0      	b.n	8007d20 <_dtoa_r+0x90>
 8007d5e:	ab12      	add	r3, sp, #72	; 0x48
 8007d60:	9301      	str	r3, [sp, #4]
 8007d62:	ab13      	add	r3, sp, #76	; 0x4c
 8007d64:	9300      	str	r3, [sp, #0]
 8007d66:	4632      	mov	r2, r6
 8007d68:	463b      	mov	r3, r7
 8007d6a:	4620      	mov	r0, r4
 8007d6c:	f001 fbee 	bl	800954c <__d2b>
 8007d70:	f3c8 550a 	ubfx	r5, r8, #20, #11
 8007d74:	4683      	mov	fp, r0
 8007d76:	2d00      	cmp	r5, #0
 8007d78:	d07d      	beq.n	8007e76 <_dtoa_r+0x1e6>
 8007d7a:	46b0      	mov	r8, r6
 8007d7c:	f3c7 0313 	ubfx	r3, r7, #0, #20
 8007d80:	f043 597f 	orr.w	r9, r3, #1069547520	; 0x3fc00000
 8007d84:	f449 1940 	orr.w	r9, r9, #3145728	; 0x300000
 8007d88:	f2a5 35ff 	subw	r5, r5, #1023	; 0x3ff
 8007d8c:	f8cd a040 	str.w	sl, [sp, #64]	; 0x40
 8007d90:	2200      	movs	r2, #0
 8007d92:	4b89      	ldr	r3, [pc, #548]	; (8007fb8 <_dtoa_r+0x328>)
 8007d94:	4640      	mov	r0, r8
 8007d96:	4649      	mov	r1, r9
 8007d98:	f7f8 f9e6 	bl	8000168 <__aeabi_dsub>
 8007d9c:	a37c      	add	r3, pc, #496	; (adr r3, 8007f90 <_dtoa_r+0x300>)
 8007d9e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8007da2:	f7f8 fb99 	bl	80004d8 <__aeabi_dmul>
 8007da6:	a37c      	add	r3, pc, #496	; (adr r3, 8007f98 <_dtoa_r+0x308>)
 8007da8:	e9d3 2300 	ldrd	r2, r3, [r3]
 8007dac:	f7f8 f9de 	bl	800016c <__adddf3>
 8007db0:	4606      	mov	r6, r0
 8007db2:	4628      	mov	r0, r5
 8007db4:	460f      	mov	r7, r1
 8007db6:	f7f8 fb25 	bl	8000404 <__aeabi_i2d>
 8007dba:	a379      	add	r3, pc, #484	; (adr r3, 8007fa0 <_dtoa_r+0x310>)
 8007dbc:	e9d3 2300 	ldrd	r2, r3, [r3]
 8007dc0:	f7f8 fb8a 	bl	80004d8 <__aeabi_dmul>
 8007dc4:	4602      	mov	r2, r0
 8007dc6:	460b      	mov	r3, r1
 8007dc8:	4630      	mov	r0, r6
 8007dca:	4639      	mov	r1, r7
 8007dcc:	f7f8 f9ce 	bl	800016c <__adddf3>
 8007dd0:	4606      	mov	r6, r0
 8007dd2:	460f      	mov	r7, r1
 8007dd4:	f7f8 fe30 	bl	8000a38 <__aeabi_d2iz>
 8007dd8:	2200      	movs	r2, #0
 8007dda:	4682      	mov	sl, r0
 8007ddc:	2300      	movs	r3, #0
 8007dde:	4630      	mov	r0, r6
 8007de0:	4639      	mov	r1, r7
 8007de2:	f7f8 fdeb 	bl	80009bc <__aeabi_dcmplt>
 8007de6:	b148      	cbz	r0, 8007dfc <_dtoa_r+0x16c>
 8007de8:	4650      	mov	r0, sl
 8007dea:	f7f8 fb0b 	bl	8000404 <__aeabi_i2d>
 8007dee:	4632      	mov	r2, r6
 8007df0:	463b      	mov	r3, r7
 8007df2:	f7f8 fdd9 	bl	80009a8 <__aeabi_dcmpeq>
 8007df6:	b908      	cbnz	r0, 8007dfc <_dtoa_r+0x16c>
 8007df8:	f10a 3aff 	add.w	sl, sl, #4294967295	; 0xffffffff
 8007dfc:	f1ba 0f16 	cmp.w	sl, #22
 8007e00:	d85a      	bhi.n	8007eb8 <_dtoa_r+0x228>
 8007e02:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8007e06:	496d      	ldr	r1, [pc, #436]	; (8007fbc <_dtoa_r+0x32c>)
 8007e08:	eb01 01ca 	add.w	r1, r1, sl, lsl #3
 8007e0c:	e9d1 0100 	ldrd	r0, r1, [r1]
 8007e10:	f7f8 fdf2 	bl	80009f8 <__aeabi_dcmpgt>
 8007e14:	2800      	cmp	r0, #0
 8007e16:	d051      	beq.n	8007ebc <_dtoa_r+0x22c>
 8007e18:	2300      	movs	r3, #0
 8007e1a:	f10a 3aff 	add.w	sl, sl, #4294967295	; 0xffffffff
 8007e1e:	930d      	str	r3, [sp, #52]	; 0x34
 8007e20:	9b12      	ldr	r3, [sp, #72]	; 0x48
 8007e22:	1b5d      	subs	r5, r3, r5
 8007e24:	1e6b      	subs	r3, r5, #1
 8007e26:	9307      	str	r3, [sp, #28]
 8007e28:	bf43      	ittte	mi
 8007e2a:	2300      	movmi	r3, #0
 8007e2c:	f1c5 0901 	rsbmi	r9, r5, #1
 8007e30:	9307      	strmi	r3, [sp, #28]
 8007e32:	f04f 0900 	movpl.w	r9, #0
 8007e36:	f1ba 0f00 	cmp.w	sl, #0
 8007e3a:	db41      	blt.n	8007ec0 <_dtoa_r+0x230>
 8007e3c:	9b07      	ldr	r3, [sp, #28]
 8007e3e:	f8cd a030 	str.w	sl, [sp, #48]	; 0x30
 8007e42:	4453      	add	r3, sl
 8007e44:	9307      	str	r3, [sp, #28]
 8007e46:	2300      	movs	r3, #0
 8007e48:	9308      	str	r3, [sp, #32]
 8007e4a:	9b1e      	ldr	r3, [sp, #120]	; 0x78
 8007e4c:	2b09      	cmp	r3, #9
 8007e4e:	f200 808f 	bhi.w	8007f70 <_dtoa_r+0x2e0>
 8007e52:	2b05      	cmp	r3, #5
 8007e54:	bfc4      	itt	gt
 8007e56:	3b04      	subgt	r3, #4
 8007e58:	931e      	strgt	r3, [sp, #120]	; 0x78
 8007e5a:	9b1e      	ldr	r3, [sp, #120]	; 0x78
 8007e5c:	bfc8      	it	gt
 8007e5e:	2500      	movgt	r5, #0
 8007e60:	f1a3 0302 	sub.w	r3, r3, #2
 8007e64:	bfd8      	it	le
 8007e66:	2501      	movle	r5, #1
 8007e68:	2b03      	cmp	r3, #3
 8007e6a:	f200 808d 	bhi.w	8007f88 <_dtoa_r+0x2f8>
 8007e6e:	e8df f003 	tbb	[pc, r3]
 8007e72:	7d7b      	.short	0x7d7b
 8007e74:	6f2f      	.short	0x6f2f
 8007e76:	e9dd 5312 	ldrd	r5, r3, [sp, #72]	; 0x48
 8007e7a:	441d      	add	r5, r3
 8007e7c:	f205 4032 	addw	r0, r5, #1074	; 0x432
 8007e80:	2820      	cmp	r0, #32
 8007e82:	dd13      	ble.n	8007eac <_dtoa_r+0x21c>
 8007e84:	f1c0 0040 	rsb	r0, r0, #64	; 0x40
 8007e88:	9b02      	ldr	r3, [sp, #8]
 8007e8a:	fa08 f800 	lsl.w	r8, r8, r0
 8007e8e:	f205 4012 	addw	r0, r5, #1042	; 0x412
 8007e92:	fa23 f000 	lsr.w	r0, r3, r0
 8007e96:	ea48 0000 	orr.w	r0, r8, r0
 8007e9a:	f7f8 faa3 	bl	80003e4 <__aeabi_ui2d>
 8007e9e:	2301      	movs	r3, #1
 8007ea0:	4680      	mov	r8, r0
 8007ea2:	f1a1 79f8 	sub.w	r9, r1, #32505856	; 0x1f00000
 8007ea6:	3d01      	subs	r5, #1
 8007ea8:	9310      	str	r3, [sp, #64]	; 0x40
 8007eaa:	e771      	b.n	8007d90 <_dtoa_r+0x100>
 8007eac:	9b02      	ldr	r3, [sp, #8]
 8007eae:	f1c0 0020 	rsb	r0, r0, #32
 8007eb2:	fa03 f000 	lsl.w	r0, r3, r0
 8007eb6:	e7f0      	b.n	8007e9a <_dtoa_r+0x20a>
 8007eb8:	2301      	movs	r3, #1
 8007eba:	e7b0      	b.n	8007e1e <_dtoa_r+0x18e>
 8007ebc:	900d      	str	r0, [sp, #52]	; 0x34
 8007ebe:	e7af      	b.n	8007e20 <_dtoa_r+0x190>
 8007ec0:	f1ca 0300 	rsb	r3, sl, #0
 8007ec4:	9308      	str	r3, [sp, #32]
 8007ec6:	2300      	movs	r3, #0
 8007ec8:	eba9 090a 	sub.w	r9, r9, sl
 8007ecc:	930c      	str	r3, [sp, #48]	; 0x30
 8007ece:	e7bc      	b.n	8007e4a <_dtoa_r+0x1ba>
 8007ed0:	2301      	movs	r3, #1
 8007ed2:	9309      	str	r3, [sp, #36]	; 0x24
 8007ed4:	9b1f      	ldr	r3, [sp, #124]	; 0x7c
 8007ed6:	2b00      	cmp	r3, #0
 8007ed8:	dd74      	ble.n	8007fc4 <_dtoa_r+0x334>
 8007eda:	4698      	mov	r8, r3
 8007edc:	9304      	str	r3, [sp, #16]
 8007ede:	2200      	movs	r2, #0
 8007ee0:	6a66      	ldr	r6, [r4, #36]	; 0x24
 8007ee2:	6072      	str	r2, [r6, #4]
 8007ee4:	2204      	movs	r2, #4
 8007ee6:	f102 0014 	add.w	r0, r2, #20
 8007eea:	4298      	cmp	r0, r3
 8007eec:	6871      	ldr	r1, [r6, #4]
 8007eee:	d96e      	bls.n	8007fce <_dtoa_r+0x33e>
 8007ef0:	4620      	mov	r0, r4
 8007ef2:	f000 ffea 	bl	8008eca <_Balloc>
 8007ef6:	6a63      	ldr	r3, [r4, #36]	; 0x24
 8007ef8:	6030      	str	r0, [r6, #0]
 8007efa:	681b      	ldr	r3, [r3, #0]
 8007efc:	f1b8 0f0e 	cmp.w	r8, #14
 8007f00:	9306      	str	r3, [sp, #24]
 8007f02:	f200 80ed 	bhi.w	80080e0 <_dtoa_r+0x450>
 8007f06:	2d00      	cmp	r5, #0
 8007f08:	f000 80ea 	beq.w	80080e0 <_dtoa_r+0x450>
 8007f0c:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8007f10:	f1ba 0f00 	cmp.w	sl, #0
 8007f14:	e9cd 230e 	strd	r2, r3, [sp, #56]	; 0x38
 8007f18:	dd77      	ble.n	800800a <_dtoa_r+0x37a>
 8007f1a:	4a28      	ldr	r2, [pc, #160]	; (8007fbc <_dtoa_r+0x32c>)
 8007f1c:	f00a 030f 	and.w	r3, sl, #15
 8007f20:	ea4f 162a 	mov.w	r6, sl, asr #4
 8007f24:	eb02 03c3 	add.w	r3, r2, r3, lsl #3
 8007f28:	06f0      	lsls	r0, r6, #27
 8007f2a:	e9d3 2300 	ldrd	r2, r3, [r3]
 8007f2e:	e9cd 230a 	strd	r2, r3, [sp, #40]	; 0x28
 8007f32:	d568      	bpl.n	8008006 <_dtoa_r+0x376>
 8007f34:	e9dd 010e 	ldrd	r0, r1, [sp, #56]	; 0x38
 8007f38:	4b21      	ldr	r3, [pc, #132]	; (8007fc0 <_dtoa_r+0x330>)
 8007f3a:	2503      	movs	r5, #3
 8007f3c:	e9d3 2308 	ldrd	r2, r3, [r3, #32]
 8007f40:	f7f8 fbf4 	bl	800072c <__aeabi_ddiv>
 8007f44:	e9cd 0102 	strd	r0, r1, [sp, #8]
 8007f48:	f006 060f 	and.w	r6, r6, #15
 8007f4c:	4f1c      	ldr	r7, [pc, #112]	; (8007fc0 <_dtoa_r+0x330>)
 8007f4e:	e04f      	b.n	8007ff0 <_dtoa_r+0x360>
 8007f50:	2301      	movs	r3, #1
 8007f52:	9309      	str	r3, [sp, #36]	; 0x24
 8007f54:	9b1f      	ldr	r3, [sp, #124]	; 0x7c
 8007f56:	4453      	add	r3, sl
 8007f58:	f103 0801 	add.w	r8, r3, #1
 8007f5c:	9304      	str	r3, [sp, #16]
 8007f5e:	4643      	mov	r3, r8
 8007f60:	2b01      	cmp	r3, #1
 8007f62:	bfb8      	it	lt
 8007f64:	2301      	movlt	r3, #1
 8007f66:	e7ba      	b.n	8007ede <_dtoa_r+0x24e>
 8007f68:	2300      	movs	r3, #0
 8007f6a:	e7b2      	b.n	8007ed2 <_dtoa_r+0x242>
 8007f6c:	2300      	movs	r3, #0
 8007f6e:	e7f0      	b.n	8007f52 <_dtoa_r+0x2c2>
 8007f70:	2501      	movs	r5, #1
 8007f72:	2300      	movs	r3, #0
 8007f74:	9509      	str	r5, [sp, #36]	; 0x24
 8007f76:	931e      	str	r3, [sp, #120]	; 0x78
 8007f78:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 8007f7c:	2200      	movs	r2, #0
 8007f7e:	9304      	str	r3, [sp, #16]
 8007f80:	4698      	mov	r8, r3
 8007f82:	2312      	movs	r3, #18
 8007f84:	921f      	str	r2, [sp, #124]	; 0x7c
 8007f86:	e7aa      	b.n	8007ede <_dtoa_r+0x24e>
 8007f88:	2301      	movs	r3, #1
 8007f8a:	9309      	str	r3, [sp, #36]	; 0x24
 8007f8c:	e7f4      	b.n	8007f78 <_dtoa_r+0x2e8>
 8007f8e:	bf00      	nop
 8007f90:	636f4361 	.word	0x636f4361
 8007f94:	3fd287a7 	.word	0x3fd287a7
 8007f98:	8b60c8b3 	.word	0x8b60c8b3
 8007f9c:	3fc68a28 	.word	0x3fc68a28
 8007fa0:	509f79fb 	.word	0x509f79fb
 8007fa4:	3fd34413 	.word	0x3fd34413
 8007fa8:	7ff00000 	.word	0x7ff00000
 8007fac:	08009bc9 	.word	0x08009bc9
 8007fb0:	08009bc0 	.word	0x08009bc0
 8007fb4:	08009b45 	.word	0x08009b45
 8007fb8:	3ff80000 	.word	0x3ff80000
 8007fbc:	08009c00 	.word	0x08009c00
 8007fc0:	08009bd8 	.word	0x08009bd8
 8007fc4:	2301      	movs	r3, #1
 8007fc6:	9304      	str	r3, [sp, #16]
 8007fc8:	4698      	mov	r8, r3
 8007fca:	461a      	mov	r2, r3
 8007fcc:	e7da      	b.n	8007f84 <_dtoa_r+0x2f4>
 8007fce:	3101      	adds	r1, #1
 8007fd0:	6071      	str	r1, [r6, #4]
 8007fd2:	0052      	lsls	r2, r2, #1
 8007fd4:	e787      	b.n	8007ee6 <_dtoa_r+0x256>
 8007fd6:	07f1      	lsls	r1, r6, #31
 8007fd8:	d508      	bpl.n	8007fec <_dtoa_r+0x35c>
 8007fda:	e9dd 010a 	ldrd	r0, r1, [sp, #40]	; 0x28
 8007fde:	e9d7 2300 	ldrd	r2, r3, [r7]
 8007fe2:	f7f8 fa79 	bl	80004d8 <__aeabi_dmul>
 8007fe6:	e9cd 010a 	strd	r0, r1, [sp, #40]	; 0x28
 8007fea:	3501      	adds	r5, #1
 8007fec:	1076      	asrs	r6, r6, #1
 8007fee:	3708      	adds	r7, #8
 8007ff0:	2e00      	cmp	r6, #0
 8007ff2:	d1f0      	bne.n	8007fd6 <_dtoa_r+0x346>
 8007ff4:	e9dd 230a 	ldrd	r2, r3, [sp, #40]	; 0x28
 8007ff8:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 8007ffc:	f7f8 fb96 	bl	800072c <__aeabi_ddiv>
 8008000:	e9cd 0102 	strd	r0, r1, [sp, #8]
 8008004:	e01b      	b.n	800803e <_dtoa_r+0x3ae>
 8008006:	2502      	movs	r5, #2
 8008008:	e7a0      	b.n	8007f4c <_dtoa_r+0x2bc>
 800800a:	f000 80a4 	beq.w	8008156 <_dtoa_r+0x4c6>
 800800e:	e9dd 010e 	ldrd	r0, r1, [sp, #56]	; 0x38
 8008012:	f1ca 0600 	rsb	r6, sl, #0
 8008016:	4ba0      	ldr	r3, [pc, #640]	; (8008298 <_dtoa_r+0x608>)
 8008018:	f006 020f 	and.w	r2, r6, #15
 800801c:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 8008020:	e9d3 2300 	ldrd	r2, r3, [r3]
 8008024:	f7f8 fa58 	bl	80004d8 <__aeabi_dmul>
 8008028:	2502      	movs	r5, #2
 800802a:	2300      	movs	r3, #0
 800802c:	e9cd 0102 	strd	r0, r1, [sp, #8]
 8008030:	4f9a      	ldr	r7, [pc, #616]	; (800829c <_dtoa_r+0x60c>)
 8008032:	1136      	asrs	r6, r6, #4
 8008034:	2e00      	cmp	r6, #0
 8008036:	f040 8083 	bne.w	8008140 <_dtoa_r+0x4b0>
 800803a:	2b00      	cmp	r3, #0
 800803c:	d1e0      	bne.n	8008000 <_dtoa_r+0x370>
 800803e:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 8008040:	2b00      	cmp	r3, #0
 8008042:	f000 808a 	beq.w	800815a <_dtoa_r+0x4ca>
 8008046:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 800804a:	e9cd 230a 	strd	r2, r3, [sp, #40]	; 0x28
 800804e:	e9dd 010a 	ldrd	r0, r1, [sp, #40]	; 0x28
 8008052:	2200      	movs	r2, #0
 8008054:	4b92      	ldr	r3, [pc, #584]	; (80082a0 <_dtoa_r+0x610>)
 8008056:	f7f8 fcb1 	bl	80009bc <__aeabi_dcmplt>
 800805a:	2800      	cmp	r0, #0
 800805c:	d07d      	beq.n	800815a <_dtoa_r+0x4ca>
 800805e:	f1b8 0f00 	cmp.w	r8, #0
 8008062:	d07a      	beq.n	800815a <_dtoa_r+0x4ca>
 8008064:	9b04      	ldr	r3, [sp, #16]
 8008066:	2b00      	cmp	r3, #0
 8008068:	dd36      	ble.n	80080d8 <_dtoa_r+0x448>
 800806a:	e9dd 010a 	ldrd	r0, r1, [sp, #40]	; 0x28
 800806e:	2200      	movs	r2, #0
 8008070:	4b8c      	ldr	r3, [pc, #560]	; (80082a4 <_dtoa_r+0x614>)
 8008072:	f7f8 fa31 	bl	80004d8 <__aeabi_dmul>
 8008076:	e9cd 0102 	strd	r0, r1, [sp, #8]
 800807a:	9e04      	ldr	r6, [sp, #16]
 800807c:	f10a 37ff 	add.w	r7, sl, #4294967295	; 0xffffffff
 8008080:	3501      	adds	r5, #1
 8008082:	4628      	mov	r0, r5
 8008084:	f7f8 f9be 	bl	8000404 <__aeabi_i2d>
 8008088:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 800808c:	f7f8 fa24 	bl	80004d8 <__aeabi_dmul>
 8008090:	2200      	movs	r2, #0
 8008092:	4b85      	ldr	r3, [pc, #532]	; (80082a8 <_dtoa_r+0x618>)
 8008094:	f7f8 f86a 	bl	800016c <__adddf3>
 8008098:	f1a1 7550 	sub.w	r5, r1, #54525952	; 0x3400000
 800809c:	e9cd 010a 	strd	r0, r1, [sp, #40]	; 0x28
 80080a0:	950b      	str	r5, [sp, #44]	; 0x2c
 80080a2:	2e00      	cmp	r6, #0
 80080a4:	d15c      	bne.n	8008160 <_dtoa_r+0x4d0>
 80080a6:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 80080aa:	2200      	movs	r2, #0
 80080ac:	4b7f      	ldr	r3, [pc, #508]	; (80082ac <_dtoa_r+0x61c>)
 80080ae:	f7f8 f85b 	bl	8000168 <__aeabi_dsub>
 80080b2:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 80080b4:	462b      	mov	r3, r5
 80080b6:	e9cd 0102 	strd	r0, r1, [sp, #8]
 80080ba:	f7f8 fc9d 	bl	80009f8 <__aeabi_dcmpgt>
 80080be:	2800      	cmp	r0, #0
 80080c0:	f040 8281 	bne.w	80085c6 <_dtoa_r+0x936>
 80080c4:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 80080c8:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 80080ca:	f105 4300 	add.w	r3, r5, #2147483648	; 0x80000000
 80080ce:	f7f8 fc75 	bl	80009bc <__aeabi_dcmplt>
 80080d2:	2800      	cmp	r0, #0
 80080d4:	f040 8275 	bne.w	80085c2 <_dtoa_r+0x932>
 80080d8:	e9dd 230e 	ldrd	r2, r3, [sp, #56]	; 0x38
 80080dc:	e9cd 2302 	strd	r2, r3, [sp, #8]
 80080e0:	9b13      	ldr	r3, [sp, #76]	; 0x4c
 80080e2:	2b00      	cmp	r3, #0
 80080e4:	f2c0 814b 	blt.w	800837e <_dtoa_r+0x6ee>
 80080e8:	f1ba 0f0e 	cmp.w	sl, #14
 80080ec:	f300 8147 	bgt.w	800837e <_dtoa_r+0x6ee>
 80080f0:	4b69      	ldr	r3, [pc, #420]	; (8008298 <_dtoa_r+0x608>)
 80080f2:	eb03 03ca 	add.w	r3, r3, sl, lsl #3
 80080f6:	e9d3 2300 	ldrd	r2, r3, [r3]
 80080fa:	e9cd 2304 	strd	r2, r3, [sp, #16]
 80080fe:	9b1f      	ldr	r3, [sp, #124]	; 0x7c
 8008100:	2b00      	cmp	r3, #0
 8008102:	f280 80d7 	bge.w	80082b4 <_dtoa_r+0x624>
 8008106:	f1b8 0f00 	cmp.w	r8, #0
 800810a:	f300 80d3 	bgt.w	80082b4 <_dtoa_r+0x624>
 800810e:	f040 8257 	bne.w	80085c0 <_dtoa_r+0x930>
 8008112:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 8008116:	2200      	movs	r2, #0
 8008118:	4b64      	ldr	r3, [pc, #400]	; (80082ac <_dtoa_r+0x61c>)
 800811a:	f7f8 f9dd 	bl	80004d8 <__aeabi_dmul>
 800811e:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8008122:	f7f8 fc5f 	bl	80009e4 <__aeabi_dcmpge>
 8008126:	4646      	mov	r6, r8
 8008128:	4647      	mov	r7, r8
 800812a:	2800      	cmp	r0, #0
 800812c:	f040 822d 	bne.w	800858a <_dtoa_r+0x8fa>
 8008130:	9b06      	ldr	r3, [sp, #24]
 8008132:	9a06      	ldr	r2, [sp, #24]
 8008134:	1c5d      	adds	r5, r3, #1
 8008136:	2331      	movs	r3, #49	; 0x31
 8008138:	f10a 0a01 	add.w	sl, sl, #1
 800813c:	7013      	strb	r3, [r2, #0]
 800813e:	e228      	b.n	8008592 <_dtoa_r+0x902>
 8008140:	07f2      	lsls	r2, r6, #31
 8008142:	d505      	bpl.n	8008150 <_dtoa_r+0x4c0>
 8008144:	e9d7 2300 	ldrd	r2, r3, [r7]
 8008148:	f7f8 f9c6 	bl	80004d8 <__aeabi_dmul>
 800814c:	2301      	movs	r3, #1
 800814e:	3501      	adds	r5, #1
 8008150:	1076      	asrs	r6, r6, #1
 8008152:	3708      	adds	r7, #8
 8008154:	e76e      	b.n	8008034 <_dtoa_r+0x3a4>
 8008156:	2502      	movs	r5, #2
 8008158:	e771      	b.n	800803e <_dtoa_r+0x3ae>
 800815a:	4657      	mov	r7, sl
 800815c:	4646      	mov	r6, r8
 800815e:	e790      	b.n	8008082 <_dtoa_r+0x3f2>
 8008160:	4b4d      	ldr	r3, [pc, #308]	; (8008298 <_dtoa_r+0x608>)
 8008162:	eb03 03c6 	add.w	r3, r3, r6, lsl #3
 8008166:	e953 0102 	ldrd	r0, r1, [r3, #-8]
 800816a:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800816c:	2b00      	cmp	r3, #0
 800816e:	d048      	beq.n	8008202 <_dtoa_r+0x572>
 8008170:	4602      	mov	r2, r0
 8008172:	460b      	mov	r3, r1
 8008174:	2000      	movs	r0, #0
 8008176:	494e      	ldr	r1, [pc, #312]	; (80082b0 <_dtoa_r+0x620>)
 8008178:	f7f8 fad8 	bl	800072c <__aeabi_ddiv>
 800817c:	e9dd 230a 	ldrd	r2, r3, [sp, #40]	; 0x28
 8008180:	f7f7 fff2 	bl	8000168 <__aeabi_dsub>
 8008184:	e9cd 010a 	strd	r0, r1, [sp, #40]	; 0x28
 8008188:	9d06      	ldr	r5, [sp, #24]
 800818a:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 800818e:	f7f8 fc53 	bl	8000a38 <__aeabi_d2iz>
 8008192:	9011      	str	r0, [sp, #68]	; 0x44
 8008194:	f7f8 f936 	bl	8000404 <__aeabi_i2d>
 8008198:	4602      	mov	r2, r0
 800819a:	460b      	mov	r3, r1
 800819c:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 80081a0:	f7f7 ffe2 	bl	8000168 <__aeabi_dsub>
 80081a4:	9b11      	ldr	r3, [sp, #68]	; 0x44
 80081a6:	e9cd 0102 	strd	r0, r1, [sp, #8]
 80081aa:	3330      	adds	r3, #48	; 0x30
 80081ac:	f805 3b01 	strb.w	r3, [r5], #1
 80081b0:	e9dd 230a 	ldrd	r2, r3, [sp, #40]	; 0x28
 80081b4:	f7f8 fc02 	bl	80009bc <__aeabi_dcmplt>
 80081b8:	2800      	cmp	r0, #0
 80081ba:	d163      	bne.n	8008284 <_dtoa_r+0x5f4>
 80081bc:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 80081c0:	2000      	movs	r0, #0
 80081c2:	4937      	ldr	r1, [pc, #220]	; (80082a0 <_dtoa_r+0x610>)
 80081c4:	f7f7 ffd0 	bl	8000168 <__aeabi_dsub>
 80081c8:	e9dd 230a 	ldrd	r2, r3, [sp, #40]	; 0x28
 80081cc:	f7f8 fbf6 	bl	80009bc <__aeabi_dcmplt>
 80081d0:	2800      	cmp	r0, #0
 80081d2:	f040 80b5 	bne.w	8008340 <_dtoa_r+0x6b0>
 80081d6:	9b06      	ldr	r3, [sp, #24]
 80081d8:	1aeb      	subs	r3, r5, r3
 80081da:	429e      	cmp	r6, r3
 80081dc:	f77f af7c 	ble.w	80080d8 <_dtoa_r+0x448>
 80081e0:	e9dd 010a 	ldrd	r0, r1, [sp, #40]	; 0x28
 80081e4:	2200      	movs	r2, #0
 80081e6:	4b2f      	ldr	r3, [pc, #188]	; (80082a4 <_dtoa_r+0x614>)
 80081e8:	f7f8 f976 	bl	80004d8 <__aeabi_dmul>
 80081ec:	2200      	movs	r2, #0
 80081ee:	e9cd 010a 	strd	r0, r1, [sp, #40]	; 0x28
 80081f2:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 80081f6:	4b2b      	ldr	r3, [pc, #172]	; (80082a4 <_dtoa_r+0x614>)
 80081f8:	f7f8 f96e 	bl	80004d8 <__aeabi_dmul>
 80081fc:	e9cd 0102 	strd	r0, r1, [sp, #8]
 8008200:	e7c3      	b.n	800818a <_dtoa_r+0x4fa>
 8008202:	e9dd 230a 	ldrd	r2, r3, [sp, #40]	; 0x28
 8008206:	f7f8 f967 	bl	80004d8 <__aeabi_dmul>
 800820a:	9b06      	ldr	r3, [sp, #24]
 800820c:	e9cd 010a 	strd	r0, r1, [sp, #40]	; 0x28
 8008210:	199d      	adds	r5, r3, r6
 8008212:	461e      	mov	r6, r3
 8008214:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 8008218:	f7f8 fc0e 	bl	8000a38 <__aeabi_d2iz>
 800821c:	9011      	str	r0, [sp, #68]	; 0x44
 800821e:	f7f8 f8f1 	bl	8000404 <__aeabi_i2d>
 8008222:	4602      	mov	r2, r0
 8008224:	460b      	mov	r3, r1
 8008226:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 800822a:	f7f7 ff9d 	bl	8000168 <__aeabi_dsub>
 800822e:	9b11      	ldr	r3, [sp, #68]	; 0x44
 8008230:	e9cd 0102 	strd	r0, r1, [sp, #8]
 8008234:	3330      	adds	r3, #48	; 0x30
 8008236:	f806 3b01 	strb.w	r3, [r6], #1
 800823a:	42ae      	cmp	r6, r5
 800823c:	f04f 0200 	mov.w	r2, #0
 8008240:	d124      	bne.n	800828c <_dtoa_r+0x5fc>
 8008242:	e9dd 010a 	ldrd	r0, r1, [sp, #40]	; 0x28
 8008246:	4b1a      	ldr	r3, [pc, #104]	; (80082b0 <_dtoa_r+0x620>)
 8008248:	f7f7 ff90 	bl	800016c <__adddf3>
 800824c:	4602      	mov	r2, r0
 800824e:	460b      	mov	r3, r1
 8008250:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 8008254:	f7f8 fbd0 	bl	80009f8 <__aeabi_dcmpgt>
 8008258:	2800      	cmp	r0, #0
 800825a:	d171      	bne.n	8008340 <_dtoa_r+0x6b0>
 800825c:	e9dd 230a 	ldrd	r2, r3, [sp, #40]	; 0x28
 8008260:	2000      	movs	r0, #0
 8008262:	4913      	ldr	r1, [pc, #76]	; (80082b0 <_dtoa_r+0x620>)
 8008264:	f7f7 ff80 	bl	8000168 <__aeabi_dsub>
 8008268:	4602      	mov	r2, r0
 800826a:	460b      	mov	r3, r1
 800826c:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 8008270:	f7f8 fba4 	bl	80009bc <__aeabi_dcmplt>
 8008274:	2800      	cmp	r0, #0
 8008276:	f43f af2f 	beq.w	80080d8 <_dtoa_r+0x448>
 800827a:	f815 3c01 	ldrb.w	r3, [r5, #-1]
 800827e:	1e6a      	subs	r2, r5, #1
 8008280:	2b30      	cmp	r3, #48	; 0x30
 8008282:	d001      	beq.n	8008288 <_dtoa_r+0x5f8>
 8008284:	46ba      	mov	sl, r7
 8008286:	e04a      	b.n	800831e <_dtoa_r+0x68e>
 8008288:	4615      	mov	r5, r2
 800828a:	e7f6      	b.n	800827a <_dtoa_r+0x5ea>
 800828c:	4b05      	ldr	r3, [pc, #20]	; (80082a4 <_dtoa_r+0x614>)
 800828e:	f7f8 f923 	bl	80004d8 <__aeabi_dmul>
 8008292:	e9cd 0102 	strd	r0, r1, [sp, #8]
 8008296:	e7bd      	b.n	8008214 <_dtoa_r+0x584>
 8008298:	08009c00 	.word	0x08009c00
 800829c:	08009bd8 	.word	0x08009bd8
 80082a0:	3ff00000 	.word	0x3ff00000
 80082a4:	40240000 	.word	0x40240000
 80082a8:	401c0000 	.word	0x401c0000
 80082ac:	40140000 	.word	0x40140000
 80082b0:	3fe00000 	.word	0x3fe00000
 80082b4:	9d06      	ldr	r5, [sp, #24]
 80082b6:	e9dd 6702 	ldrd	r6, r7, [sp, #8]
 80082ba:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 80082be:	4630      	mov	r0, r6
 80082c0:	4639      	mov	r1, r7
 80082c2:	f7f8 fa33 	bl	800072c <__aeabi_ddiv>
 80082c6:	f7f8 fbb7 	bl	8000a38 <__aeabi_d2iz>
 80082ca:	4681      	mov	r9, r0
 80082cc:	f7f8 f89a 	bl	8000404 <__aeabi_i2d>
 80082d0:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 80082d4:	f7f8 f900 	bl	80004d8 <__aeabi_dmul>
 80082d8:	4602      	mov	r2, r0
 80082da:	460b      	mov	r3, r1
 80082dc:	4630      	mov	r0, r6
 80082de:	4639      	mov	r1, r7
 80082e0:	f7f7 ff42 	bl	8000168 <__aeabi_dsub>
 80082e4:	f109 0630 	add.w	r6, r9, #48	; 0x30
 80082e8:	f805 6b01 	strb.w	r6, [r5], #1
 80082ec:	9e06      	ldr	r6, [sp, #24]
 80082ee:	4602      	mov	r2, r0
 80082f0:	1bae      	subs	r6, r5, r6
 80082f2:	45b0      	cmp	r8, r6
 80082f4:	460b      	mov	r3, r1
 80082f6:	d135      	bne.n	8008364 <_dtoa_r+0x6d4>
 80082f8:	f7f7 ff38 	bl	800016c <__adddf3>
 80082fc:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 8008300:	4606      	mov	r6, r0
 8008302:	460f      	mov	r7, r1
 8008304:	f7f8 fb78 	bl	80009f8 <__aeabi_dcmpgt>
 8008308:	b9c8      	cbnz	r0, 800833e <_dtoa_r+0x6ae>
 800830a:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 800830e:	4630      	mov	r0, r6
 8008310:	4639      	mov	r1, r7
 8008312:	f7f8 fb49 	bl	80009a8 <__aeabi_dcmpeq>
 8008316:	b110      	cbz	r0, 800831e <_dtoa_r+0x68e>
 8008318:	f019 0f01 	tst.w	r9, #1
 800831c:	d10f      	bne.n	800833e <_dtoa_r+0x6ae>
 800831e:	4659      	mov	r1, fp
 8008320:	4620      	mov	r0, r4
 8008322:	f000 fe06 	bl	8008f32 <_Bfree>
 8008326:	2300      	movs	r3, #0
 8008328:	9a20      	ldr	r2, [sp, #128]	; 0x80
 800832a:	702b      	strb	r3, [r5, #0]
 800832c:	f10a 0301 	add.w	r3, sl, #1
 8008330:	6013      	str	r3, [r2, #0]
 8008332:	9b22      	ldr	r3, [sp, #136]	; 0x88
 8008334:	2b00      	cmp	r3, #0
 8008336:	f43f acf3 	beq.w	8007d20 <_dtoa_r+0x90>
 800833a:	601d      	str	r5, [r3, #0]
 800833c:	e4f0      	b.n	8007d20 <_dtoa_r+0x90>
 800833e:	4657      	mov	r7, sl
 8008340:	f815 2c01 	ldrb.w	r2, [r5, #-1]
 8008344:	1e6b      	subs	r3, r5, #1
 8008346:	2a39      	cmp	r2, #57	; 0x39
 8008348:	d106      	bne.n	8008358 <_dtoa_r+0x6c8>
 800834a:	9a06      	ldr	r2, [sp, #24]
 800834c:	429a      	cmp	r2, r3
 800834e:	d107      	bne.n	8008360 <_dtoa_r+0x6d0>
 8008350:	2330      	movs	r3, #48	; 0x30
 8008352:	7013      	strb	r3, [r2, #0]
 8008354:	4613      	mov	r3, r2
 8008356:	3701      	adds	r7, #1
 8008358:	781a      	ldrb	r2, [r3, #0]
 800835a:	3201      	adds	r2, #1
 800835c:	701a      	strb	r2, [r3, #0]
 800835e:	e791      	b.n	8008284 <_dtoa_r+0x5f4>
 8008360:	461d      	mov	r5, r3
 8008362:	e7ed      	b.n	8008340 <_dtoa_r+0x6b0>
 8008364:	2200      	movs	r2, #0
 8008366:	4b99      	ldr	r3, [pc, #612]	; (80085cc <_dtoa_r+0x93c>)
 8008368:	f7f8 f8b6 	bl	80004d8 <__aeabi_dmul>
 800836c:	2200      	movs	r2, #0
 800836e:	2300      	movs	r3, #0
 8008370:	4606      	mov	r6, r0
 8008372:	460f      	mov	r7, r1
 8008374:	f7f8 fb18 	bl	80009a8 <__aeabi_dcmpeq>
 8008378:	2800      	cmp	r0, #0
 800837a:	d09e      	beq.n	80082ba <_dtoa_r+0x62a>
 800837c:	e7cf      	b.n	800831e <_dtoa_r+0x68e>
 800837e:	9a09      	ldr	r2, [sp, #36]	; 0x24
 8008380:	2a00      	cmp	r2, #0
 8008382:	f000 8088 	beq.w	8008496 <_dtoa_r+0x806>
 8008386:	9a1e      	ldr	r2, [sp, #120]	; 0x78
 8008388:	2a01      	cmp	r2, #1
 800838a:	dc6d      	bgt.n	8008468 <_dtoa_r+0x7d8>
 800838c:	9a10      	ldr	r2, [sp, #64]	; 0x40
 800838e:	2a00      	cmp	r2, #0
 8008390:	d066      	beq.n	8008460 <_dtoa_r+0x7d0>
 8008392:	f203 4333 	addw	r3, r3, #1075	; 0x433
 8008396:	464d      	mov	r5, r9
 8008398:	9e08      	ldr	r6, [sp, #32]
 800839a:	9a07      	ldr	r2, [sp, #28]
 800839c:	2101      	movs	r1, #1
 800839e:	441a      	add	r2, r3
 80083a0:	4620      	mov	r0, r4
 80083a2:	4499      	add	r9, r3
 80083a4:	9207      	str	r2, [sp, #28]
 80083a6:	f000 fea2 	bl	80090ee <__i2b>
 80083aa:	4607      	mov	r7, r0
 80083ac:	2d00      	cmp	r5, #0
 80083ae:	dd0b      	ble.n	80083c8 <_dtoa_r+0x738>
 80083b0:	9b07      	ldr	r3, [sp, #28]
 80083b2:	2b00      	cmp	r3, #0
 80083b4:	dd08      	ble.n	80083c8 <_dtoa_r+0x738>
 80083b6:	42ab      	cmp	r3, r5
 80083b8:	bfa8      	it	ge
 80083ba:	462b      	movge	r3, r5
 80083bc:	9a07      	ldr	r2, [sp, #28]
 80083be:	eba9 0903 	sub.w	r9, r9, r3
 80083c2:	1aed      	subs	r5, r5, r3
 80083c4:	1ad3      	subs	r3, r2, r3
 80083c6:	9307      	str	r3, [sp, #28]
 80083c8:	9b08      	ldr	r3, [sp, #32]
 80083ca:	b1eb      	cbz	r3, 8008408 <_dtoa_r+0x778>
 80083cc:	9b09      	ldr	r3, [sp, #36]	; 0x24
 80083ce:	2b00      	cmp	r3, #0
 80083d0:	d065      	beq.n	800849e <_dtoa_r+0x80e>
 80083d2:	b18e      	cbz	r6, 80083f8 <_dtoa_r+0x768>
 80083d4:	4639      	mov	r1, r7
 80083d6:	4632      	mov	r2, r6
 80083d8:	4620      	mov	r0, r4
 80083da:	f000 ff27 	bl	800922c <__pow5mult>
 80083de:	465a      	mov	r2, fp
 80083e0:	4601      	mov	r1, r0
 80083e2:	4607      	mov	r7, r0
 80083e4:	4620      	mov	r0, r4
 80083e6:	f000 fe8b 	bl	8009100 <__multiply>
 80083ea:	4659      	mov	r1, fp
 80083ec:	900a      	str	r0, [sp, #40]	; 0x28
 80083ee:	4620      	mov	r0, r4
 80083f0:	f000 fd9f 	bl	8008f32 <_Bfree>
 80083f4:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 80083f6:	469b      	mov	fp, r3
 80083f8:	9b08      	ldr	r3, [sp, #32]
 80083fa:	1b9a      	subs	r2, r3, r6
 80083fc:	d004      	beq.n	8008408 <_dtoa_r+0x778>
 80083fe:	4659      	mov	r1, fp
 8008400:	4620      	mov	r0, r4
 8008402:	f000 ff13 	bl	800922c <__pow5mult>
 8008406:	4683      	mov	fp, r0
 8008408:	2101      	movs	r1, #1
 800840a:	4620      	mov	r0, r4
 800840c:	f000 fe6f 	bl	80090ee <__i2b>
 8008410:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 8008412:	4606      	mov	r6, r0
 8008414:	2b00      	cmp	r3, #0
 8008416:	f000 81c6 	beq.w	80087a6 <_dtoa_r+0xb16>
 800841a:	461a      	mov	r2, r3
 800841c:	4601      	mov	r1, r0
 800841e:	4620      	mov	r0, r4
 8008420:	f000 ff04 	bl	800922c <__pow5mult>
 8008424:	9b1e      	ldr	r3, [sp, #120]	; 0x78
 8008426:	4606      	mov	r6, r0
 8008428:	2b01      	cmp	r3, #1
 800842a:	dc3e      	bgt.n	80084aa <_dtoa_r+0x81a>
 800842c:	9b02      	ldr	r3, [sp, #8]
 800842e:	2b00      	cmp	r3, #0
 8008430:	d137      	bne.n	80084a2 <_dtoa_r+0x812>
 8008432:	9b03      	ldr	r3, [sp, #12]
 8008434:	f3c3 0313 	ubfx	r3, r3, #0, #20
 8008438:	2b00      	cmp	r3, #0
 800843a:	d134      	bne.n	80084a6 <_dtoa_r+0x816>
 800843c:	9b03      	ldr	r3, [sp, #12]
 800843e:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
 8008442:	0d1b      	lsrs	r3, r3, #20
 8008444:	051b      	lsls	r3, r3, #20
 8008446:	b12b      	cbz	r3, 8008454 <_dtoa_r+0x7c4>
 8008448:	9b07      	ldr	r3, [sp, #28]
 800844a:	f109 0901 	add.w	r9, r9, #1
 800844e:	3301      	adds	r3, #1
 8008450:	9307      	str	r3, [sp, #28]
 8008452:	2301      	movs	r3, #1
 8008454:	9308      	str	r3, [sp, #32]
 8008456:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 8008458:	2b00      	cmp	r3, #0
 800845a:	d128      	bne.n	80084ae <_dtoa_r+0x81e>
 800845c:	2001      	movs	r0, #1
 800845e:	e02e      	b.n	80084be <_dtoa_r+0x82e>
 8008460:	9b12      	ldr	r3, [sp, #72]	; 0x48
 8008462:	f1c3 0336 	rsb	r3, r3, #54	; 0x36
 8008466:	e796      	b.n	8008396 <_dtoa_r+0x706>
 8008468:	9b08      	ldr	r3, [sp, #32]
 800846a:	f108 36ff 	add.w	r6, r8, #4294967295	; 0xffffffff
 800846e:	42b3      	cmp	r3, r6
 8008470:	bfb7      	itett	lt
 8008472:	9b08      	ldrlt	r3, [sp, #32]
 8008474:	1b9e      	subge	r6, r3, r6
 8008476:	1af2      	sublt	r2, r6, r3
 8008478:	9b0c      	ldrlt	r3, [sp, #48]	; 0x30
 800847a:	bfbf      	itttt	lt
 800847c:	9608      	strlt	r6, [sp, #32]
 800847e:	189b      	addlt	r3, r3, r2
 8008480:	930c      	strlt	r3, [sp, #48]	; 0x30
 8008482:	2600      	movlt	r6, #0
 8008484:	f1b8 0f00 	cmp.w	r8, #0
 8008488:	bfb9      	ittee	lt
 800848a:	eba9 0508 	sublt.w	r5, r9, r8
 800848e:	2300      	movlt	r3, #0
 8008490:	464d      	movge	r5, r9
 8008492:	4643      	movge	r3, r8
 8008494:	e781      	b.n	800839a <_dtoa_r+0x70a>
 8008496:	9e08      	ldr	r6, [sp, #32]
 8008498:	464d      	mov	r5, r9
 800849a:	9f09      	ldr	r7, [sp, #36]	; 0x24
 800849c:	e786      	b.n	80083ac <_dtoa_r+0x71c>
 800849e:	9a08      	ldr	r2, [sp, #32]
 80084a0:	e7ad      	b.n	80083fe <_dtoa_r+0x76e>
 80084a2:	2300      	movs	r3, #0
 80084a4:	e7d6      	b.n	8008454 <_dtoa_r+0x7c4>
 80084a6:	9b02      	ldr	r3, [sp, #8]
 80084a8:	e7d4      	b.n	8008454 <_dtoa_r+0x7c4>
 80084aa:	2300      	movs	r3, #0
 80084ac:	9308      	str	r3, [sp, #32]
 80084ae:	6933      	ldr	r3, [r6, #16]
 80084b0:	eb06 0383 	add.w	r3, r6, r3, lsl #2
 80084b4:	6918      	ldr	r0, [r3, #16]
 80084b6:	f000 fdcc 	bl	8009052 <__hi0bits>
 80084ba:	f1c0 0020 	rsb	r0, r0, #32
 80084be:	9b07      	ldr	r3, [sp, #28]
 80084c0:	4418      	add	r0, r3
 80084c2:	f010 001f 	ands.w	r0, r0, #31
 80084c6:	d047      	beq.n	8008558 <_dtoa_r+0x8c8>
 80084c8:	f1c0 0320 	rsb	r3, r0, #32
 80084cc:	2b04      	cmp	r3, #4
 80084ce:	dd3b      	ble.n	8008548 <_dtoa_r+0x8b8>
 80084d0:	9b07      	ldr	r3, [sp, #28]
 80084d2:	f1c0 001c 	rsb	r0, r0, #28
 80084d6:	4481      	add	r9, r0
 80084d8:	4405      	add	r5, r0
 80084da:	4403      	add	r3, r0
 80084dc:	9307      	str	r3, [sp, #28]
 80084de:	f1b9 0f00 	cmp.w	r9, #0
 80084e2:	dd05      	ble.n	80084f0 <_dtoa_r+0x860>
 80084e4:	4659      	mov	r1, fp
 80084e6:	464a      	mov	r2, r9
 80084e8:	4620      	mov	r0, r4
 80084ea:	f000 feed 	bl	80092c8 <__lshift>
 80084ee:	4683      	mov	fp, r0
 80084f0:	9b07      	ldr	r3, [sp, #28]
 80084f2:	2b00      	cmp	r3, #0
 80084f4:	dd05      	ble.n	8008502 <_dtoa_r+0x872>
 80084f6:	4631      	mov	r1, r6
 80084f8:	461a      	mov	r2, r3
 80084fa:	4620      	mov	r0, r4
 80084fc:	f000 fee4 	bl	80092c8 <__lshift>
 8008500:	4606      	mov	r6, r0
 8008502:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 8008504:	b353      	cbz	r3, 800855c <_dtoa_r+0x8cc>
 8008506:	4631      	mov	r1, r6
 8008508:	4658      	mov	r0, fp
 800850a:	f000 ff31 	bl	8009370 <__mcmp>
 800850e:	2800      	cmp	r0, #0
 8008510:	da24      	bge.n	800855c <_dtoa_r+0x8cc>
 8008512:	2300      	movs	r3, #0
 8008514:	4659      	mov	r1, fp
 8008516:	220a      	movs	r2, #10
 8008518:	4620      	mov	r0, r4
 800851a:	f000 fd21 	bl	8008f60 <__multadd>
 800851e:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8008520:	f10a 3aff 	add.w	sl, sl, #4294967295	; 0xffffffff
 8008524:	4683      	mov	fp, r0
 8008526:	2b00      	cmp	r3, #0
 8008528:	f000 8144 	beq.w	80087b4 <_dtoa_r+0xb24>
 800852c:	2300      	movs	r3, #0
 800852e:	4639      	mov	r1, r7
 8008530:	220a      	movs	r2, #10
 8008532:	4620      	mov	r0, r4
 8008534:	f000 fd14 	bl	8008f60 <__multadd>
 8008538:	9b04      	ldr	r3, [sp, #16]
 800853a:	4607      	mov	r7, r0
 800853c:	2b00      	cmp	r3, #0
 800853e:	dc4d      	bgt.n	80085dc <_dtoa_r+0x94c>
 8008540:	9b1e      	ldr	r3, [sp, #120]	; 0x78
 8008542:	2b02      	cmp	r3, #2
 8008544:	dd4a      	ble.n	80085dc <_dtoa_r+0x94c>
 8008546:	e011      	b.n	800856c <_dtoa_r+0x8dc>
 8008548:	d0c9      	beq.n	80084de <_dtoa_r+0x84e>
 800854a:	9a07      	ldr	r2, [sp, #28]
 800854c:	331c      	adds	r3, #28
 800854e:	441a      	add	r2, r3
 8008550:	4499      	add	r9, r3
 8008552:	441d      	add	r5, r3
 8008554:	4613      	mov	r3, r2
 8008556:	e7c1      	b.n	80084dc <_dtoa_r+0x84c>
 8008558:	4603      	mov	r3, r0
 800855a:	e7f6      	b.n	800854a <_dtoa_r+0x8ba>
 800855c:	f1b8 0f00 	cmp.w	r8, #0
 8008560:	dc36      	bgt.n	80085d0 <_dtoa_r+0x940>
 8008562:	9b1e      	ldr	r3, [sp, #120]	; 0x78
 8008564:	2b02      	cmp	r3, #2
 8008566:	dd33      	ble.n	80085d0 <_dtoa_r+0x940>
 8008568:	f8cd 8010 	str.w	r8, [sp, #16]
 800856c:	9b04      	ldr	r3, [sp, #16]
 800856e:	b963      	cbnz	r3, 800858a <_dtoa_r+0x8fa>
 8008570:	4631      	mov	r1, r6
 8008572:	2205      	movs	r2, #5
 8008574:	4620      	mov	r0, r4
 8008576:	f000 fcf3 	bl	8008f60 <__multadd>
 800857a:	4601      	mov	r1, r0
 800857c:	4606      	mov	r6, r0
 800857e:	4658      	mov	r0, fp
 8008580:	f000 fef6 	bl	8009370 <__mcmp>
 8008584:	2800      	cmp	r0, #0
 8008586:	f73f add3 	bgt.w	8008130 <_dtoa_r+0x4a0>
 800858a:	9b1f      	ldr	r3, [sp, #124]	; 0x7c
 800858c:	9d06      	ldr	r5, [sp, #24]
 800858e:	ea6f 0a03 	mvn.w	sl, r3
 8008592:	f04f 0900 	mov.w	r9, #0
 8008596:	4631      	mov	r1, r6
 8008598:	4620      	mov	r0, r4
 800859a:	f000 fcca 	bl	8008f32 <_Bfree>
 800859e:	2f00      	cmp	r7, #0
 80085a0:	f43f aebd 	beq.w	800831e <_dtoa_r+0x68e>
 80085a4:	f1b9 0f00 	cmp.w	r9, #0
 80085a8:	d005      	beq.n	80085b6 <_dtoa_r+0x926>
 80085aa:	45b9      	cmp	r9, r7
 80085ac:	d003      	beq.n	80085b6 <_dtoa_r+0x926>
 80085ae:	4649      	mov	r1, r9
 80085b0:	4620      	mov	r0, r4
 80085b2:	f000 fcbe 	bl	8008f32 <_Bfree>
 80085b6:	4639      	mov	r1, r7
 80085b8:	4620      	mov	r0, r4
 80085ba:	f000 fcba 	bl	8008f32 <_Bfree>
 80085be:	e6ae      	b.n	800831e <_dtoa_r+0x68e>
 80085c0:	2600      	movs	r6, #0
 80085c2:	4637      	mov	r7, r6
 80085c4:	e7e1      	b.n	800858a <_dtoa_r+0x8fa>
 80085c6:	46ba      	mov	sl, r7
 80085c8:	4637      	mov	r7, r6
 80085ca:	e5b1      	b.n	8008130 <_dtoa_r+0x4a0>
 80085cc:	40240000 	.word	0x40240000
 80085d0:	9b09      	ldr	r3, [sp, #36]	; 0x24
 80085d2:	f8cd 8010 	str.w	r8, [sp, #16]
 80085d6:	2b00      	cmp	r3, #0
 80085d8:	f000 80f3 	beq.w	80087c2 <_dtoa_r+0xb32>
 80085dc:	2d00      	cmp	r5, #0
 80085de:	dd05      	ble.n	80085ec <_dtoa_r+0x95c>
 80085e0:	4639      	mov	r1, r7
 80085e2:	462a      	mov	r2, r5
 80085e4:	4620      	mov	r0, r4
 80085e6:	f000 fe6f 	bl	80092c8 <__lshift>
 80085ea:	4607      	mov	r7, r0
 80085ec:	9b08      	ldr	r3, [sp, #32]
 80085ee:	2b00      	cmp	r3, #0
 80085f0:	d04c      	beq.n	800868c <_dtoa_r+0x9fc>
 80085f2:	6879      	ldr	r1, [r7, #4]
 80085f4:	4620      	mov	r0, r4
 80085f6:	f000 fc68 	bl	8008eca <_Balloc>
 80085fa:	4605      	mov	r5, r0
 80085fc:	693a      	ldr	r2, [r7, #16]
 80085fe:	f107 010c 	add.w	r1, r7, #12
 8008602:	3202      	adds	r2, #2
 8008604:	0092      	lsls	r2, r2, #2
 8008606:	300c      	adds	r0, #12
 8008608:	f000 fc52 	bl	8008eb0 <memcpy>
 800860c:	2201      	movs	r2, #1
 800860e:	4629      	mov	r1, r5
 8008610:	4620      	mov	r0, r4
 8008612:	f000 fe59 	bl	80092c8 <__lshift>
 8008616:	46b9      	mov	r9, r7
 8008618:	4607      	mov	r7, r0
 800861a:	9b06      	ldr	r3, [sp, #24]
 800861c:	9307      	str	r3, [sp, #28]
 800861e:	9b02      	ldr	r3, [sp, #8]
 8008620:	f003 0301 	and.w	r3, r3, #1
 8008624:	9308      	str	r3, [sp, #32]
 8008626:	4631      	mov	r1, r6
 8008628:	4658      	mov	r0, fp
 800862a:	f7ff faa3 	bl	8007b74 <quorem>
 800862e:	4649      	mov	r1, r9
 8008630:	4605      	mov	r5, r0
 8008632:	f100 0830 	add.w	r8, r0, #48	; 0x30
 8008636:	4658      	mov	r0, fp
 8008638:	f000 fe9a 	bl	8009370 <__mcmp>
 800863c:	463a      	mov	r2, r7
 800863e:	9002      	str	r0, [sp, #8]
 8008640:	4631      	mov	r1, r6
 8008642:	4620      	mov	r0, r4
 8008644:	f000 feae 	bl	80093a4 <__mdiff>
 8008648:	68c3      	ldr	r3, [r0, #12]
 800864a:	4602      	mov	r2, r0
 800864c:	bb03      	cbnz	r3, 8008690 <_dtoa_r+0xa00>
 800864e:	4601      	mov	r1, r0
 8008650:	9009      	str	r0, [sp, #36]	; 0x24
 8008652:	4658      	mov	r0, fp
 8008654:	f000 fe8c 	bl	8009370 <__mcmp>
 8008658:	4603      	mov	r3, r0
 800865a:	9a09      	ldr	r2, [sp, #36]	; 0x24
 800865c:	4611      	mov	r1, r2
 800865e:	4620      	mov	r0, r4
 8008660:	9309      	str	r3, [sp, #36]	; 0x24
 8008662:	f000 fc66 	bl	8008f32 <_Bfree>
 8008666:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8008668:	b9a3      	cbnz	r3, 8008694 <_dtoa_r+0xa04>
 800866a:	9a1e      	ldr	r2, [sp, #120]	; 0x78
 800866c:	b992      	cbnz	r2, 8008694 <_dtoa_r+0xa04>
 800866e:	9a08      	ldr	r2, [sp, #32]
 8008670:	b982      	cbnz	r2, 8008694 <_dtoa_r+0xa04>
 8008672:	f1b8 0f39 	cmp.w	r8, #57	; 0x39
 8008676:	d029      	beq.n	80086cc <_dtoa_r+0xa3c>
 8008678:	9b02      	ldr	r3, [sp, #8]
 800867a:	2b00      	cmp	r3, #0
 800867c:	dd01      	ble.n	8008682 <_dtoa_r+0x9f2>
 800867e:	f105 0831 	add.w	r8, r5, #49	; 0x31
 8008682:	9b07      	ldr	r3, [sp, #28]
 8008684:	1c5d      	adds	r5, r3, #1
 8008686:	f883 8000 	strb.w	r8, [r3]
 800868a:	e784      	b.n	8008596 <_dtoa_r+0x906>
 800868c:	4638      	mov	r0, r7
 800868e:	e7c2      	b.n	8008616 <_dtoa_r+0x986>
 8008690:	2301      	movs	r3, #1
 8008692:	e7e3      	b.n	800865c <_dtoa_r+0x9cc>
 8008694:	9a02      	ldr	r2, [sp, #8]
 8008696:	2a00      	cmp	r2, #0
 8008698:	db04      	blt.n	80086a4 <_dtoa_r+0xa14>
 800869a:	d123      	bne.n	80086e4 <_dtoa_r+0xa54>
 800869c:	9a1e      	ldr	r2, [sp, #120]	; 0x78
 800869e:	bb0a      	cbnz	r2, 80086e4 <_dtoa_r+0xa54>
 80086a0:	9a08      	ldr	r2, [sp, #32]
 80086a2:	b9fa      	cbnz	r2, 80086e4 <_dtoa_r+0xa54>
 80086a4:	2b00      	cmp	r3, #0
 80086a6:	ddec      	ble.n	8008682 <_dtoa_r+0x9f2>
 80086a8:	4659      	mov	r1, fp
 80086aa:	2201      	movs	r2, #1
 80086ac:	4620      	mov	r0, r4
 80086ae:	f000 fe0b 	bl	80092c8 <__lshift>
 80086b2:	4631      	mov	r1, r6
 80086b4:	4683      	mov	fp, r0
 80086b6:	f000 fe5b 	bl	8009370 <__mcmp>
 80086ba:	2800      	cmp	r0, #0
 80086bc:	dc03      	bgt.n	80086c6 <_dtoa_r+0xa36>
 80086be:	d1e0      	bne.n	8008682 <_dtoa_r+0x9f2>
 80086c0:	f018 0f01 	tst.w	r8, #1
 80086c4:	d0dd      	beq.n	8008682 <_dtoa_r+0x9f2>
 80086c6:	f1b8 0f39 	cmp.w	r8, #57	; 0x39
 80086ca:	d1d8      	bne.n	800867e <_dtoa_r+0x9ee>
 80086cc:	9b07      	ldr	r3, [sp, #28]
 80086ce:	9a07      	ldr	r2, [sp, #28]
 80086d0:	1c5d      	adds	r5, r3, #1
 80086d2:	2339      	movs	r3, #57	; 0x39
 80086d4:	7013      	strb	r3, [r2, #0]
 80086d6:	f815 3c01 	ldrb.w	r3, [r5, #-1]
 80086da:	1e6a      	subs	r2, r5, #1
 80086dc:	2b39      	cmp	r3, #57	; 0x39
 80086de:	d04d      	beq.n	800877c <_dtoa_r+0xaec>
 80086e0:	3301      	adds	r3, #1
 80086e2:	e052      	b.n	800878a <_dtoa_r+0xafa>
 80086e4:	9a07      	ldr	r2, [sp, #28]
 80086e6:	2b00      	cmp	r3, #0
 80086e8:	f102 0501 	add.w	r5, r2, #1
 80086ec:	dd06      	ble.n	80086fc <_dtoa_r+0xa6c>
 80086ee:	f1b8 0f39 	cmp.w	r8, #57	; 0x39
 80086f2:	d0eb      	beq.n	80086cc <_dtoa_r+0xa3c>
 80086f4:	f108 0801 	add.w	r8, r8, #1
 80086f8:	9b07      	ldr	r3, [sp, #28]
 80086fa:	e7c4      	b.n	8008686 <_dtoa_r+0x9f6>
 80086fc:	9b06      	ldr	r3, [sp, #24]
 80086fe:	9a04      	ldr	r2, [sp, #16]
 8008700:	1aeb      	subs	r3, r5, r3
 8008702:	4293      	cmp	r3, r2
 8008704:	f805 8c01 	strb.w	r8, [r5, #-1]
 8008708:	d021      	beq.n	800874e <_dtoa_r+0xabe>
 800870a:	4659      	mov	r1, fp
 800870c:	2300      	movs	r3, #0
 800870e:	220a      	movs	r2, #10
 8008710:	4620      	mov	r0, r4
 8008712:	f000 fc25 	bl	8008f60 <__multadd>
 8008716:	45b9      	cmp	r9, r7
 8008718:	4683      	mov	fp, r0
 800871a:	f04f 0300 	mov.w	r3, #0
 800871e:	f04f 020a 	mov.w	r2, #10
 8008722:	4649      	mov	r1, r9
 8008724:	4620      	mov	r0, r4
 8008726:	d105      	bne.n	8008734 <_dtoa_r+0xaa4>
 8008728:	f000 fc1a 	bl	8008f60 <__multadd>
 800872c:	4681      	mov	r9, r0
 800872e:	4607      	mov	r7, r0
 8008730:	9507      	str	r5, [sp, #28]
 8008732:	e778      	b.n	8008626 <_dtoa_r+0x996>
 8008734:	f000 fc14 	bl	8008f60 <__multadd>
 8008738:	4639      	mov	r1, r7
 800873a:	4681      	mov	r9, r0
 800873c:	2300      	movs	r3, #0
 800873e:	220a      	movs	r2, #10
 8008740:	4620      	mov	r0, r4
 8008742:	f000 fc0d 	bl	8008f60 <__multadd>
 8008746:	4607      	mov	r7, r0
 8008748:	e7f2      	b.n	8008730 <_dtoa_r+0xaa0>
 800874a:	f04f 0900 	mov.w	r9, #0
 800874e:	4659      	mov	r1, fp
 8008750:	2201      	movs	r2, #1
 8008752:	4620      	mov	r0, r4
 8008754:	f000 fdb8 	bl	80092c8 <__lshift>
 8008758:	4631      	mov	r1, r6
 800875a:	4683      	mov	fp, r0
 800875c:	f000 fe08 	bl	8009370 <__mcmp>
 8008760:	2800      	cmp	r0, #0
 8008762:	dcb8      	bgt.n	80086d6 <_dtoa_r+0xa46>
 8008764:	d102      	bne.n	800876c <_dtoa_r+0xadc>
 8008766:	f018 0f01 	tst.w	r8, #1
 800876a:	d1b4      	bne.n	80086d6 <_dtoa_r+0xa46>
 800876c:	f815 3c01 	ldrb.w	r3, [r5, #-1]
 8008770:	1e6a      	subs	r2, r5, #1
 8008772:	2b30      	cmp	r3, #48	; 0x30
 8008774:	f47f af0f 	bne.w	8008596 <_dtoa_r+0x906>
 8008778:	4615      	mov	r5, r2
 800877a:	e7f7      	b.n	800876c <_dtoa_r+0xadc>
 800877c:	9b06      	ldr	r3, [sp, #24]
 800877e:	4293      	cmp	r3, r2
 8008780:	d105      	bne.n	800878e <_dtoa_r+0xafe>
 8008782:	2331      	movs	r3, #49	; 0x31
 8008784:	9a06      	ldr	r2, [sp, #24]
 8008786:	f10a 0a01 	add.w	sl, sl, #1
 800878a:	7013      	strb	r3, [r2, #0]
 800878c:	e703      	b.n	8008596 <_dtoa_r+0x906>
 800878e:	4615      	mov	r5, r2
 8008790:	e7a1      	b.n	80086d6 <_dtoa_r+0xa46>
 8008792:	4b17      	ldr	r3, [pc, #92]	; (80087f0 <_dtoa_r+0xb60>)
 8008794:	f7ff bae1 	b.w	8007d5a <_dtoa_r+0xca>
 8008798:	9b22      	ldr	r3, [sp, #136]	; 0x88
 800879a:	2b00      	cmp	r3, #0
 800879c:	f47f aabb 	bne.w	8007d16 <_dtoa_r+0x86>
 80087a0:	4b14      	ldr	r3, [pc, #80]	; (80087f4 <_dtoa_r+0xb64>)
 80087a2:	f7ff bada 	b.w	8007d5a <_dtoa_r+0xca>
 80087a6:	9b1e      	ldr	r3, [sp, #120]	; 0x78
 80087a8:	2b01      	cmp	r3, #1
 80087aa:	f77f ae3f 	ble.w	800842c <_dtoa_r+0x79c>
 80087ae:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 80087b0:	9308      	str	r3, [sp, #32]
 80087b2:	e653      	b.n	800845c <_dtoa_r+0x7cc>
 80087b4:	9b04      	ldr	r3, [sp, #16]
 80087b6:	2b00      	cmp	r3, #0
 80087b8:	dc03      	bgt.n	80087c2 <_dtoa_r+0xb32>
 80087ba:	9b1e      	ldr	r3, [sp, #120]	; 0x78
 80087bc:	2b02      	cmp	r3, #2
 80087be:	f73f aed5 	bgt.w	800856c <_dtoa_r+0x8dc>
 80087c2:	9d06      	ldr	r5, [sp, #24]
 80087c4:	4631      	mov	r1, r6
 80087c6:	4658      	mov	r0, fp
 80087c8:	f7ff f9d4 	bl	8007b74 <quorem>
 80087cc:	9b06      	ldr	r3, [sp, #24]
 80087ce:	f100 0830 	add.w	r8, r0, #48	; 0x30
 80087d2:	f805 8b01 	strb.w	r8, [r5], #1
 80087d6:	9a04      	ldr	r2, [sp, #16]
 80087d8:	1aeb      	subs	r3, r5, r3
 80087da:	429a      	cmp	r2, r3
 80087dc:	ddb5      	ble.n	800874a <_dtoa_r+0xaba>
 80087de:	4659      	mov	r1, fp
 80087e0:	2300      	movs	r3, #0
 80087e2:	220a      	movs	r2, #10
 80087e4:	4620      	mov	r0, r4
 80087e6:	f000 fbbb 	bl	8008f60 <__multadd>
 80087ea:	4683      	mov	fp, r0
 80087ec:	e7ea      	b.n	80087c4 <_dtoa_r+0xb34>
 80087ee:	bf00      	nop
 80087f0:	08009b44 	.word	0x08009b44
 80087f4:	08009bc0 	.word	0x08009bc0

080087f8 <rshift>:
 80087f8:	b5f0      	push	{r4, r5, r6, r7, lr}
 80087fa:	6906      	ldr	r6, [r0, #16]
 80087fc:	114b      	asrs	r3, r1, #5
 80087fe:	429e      	cmp	r6, r3
 8008800:	f100 0414 	add.w	r4, r0, #20
 8008804:	dd31      	ble.n	800886a <rshift+0x72>
 8008806:	f011 011f 	ands.w	r1, r1, #31
 800880a:	eb04 0686 	add.w	r6, r4, r6, lsl #2
 800880e:	eb04 0283 	add.w	r2, r4, r3, lsl #2
 8008812:	d108      	bne.n	8008826 <rshift+0x2e>
 8008814:	4621      	mov	r1, r4
 8008816:	42b2      	cmp	r2, r6
 8008818:	460b      	mov	r3, r1
 800881a:	d211      	bcs.n	8008840 <rshift+0x48>
 800881c:	f852 3b04 	ldr.w	r3, [r2], #4
 8008820:	f841 3b04 	str.w	r3, [r1], #4
 8008824:	e7f7      	b.n	8008816 <rshift+0x1e>
 8008826:	f854 5023 	ldr.w	r5, [r4, r3, lsl #2]
 800882a:	4623      	mov	r3, r4
 800882c:	f1c1 0c20 	rsb	ip, r1, #32
 8008830:	40cd      	lsrs	r5, r1
 8008832:	3204      	adds	r2, #4
 8008834:	42b2      	cmp	r2, r6
 8008836:	4617      	mov	r7, r2
 8008838:	d30d      	bcc.n	8008856 <rshift+0x5e>
 800883a:	601d      	str	r5, [r3, #0]
 800883c:	b105      	cbz	r5, 8008840 <rshift+0x48>
 800883e:	3304      	adds	r3, #4
 8008840:	42a3      	cmp	r3, r4
 8008842:	eba3 0204 	sub.w	r2, r3, r4
 8008846:	bf08      	it	eq
 8008848:	2300      	moveq	r3, #0
 800884a:	ea4f 02a2 	mov.w	r2, r2, asr #2
 800884e:	6102      	str	r2, [r0, #16]
 8008850:	bf08      	it	eq
 8008852:	6143      	streq	r3, [r0, #20]
 8008854:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8008856:	683f      	ldr	r7, [r7, #0]
 8008858:	fa07 f70c 	lsl.w	r7, r7, ip
 800885c:	433d      	orrs	r5, r7
 800885e:	f843 5b04 	str.w	r5, [r3], #4
 8008862:	f852 5b04 	ldr.w	r5, [r2], #4
 8008866:	40cd      	lsrs	r5, r1
 8008868:	e7e4      	b.n	8008834 <rshift+0x3c>
 800886a:	4623      	mov	r3, r4
 800886c:	e7e8      	b.n	8008840 <rshift+0x48>

0800886e <__hexdig_fun>:
 800886e:	f1a0 0330 	sub.w	r3, r0, #48	; 0x30
 8008872:	2b09      	cmp	r3, #9
 8008874:	d802      	bhi.n	800887c <__hexdig_fun+0xe>
 8008876:	3820      	subs	r0, #32
 8008878:	b2c0      	uxtb	r0, r0
 800887a:	4770      	bx	lr
 800887c:	f1a0 0361 	sub.w	r3, r0, #97	; 0x61
 8008880:	2b05      	cmp	r3, #5
 8008882:	d801      	bhi.n	8008888 <__hexdig_fun+0x1a>
 8008884:	3847      	subs	r0, #71	; 0x47
 8008886:	e7f7      	b.n	8008878 <__hexdig_fun+0xa>
 8008888:	f1a0 0341 	sub.w	r3, r0, #65	; 0x41
 800888c:	2b05      	cmp	r3, #5
 800888e:	d801      	bhi.n	8008894 <__hexdig_fun+0x26>
 8008890:	3827      	subs	r0, #39	; 0x27
 8008892:	e7f1      	b.n	8008878 <__hexdig_fun+0xa>
 8008894:	2000      	movs	r0, #0
 8008896:	4770      	bx	lr

08008898 <__gethex>:
 8008898:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800889c:	b08b      	sub	sp, #44	; 0x2c
 800889e:	9002      	str	r0, [sp, #8]
 80088a0:	9816      	ldr	r0, [sp, #88]	; 0x58
 80088a2:	468a      	mov	sl, r1
 80088a4:	4690      	mov	r8, r2
 80088a6:	9306      	str	r3, [sp, #24]
 80088a8:	f000 fad1 	bl	8008e4e <__localeconv_l>
 80088ac:	6803      	ldr	r3, [r0, #0]
 80088ae:	f04f 0b00 	mov.w	fp, #0
 80088b2:	4618      	mov	r0, r3
 80088b4:	9303      	str	r3, [sp, #12]
 80088b6:	f7f7 fc4b 	bl	8000150 <strlen>
 80088ba:	9b03      	ldr	r3, [sp, #12]
 80088bc:	9001      	str	r0, [sp, #4]
 80088be:	4403      	add	r3, r0
 80088c0:	f813 3c01 	ldrb.w	r3, [r3, #-1]
 80088c4:	9307      	str	r3, [sp, #28]
 80088c6:	f8da 3000 	ldr.w	r3, [sl]
 80088ca:	3302      	adds	r3, #2
 80088cc:	461f      	mov	r7, r3
 80088ce:	f813 0b01 	ldrb.w	r0, [r3], #1
 80088d2:	2830      	cmp	r0, #48	; 0x30
 80088d4:	d06c      	beq.n	80089b0 <__gethex+0x118>
 80088d6:	f7ff ffca 	bl	800886e <__hexdig_fun>
 80088da:	4604      	mov	r4, r0
 80088dc:	2800      	cmp	r0, #0
 80088de:	d16a      	bne.n	80089b6 <__gethex+0x11e>
 80088e0:	9a01      	ldr	r2, [sp, #4]
 80088e2:	9903      	ldr	r1, [sp, #12]
 80088e4:	4638      	mov	r0, r7
 80088e6:	f001 f849 	bl	800997c <strncmp>
 80088ea:	2800      	cmp	r0, #0
 80088ec:	d166      	bne.n	80089bc <__gethex+0x124>
 80088ee:	9b01      	ldr	r3, [sp, #4]
 80088f0:	5cf8      	ldrb	r0, [r7, r3]
 80088f2:	18fe      	adds	r6, r7, r3
 80088f4:	f7ff ffbb 	bl	800886e <__hexdig_fun>
 80088f8:	2800      	cmp	r0, #0
 80088fa:	d062      	beq.n	80089c2 <__gethex+0x12a>
 80088fc:	4633      	mov	r3, r6
 80088fe:	7818      	ldrb	r0, [r3, #0]
 8008900:	461f      	mov	r7, r3
 8008902:	2830      	cmp	r0, #48	; 0x30
 8008904:	f103 0301 	add.w	r3, r3, #1
 8008908:	d0f9      	beq.n	80088fe <__gethex+0x66>
 800890a:	f7ff ffb0 	bl	800886e <__hexdig_fun>
 800890e:	fab0 f580 	clz	r5, r0
 8008912:	4634      	mov	r4, r6
 8008914:	f04f 0b01 	mov.w	fp, #1
 8008918:	096d      	lsrs	r5, r5, #5
 800891a:	463a      	mov	r2, r7
 800891c:	4616      	mov	r6, r2
 800891e:	7830      	ldrb	r0, [r6, #0]
 8008920:	3201      	adds	r2, #1
 8008922:	f7ff ffa4 	bl	800886e <__hexdig_fun>
 8008926:	2800      	cmp	r0, #0
 8008928:	d1f8      	bne.n	800891c <__gethex+0x84>
 800892a:	9a01      	ldr	r2, [sp, #4]
 800892c:	9903      	ldr	r1, [sp, #12]
 800892e:	4630      	mov	r0, r6
 8008930:	f001 f824 	bl	800997c <strncmp>
 8008934:	b950      	cbnz	r0, 800894c <__gethex+0xb4>
 8008936:	b954      	cbnz	r4, 800894e <__gethex+0xb6>
 8008938:	9b01      	ldr	r3, [sp, #4]
 800893a:	18f4      	adds	r4, r6, r3
 800893c:	4622      	mov	r2, r4
 800893e:	4616      	mov	r6, r2
 8008940:	7830      	ldrb	r0, [r6, #0]
 8008942:	3201      	adds	r2, #1
 8008944:	f7ff ff93 	bl	800886e <__hexdig_fun>
 8008948:	2800      	cmp	r0, #0
 800894a:	d1f8      	bne.n	800893e <__gethex+0xa6>
 800894c:	b10c      	cbz	r4, 8008952 <__gethex+0xba>
 800894e:	1ba4      	subs	r4, r4, r6
 8008950:	00a4      	lsls	r4, r4, #2
 8008952:	7833      	ldrb	r3, [r6, #0]
 8008954:	2b50      	cmp	r3, #80	; 0x50
 8008956:	d001      	beq.n	800895c <__gethex+0xc4>
 8008958:	2b70      	cmp	r3, #112	; 0x70
 800895a:	d140      	bne.n	80089de <__gethex+0x146>
 800895c:	7873      	ldrb	r3, [r6, #1]
 800895e:	2b2b      	cmp	r3, #43	; 0x2b
 8008960:	d031      	beq.n	80089c6 <__gethex+0x12e>
 8008962:	2b2d      	cmp	r3, #45	; 0x2d
 8008964:	d033      	beq.n	80089ce <__gethex+0x136>
 8008966:	f04f 0900 	mov.w	r9, #0
 800896a:	1c71      	adds	r1, r6, #1
 800896c:	7808      	ldrb	r0, [r1, #0]
 800896e:	f7ff ff7e 	bl	800886e <__hexdig_fun>
 8008972:	1e43      	subs	r3, r0, #1
 8008974:	b2db      	uxtb	r3, r3
 8008976:	2b18      	cmp	r3, #24
 8008978:	d831      	bhi.n	80089de <__gethex+0x146>
 800897a:	f1a0 0210 	sub.w	r2, r0, #16
 800897e:	f811 0f01 	ldrb.w	r0, [r1, #1]!
 8008982:	f7ff ff74 	bl	800886e <__hexdig_fun>
 8008986:	1e43      	subs	r3, r0, #1
 8008988:	b2db      	uxtb	r3, r3
 800898a:	2b18      	cmp	r3, #24
 800898c:	d922      	bls.n	80089d4 <__gethex+0x13c>
 800898e:	f1b9 0f00 	cmp.w	r9, #0
 8008992:	d000      	beq.n	8008996 <__gethex+0xfe>
 8008994:	4252      	negs	r2, r2
 8008996:	4414      	add	r4, r2
 8008998:	f8ca 1000 	str.w	r1, [sl]
 800899c:	b30d      	cbz	r5, 80089e2 <__gethex+0x14a>
 800899e:	f1bb 0f00 	cmp.w	fp, #0
 80089a2:	bf0c      	ite	eq
 80089a4:	2706      	moveq	r7, #6
 80089a6:	2700      	movne	r7, #0
 80089a8:	4638      	mov	r0, r7
 80089aa:	b00b      	add	sp, #44	; 0x2c
 80089ac:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80089b0:	f10b 0b01 	add.w	fp, fp, #1
 80089b4:	e78a      	b.n	80088cc <__gethex+0x34>
 80089b6:	2500      	movs	r5, #0
 80089b8:	462c      	mov	r4, r5
 80089ba:	e7ae      	b.n	800891a <__gethex+0x82>
 80089bc:	463e      	mov	r6, r7
 80089be:	2501      	movs	r5, #1
 80089c0:	e7c7      	b.n	8008952 <__gethex+0xba>
 80089c2:	4604      	mov	r4, r0
 80089c4:	e7fb      	b.n	80089be <__gethex+0x126>
 80089c6:	f04f 0900 	mov.w	r9, #0
 80089ca:	1cb1      	adds	r1, r6, #2
 80089cc:	e7ce      	b.n	800896c <__gethex+0xd4>
 80089ce:	f04f 0901 	mov.w	r9, #1
 80089d2:	e7fa      	b.n	80089ca <__gethex+0x132>
 80089d4:	230a      	movs	r3, #10
 80089d6:	fb03 0202 	mla	r2, r3, r2, r0
 80089da:	3a10      	subs	r2, #16
 80089dc:	e7cf      	b.n	800897e <__gethex+0xe6>
 80089de:	4631      	mov	r1, r6
 80089e0:	e7da      	b.n	8008998 <__gethex+0x100>
 80089e2:	4629      	mov	r1, r5
 80089e4:	1bf3      	subs	r3, r6, r7
 80089e6:	3b01      	subs	r3, #1
 80089e8:	2b07      	cmp	r3, #7
 80089ea:	dc49      	bgt.n	8008a80 <__gethex+0x1e8>
 80089ec:	9802      	ldr	r0, [sp, #8]
 80089ee:	f000 fa6c 	bl	8008eca <_Balloc>
 80089f2:	f04f 0b00 	mov.w	fp, #0
 80089f6:	4605      	mov	r5, r0
 80089f8:	46da      	mov	sl, fp
 80089fa:	9b01      	ldr	r3, [sp, #4]
 80089fc:	f100 0914 	add.w	r9, r0, #20
 8008a00:	f1c3 0301 	rsb	r3, r3, #1
 8008a04:	f8cd 9010 	str.w	r9, [sp, #16]
 8008a08:	9308      	str	r3, [sp, #32]
 8008a0a:	42b7      	cmp	r7, r6
 8008a0c:	d33b      	bcc.n	8008a86 <__gethex+0x1ee>
 8008a0e:	9804      	ldr	r0, [sp, #16]
 8008a10:	f840 ab04 	str.w	sl, [r0], #4
 8008a14:	eba0 0009 	sub.w	r0, r0, r9
 8008a18:	1080      	asrs	r0, r0, #2
 8008a1a:	6128      	str	r0, [r5, #16]
 8008a1c:	0147      	lsls	r7, r0, #5
 8008a1e:	4650      	mov	r0, sl
 8008a20:	f000 fb17 	bl	8009052 <__hi0bits>
 8008a24:	f8d8 6000 	ldr.w	r6, [r8]
 8008a28:	1a3f      	subs	r7, r7, r0
 8008a2a:	42b7      	cmp	r7, r6
 8008a2c:	dd64      	ble.n	8008af8 <__gethex+0x260>
 8008a2e:	1bbf      	subs	r7, r7, r6
 8008a30:	4639      	mov	r1, r7
 8008a32:	4628      	mov	r0, r5
 8008a34:	f000 fe21 	bl	800967a <__any_on>
 8008a38:	4682      	mov	sl, r0
 8008a3a:	b178      	cbz	r0, 8008a5c <__gethex+0x1c4>
 8008a3c:	f04f 0a01 	mov.w	sl, #1
 8008a40:	1e7b      	subs	r3, r7, #1
 8008a42:	1159      	asrs	r1, r3, #5
 8008a44:	f003 021f 	and.w	r2, r3, #31
 8008a48:	f859 1021 	ldr.w	r1, [r9, r1, lsl #2]
 8008a4c:	fa0a f202 	lsl.w	r2, sl, r2
 8008a50:	420a      	tst	r2, r1
 8008a52:	d003      	beq.n	8008a5c <__gethex+0x1c4>
 8008a54:	4553      	cmp	r3, sl
 8008a56:	dc46      	bgt.n	8008ae6 <__gethex+0x24e>
 8008a58:	f04f 0a02 	mov.w	sl, #2
 8008a5c:	4639      	mov	r1, r7
 8008a5e:	4628      	mov	r0, r5
 8008a60:	f7ff feca 	bl	80087f8 <rshift>
 8008a64:	443c      	add	r4, r7
 8008a66:	f8d8 3008 	ldr.w	r3, [r8, #8]
 8008a6a:	42a3      	cmp	r3, r4
 8008a6c:	da52      	bge.n	8008b14 <__gethex+0x27c>
 8008a6e:	4629      	mov	r1, r5
 8008a70:	9802      	ldr	r0, [sp, #8]
 8008a72:	f000 fa5e 	bl	8008f32 <_Bfree>
 8008a76:	2300      	movs	r3, #0
 8008a78:	9a14      	ldr	r2, [sp, #80]	; 0x50
 8008a7a:	27a3      	movs	r7, #163	; 0xa3
 8008a7c:	6013      	str	r3, [r2, #0]
 8008a7e:	e793      	b.n	80089a8 <__gethex+0x110>
 8008a80:	3101      	adds	r1, #1
 8008a82:	105b      	asrs	r3, r3, #1
 8008a84:	e7b0      	b.n	80089e8 <__gethex+0x150>
 8008a86:	1e73      	subs	r3, r6, #1
 8008a88:	9305      	str	r3, [sp, #20]
 8008a8a:	9a07      	ldr	r2, [sp, #28]
 8008a8c:	f816 3c01 	ldrb.w	r3, [r6, #-1]
 8008a90:	4293      	cmp	r3, r2
 8008a92:	d018      	beq.n	8008ac6 <__gethex+0x22e>
 8008a94:	f1bb 0f20 	cmp.w	fp, #32
 8008a98:	d107      	bne.n	8008aaa <__gethex+0x212>
 8008a9a:	9b04      	ldr	r3, [sp, #16]
 8008a9c:	f8c3 a000 	str.w	sl, [r3]
 8008aa0:	f04f 0a00 	mov.w	sl, #0
 8008aa4:	46d3      	mov	fp, sl
 8008aa6:	3304      	adds	r3, #4
 8008aa8:	9304      	str	r3, [sp, #16]
 8008aaa:	f816 0c01 	ldrb.w	r0, [r6, #-1]
 8008aae:	f7ff fede 	bl	800886e <__hexdig_fun>
 8008ab2:	f000 000f 	and.w	r0, r0, #15
 8008ab6:	fa00 f00b 	lsl.w	r0, r0, fp
 8008aba:	ea4a 0a00 	orr.w	sl, sl, r0
 8008abe:	f10b 0b04 	add.w	fp, fp, #4
 8008ac2:	9b05      	ldr	r3, [sp, #20]
 8008ac4:	e00d      	b.n	8008ae2 <__gethex+0x24a>
 8008ac6:	9b05      	ldr	r3, [sp, #20]
 8008ac8:	9a08      	ldr	r2, [sp, #32]
 8008aca:	4413      	add	r3, r2
 8008acc:	42bb      	cmp	r3, r7
 8008ace:	d3e1      	bcc.n	8008a94 <__gethex+0x1fc>
 8008ad0:	4618      	mov	r0, r3
 8008ad2:	9a01      	ldr	r2, [sp, #4]
 8008ad4:	9903      	ldr	r1, [sp, #12]
 8008ad6:	9309      	str	r3, [sp, #36]	; 0x24
 8008ad8:	f000 ff50 	bl	800997c <strncmp>
 8008adc:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8008ade:	2800      	cmp	r0, #0
 8008ae0:	d1d8      	bne.n	8008a94 <__gethex+0x1fc>
 8008ae2:	461e      	mov	r6, r3
 8008ae4:	e791      	b.n	8008a0a <__gethex+0x172>
 8008ae6:	1eb9      	subs	r1, r7, #2
 8008ae8:	4628      	mov	r0, r5
 8008aea:	f000 fdc6 	bl	800967a <__any_on>
 8008aee:	2800      	cmp	r0, #0
 8008af0:	d0b2      	beq.n	8008a58 <__gethex+0x1c0>
 8008af2:	f04f 0a03 	mov.w	sl, #3
 8008af6:	e7b1      	b.n	8008a5c <__gethex+0x1c4>
 8008af8:	da09      	bge.n	8008b0e <__gethex+0x276>
 8008afa:	1bf7      	subs	r7, r6, r7
 8008afc:	4629      	mov	r1, r5
 8008afe:	463a      	mov	r2, r7
 8008b00:	9802      	ldr	r0, [sp, #8]
 8008b02:	f000 fbe1 	bl	80092c8 <__lshift>
 8008b06:	4605      	mov	r5, r0
 8008b08:	1be4      	subs	r4, r4, r7
 8008b0a:	f100 0914 	add.w	r9, r0, #20
 8008b0e:	f04f 0a00 	mov.w	sl, #0
 8008b12:	e7a8      	b.n	8008a66 <__gethex+0x1ce>
 8008b14:	f8d8 0004 	ldr.w	r0, [r8, #4]
 8008b18:	42a0      	cmp	r0, r4
 8008b1a:	dd6b      	ble.n	8008bf4 <__gethex+0x35c>
 8008b1c:	1b04      	subs	r4, r0, r4
 8008b1e:	42a6      	cmp	r6, r4
 8008b20:	dc2e      	bgt.n	8008b80 <__gethex+0x2e8>
 8008b22:	f8d8 300c 	ldr.w	r3, [r8, #12]
 8008b26:	2b02      	cmp	r3, #2
 8008b28:	d022      	beq.n	8008b70 <__gethex+0x2d8>
 8008b2a:	2b03      	cmp	r3, #3
 8008b2c:	d024      	beq.n	8008b78 <__gethex+0x2e0>
 8008b2e:	2b01      	cmp	r3, #1
 8008b30:	d115      	bne.n	8008b5e <__gethex+0x2c6>
 8008b32:	42a6      	cmp	r6, r4
 8008b34:	d113      	bne.n	8008b5e <__gethex+0x2c6>
 8008b36:	2e01      	cmp	r6, #1
 8008b38:	dc0b      	bgt.n	8008b52 <__gethex+0x2ba>
 8008b3a:	f8d8 3004 	ldr.w	r3, [r8, #4]
 8008b3e:	9a06      	ldr	r2, [sp, #24]
 8008b40:	2762      	movs	r7, #98	; 0x62
 8008b42:	6013      	str	r3, [r2, #0]
 8008b44:	2301      	movs	r3, #1
 8008b46:	612b      	str	r3, [r5, #16]
 8008b48:	f8c9 3000 	str.w	r3, [r9]
 8008b4c:	9b14      	ldr	r3, [sp, #80]	; 0x50
 8008b4e:	601d      	str	r5, [r3, #0]
 8008b50:	e72a      	b.n	80089a8 <__gethex+0x110>
 8008b52:	1e71      	subs	r1, r6, #1
 8008b54:	4628      	mov	r0, r5
 8008b56:	f000 fd90 	bl	800967a <__any_on>
 8008b5a:	2800      	cmp	r0, #0
 8008b5c:	d1ed      	bne.n	8008b3a <__gethex+0x2a2>
 8008b5e:	4629      	mov	r1, r5
 8008b60:	9802      	ldr	r0, [sp, #8]
 8008b62:	f000 f9e6 	bl	8008f32 <_Bfree>
 8008b66:	2300      	movs	r3, #0
 8008b68:	9a14      	ldr	r2, [sp, #80]	; 0x50
 8008b6a:	2750      	movs	r7, #80	; 0x50
 8008b6c:	6013      	str	r3, [r2, #0]
 8008b6e:	e71b      	b.n	80089a8 <__gethex+0x110>
 8008b70:	9b15      	ldr	r3, [sp, #84]	; 0x54
 8008b72:	2b00      	cmp	r3, #0
 8008b74:	d0e1      	beq.n	8008b3a <__gethex+0x2a2>
 8008b76:	e7f2      	b.n	8008b5e <__gethex+0x2c6>
 8008b78:	9b15      	ldr	r3, [sp, #84]	; 0x54
 8008b7a:	2b00      	cmp	r3, #0
 8008b7c:	d1dd      	bne.n	8008b3a <__gethex+0x2a2>
 8008b7e:	e7ee      	b.n	8008b5e <__gethex+0x2c6>
 8008b80:	1e67      	subs	r7, r4, #1
 8008b82:	f1ba 0f00 	cmp.w	sl, #0
 8008b86:	d132      	bne.n	8008bee <__gethex+0x356>
 8008b88:	b127      	cbz	r7, 8008b94 <__gethex+0x2fc>
 8008b8a:	4639      	mov	r1, r7
 8008b8c:	4628      	mov	r0, r5
 8008b8e:	f000 fd74 	bl	800967a <__any_on>
 8008b92:	4682      	mov	sl, r0
 8008b94:	2301      	movs	r3, #1
 8008b96:	117a      	asrs	r2, r7, #5
 8008b98:	f007 071f 	and.w	r7, r7, #31
 8008b9c:	fa03 f707 	lsl.w	r7, r3, r7
 8008ba0:	f859 3022 	ldr.w	r3, [r9, r2, lsl #2]
 8008ba4:	4621      	mov	r1, r4
 8008ba6:	421f      	tst	r7, r3
 8008ba8:	f04f 0702 	mov.w	r7, #2
 8008bac:	4628      	mov	r0, r5
 8008bae:	bf18      	it	ne
 8008bb0:	f04a 0a02 	orrne.w	sl, sl, #2
 8008bb4:	1b36      	subs	r6, r6, r4
 8008bb6:	f7ff fe1f 	bl	80087f8 <rshift>
 8008bba:	f8d8 4004 	ldr.w	r4, [r8, #4]
 8008bbe:	f1ba 0f00 	cmp.w	sl, #0
 8008bc2:	d048      	beq.n	8008c56 <__gethex+0x3be>
 8008bc4:	f8d8 300c 	ldr.w	r3, [r8, #12]
 8008bc8:	2b02      	cmp	r3, #2
 8008bca:	d015      	beq.n	8008bf8 <__gethex+0x360>
 8008bcc:	2b03      	cmp	r3, #3
 8008bce:	d017      	beq.n	8008c00 <__gethex+0x368>
 8008bd0:	2b01      	cmp	r3, #1
 8008bd2:	d109      	bne.n	8008be8 <__gethex+0x350>
 8008bd4:	f01a 0f02 	tst.w	sl, #2
 8008bd8:	d006      	beq.n	8008be8 <__gethex+0x350>
 8008bda:	f8d9 3000 	ldr.w	r3, [r9]
 8008bde:	ea4a 0a03 	orr.w	sl, sl, r3
 8008be2:	f01a 0f01 	tst.w	sl, #1
 8008be6:	d10e      	bne.n	8008c06 <__gethex+0x36e>
 8008be8:	f047 0710 	orr.w	r7, r7, #16
 8008bec:	e033      	b.n	8008c56 <__gethex+0x3be>
 8008bee:	f04f 0a01 	mov.w	sl, #1
 8008bf2:	e7cf      	b.n	8008b94 <__gethex+0x2fc>
 8008bf4:	2701      	movs	r7, #1
 8008bf6:	e7e2      	b.n	8008bbe <__gethex+0x326>
 8008bf8:	9b15      	ldr	r3, [sp, #84]	; 0x54
 8008bfa:	f1c3 0301 	rsb	r3, r3, #1
 8008bfe:	9315      	str	r3, [sp, #84]	; 0x54
 8008c00:	9b15      	ldr	r3, [sp, #84]	; 0x54
 8008c02:	2b00      	cmp	r3, #0
 8008c04:	d0f0      	beq.n	8008be8 <__gethex+0x350>
 8008c06:	f04f 0c00 	mov.w	ip, #0
 8008c0a:	f8d5 9010 	ldr.w	r9, [r5, #16]
 8008c0e:	f105 0314 	add.w	r3, r5, #20
 8008c12:	ea4f 0a89 	mov.w	sl, r9, lsl #2
 8008c16:	eb03 010a 	add.w	r1, r3, sl
 8008c1a:	4618      	mov	r0, r3
 8008c1c:	f853 2b04 	ldr.w	r2, [r3], #4
 8008c20:	f1b2 3fff 	cmp.w	r2, #4294967295	; 0xffffffff
 8008c24:	d01c      	beq.n	8008c60 <__gethex+0x3c8>
 8008c26:	3201      	adds	r2, #1
 8008c28:	6002      	str	r2, [r0, #0]
 8008c2a:	2f02      	cmp	r7, #2
 8008c2c:	f105 0314 	add.w	r3, r5, #20
 8008c30:	d138      	bne.n	8008ca4 <__gethex+0x40c>
 8008c32:	f8d8 2000 	ldr.w	r2, [r8]
 8008c36:	3a01      	subs	r2, #1
 8008c38:	42b2      	cmp	r2, r6
 8008c3a:	d10a      	bne.n	8008c52 <__gethex+0x3ba>
 8008c3c:	2201      	movs	r2, #1
 8008c3e:	1171      	asrs	r1, r6, #5
 8008c40:	f853 3021 	ldr.w	r3, [r3, r1, lsl #2]
 8008c44:	f006 061f 	and.w	r6, r6, #31
 8008c48:	fa02 f606 	lsl.w	r6, r2, r6
 8008c4c:	421e      	tst	r6, r3
 8008c4e:	bf18      	it	ne
 8008c50:	4617      	movne	r7, r2
 8008c52:	f047 0720 	orr.w	r7, r7, #32
 8008c56:	9b14      	ldr	r3, [sp, #80]	; 0x50
 8008c58:	601d      	str	r5, [r3, #0]
 8008c5a:	9b06      	ldr	r3, [sp, #24]
 8008c5c:	601c      	str	r4, [r3, #0]
 8008c5e:	e6a3      	b.n	80089a8 <__gethex+0x110>
 8008c60:	4299      	cmp	r1, r3
 8008c62:	f843 cc04 	str.w	ip, [r3, #-4]
 8008c66:	d8d8      	bhi.n	8008c1a <__gethex+0x382>
 8008c68:	68ab      	ldr	r3, [r5, #8]
 8008c6a:	4599      	cmp	r9, r3
 8008c6c:	db12      	blt.n	8008c94 <__gethex+0x3fc>
 8008c6e:	6869      	ldr	r1, [r5, #4]
 8008c70:	9802      	ldr	r0, [sp, #8]
 8008c72:	3101      	adds	r1, #1
 8008c74:	f000 f929 	bl	8008eca <_Balloc>
 8008c78:	4683      	mov	fp, r0
 8008c7a:	692a      	ldr	r2, [r5, #16]
 8008c7c:	f105 010c 	add.w	r1, r5, #12
 8008c80:	3202      	adds	r2, #2
 8008c82:	0092      	lsls	r2, r2, #2
 8008c84:	300c      	adds	r0, #12
 8008c86:	f000 f913 	bl	8008eb0 <memcpy>
 8008c8a:	4629      	mov	r1, r5
 8008c8c:	9802      	ldr	r0, [sp, #8]
 8008c8e:	f000 f950 	bl	8008f32 <_Bfree>
 8008c92:	465d      	mov	r5, fp
 8008c94:	692b      	ldr	r3, [r5, #16]
 8008c96:	1c5a      	adds	r2, r3, #1
 8008c98:	612a      	str	r2, [r5, #16]
 8008c9a:	2201      	movs	r2, #1
 8008c9c:	eb05 0383 	add.w	r3, r5, r3, lsl #2
 8008ca0:	615a      	str	r2, [r3, #20]
 8008ca2:	e7c2      	b.n	8008c2a <__gethex+0x392>
 8008ca4:	692a      	ldr	r2, [r5, #16]
 8008ca6:	454a      	cmp	r2, r9
 8008ca8:	dd0b      	ble.n	8008cc2 <__gethex+0x42a>
 8008caa:	2101      	movs	r1, #1
 8008cac:	4628      	mov	r0, r5
 8008cae:	f7ff fda3 	bl	80087f8 <rshift>
 8008cb2:	f8d8 3008 	ldr.w	r3, [r8, #8]
 8008cb6:	3401      	adds	r4, #1
 8008cb8:	42a3      	cmp	r3, r4
 8008cba:	f6ff aed8 	blt.w	8008a6e <__gethex+0x1d6>
 8008cbe:	2701      	movs	r7, #1
 8008cc0:	e7c7      	b.n	8008c52 <__gethex+0x3ba>
 8008cc2:	f016 061f 	ands.w	r6, r6, #31
 8008cc6:	d0fa      	beq.n	8008cbe <__gethex+0x426>
 8008cc8:	449a      	add	sl, r3
 8008cca:	f85a 0c04 	ldr.w	r0, [sl, #-4]
 8008cce:	f000 f9c0 	bl	8009052 <__hi0bits>
 8008cd2:	f1c6 0620 	rsb	r6, r6, #32
 8008cd6:	42b0      	cmp	r0, r6
 8008cd8:	dbe7      	blt.n	8008caa <__gethex+0x412>
 8008cda:	e7f0      	b.n	8008cbe <__gethex+0x426>

08008cdc <L_shift>:
 8008cdc:	f1c2 0208 	rsb	r2, r2, #8
 8008ce0:	0092      	lsls	r2, r2, #2
 8008ce2:	b570      	push	{r4, r5, r6, lr}
 8008ce4:	f1c2 0620 	rsb	r6, r2, #32
 8008ce8:	6843      	ldr	r3, [r0, #4]
 8008cea:	6804      	ldr	r4, [r0, #0]
 8008cec:	fa03 f506 	lsl.w	r5, r3, r6
 8008cf0:	432c      	orrs	r4, r5
 8008cf2:	40d3      	lsrs	r3, r2
 8008cf4:	6004      	str	r4, [r0, #0]
 8008cf6:	f840 3f04 	str.w	r3, [r0, #4]!
 8008cfa:	4288      	cmp	r0, r1
 8008cfc:	d3f4      	bcc.n	8008ce8 <L_shift+0xc>
 8008cfe:	bd70      	pop	{r4, r5, r6, pc}

08008d00 <__match>:
 8008d00:	b530      	push	{r4, r5, lr}
 8008d02:	6803      	ldr	r3, [r0, #0]
 8008d04:	3301      	adds	r3, #1
 8008d06:	f811 4b01 	ldrb.w	r4, [r1], #1
 8008d0a:	b914      	cbnz	r4, 8008d12 <__match+0x12>
 8008d0c:	6003      	str	r3, [r0, #0]
 8008d0e:	2001      	movs	r0, #1
 8008d10:	bd30      	pop	{r4, r5, pc}
 8008d12:	f813 2b01 	ldrb.w	r2, [r3], #1
 8008d16:	f1a2 0541 	sub.w	r5, r2, #65	; 0x41
 8008d1a:	2d19      	cmp	r5, #25
 8008d1c:	bf98      	it	ls
 8008d1e:	3220      	addls	r2, #32
 8008d20:	42a2      	cmp	r2, r4
 8008d22:	d0f0      	beq.n	8008d06 <__match+0x6>
 8008d24:	2000      	movs	r0, #0
 8008d26:	e7f3      	b.n	8008d10 <__match+0x10>

08008d28 <__hexnan>:
 8008d28:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8008d2c:	2500      	movs	r5, #0
 8008d2e:	680b      	ldr	r3, [r1, #0]
 8008d30:	4682      	mov	sl, r0
 8008d32:	115f      	asrs	r7, r3, #5
 8008d34:	eb02 0787 	add.w	r7, r2, r7, lsl #2
 8008d38:	f013 031f 	ands.w	r3, r3, #31
 8008d3c:	bf18      	it	ne
 8008d3e:	3704      	addne	r7, #4
 8008d40:	1f3e      	subs	r6, r7, #4
 8008d42:	4690      	mov	r8, r2
 8008d44:	46b1      	mov	r9, r6
 8008d46:	4634      	mov	r4, r6
 8008d48:	46ab      	mov	fp, r5
 8008d4a:	b087      	sub	sp, #28
 8008d4c:	6801      	ldr	r1, [r0, #0]
 8008d4e:	9301      	str	r3, [sp, #4]
 8008d50:	f847 5c04 	str.w	r5, [r7, #-4]
 8008d54:	9502      	str	r5, [sp, #8]
 8008d56:	784a      	ldrb	r2, [r1, #1]
 8008d58:	1c4b      	adds	r3, r1, #1
 8008d5a:	9303      	str	r3, [sp, #12]
 8008d5c:	b342      	cbz	r2, 8008db0 <__hexnan+0x88>
 8008d5e:	4610      	mov	r0, r2
 8008d60:	9105      	str	r1, [sp, #20]
 8008d62:	9204      	str	r2, [sp, #16]
 8008d64:	f7ff fd83 	bl	800886e <__hexdig_fun>
 8008d68:	2800      	cmp	r0, #0
 8008d6a:	d143      	bne.n	8008df4 <__hexnan+0xcc>
 8008d6c:	9a04      	ldr	r2, [sp, #16]
 8008d6e:	9905      	ldr	r1, [sp, #20]
 8008d70:	2a20      	cmp	r2, #32
 8008d72:	d818      	bhi.n	8008da6 <__hexnan+0x7e>
 8008d74:	9b02      	ldr	r3, [sp, #8]
 8008d76:	459b      	cmp	fp, r3
 8008d78:	dd13      	ble.n	8008da2 <__hexnan+0x7a>
 8008d7a:	454c      	cmp	r4, r9
 8008d7c:	d206      	bcs.n	8008d8c <__hexnan+0x64>
 8008d7e:	2d07      	cmp	r5, #7
 8008d80:	dc04      	bgt.n	8008d8c <__hexnan+0x64>
 8008d82:	462a      	mov	r2, r5
 8008d84:	4649      	mov	r1, r9
 8008d86:	4620      	mov	r0, r4
 8008d88:	f7ff ffa8 	bl	8008cdc <L_shift>
 8008d8c:	4544      	cmp	r4, r8
 8008d8e:	d944      	bls.n	8008e1a <__hexnan+0xf2>
 8008d90:	2300      	movs	r3, #0
 8008d92:	f1a4 0904 	sub.w	r9, r4, #4
 8008d96:	f844 3c04 	str.w	r3, [r4, #-4]
 8008d9a:	461d      	mov	r5, r3
 8008d9c:	464c      	mov	r4, r9
 8008d9e:	f8cd b008 	str.w	fp, [sp, #8]
 8008da2:	9903      	ldr	r1, [sp, #12]
 8008da4:	e7d7      	b.n	8008d56 <__hexnan+0x2e>
 8008da6:	2a29      	cmp	r2, #41	; 0x29
 8008da8:	d14a      	bne.n	8008e40 <__hexnan+0x118>
 8008daa:	3102      	adds	r1, #2
 8008dac:	f8ca 1000 	str.w	r1, [sl]
 8008db0:	f1bb 0f00 	cmp.w	fp, #0
 8008db4:	d044      	beq.n	8008e40 <__hexnan+0x118>
 8008db6:	454c      	cmp	r4, r9
 8008db8:	d206      	bcs.n	8008dc8 <__hexnan+0xa0>
 8008dba:	2d07      	cmp	r5, #7
 8008dbc:	dc04      	bgt.n	8008dc8 <__hexnan+0xa0>
 8008dbe:	462a      	mov	r2, r5
 8008dc0:	4649      	mov	r1, r9
 8008dc2:	4620      	mov	r0, r4
 8008dc4:	f7ff ff8a 	bl	8008cdc <L_shift>
 8008dc8:	4544      	cmp	r4, r8
 8008dca:	d928      	bls.n	8008e1e <__hexnan+0xf6>
 8008dcc:	4643      	mov	r3, r8
 8008dce:	f854 2b04 	ldr.w	r2, [r4], #4
 8008dd2:	42a6      	cmp	r6, r4
 8008dd4:	f843 2b04 	str.w	r2, [r3], #4
 8008dd8:	d2f9      	bcs.n	8008dce <__hexnan+0xa6>
 8008dda:	2200      	movs	r2, #0
 8008ddc:	f843 2b04 	str.w	r2, [r3], #4
 8008de0:	429e      	cmp	r6, r3
 8008de2:	d2fb      	bcs.n	8008ddc <__hexnan+0xb4>
 8008de4:	6833      	ldr	r3, [r6, #0]
 8008de6:	b91b      	cbnz	r3, 8008df0 <__hexnan+0xc8>
 8008de8:	4546      	cmp	r6, r8
 8008dea:	d127      	bne.n	8008e3c <__hexnan+0x114>
 8008dec:	2301      	movs	r3, #1
 8008dee:	6033      	str	r3, [r6, #0]
 8008df0:	2005      	movs	r0, #5
 8008df2:	e026      	b.n	8008e42 <__hexnan+0x11a>
 8008df4:	3501      	adds	r5, #1
 8008df6:	2d08      	cmp	r5, #8
 8008df8:	f10b 0b01 	add.w	fp, fp, #1
 8008dfc:	dd06      	ble.n	8008e0c <__hexnan+0xe4>
 8008dfe:	4544      	cmp	r4, r8
 8008e00:	d9cf      	bls.n	8008da2 <__hexnan+0x7a>
 8008e02:	2300      	movs	r3, #0
 8008e04:	2501      	movs	r5, #1
 8008e06:	f844 3c04 	str.w	r3, [r4, #-4]
 8008e0a:	3c04      	subs	r4, #4
 8008e0c:	6822      	ldr	r2, [r4, #0]
 8008e0e:	f000 000f 	and.w	r0, r0, #15
 8008e12:	ea40 1002 	orr.w	r0, r0, r2, lsl #4
 8008e16:	6020      	str	r0, [r4, #0]
 8008e18:	e7c3      	b.n	8008da2 <__hexnan+0x7a>
 8008e1a:	2508      	movs	r5, #8
 8008e1c:	e7c1      	b.n	8008da2 <__hexnan+0x7a>
 8008e1e:	9b01      	ldr	r3, [sp, #4]
 8008e20:	2b00      	cmp	r3, #0
 8008e22:	d0df      	beq.n	8008de4 <__hexnan+0xbc>
 8008e24:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 8008e28:	f1c3 0320 	rsb	r3, r3, #32
 8008e2c:	fa22 f303 	lsr.w	r3, r2, r3
 8008e30:	f857 2c04 	ldr.w	r2, [r7, #-4]
 8008e34:	401a      	ands	r2, r3
 8008e36:	f847 2c04 	str.w	r2, [r7, #-4]
 8008e3a:	e7d3      	b.n	8008de4 <__hexnan+0xbc>
 8008e3c:	3e04      	subs	r6, #4
 8008e3e:	e7d1      	b.n	8008de4 <__hexnan+0xbc>
 8008e40:	2004      	movs	r0, #4
 8008e42:	b007      	add	sp, #28
 8008e44:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}

08008e48 <__locale_ctype_ptr_l>:
 8008e48:	f8d0 00ec 	ldr.w	r0, [r0, #236]	; 0xec
 8008e4c:	4770      	bx	lr

08008e4e <__localeconv_l>:
 8008e4e:	30f0      	adds	r0, #240	; 0xf0
 8008e50:	4770      	bx	lr
	...

08008e54 <_localeconv_r>:
 8008e54:	4b04      	ldr	r3, [pc, #16]	; (8008e68 <_localeconv_r+0x14>)
 8008e56:	681b      	ldr	r3, [r3, #0]
 8008e58:	6a18      	ldr	r0, [r3, #32]
 8008e5a:	4b04      	ldr	r3, [pc, #16]	; (8008e6c <_localeconv_r+0x18>)
 8008e5c:	2800      	cmp	r0, #0
 8008e5e:	bf08      	it	eq
 8008e60:	4618      	moveq	r0, r3
 8008e62:	30f0      	adds	r0, #240	; 0xf0
 8008e64:	4770      	bx	lr
 8008e66:	bf00      	nop
 8008e68:	20000014 	.word	0x20000014
 8008e6c:	20000078 	.word	0x20000078

08008e70 <__ascii_mbtowc>:
 8008e70:	b082      	sub	sp, #8
 8008e72:	b901      	cbnz	r1, 8008e76 <__ascii_mbtowc+0x6>
 8008e74:	a901      	add	r1, sp, #4
 8008e76:	b142      	cbz	r2, 8008e8a <__ascii_mbtowc+0x1a>
 8008e78:	b14b      	cbz	r3, 8008e8e <__ascii_mbtowc+0x1e>
 8008e7a:	7813      	ldrb	r3, [r2, #0]
 8008e7c:	600b      	str	r3, [r1, #0]
 8008e7e:	7812      	ldrb	r2, [r2, #0]
 8008e80:	1c10      	adds	r0, r2, #0
 8008e82:	bf18      	it	ne
 8008e84:	2001      	movne	r0, #1
 8008e86:	b002      	add	sp, #8
 8008e88:	4770      	bx	lr
 8008e8a:	4610      	mov	r0, r2
 8008e8c:	e7fb      	b.n	8008e86 <__ascii_mbtowc+0x16>
 8008e8e:	f06f 0001 	mvn.w	r0, #1
 8008e92:	e7f8      	b.n	8008e86 <__ascii_mbtowc+0x16>

08008e94 <memchr>:
 8008e94:	b510      	push	{r4, lr}
 8008e96:	b2c9      	uxtb	r1, r1
 8008e98:	4402      	add	r2, r0
 8008e9a:	4290      	cmp	r0, r2
 8008e9c:	4603      	mov	r3, r0
 8008e9e:	d101      	bne.n	8008ea4 <memchr+0x10>
 8008ea0:	2300      	movs	r3, #0
 8008ea2:	e003      	b.n	8008eac <memchr+0x18>
 8008ea4:	781c      	ldrb	r4, [r3, #0]
 8008ea6:	3001      	adds	r0, #1
 8008ea8:	428c      	cmp	r4, r1
 8008eaa:	d1f6      	bne.n	8008e9a <memchr+0x6>
 8008eac:	4618      	mov	r0, r3
 8008eae:	bd10      	pop	{r4, pc}

08008eb0 <memcpy>:
 8008eb0:	b510      	push	{r4, lr}
 8008eb2:	1e43      	subs	r3, r0, #1
 8008eb4:	440a      	add	r2, r1
 8008eb6:	4291      	cmp	r1, r2
 8008eb8:	d100      	bne.n	8008ebc <memcpy+0xc>
 8008eba:	bd10      	pop	{r4, pc}
 8008ebc:	f811 4b01 	ldrb.w	r4, [r1], #1
 8008ec0:	f803 4f01 	strb.w	r4, [r3, #1]!
 8008ec4:	e7f7      	b.n	8008eb6 <memcpy+0x6>

08008ec6 <__malloc_lock>:
 8008ec6:	4770      	bx	lr

08008ec8 <__malloc_unlock>:
 8008ec8:	4770      	bx	lr

08008eca <_Balloc>:
 8008eca:	b570      	push	{r4, r5, r6, lr}
 8008ecc:	6a45      	ldr	r5, [r0, #36]	; 0x24
 8008ece:	4604      	mov	r4, r0
 8008ed0:	460e      	mov	r6, r1
 8008ed2:	b93d      	cbnz	r5, 8008ee4 <_Balloc+0x1a>
 8008ed4:	2010      	movs	r0, #16
 8008ed6:	f7fd f871 	bl	8005fbc <malloc>
 8008eda:	6260      	str	r0, [r4, #36]	; 0x24
 8008edc:	e9c0 5501 	strd	r5, r5, [r0, #4]
 8008ee0:	6005      	str	r5, [r0, #0]
 8008ee2:	60c5      	str	r5, [r0, #12]
 8008ee4:	6a65      	ldr	r5, [r4, #36]	; 0x24
 8008ee6:	68eb      	ldr	r3, [r5, #12]
 8008ee8:	b183      	cbz	r3, 8008f0c <_Balloc+0x42>
 8008eea:	6a63      	ldr	r3, [r4, #36]	; 0x24
 8008eec:	68db      	ldr	r3, [r3, #12]
 8008eee:	f853 0026 	ldr.w	r0, [r3, r6, lsl #2]
 8008ef2:	b9b8      	cbnz	r0, 8008f24 <_Balloc+0x5a>
 8008ef4:	2101      	movs	r1, #1
 8008ef6:	fa01 f506 	lsl.w	r5, r1, r6
 8008efa:	1d6a      	adds	r2, r5, #5
 8008efc:	0092      	lsls	r2, r2, #2
 8008efe:	4620      	mov	r0, r4
 8008f00:	f000 fbdc 	bl	80096bc <_calloc_r>
 8008f04:	b160      	cbz	r0, 8008f20 <_Balloc+0x56>
 8008f06:	e9c0 6501 	strd	r6, r5, [r0, #4]
 8008f0a:	e00e      	b.n	8008f2a <_Balloc+0x60>
 8008f0c:	2221      	movs	r2, #33	; 0x21
 8008f0e:	2104      	movs	r1, #4
 8008f10:	4620      	mov	r0, r4
 8008f12:	f000 fbd3 	bl	80096bc <_calloc_r>
 8008f16:	6a63      	ldr	r3, [r4, #36]	; 0x24
 8008f18:	60e8      	str	r0, [r5, #12]
 8008f1a:	68db      	ldr	r3, [r3, #12]
 8008f1c:	2b00      	cmp	r3, #0
 8008f1e:	d1e4      	bne.n	8008eea <_Balloc+0x20>
 8008f20:	2000      	movs	r0, #0
 8008f22:	bd70      	pop	{r4, r5, r6, pc}
 8008f24:	6802      	ldr	r2, [r0, #0]
 8008f26:	f843 2026 	str.w	r2, [r3, r6, lsl #2]
 8008f2a:	2300      	movs	r3, #0
 8008f2c:	e9c0 3303 	strd	r3, r3, [r0, #12]
 8008f30:	e7f7      	b.n	8008f22 <_Balloc+0x58>

08008f32 <_Bfree>:
 8008f32:	b570      	push	{r4, r5, r6, lr}
 8008f34:	6a44      	ldr	r4, [r0, #36]	; 0x24
 8008f36:	4606      	mov	r6, r0
 8008f38:	460d      	mov	r5, r1
 8008f3a:	b93c      	cbnz	r4, 8008f4c <_Bfree+0x1a>
 8008f3c:	2010      	movs	r0, #16
 8008f3e:	f7fd f83d 	bl	8005fbc <malloc>
 8008f42:	6270      	str	r0, [r6, #36]	; 0x24
 8008f44:	e9c0 4401 	strd	r4, r4, [r0, #4]
 8008f48:	6004      	str	r4, [r0, #0]
 8008f4a:	60c4      	str	r4, [r0, #12]
 8008f4c:	b13d      	cbz	r5, 8008f5e <_Bfree+0x2c>
 8008f4e:	6a73      	ldr	r3, [r6, #36]	; 0x24
 8008f50:	686a      	ldr	r2, [r5, #4]
 8008f52:	68db      	ldr	r3, [r3, #12]
 8008f54:	f853 1022 	ldr.w	r1, [r3, r2, lsl #2]
 8008f58:	6029      	str	r1, [r5, #0]
 8008f5a:	f843 5022 	str.w	r5, [r3, r2, lsl #2]
 8008f5e:	bd70      	pop	{r4, r5, r6, pc}

08008f60 <__multadd>:
 8008f60:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8008f64:	461f      	mov	r7, r3
 8008f66:	4606      	mov	r6, r0
 8008f68:	460c      	mov	r4, r1
 8008f6a:	2300      	movs	r3, #0
 8008f6c:	690d      	ldr	r5, [r1, #16]
 8008f6e:	f101 0c14 	add.w	ip, r1, #20
 8008f72:	f8dc 0000 	ldr.w	r0, [ip]
 8008f76:	3301      	adds	r3, #1
 8008f78:	b281      	uxth	r1, r0
 8008f7a:	fb02 7101 	mla	r1, r2, r1, r7
 8008f7e:	0c00      	lsrs	r0, r0, #16
 8008f80:	0c0f      	lsrs	r7, r1, #16
 8008f82:	fb02 7000 	mla	r0, r2, r0, r7
 8008f86:	b289      	uxth	r1, r1
 8008f88:	eb01 4100 	add.w	r1, r1, r0, lsl #16
 8008f8c:	429d      	cmp	r5, r3
 8008f8e:	ea4f 4710 	mov.w	r7, r0, lsr #16
 8008f92:	f84c 1b04 	str.w	r1, [ip], #4
 8008f96:	dcec      	bgt.n	8008f72 <__multadd+0x12>
 8008f98:	b1d7      	cbz	r7, 8008fd0 <__multadd+0x70>
 8008f9a:	68a3      	ldr	r3, [r4, #8]
 8008f9c:	42ab      	cmp	r3, r5
 8008f9e:	dc12      	bgt.n	8008fc6 <__multadd+0x66>
 8008fa0:	6861      	ldr	r1, [r4, #4]
 8008fa2:	4630      	mov	r0, r6
 8008fa4:	3101      	adds	r1, #1
 8008fa6:	f7ff ff90 	bl	8008eca <_Balloc>
 8008faa:	4680      	mov	r8, r0
 8008fac:	6922      	ldr	r2, [r4, #16]
 8008fae:	f104 010c 	add.w	r1, r4, #12
 8008fb2:	3202      	adds	r2, #2
 8008fb4:	0092      	lsls	r2, r2, #2
 8008fb6:	300c      	adds	r0, #12
 8008fb8:	f7ff ff7a 	bl	8008eb0 <memcpy>
 8008fbc:	4621      	mov	r1, r4
 8008fbe:	4630      	mov	r0, r6
 8008fc0:	f7ff ffb7 	bl	8008f32 <_Bfree>
 8008fc4:	4644      	mov	r4, r8
 8008fc6:	eb04 0385 	add.w	r3, r4, r5, lsl #2
 8008fca:	3501      	adds	r5, #1
 8008fcc:	615f      	str	r7, [r3, #20]
 8008fce:	6125      	str	r5, [r4, #16]
 8008fd0:	4620      	mov	r0, r4
 8008fd2:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}

08008fd6 <__s2b>:
 8008fd6:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8008fda:	4615      	mov	r5, r2
 8008fdc:	2209      	movs	r2, #9
 8008fde:	461f      	mov	r7, r3
 8008fe0:	3308      	adds	r3, #8
 8008fe2:	460c      	mov	r4, r1
 8008fe4:	fb93 f3f2 	sdiv	r3, r3, r2
 8008fe8:	4606      	mov	r6, r0
 8008fea:	2201      	movs	r2, #1
 8008fec:	2100      	movs	r1, #0
 8008fee:	429a      	cmp	r2, r3
 8008ff0:	db20      	blt.n	8009034 <__s2b+0x5e>
 8008ff2:	4630      	mov	r0, r6
 8008ff4:	f7ff ff69 	bl	8008eca <_Balloc>
 8008ff8:	9b08      	ldr	r3, [sp, #32]
 8008ffa:	2d09      	cmp	r5, #9
 8008ffc:	6143      	str	r3, [r0, #20]
 8008ffe:	f04f 0301 	mov.w	r3, #1
 8009002:	6103      	str	r3, [r0, #16]
 8009004:	dd19      	ble.n	800903a <__s2b+0x64>
 8009006:	f104 0809 	add.w	r8, r4, #9
 800900a:	46c1      	mov	r9, r8
 800900c:	442c      	add	r4, r5
 800900e:	f819 3b01 	ldrb.w	r3, [r9], #1
 8009012:	4601      	mov	r1, r0
 8009014:	3b30      	subs	r3, #48	; 0x30
 8009016:	220a      	movs	r2, #10
 8009018:	4630      	mov	r0, r6
 800901a:	f7ff ffa1 	bl	8008f60 <__multadd>
 800901e:	45a1      	cmp	r9, r4
 8009020:	d1f5      	bne.n	800900e <__s2b+0x38>
 8009022:	eb08 0405 	add.w	r4, r8, r5
 8009026:	3c08      	subs	r4, #8
 8009028:	1b2d      	subs	r5, r5, r4
 800902a:	1963      	adds	r3, r4, r5
 800902c:	42bb      	cmp	r3, r7
 800902e:	db07      	blt.n	8009040 <__s2b+0x6a>
 8009030:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8009034:	0052      	lsls	r2, r2, #1
 8009036:	3101      	adds	r1, #1
 8009038:	e7d9      	b.n	8008fee <__s2b+0x18>
 800903a:	340a      	adds	r4, #10
 800903c:	2509      	movs	r5, #9
 800903e:	e7f3      	b.n	8009028 <__s2b+0x52>
 8009040:	f814 3b01 	ldrb.w	r3, [r4], #1
 8009044:	4601      	mov	r1, r0
 8009046:	3b30      	subs	r3, #48	; 0x30
 8009048:	220a      	movs	r2, #10
 800904a:	4630      	mov	r0, r6
 800904c:	f7ff ff88 	bl	8008f60 <__multadd>
 8009050:	e7eb      	b.n	800902a <__s2b+0x54>

08009052 <__hi0bits>:
 8009052:	0c02      	lsrs	r2, r0, #16
 8009054:	0412      	lsls	r2, r2, #16
 8009056:	4603      	mov	r3, r0
 8009058:	b9b2      	cbnz	r2, 8009088 <__hi0bits+0x36>
 800905a:	0403      	lsls	r3, r0, #16
 800905c:	2010      	movs	r0, #16
 800905e:	f013 4f7f 	tst.w	r3, #4278190080	; 0xff000000
 8009062:	bf04      	itt	eq
 8009064:	021b      	lsleq	r3, r3, #8
 8009066:	3008      	addeq	r0, #8
 8009068:	f013 4f70 	tst.w	r3, #4026531840	; 0xf0000000
 800906c:	bf04      	itt	eq
 800906e:	011b      	lsleq	r3, r3, #4
 8009070:	3004      	addeq	r0, #4
 8009072:	f013 4f40 	tst.w	r3, #3221225472	; 0xc0000000
 8009076:	bf04      	itt	eq
 8009078:	009b      	lsleq	r3, r3, #2
 800907a:	3002      	addeq	r0, #2
 800907c:	2b00      	cmp	r3, #0
 800907e:	db06      	blt.n	800908e <__hi0bits+0x3c>
 8009080:	005b      	lsls	r3, r3, #1
 8009082:	d503      	bpl.n	800908c <__hi0bits+0x3a>
 8009084:	3001      	adds	r0, #1
 8009086:	4770      	bx	lr
 8009088:	2000      	movs	r0, #0
 800908a:	e7e8      	b.n	800905e <__hi0bits+0xc>
 800908c:	2020      	movs	r0, #32
 800908e:	4770      	bx	lr

08009090 <__lo0bits>:
 8009090:	6803      	ldr	r3, [r0, #0]
 8009092:	4601      	mov	r1, r0
 8009094:	f013 0207 	ands.w	r2, r3, #7
 8009098:	d00b      	beq.n	80090b2 <__lo0bits+0x22>
 800909a:	07da      	lsls	r2, r3, #31
 800909c:	d423      	bmi.n	80090e6 <__lo0bits+0x56>
 800909e:	0798      	lsls	r0, r3, #30
 80090a0:	bf49      	itett	mi
 80090a2:	085b      	lsrmi	r3, r3, #1
 80090a4:	089b      	lsrpl	r3, r3, #2
 80090a6:	2001      	movmi	r0, #1
 80090a8:	600b      	strmi	r3, [r1, #0]
 80090aa:	bf5c      	itt	pl
 80090ac:	600b      	strpl	r3, [r1, #0]
 80090ae:	2002      	movpl	r0, #2
 80090b0:	4770      	bx	lr
 80090b2:	b298      	uxth	r0, r3
 80090b4:	b9a8      	cbnz	r0, 80090e2 <__lo0bits+0x52>
 80090b6:	2010      	movs	r0, #16
 80090b8:	0c1b      	lsrs	r3, r3, #16
 80090ba:	f013 0fff 	tst.w	r3, #255	; 0xff
 80090be:	bf04      	itt	eq
 80090c0:	0a1b      	lsreq	r3, r3, #8
 80090c2:	3008      	addeq	r0, #8
 80090c4:	071a      	lsls	r2, r3, #28
 80090c6:	bf04      	itt	eq
 80090c8:	091b      	lsreq	r3, r3, #4
 80090ca:	3004      	addeq	r0, #4
 80090cc:	079a      	lsls	r2, r3, #30
 80090ce:	bf04      	itt	eq
 80090d0:	089b      	lsreq	r3, r3, #2
 80090d2:	3002      	addeq	r0, #2
 80090d4:	07da      	lsls	r2, r3, #31
 80090d6:	d402      	bmi.n	80090de <__lo0bits+0x4e>
 80090d8:	085b      	lsrs	r3, r3, #1
 80090da:	d006      	beq.n	80090ea <__lo0bits+0x5a>
 80090dc:	3001      	adds	r0, #1
 80090de:	600b      	str	r3, [r1, #0]
 80090e0:	4770      	bx	lr
 80090e2:	4610      	mov	r0, r2
 80090e4:	e7e9      	b.n	80090ba <__lo0bits+0x2a>
 80090e6:	2000      	movs	r0, #0
 80090e8:	4770      	bx	lr
 80090ea:	2020      	movs	r0, #32
 80090ec:	4770      	bx	lr

080090ee <__i2b>:
 80090ee:	b510      	push	{r4, lr}
 80090f0:	460c      	mov	r4, r1
 80090f2:	2101      	movs	r1, #1
 80090f4:	f7ff fee9 	bl	8008eca <_Balloc>
 80090f8:	2201      	movs	r2, #1
 80090fa:	6144      	str	r4, [r0, #20]
 80090fc:	6102      	str	r2, [r0, #16]
 80090fe:	bd10      	pop	{r4, pc}

08009100 <__multiply>:
 8009100:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8009104:	4614      	mov	r4, r2
 8009106:	690a      	ldr	r2, [r1, #16]
 8009108:	6923      	ldr	r3, [r4, #16]
 800910a:	4688      	mov	r8, r1
 800910c:	429a      	cmp	r2, r3
 800910e:	bfbe      	ittt	lt
 8009110:	460b      	movlt	r3, r1
 8009112:	46a0      	movlt	r8, r4
 8009114:	461c      	movlt	r4, r3
 8009116:	f8d8 7010 	ldr.w	r7, [r8, #16]
 800911a:	f8d4 9010 	ldr.w	r9, [r4, #16]
 800911e:	f8d8 3008 	ldr.w	r3, [r8, #8]
 8009122:	f8d8 1004 	ldr.w	r1, [r8, #4]
 8009126:	eb07 0609 	add.w	r6, r7, r9
 800912a:	42b3      	cmp	r3, r6
 800912c:	bfb8      	it	lt
 800912e:	3101      	addlt	r1, #1
 8009130:	f7ff fecb 	bl	8008eca <_Balloc>
 8009134:	f100 0514 	add.w	r5, r0, #20
 8009138:	462b      	mov	r3, r5
 800913a:	2200      	movs	r2, #0
 800913c:	eb05 0e86 	add.w	lr, r5, r6, lsl #2
 8009140:	4573      	cmp	r3, lr
 8009142:	d316      	bcc.n	8009172 <__multiply+0x72>
 8009144:	f104 0214 	add.w	r2, r4, #20
 8009148:	f108 0114 	add.w	r1, r8, #20
 800914c:	eb02 0389 	add.w	r3, r2, r9, lsl #2
 8009150:	eb01 0787 	add.w	r7, r1, r7, lsl #2
 8009154:	9300      	str	r3, [sp, #0]
 8009156:	9b00      	ldr	r3, [sp, #0]
 8009158:	9201      	str	r2, [sp, #4]
 800915a:	4293      	cmp	r3, r2
 800915c:	d80c      	bhi.n	8009178 <__multiply+0x78>
 800915e:	2e00      	cmp	r6, #0
 8009160:	dd03      	ble.n	800916a <__multiply+0x6a>
 8009162:	f85e 3d04 	ldr.w	r3, [lr, #-4]!
 8009166:	2b00      	cmp	r3, #0
 8009168:	d05d      	beq.n	8009226 <__multiply+0x126>
 800916a:	6106      	str	r6, [r0, #16]
 800916c:	b003      	add	sp, #12
 800916e:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8009172:	f843 2b04 	str.w	r2, [r3], #4
 8009176:	e7e3      	b.n	8009140 <__multiply+0x40>
 8009178:	f8b2 b000 	ldrh.w	fp, [r2]
 800917c:	f1bb 0f00 	cmp.w	fp, #0
 8009180:	d023      	beq.n	80091ca <__multiply+0xca>
 8009182:	4689      	mov	r9, r1
 8009184:	46ac      	mov	ip, r5
 8009186:	f04f 0800 	mov.w	r8, #0
 800918a:	f859 4b04 	ldr.w	r4, [r9], #4
 800918e:	f8dc a000 	ldr.w	sl, [ip]
 8009192:	b2a3      	uxth	r3, r4
 8009194:	fa1f fa8a 	uxth.w	sl, sl
 8009198:	fb0b a303 	mla	r3, fp, r3, sl
 800919c:	ea4f 4a14 	mov.w	sl, r4, lsr #16
 80091a0:	f8dc 4000 	ldr.w	r4, [ip]
 80091a4:	4443      	add	r3, r8
 80091a6:	ea4f 4814 	mov.w	r8, r4, lsr #16
 80091aa:	fb0b 840a 	mla	r4, fp, sl, r8
 80091ae:	46e2      	mov	sl, ip
 80091b0:	eb04 4413 	add.w	r4, r4, r3, lsr #16
 80091b4:	b29b      	uxth	r3, r3
 80091b6:	ea43 4304 	orr.w	r3, r3, r4, lsl #16
 80091ba:	454f      	cmp	r7, r9
 80091bc:	ea4f 4814 	mov.w	r8, r4, lsr #16
 80091c0:	f84a 3b04 	str.w	r3, [sl], #4
 80091c4:	d82b      	bhi.n	800921e <__multiply+0x11e>
 80091c6:	f8cc 8004 	str.w	r8, [ip, #4]
 80091ca:	9b01      	ldr	r3, [sp, #4]
 80091cc:	3204      	adds	r2, #4
 80091ce:	f8b3 a002 	ldrh.w	sl, [r3, #2]
 80091d2:	f1ba 0f00 	cmp.w	sl, #0
 80091d6:	d020      	beq.n	800921a <__multiply+0x11a>
 80091d8:	4689      	mov	r9, r1
 80091da:	46a8      	mov	r8, r5
 80091dc:	f04f 0b00 	mov.w	fp, #0
 80091e0:	682b      	ldr	r3, [r5, #0]
 80091e2:	f8b9 c000 	ldrh.w	ip, [r9]
 80091e6:	f8b8 4002 	ldrh.w	r4, [r8, #2]
 80091ea:	b29b      	uxth	r3, r3
 80091ec:	fb0a 440c 	mla	r4, sl, ip, r4
 80091f0:	46c4      	mov	ip, r8
 80091f2:	445c      	add	r4, fp
 80091f4:	ea43 4304 	orr.w	r3, r3, r4, lsl #16
 80091f8:	f84c 3b04 	str.w	r3, [ip], #4
 80091fc:	f859 3b04 	ldr.w	r3, [r9], #4
 8009200:	f8b8 b004 	ldrh.w	fp, [r8, #4]
 8009204:	0c1b      	lsrs	r3, r3, #16
 8009206:	fb0a b303 	mla	r3, sl, r3, fp
 800920a:	454f      	cmp	r7, r9
 800920c:	eb03 4314 	add.w	r3, r3, r4, lsr #16
 8009210:	ea4f 4b13 	mov.w	fp, r3, lsr #16
 8009214:	d805      	bhi.n	8009222 <__multiply+0x122>
 8009216:	f8c8 3004 	str.w	r3, [r8, #4]
 800921a:	3504      	adds	r5, #4
 800921c:	e79b      	b.n	8009156 <__multiply+0x56>
 800921e:	46d4      	mov	ip, sl
 8009220:	e7b3      	b.n	800918a <__multiply+0x8a>
 8009222:	46e0      	mov	r8, ip
 8009224:	e7dd      	b.n	80091e2 <__multiply+0xe2>
 8009226:	3e01      	subs	r6, #1
 8009228:	e799      	b.n	800915e <__multiply+0x5e>
	...

0800922c <__pow5mult>:
 800922c:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8009230:	4615      	mov	r5, r2
 8009232:	f012 0203 	ands.w	r2, r2, #3
 8009236:	4606      	mov	r6, r0
 8009238:	460f      	mov	r7, r1
 800923a:	d007      	beq.n	800924c <__pow5mult+0x20>
 800923c:	4c21      	ldr	r4, [pc, #132]	; (80092c4 <__pow5mult+0x98>)
 800923e:	3a01      	subs	r2, #1
 8009240:	2300      	movs	r3, #0
 8009242:	f854 2022 	ldr.w	r2, [r4, r2, lsl #2]
 8009246:	f7ff fe8b 	bl	8008f60 <__multadd>
 800924a:	4607      	mov	r7, r0
 800924c:	10ad      	asrs	r5, r5, #2
 800924e:	d035      	beq.n	80092bc <__pow5mult+0x90>
 8009250:	6a74      	ldr	r4, [r6, #36]	; 0x24
 8009252:	b93c      	cbnz	r4, 8009264 <__pow5mult+0x38>
 8009254:	2010      	movs	r0, #16
 8009256:	f7fc feb1 	bl	8005fbc <malloc>
 800925a:	6270      	str	r0, [r6, #36]	; 0x24
 800925c:	e9c0 4401 	strd	r4, r4, [r0, #4]
 8009260:	6004      	str	r4, [r0, #0]
 8009262:	60c4      	str	r4, [r0, #12]
 8009264:	f8d6 8024 	ldr.w	r8, [r6, #36]	; 0x24
 8009268:	f8d8 4008 	ldr.w	r4, [r8, #8]
 800926c:	b94c      	cbnz	r4, 8009282 <__pow5mult+0x56>
 800926e:	f240 2171 	movw	r1, #625	; 0x271
 8009272:	4630      	mov	r0, r6
 8009274:	f7ff ff3b 	bl	80090ee <__i2b>
 8009278:	2300      	movs	r3, #0
 800927a:	4604      	mov	r4, r0
 800927c:	f8c8 0008 	str.w	r0, [r8, #8]
 8009280:	6003      	str	r3, [r0, #0]
 8009282:	f04f 0800 	mov.w	r8, #0
 8009286:	07eb      	lsls	r3, r5, #31
 8009288:	d50a      	bpl.n	80092a0 <__pow5mult+0x74>
 800928a:	4639      	mov	r1, r7
 800928c:	4622      	mov	r2, r4
 800928e:	4630      	mov	r0, r6
 8009290:	f7ff ff36 	bl	8009100 <__multiply>
 8009294:	4681      	mov	r9, r0
 8009296:	4639      	mov	r1, r7
 8009298:	4630      	mov	r0, r6
 800929a:	f7ff fe4a 	bl	8008f32 <_Bfree>
 800929e:	464f      	mov	r7, r9
 80092a0:	106d      	asrs	r5, r5, #1
 80092a2:	d00b      	beq.n	80092bc <__pow5mult+0x90>
 80092a4:	6820      	ldr	r0, [r4, #0]
 80092a6:	b938      	cbnz	r0, 80092b8 <__pow5mult+0x8c>
 80092a8:	4622      	mov	r2, r4
 80092aa:	4621      	mov	r1, r4
 80092ac:	4630      	mov	r0, r6
 80092ae:	f7ff ff27 	bl	8009100 <__multiply>
 80092b2:	6020      	str	r0, [r4, #0]
 80092b4:	f8c0 8000 	str.w	r8, [r0]
 80092b8:	4604      	mov	r4, r0
 80092ba:	e7e4      	b.n	8009286 <__pow5mult+0x5a>
 80092bc:	4638      	mov	r0, r7
 80092be:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 80092c2:	bf00      	nop
 80092c4:	08009cc8 	.word	0x08009cc8

080092c8 <__lshift>:
 80092c8:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80092cc:	460c      	mov	r4, r1
 80092ce:	4607      	mov	r7, r0
 80092d0:	4616      	mov	r6, r2
 80092d2:	6923      	ldr	r3, [r4, #16]
 80092d4:	ea4f 1a62 	mov.w	sl, r2, asr #5
 80092d8:	eb0a 0903 	add.w	r9, sl, r3
 80092dc:	6849      	ldr	r1, [r1, #4]
 80092de:	68a3      	ldr	r3, [r4, #8]
 80092e0:	f109 0501 	add.w	r5, r9, #1
 80092e4:	42ab      	cmp	r3, r5
 80092e6:	db32      	blt.n	800934e <__lshift+0x86>
 80092e8:	4638      	mov	r0, r7
 80092ea:	f7ff fdee 	bl	8008eca <_Balloc>
 80092ee:	2300      	movs	r3, #0
 80092f0:	4680      	mov	r8, r0
 80092f2:	461a      	mov	r2, r3
 80092f4:	f100 0114 	add.w	r1, r0, #20
 80092f8:	4553      	cmp	r3, sl
 80092fa:	db2b      	blt.n	8009354 <__lshift+0x8c>
 80092fc:	6920      	ldr	r0, [r4, #16]
 80092fe:	ea2a 7aea 	bic.w	sl, sl, sl, asr #31
 8009302:	f104 0314 	add.w	r3, r4, #20
 8009306:	f016 021f 	ands.w	r2, r6, #31
 800930a:	eb01 018a 	add.w	r1, r1, sl, lsl #2
 800930e:	eb03 0c80 	add.w	ip, r3, r0, lsl #2
 8009312:	d025      	beq.n	8009360 <__lshift+0x98>
 8009314:	2000      	movs	r0, #0
 8009316:	f1c2 0e20 	rsb	lr, r2, #32
 800931a:	468a      	mov	sl, r1
 800931c:	681e      	ldr	r6, [r3, #0]
 800931e:	4096      	lsls	r6, r2
 8009320:	4330      	orrs	r0, r6
 8009322:	f84a 0b04 	str.w	r0, [sl], #4
 8009326:	f853 0b04 	ldr.w	r0, [r3], #4
 800932a:	459c      	cmp	ip, r3
 800932c:	fa20 f00e 	lsr.w	r0, r0, lr
 8009330:	d814      	bhi.n	800935c <__lshift+0x94>
 8009332:	6048      	str	r0, [r1, #4]
 8009334:	b108      	cbz	r0, 800933a <__lshift+0x72>
 8009336:	f109 0502 	add.w	r5, r9, #2
 800933a:	3d01      	subs	r5, #1
 800933c:	4638      	mov	r0, r7
 800933e:	f8c8 5010 	str.w	r5, [r8, #16]
 8009342:	4621      	mov	r1, r4
 8009344:	f7ff fdf5 	bl	8008f32 <_Bfree>
 8009348:	4640      	mov	r0, r8
 800934a:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800934e:	3101      	adds	r1, #1
 8009350:	005b      	lsls	r3, r3, #1
 8009352:	e7c7      	b.n	80092e4 <__lshift+0x1c>
 8009354:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
 8009358:	3301      	adds	r3, #1
 800935a:	e7cd      	b.n	80092f8 <__lshift+0x30>
 800935c:	4651      	mov	r1, sl
 800935e:	e7dc      	b.n	800931a <__lshift+0x52>
 8009360:	3904      	subs	r1, #4
 8009362:	f853 2b04 	ldr.w	r2, [r3], #4
 8009366:	459c      	cmp	ip, r3
 8009368:	f841 2f04 	str.w	r2, [r1, #4]!
 800936c:	d8f9      	bhi.n	8009362 <__lshift+0x9a>
 800936e:	e7e4      	b.n	800933a <__lshift+0x72>

08009370 <__mcmp>:
 8009370:	6903      	ldr	r3, [r0, #16]
 8009372:	690a      	ldr	r2, [r1, #16]
 8009374:	b530      	push	{r4, r5, lr}
 8009376:	1a9b      	subs	r3, r3, r2
 8009378:	d10c      	bne.n	8009394 <__mcmp+0x24>
 800937a:	0092      	lsls	r2, r2, #2
 800937c:	3014      	adds	r0, #20
 800937e:	3114      	adds	r1, #20
 8009380:	1884      	adds	r4, r0, r2
 8009382:	4411      	add	r1, r2
 8009384:	f854 5d04 	ldr.w	r5, [r4, #-4]!
 8009388:	f851 2d04 	ldr.w	r2, [r1, #-4]!
 800938c:	4295      	cmp	r5, r2
 800938e:	d003      	beq.n	8009398 <__mcmp+0x28>
 8009390:	d305      	bcc.n	800939e <__mcmp+0x2e>
 8009392:	2301      	movs	r3, #1
 8009394:	4618      	mov	r0, r3
 8009396:	bd30      	pop	{r4, r5, pc}
 8009398:	42a0      	cmp	r0, r4
 800939a:	d3f3      	bcc.n	8009384 <__mcmp+0x14>
 800939c:	e7fa      	b.n	8009394 <__mcmp+0x24>
 800939e:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 80093a2:	e7f7      	b.n	8009394 <__mcmp+0x24>

080093a4 <__mdiff>:
 80093a4:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80093a8:	460d      	mov	r5, r1
 80093aa:	4607      	mov	r7, r0
 80093ac:	4611      	mov	r1, r2
 80093ae:	4628      	mov	r0, r5
 80093b0:	4614      	mov	r4, r2
 80093b2:	f7ff ffdd 	bl	8009370 <__mcmp>
 80093b6:	1e06      	subs	r6, r0, #0
 80093b8:	d108      	bne.n	80093cc <__mdiff+0x28>
 80093ba:	4631      	mov	r1, r6
 80093bc:	4638      	mov	r0, r7
 80093be:	f7ff fd84 	bl	8008eca <_Balloc>
 80093c2:	2301      	movs	r3, #1
 80093c4:	e9c0 3604 	strd	r3, r6, [r0, #16]
 80093c8:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80093cc:	bfa4      	itt	ge
 80093ce:	4623      	movge	r3, r4
 80093d0:	462c      	movge	r4, r5
 80093d2:	4638      	mov	r0, r7
 80093d4:	6861      	ldr	r1, [r4, #4]
 80093d6:	bfa6      	itte	ge
 80093d8:	461d      	movge	r5, r3
 80093da:	2600      	movge	r6, #0
 80093dc:	2601      	movlt	r6, #1
 80093de:	f7ff fd74 	bl	8008eca <_Balloc>
 80093e2:	f04f 0e00 	mov.w	lr, #0
 80093e6:	60c6      	str	r6, [r0, #12]
 80093e8:	692b      	ldr	r3, [r5, #16]
 80093ea:	6926      	ldr	r6, [r4, #16]
 80093ec:	f104 0214 	add.w	r2, r4, #20
 80093f0:	f105 0914 	add.w	r9, r5, #20
 80093f4:	eb02 0786 	add.w	r7, r2, r6, lsl #2
 80093f8:	eb09 0883 	add.w	r8, r9, r3, lsl #2
 80093fc:	f100 0114 	add.w	r1, r0, #20
 8009400:	f852 ab04 	ldr.w	sl, [r2], #4
 8009404:	f859 5b04 	ldr.w	r5, [r9], #4
 8009408:	fa1f f38a 	uxth.w	r3, sl
 800940c:	4473      	add	r3, lr
 800940e:	b2ac      	uxth	r4, r5
 8009410:	1b1b      	subs	r3, r3, r4
 8009412:	0c2c      	lsrs	r4, r5, #16
 8009414:	ebc4 441a 	rsb	r4, r4, sl, lsr #16
 8009418:	eb04 4423 	add.w	r4, r4, r3, asr #16
 800941c:	b29b      	uxth	r3, r3
 800941e:	ea4f 4e24 	mov.w	lr, r4, asr #16
 8009422:	45c8      	cmp	r8, r9
 8009424:	ea43 4404 	orr.w	r4, r3, r4, lsl #16
 8009428:	4694      	mov	ip, r2
 800942a:	f841 4b04 	str.w	r4, [r1], #4
 800942e:	d8e7      	bhi.n	8009400 <__mdiff+0x5c>
 8009430:	45bc      	cmp	ip, r7
 8009432:	d304      	bcc.n	800943e <__mdiff+0x9a>
 8009434:	f851 3d04 	ldr.w	r3, [r1, #-4]!
 8009438:	b183      	cbz	r3, 800945c <__mdiff+0xb8>
 800943a:	6106      	str	r6, [r0, #16]
 800943c:	e7c4      	b.n	80093c8 <__mdiff+0x24>
 800943e:	f85c 4b04 	ldr.w	r4, [ip], #4
 8009442:	b2a2      	uxth	r2, r4
 8009444:	4472      	add	r2, lr
 8009446:	1413      	asrs	r3, r2, #16
 8009448:	eb03 4314 	add.w	r3, r3, r4, lsr #16
 800944c:	b292      	uxth	r2, r2
 800944e:	ea42 4203 	orr.w	r2, r2, r3, lsl #16
 8009452:	ea4f 4e23 	mov.w	lr, r3, asr #16
 8009456:	f841 2b04 	str.w	r2, [r1], #4
 800945a:	e7e9      	b.n	8009430 <__mdiff+0x8c>
 800945c:	3e01      	subs	r6, #1
 800945e:	e7e9      	b.n	8009434 <__mdiff+0x90>

08009460 <__ulp>:
 8009460:	4b10      	ldr	r3, [pc, #64]	; (80094a4 <__ulp+0x44>)
 8009462:	400b      	ands	r3, r1
 8009464:	f1a3 7350 	sub.w	r3, r3, #54525952	; 0x3400000
 8009468:	2b00      	cmp	r3, #0
 800946a:	dd02      	ble.n	8009472 <__ulp+0x12>
 800946c:	2000      	movs	r0, #0
 800946e:	4619      	mov	r1, r3
 8009470:	4770      	bx	lr
 8009472:	425b      	negs	r3, r3
 8009474:	151b      	asrs	r3, r3, #20
 8009476:	2b13      	cmp	r3, #19
 8009478:	f04f 0000 	mov.w	r0, #0
 800947c:	f04f 0100 	mov.w	r1, #0
 8009480:	dc04      	bgt.n	800948c <__ulp+0x2c>
 8009482:	f44f 2200 	mov.w	r2, #524288	; 0x80000
 8009486:	fa42 f103 	asr.w	r1, r2, r3
 800948a:	4770      	bx	lr
 800948c:	2201      	movs	r2, #1
 800948e:	3b14      	subs	r3, #20
 8009490:	2b1e      	cmp	r3, #30
 8009492:	bfce      	itee	gt
 8009494:	4613      	movgt	r3, r2
 8009496:	f1c3 031f 	rsble	r3, r3, #31
 800949a:	fa02 f303 	lslle.w	r3, r2, r3
 800949e:	4618      	mov	r0, r3
 80094a0:	4770      	bx	lr
 80094a2:	bf00      	nop
 80094a4:	7ff00000 	.word	0x7ff00000

080094a8 <__b2d>:
 80094a8:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 80094ac:	6907      	ldr	r7, [r0, #16]
 80094ae:	f100 0914 	add.w	r9, r0, #20
 80094b2:	eb09 0787 	add.w	r7, r9, r7, lsl #2
 80094b6:	f857 6c04 	ldr.w	r6, [r7, #-4]
 80094ba:	f1a7 0804 	sub.w	r8, r7, #4
 80094be:	4630      	mov	r0, r6
 80094c0:	f7ff fdc7 	bl	8009052 <__hi0bits>
 80094c4:	f1c0 0320 	rsb	r3, r0, #32
 80094c8:	280a      	cmp	r0, #10
 80094ca:	600b      	str	r3, [r1, #0]
 80094cc:	491e      	ldr	r1, [pc, #120]	; (8009548 <__b2d+0xa0>)
 80094ce:	dc17      	bgt.n	8009500 <__b2d+0x58>
 80094d0:	45c1      	cmp	r9, r8
 80094d2:	bf28      	it	cs
 80094d4:	2200      	movcs	r2, #0
 80094d6:	f1c0 0c0b 	rsb	ip, r0, #11
 80094da:	fa26 f30c 	lsr.w	r3, r6, ip
 80094de:	bf38      	it	cc
 80094e0:	f857 2c08 	ldrcc.w	r2, [r7, #-8]
 80094e4:	ea43 0501 	orr.w	r5, r3, r1
 80094e8:	f100 0315 	add.w	r3, r0, #21
 80094ec:	fa06 f303 	lsl.w	r3, r6, r3
 80094f0:	fa22 f20c 	lsr.w	r2, r2, ip
 80094f4:	ea43 0402 	orr.w	r4, r3, r2
 80094f8:	4620      	mov	r0, r4
 80094fa:	4629      	mov	r1, r5
 80094fc:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8009500:	45c1      	cmp	r9, r8
 8009502:	bf3a      	itte	cc
 8009504:	f1a7 0808 	subcc.w	r8, r7, #8
 8009508:	f857 2c08 	ldrcc.w	r2, [r7, #-8]
 800950c:	2200      	movcs	r2, #0
 800950e:	f1b0 030b 	subs.w	r3, r0, #11
 8009512:	d015      	beq.n	8009540 <__b2d+0x98>
 8009514:	409e      	lsls	r6, r3
 8009516:	f1c3 0720 	rsb	r7, r3, #32
 800951a:	f046 567f 	orr.w	r6, r6, #1069547520	; 0x3fc00000
 800951e:	fa22 f107 	lsr.w	r1, r2, r7
 8009522:	45c8      	cmp	r8, r9
 8009524:	f446 1640 	orr.w	r6, r6, #3145728	; 0x300000
 8009528:	ea46 0501 	orr.w	r5, r6, r1
 800952c:	bf94      	ite	ls
 800952e:	2100      	movls	r1, #0
 8009530:	f858 1c04 	ldrhi.w	r1, [r8, #-4]
 8009534:	fa02 f003 	lsl.w	r0, r2, r3
 8009538:	40f9      	lsrs	r1, r7
 800953a:	ea40 0401 	orr.w	r4, r0, r1
 800953e:	e7db      	b.n	80094f8 <__b2d+0x50>
 8009540:	ea46 0501 	orr.w	r5, r6, r1
 8009544:	4614      	mov	r4, r2
 8009546:	e7d7      	b.n	80094f8 <__b2d+0x50>
 8009548:	3ff00000 	.word	0x3ff00000

0800954c <__d2b>:
 800954c:	e92d 41f3 	stmdb	sp!, {r0, r1, r4, r5, r6, r7, r8, lr}
 8009550:	461c      	mov	r4, r3
 8009552:	e9dd 6508 	ldrd	r6, r5, [sp, #32]
 8009556:	2101      	movs	r1, #1
 8009558:	4690      	mov	r8, r2
 800955a:	f7ff fcb6 	bl	8008eca <_Balloc>
 800955e:	f3c4 0213 	ubfx	r2, r4, #0, #20
 8009562:	f3c4 540a 	ubfx	r4, r4, #20, #11
 8009566:	4607      	mov	r7, r0
 8009568:	bb34      	cbnz	r4, 80095b8 <__d2b+0x6c>
 800956a:	9201      	str	r2, [sp, #4]
 800956c:	f1b8 0200 	subs.w	r2, r8, #0
 8009570:	d027      	beq.n	80095c2 <__d2b+0x76>
 8009572:	a802      	add	r0, sp, #8
 8009574:	f840 2d08 	str.w	r2, [r0, #-8]!
 8009578:	f7ff fd8a 	bl	8009090 <__lo0bits>
 800957c:	9900      	ldr	r1, [sp, #0]
 800957e:	b1f0      	cbz	r0, 80095be <__d2b+0x72>
 8009580:	9a01      	ldr	r2, [sp, #4]
 8009582:	f1c0 0320 	rsb	r3, r0, #32
 8009586:	fa02 f303 	lsl.w	r3, r2, r3
 800958a:	430b      	orrs	r3, r1
 800958c:	40c2      	lsrs	r2, r0
 800958e:	617b      	str	r3, [r7, #20]
 8009590:	9201      	str	r2, [sp, #4]
 8009592:	9b01      	ldr	r3, [sp, #4]
 8009594:	2b00      	cmp	r3, #0
 8009596:	bf14      	ite	ne
 8009598:	2102      	movne	r1, #2
 800959a:	2101      	moveq	r1, #1
 800959c:	61bb      	str	r3, [r7, #24]
 800959e:	6139      	str	r1, [r7, #16]
 80095a0:	b1c4      	cbz	r4, 80095d4 <__d2b+0x88>
 80095a2:	f2a4 4433 	subw	r4, r4, #1075	; 0x433
 80095a6:	4404      	add	r4, r0
 80095a8:	6034      	str	r4, [r6, #0]
 80095aa:	f1c0 0035 	rsb	r0, r0, #53	; 0x35
 80095ae:	6028      	str	r0, [r5, #0]
 80095b0:	4638      	mov	r0, r7
 80095b2:	b002      	add	sp, #8
 80095b4:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 80095b8:	f442 1280 	orr.w	r2, r2, #1048576	; 0x100000
 80095bc:	e7d5      	b.n	800956a <__d2b+0x1e>
 80095be:	6179      	str	r1, [r7, #20]
 80095c0:	e7e7      	b.n	8009592 <__d2b+0x46>
 80095c2:	a801      	add	r0, sp, #4
 80095c4:	f7ff fd64 	bl	8009090 <__lo0bits>
 80095c8:	2101      	movs	r1, #1
 80095ca:	9b01      	ldr	r3, [sp, #4]
 80095cc:	6139      	str	r1, [r7, #16]
 80095ce:	617b      	str	r3, [r7, #20]
 80095d0:	3020      	adds	r0, #32
 80095d2:	e7e5      	b.n	80095a0 <__d2b+0x54>
 80095d4:	f2a0 4032 	subw	r0, r0, #1074	; 0x432
 80095d8:	eb07 0381 	add.w	r3, r7, r1, lsl #2
 80095dc:	6030      	str	r0, [r6, #0]
 80095de:	6918      	ldr	r0, [r3, #16]
 80095e0:	f7ff fd37 	bl	8009052 <__hi0bits>
 80095e4:	ebc0 1041 	rsb	r0, r0, r1, lsl #5
 80095e8:	e7e1      	b.n	80095ae <__d2b+0x62>

080095ea <__ratio>:
 80095ea:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80095ee:	4688      	mov	r8, r1
 80095f0:	4669      	mov	r1, sp
 80095f2:	4681      	mov	r9, r0
 80095f4:	f7ff ff58 	bl	80094a8 <__b2d>
 80095f8:	468b      	mov	fp, r1
 80095fa:	4606      	mov	r6, r0
 80095fc:	460f      	mov	r7, r1
 80095fe:	4640      	mov	r0, r8
 8009600:	a901      	add	r1, sp, #4
 8009602:	f7ff ff51 	bl	80094a8 <__b2d>
 8009606:	f8d9 3010 	ldr.w	r3, [r9, #16]
 800960a:	f8d8 2010 	ldr.w	r2, [r8, #16]
 800960e:	460d      	mov	r5, r1
 8009610:	eba3 0c02 	sub.w	ip, r3, r2
 8009614:	e9dd 3200 	ldrd	r3, r2, [sp]
 8009618:	1a9b      	subs	r3, r3, r2
 800961a:	eb03 134c 	add.w	r3, r3, ip, lsl #5
 800961e:	2b00      	cmp	r3, #0
 8009620:	bfd5      	itete	le
 8009622:	460a      	movle	r2, r1
 8009624:	463a      	movgt	r2, r7
 8009626:	ebc3 3303 	rsble	r3, r3, r3, lsl #12
 800962a:	eb02 5b03 	addgt.w	fp, r2, r3, lsl #20
 800962e:	bfd8      	it	le
 8009630:	eb02 5503 	addle.w	r5, r2, r3, lsl #20
 8009634:	462b      	mov	r3, r5
 8009636:	4602      	mov	r2, r0
 8009638:	4659      	mov	r1, fp
 800963a:	4630      	mov	r0, r6
 800963c:	f7f7 f876 	bl	800072c <__aeabi_ddiv>
 8009640:	b003      	add	sp, #12
 8009642:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}

08009646 <__copybits>:
 8009646:	3901      	subs	r1, #1
 8009648:	b510      	push	{r4, lr}
 800964a:	1149      	asrs	r1, r1, #5
 800964c:	6914      	ldr	r4, [r2, #16]
 800964e:	3101      	adds	r1, #1
 8009650:	f102 0314 	add.w	r3, r2, #20
 8009654:	eb00 0181 	add.w	r1, r0, r1, lsl #2
 8009658:	eb03 0484 	add.w	r4, r3, r4, lsl #2
 800965c:	42a3      	cmp	r3, r4
 800965e:	4602      	mov	r2, r0
 8009660:	d303      	bcc.n	800966a <__copybits+0x24>
 8009662:	2300      	movs	r3, #0
 8009664:	428a      	cmp	r2, r1
 8009666:	d305      	bcc.n	8009674 <__copybits+0x2e>
 8009668:	bd10      	pop	{r4, pc}
 800966a:	f853 2b04 	ldr.w	r2, [r3], #4
 800966e:	f840 2b04 	str.w	r2, [r0], #4
 8009672:	e7f3      	b.n	800965c <__copybits+0x16>
 8009674:	f842 3b04 	str.w	r3, [r2], #4
 8009678:	e7f4      	b.n	8009664 <__copybits+0x1e>

0800967a <__any_on>:
 800967a:	f100 0214 	add.w	r2, r0, #20
 800967e:	6900      	ldr	r0, [r0, #16]
 8009680:	114b      	asrs	r3, r1, #5
 8009682:	4298      	cmp	r0, r3
 8009684:	b510      	push	{r4, lr}
 8009686:	db11      	blt.n	80096ac <__any_on+0x32>
 8009688:	dd0a      	ble.n	80096a0 <__any_on+0x26>
 800968a:	f011 011f 	ands.w	r1, r1, #31
 800968e:	d007      	beq.n	80096a0 <__any_on+0x26>
 8009690:	f852 4023 	ldr.w	r4, [r2, r3, lsl #2]
 8009694:	fa24 f001 	lsr.w	r0, r4, r1
 8009698:	fa00 f101 	lsl.w	r1, r0, r1
 800969c:	428c      	cmp	r4, r1
 800969e:	d10b      	bne.n	80096b8 <__any_on+0x3e>
 80096a0:	eb02 0383 	add.w	r3, r2, r3, lsl #2
 80096a4:	4293      	cmp	r3, r2
 80096a6:	d803      	bhi.n	80096b0 <__any_on+0x36>
 80096a8:	2000      	movs	r0, #0
 80096aa:	bd10      	pop	{r4, pc}
 80096ac:	4603      	mov	r3, r0
 80096ae:	e7f7      	b.n	80096a0 <__any_on+0x26>
 80096b0:	f853 1d04 	ldr.w	r1, [r3, #-4]!
 80096b4:	2900      	cmp	r1, #0
 80096b6:	d0f5      	beq.n	80096a4 <__any_on+0x2a>
 80096b8:	2001      	movs	r0, #1
 80096ba:	e7f6      	b.n	80096aa <__any_on+0x30>

080096bc <_calloc_r>:
 80096bc:	b538      	push	{r3, r4, r5, lr}
 80096be:	fb02 f401 	mul.w	r4, r2, r1
 80096c2:	4621      	mov	r1, r4
 80096c4:	f7fc fcd6 	bl	8006074 <_malloc_r>
 80096c8:	4605      	mov	r5, r0
 80096ca:	b118      	cbz	r0, 80096d4 <_calloc_r+0x18>
 80096cc:	4622      	mov	r2, r4
 80096ce:	2100      	movs	r1, #0
 80096d0:	f7fc fc7c 	bl	8005fcc <memset>
 80096d4:	4628      	mov	r0, r5
 80096d6:	bd38      	pop	{r3, r4, r5, pc}

080096d8 <__ssputs_r>:
 80096d8:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80096dc:	688e      	ldr	r6, [r1, #8]
 80096de:	4682      	mov	sl, r0
 80096e0:	429e      	cmp	r6, r3
 80096e2:	460c      	mov	r4, r1
 80096e4:	4690      	mov	r8, r2
 80096e6:	4699      	mov	r9, r3
 80096e8:	d837      	bhi.n	800975a <__ssputs_r+0x82>
 80096ea:	898a      	ldrh	r2, [r1, #12]
 80096ec:	f412 6f90 	tst.w	r2, #1152	; 0x480
 80096f0:	d031      	beq.n	8009756 <__ssputs_r+0x7e>
 80096f2:	2302      	movs	r3, #2
 80096f4:	6825      	ldr	r5, [r4, #0]
 80096f6:	6909      	ldr	r1, [r1, #16]
 80096f8:	1a6f      	subs	r7, r5, r1
 80096fa:	6965      	ldr	r5, [r4, #20]
 80096fc:	eb05 0545 	add.w	r5, r5, r5, lsl #1
 8009700:	fb95 f5f3 	sdiv	r5, r5, r3
 8009704:	f109 0301 	add.w	r3, r9, #1
 8009708:	443b      	add	r3, r7
 800970a:	429d      	cmp	r5, r3
 800970c:	bf38      	it	cc
 800970e:	461d      	movcc	r5, r3
 8009710:	0553      	lsls	r3, r2, #21
 8009712:	d530      	bpl.n	8009776 <__ssputs_r+0x9e>
 8009714:	4629      	mov	r1, r5
 8009716:	f7fc fcad 	bl	8006074 <_malloc_r>
 800971a:	4606      	mov	r6, r0
 800971c:	b950      	cbnz	r0, 8009734 <__ssputs_r+0x5c>
 800971e:	230c      	movs	r3, #12
 8009720:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8009724:	f8ca 3000 	str.w	r3, [sl]
 8009728:	89a3      	ldrh	r3, [r4, #12]
 800972a:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800972e:	81a3      	strh	r3, [r4, #12]
 8009730:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8009734:	463a      	mov	r2, r7
 8009736:	6921      	ldr	r1, [r4, #16]
 8009738:	f7ff fbba 	bl	8008eb0 <memcpy>
 800973c:	89a3      	ldrh	r3, [r4, #12]
 800973e:	f423 6390 	bic.w	r3, r3, #1152	; 0x480
 8009742:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8009746:	81a3      	strh	r3, [r4, #12]
 8009748:	6126      	str	r6, [r4, #16]
 800974a:	443e      	add	r6, r7
 800974c:	6026      	str	r6, [r4, #0]
 800974e:	464e      	mov	r6, r9
 8009750:	6165      	str	r5, [r4, #20]
 8009752:	1bed      	subs	r5, r5, r7
 8009754:	60a5      	str	r5, [r4, #8]
 8009756:	454e      	cmp	r6, r9
 8009758:	d900      	bls.n	800975c <__ssputs_r+0x84>
 800975a:	464e      	mov	r6, r9
 800975c:	4632      	mov	r2, r6
 800975e:	4641      	mov	r1, r8
 8009760:	6820      	ldr	r0, [r4, #0]
 8009762:	f000 f92a 	bl	80099ba <memmove>
 8009766:	68a3      	ldr	r3, [r4, #8]
 8009768:	2000      	movs	r0, #0
 800976a:	1b9b      	subs	r3, r3, r6
 800976c:	60a3      	str	r3, [r4, #8]
 800976e:	6823      	ldr	r3, [r4, #0]
 8009770:	441e      	add	r6, r3
 8009772:	6026      	str	r6, [r4, #0]
 8009774:	e7dc      	b.n	8009730 <__ssputs_r+0x58>
 8009776:	462a      	mov	r2, r5
 8009778:	f000 f938 	bl	80099ec <_realloc_r>
 800977c:	4606      	mov	r6, r0
 800977e:	2800      	cmp	r0, #0
 8009780:	d1e2      	bne.n	8009748 <__ssputs_r+0x70>
 8009782:	6921      	ldr	r1, [r4, #16]
 8009784:	4650      	mov	r0, sl
 8009786:	f7fc fc29 	bl	8005fdc <_free_r>
 800978a:	e7c8      	b.n	800971e <__ssputs_r+0x46>

0800978c <_svfiprintf_r>:
 800978c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8009790:	461d      	mov	r5, r3
 8009792:	898b      	ldrh	r3, [r1, #12]
 8009794:	b09d      	sub	sp, #116	; 0x74
 8009796:	061f      	lsls	r7, r3, #24
 8009798:	4680      	mov	r8, r0
 800979a:	460c      	mov	r4, r1
 800979c:	4616      	mov	r6, r2
 800979e:	d50f      	bpl.n	80097c0 <_svfiprintf_r+0x34>
 80097a0:	690b      	ldr	r3, [r1, #16]
 80097a2:	b96b      	cbnz	r3, 80097c0 <_svfiprintf_r+0x34>
 80097a4:	2140      	movs	r1, #64	; 0x40
 80097a6:	f7fc fc65 	bl	8006074 <_malloc_r>
 80097aa:	6020      	str	r0, [r4, #0]
 80097ac:	6120      	str	r0, [r4, #16]
 80097ae:	b928      	cbnz	r0, 80097bc <_svfiprintf_r+0x30>
 80097b0:	230c      	movs	r3, #12
 80097b2:	f8c8 3000 	str.w	r3, [r8]
 80097b6:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 80097ba:	e0c8      	b.n	800994e <_svfiprintf_r+0x1c2>
 80097bc:	2340      	movs	r3, #64	; 0x40
 80097be:	6163      	str	r3, [r4, #20]
 80097c0:	2300      	movs	r3, #0
 80097c2:	9309      	str	r3, [sp, #36]	; 0x24
 80097c4:	2320      	movs	r3, #32
 80097c6:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 80097ca:	2330      	movs	r3, #48	; 0x30
 80097cc:	f04f 0b01 	mov.w	fp, #1
 80097d0:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 80097d4:	9503      	str	r5, [sp, #12]
 80097d6:	4637      	mov	r7, r6
 80097d8:	463d      	mov	r5, r7
 80097da:	f815 3b01 	ldrb.w	r3, [r5], #1
 80097de:	b10b      	cbz	r3, 80097e4 <_svfiprintf_r+0x58>
 80097e0:	2b25      	cmp	r3, #37	; 0x25
 80097e2:	d13e      	bne.n	8009862 <_svfiprintf_r+0xd6>
 80097e4:	ebb7 0a06 	subs.w	sl, r7, r6
 80097e8:	d00b      	beq.n	8009802 <_svfiprintf_r+0x76>
 80097ea:	4653      	mov	r3, sl
 80097ec:	4632      	mov	r2, r6
 80097ee:	4621      	mov	r1, r4
 80097f0:	4640      	mov	r0, r8
 80097f2:	f7ff ff71 	bl	80096d8 <__ssputs_r>
 80097f6:	3001      	adds	r0, #1
 80097f8:	f000 80a4 	beq.w	8009944 <_svfiprintf_r+0x1b8>
 80097fc:	9b09      	ldr	r3, [sp, #36]	; 0x24
 80097fe:	4453      	add	r3, sl
 8009800:	9309      	str	r3, [sp, #36]	; 0x24
 8009802:	783b      	ldrb	r3, [r7, #0]
 8009804:	2b00      	cmp	r3, #0
 8009806:	f000 809d 	beq.w	8009944 <_svfiprintf_r+0x1b8>
 800980a:	2300      	movs	r3, #0
 800980c:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 8009810:	e9cd 2305 	strd	r2, r3, [sp, #20]
 8009814:	9304      	str	r3, [sp, #16]
 8009816:	9307      	str	r3, [sp, #28]
 8009818:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 800981c:	931a      	str	r3, [sp, #104]	; 0x68
 800981e:	462f      	mov	r7, r5
 8009820:	2205      	movs	r2, #5
 8009822:	f817 1b01 	ldrb.w	r1, [r7], #1
 8009826:	4850      	ldr	r0, [pc, #320]	; (8009968 <_svfiprintf_r+0x1dc>)
 8009828:	f7ff fb34 	bl	8008e94 <memchr>
 800982c:	9b04      	ldr	r3, [sp, #16]
 800982e:	b9d0      	cbnz	r0, 8009866 <_svfiprintf_r+0xda>
 8009830:	06d9      	lsls	r1, r3, #27
 8009832:	bf44      	itt	mi
 8009834:	2220      	movmi	r2, #32
 8009836:	f88d 2053 	strbmi.w	r2, [sp, #83]	; 0x53
 800983a:	071a      	lsls	r2, r3, #28
 800983c:	bf44      	itt	mi
 800983e:	222b      	movmi	r2, #43	; 0x2b
 8009840:	f88d 2053 	strbmi.w	r2, [sp, #83]	; 0x53
 8009844:	782a      	ldrb	r2, [r5, #0]
 8009846:	2a2a      	cmp	r2, #42	; 0x2a
 8009848:	d015      	beq.n	8009876 <_svfiprintf_r+0xea>
 800984a:	462f      	mov	r7, r5
 800984c:	2000      	movs	r0, #0
 800984e:	250a      	movs	r5, #10
 8009850:	9a07      	ldr	r2, [sp, #28]
 8009852:	4639      	mov	r1, r7
 8009854:	f811 3b01 	ldrb.w	r3, [r1], #1
 8009858:	3b30      	subs	r3, #48	; 0x30
 800985a:	2b09      	cmp	r3, #9
 800985c:	d94d      	bls.n	80098fa <_svfiprintf_r+0x16e>
 800985e:	b1b8      	cbz	r0, 8009890 <_svfiprintf_r+0x104>
 8009860:	e00f      	b.n	8009882 <_svfiprintf_r+0xf6>
 8009862:	462f      	mov	r7, r5
 8009864:	e7b8      	b.n	80097d8 <_svfiprintf_r+0x4c>
 8009866:	4a40      	ldr	r2, [pc, #256]	; (8009968 <_svfiprintf_r+0x1dc>)
 8009868:	463d      	mov	r5, r7
 800986a:	1a80      	subs	r0, r0, r2
 800986c:	fa0b f000 	lsl.w	r0, fp, r0
 8009870:	4318      	orrs	r0, r3
 8009872:	9004      	str	r0, [sp, #16]
 8009874:	e7d3      	b.n	800981e <_svfiprintf_r+0x92>
 8009876:	9a03      	ldr	r2, [sp, #12]
 8009878:	1d11      	adds	r1, r2, #4
 800987a:	6812      	ldr	r2, [r2, #0]
 800987c:	9103      	str	r1, [sp, #12]
 800987e:	2a00      	cmp	r2, #0
 8009880:	db01      	blt.n	8009886 <_svfiprintf_r+0xfa>
 8009882:	9207      	str	r2, [sp, #28]
 8009884:	e004      	b.n	8009890 <_svfiprintf_r+0x104>
 8009886:	4252      	negs	r2, r2
 8009888:	f043 0302 	orr.w	r3, r3, #2
 800988c:	9207      	str	r2, [sp, #28]
 800988e:	9304      	str	r3, [sp, #16]
 8009890:	783b      	ldrb	r3, [r7, #0]
 8009892:	2b2e      	cmp	r3, #46	; 0x2e
 8009894:	d10c      	bne.n	80098b0 <_svfiprintf_r+0x124>
 8009896:	787b      	ldrb	r3, [r7, #1]
 8009898:	2b2a      	cmp	r3, #42	; 0x2a
 800989a:	d133      	bne.n	8009904 <_svfiprintf_r+0x178>
 800989c:	9b03      	ldr	r3, [sp, #12]
 800989e:	3702      	adds	r7, #2
 80098a0:	1d1a      	adds	r2, r3, #4
 80098a2:	681b      	ldr	r3, [r3, #0]
 80098a4:	9203      	str	r2, [sp, #12]
 80098a6:	2b00      	cmp	r3, #0
 80098a8:	bfb8      	it	lt
 80098aa:	f04f 33ff 	movlt.w	r3, #4294967295	; 0xffffffff
 80098ae:	9305      	str	r3, [sp, #20]
 80098b0:	4d2e      	ldr	r5, [pc, #184]	; (800996c <_svfiprintf_r+0x1e0>)
 80098b2:	2203      	movs	r2, #3
 80098b4:	7839      	ldrb	r1, [r7, #0]
 80098b6:	4628      	mov	r0, r5
 80098b8:	f7ff faec 	bl	8008e94 <memchr>
 80098bc:	b138      	cbz	r0, 80098ce <_svfiprintf_r+0x142>
 80098be:	2340      	movs	r3, #64	; 0x40
 80098c0:	1b40      	subs	r0, r0, r5
 80098c2:	fa03 f000 	lsl.w	r0, r3, r0
 80098c6:	9b04      	ldr	r3, [sp, #16]
 80098c8:	3701      	adds	r7, #1
 80098ca:	4303      	orrs	r3, r0
 80098cc:	9304      	str	r3, [sp, #16]
 80098ce:	7839      	ldrb	r1, [r7, #0]
 80098d0:	2206      	movs	r2, #6
 80098d2:	4827      	ldr	r0, [pc, #156]	; (8009970 <_svfiprintf_r+0x1e4>)
 80098d4:	1c7e      	adds	r6, r7, #1
 80098d6:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 80098da:	f7ff fadb 	bl	8008e94 <memchr>
 80098de:	2800      	cmp	r0, #0
 80098e0:	d038      	beq.n	8009954 <_svfiprintf_r+0x1c8>
 80098e2:	4b24      	ldr	r3, [pc, #144]	; (8009974 <_svfiprintf_r+0x1e8>)
 80098e4:	bb13      	cbnz	r3, 800992c <_svfiprintf_r+0x1a0>
 80098e6:	9b03      	ldr	r3, [sp, #12]
 80098e8:	3307      	adds	r3, #7
 80098ea:	f023 0307 	bic.w	r3, r3, #7
 80098ee:	3308      	adds	r3, #8
 80098f0:	9303      	str	r3, [sp, #12]
 80098f2:	9b09      	ldr	r3, [sp, #36]	; 0x24
 80098f4:	444b      	add	r3, r9
 80098f6:	9309      	str	r3, [sp, #36]	; 0x24
 80098f8:	e76d      	b.n	80097d6 <_svfiprintf_r+0x4a>
 80098fa:	fb05 3202 	mla	r2, r5, r2, r3
 80098fe:	2001      	movs	r0, #1
 8009900:	460f      	mov	r7, r1
 8009902:	e7a6      	b.n	8009852 <_svfiprintf_r+0xc6>
 8009904:	2300      	movs	r3, #0
 8009906:	250a      	movs	r5, #10
 8009908:	4619      	mov	r1, r3
 800990a:	3701      	adds	r7, #1
 800990c:	9305      	str	r3, [sp, #20]
 800990e:	4638      	mov	r0, r7
 8009910:	f810 2b01 	ldrb.w	r2, [r0], #1
 8009914:	3a30      	subs	r2, #48	; 0x30
 8009916:	2a09      	cmp	r2, #9
 8009918:	d903      	bls.n	8009922 <_svfiprintf_r+0x196>
 800991a:	2b00      	cmp	r3, #0
 800991c:	d0c8      	beq.n	80098b0 <_svfiprintf_r+0x124>
 800991e:	9105      	str	r1, [sp, #20]
 8009920:	e7c6      	b.n	80098b0 <_svfiprintf_r+0x124>
 8009922:	fb05 2101 	mla	r1, r5, r1, r2
 8009926:	2301      	movs	r3, #1
 8009928:	4607      	mov	r7, r0
 800992a:	e7f0      	b.n	800990e <_svfiprintf_r+0x182>
 800992c:	ab03      	add	r3, sp, #12
 800992e:	9300      	str	r3, [sp, #0]
 8009930:	4622      	mov	r2, r4
 8009932:	4b11      	ldr	r3, [pc, #68]	; (8009978 <_svfiprintf_r+0x1ec>)
 8009934:	a904      	add	r1, sp, #16
 8009936:	4640      	mov	r0, r8
 8009938:	f7fc fc88 	bl	800624c <_printf_float>
 800993c:	f1b0 3fff 	cmp.w	r0, #4294967295	; 0xffffffff
 8009940:	4681      	mov	r9, r0
 8009942:	d1d6      	bne.n	80098f2 <_svfiprintf_r+0x166>
 8009944:	89a3      	ldrh	r3, [r4, #12]
 8009946:	065b      	lsls	r3, r3, #25
 8009948:	f53f af35 	bmi.w	80097b6 <_svfiprintf_r+0x2a>
 800994c:	9809      	ldr	r0, [sp, #36]	; 0x24
 800994e:	b01d      	add	sp, #116	; 0x74
 8009950:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8009954:	ab03      	add	r3, sp, #12
 8009956:	9300      	str	r3, [sp, #0]
 8009958:	4622      	mov	r2, r4
 800995a:	4b07      	ldr	r3, [pc, #28]	; (8009978 <_svfiprintf_r+0x1ec>)
 800995c:	a904      	add	r1, sp, #16
 800995e:	4640      	mov	r0, r8
 8009960:	f7fc ff20 	bl	80067a4 <_printf_i>
 8009964:	e7ea      	b.n	800993c <_svfiprintf_r+0x1b0>
 8009966:	bf00      	nop
 8009968:	08009cd4 	.word	0x08009cd4
 800996c:	08009cda 	.word	0x08009cda
 8009970:	08009cde 	.word	0x08009cde
 8009974:	0800624d 	.word	0x0800624d
 8009978:	080096d9 	.word	0x080096d9

0800997c <strncmp>:
 800997c:	b510      	push	{r4, lr}
 800997e:	b16a      	cbz	r2, 800999c <strncmp+0x20>
 8009980:	3901      	subs	r1, #1
 8009982:	1884      	adds	r4, r0, r2
 8009984:	f810 3b01 	ldrb.w	r3, [r0], #1
 8009988:	f811 2f01 	ldrb.w	r2, [r1, #1]!
 800998c:	4293      	cmp	r3, r2
 800998e:	d103      	bne.n	8009998 <strncmp+0x1c>
 8009990:	42a0      	cmp	r0, r4
 8009992:	d001      	beq.n	8009998 <strncmp+0x1c>
 8009994:	2b00      	cmp	r3, #0
 8009996:	d1f5      	bne.n	8009984 <strncmp+0x8>
 8009998:	1a98      	subs	r0, r3, r2
 800999a:	bd10      	pop	{r4, pc}
 800999c:	4610      	mov	r0, r2
 800999e:	e7fc      	b.n	800999a <strncmp+0x1e>

080099a0 <__ascii_wctomb>:
 80099a0:	b149      	cbz	r1, 80099b6 <__ascii_wctomb+0x16>
 80099a2:	2aff      	cmp	r2, #255	; 0xff
 80099a4:	bf8b      	itete	hi
 80099a6:	238a      	movhi	r3, #138	; 0x8a
 80099a8:	700a      	strbls	r2, [r1, #0]
 80099aa:	6003      	strhi	r3, [r0, #0]
 80099ac:	2001      	movls	r0, #1
 80099ae:	bf88      	it	hi
 80099b0:	f04f 30ff 	movhi.w	r0, #4294967295	; 0xffffffff
 80099b4:	4770      	bx	lr
 80099b6:	4608      	mov	r0, r1
 80099b8:	4770      	bx	lr

080099ba <memmove>:
 80099ba:	4288      	cmp	r0, r1
 80099bc:	b510      	push	{r4, lr}
 80099be:	eb01 0302 	add.w	r3, r1, r2
 80099c2:	d807      	bhi.n	80099d4 <memmove+0x1a>
 80099c4:	1e42      	subs	r2, r0, #1
 80099c6:	4299      	cmp	r1, r3
 80099c8:	d00a      	beq.n	80099e0 <memmove+0x26>
 80099ca:	f811 4b01 	ldrb.w	r4, [r1], #1
 80099ce:	f802 4f01 	strb.w	r4, [r2, #1]!
 80099d2:	e7f8      	b.n	80099c6 <memmove+0xc>
 80099d4:	4283      	cmp	r3, r0
 80099d6:	d9f5      	bls.n	80099c4 <memmove+0xa>
 80099d8:	1881      	adds	r1, r0, r2
 80099da:	1ad2      	subs	r2, r2, r3
 80099dc:	42d3      	cmn	r3, r2
 80099de:	d100      	bne.n	80099e2 <memmove+0x28>
 80099e0:	bd10      	pop	{r4, pc}
 80099e2:	f813 4d01 	ldrb.w	r4, [r3, #-1]!
 80099e6:	f801 4d01 	strb.w	r4, [r1, #-1]!
 80099ea:	e7f7      	b.n	80099dc <memmove+0x22>

080099ec <_realloc_r>:
 80099ec:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80099ee:	4607      	mov	r7, r0
 80099f0:	4614      	mov	r4, r2
 80099f2:	460e      	mov	r6, r1
 80099f4:	b921      	cbnz	r1, 8009a00 <_realloc_r+0x14>
 80099f6:	e8bd 40f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, lr}
 80099fa:	4611      	mov	r1, r2
 80099fc:	f7fc bb3a 	b.w	8006074 <_malloc_r>
 8009a00:	b922      	cbnz	r2, 8009a0c <_realloc_r+0x20>
 8009a02:	f7fc faeb 	bl	8005fdc <_free_r>
 8009a06:	4625      	mov	r5, r4
 8009a08:	4628      	mov	r0, r5
 8009a0a:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8009a0c:	f000 f814 	bl	8009a38 <_malloc_usable_size_r>
 8009a10:	42a0      	cmp	r0, r4
 8009a12:	d20f      	bcs.n	8009a34 <_realloc_r+0x48>
 8009a14:	4621      	mov	r1, r4
 8009a16:	4638      	mov	r0, r7
 8009a18:	f7fc fb2c 	bl	8006074 <_malloc_r>
 8009a1c:	4605      	mov	r5, r0
 8009a1e:	2800      	cmp	r0, #0
 8009a20:	d0f2      	beq.n	8009a08 <_realloc_r+0x1c>
 8009a22:	4631      	mov	r1, r6
 8009a24:	4622      	mov	r2, r4
 8009a26:	f7ff fa43 	bl	8008eb0 <memcpy>
 8009a2a:	4631      	mov	r1, r6
 8009a2c:	4638      	mov	r0, r7
 8009a2e:	f7fc fad5 	bl	8005fdc <_free_r>
 8009a32:	e7e9      	b.n	8009a08 <_realloc_r+0x1c>
 8009a34:	4635      	mov	r5, r6
 8009a36:	e7e7      	b.n	8009a08 <_realloc_r+0x1c>

08009a38 <_malloc_usable_size_r>:
 8009a38:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8009a3c:	1f18      	subs	r0, r3, #4
 8009a3e:	2b00      	cmp	r3, #0
 8009a40:	bfbc      	itt	lt
 8009a42:	580b      	ldrlt	r3, [r1, r0]
 8009a44:	18c0      	addlt	r0, r0, r3
 8009a46:	4770      	bx	lr

08009a48 <_init>:
 8009a48:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8009a4a:	bf00      	nop
 8009a4c:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8009a4e:	bc08      	pop	{r3}
 8009a50:	469e      	mov	lr, r3
 8009a52:	4770      	bx	lr

08009a54 <_fini>:
 8009a54:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8009a56:	bf00      	nop
 8009a58:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8009a5a:	bc08      	pop	{r3}
 8009a5c:	469e      	mov	lr, r3
 8009a5e:	4770      	bx	lr
